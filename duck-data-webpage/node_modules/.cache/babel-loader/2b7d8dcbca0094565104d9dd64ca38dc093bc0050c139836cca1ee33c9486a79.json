{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { normalizeTransitionSettings } from \"./attribute/transition-settings.js\";\nimport CPUInterpolationTransition from \"../transitions/cpu-interpolation-transition.js\";\nimport CPUSpringTransition from \"../transitions/cpu-spring-transition.js\";\nimport log from \"../utils/log.js\";\nconst TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\nexport default class UniformTransitionManager {\n  constructor(timeline) {\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n  get active() {\n    return this.transitions.size > 0;\n  }\n  add(key, fromValue, toValue, settings) {\n    const {\n      transitions\n    } = this;\n    if (transitions.has(key)) {\n      const transition = transitions.get(key);\n      // value may not be available if `update()` has not been called. Fallback to `fromValue`\n      const {\n        value = transition.settings.fromValue\n      } = transition;\n      // start from interrupted position\n      fromValue = value;\n      this.remove(key);\n    }\n    settings = normalizeTransitionSettings(settings);\n    if (!settings) {\n      return;\n    }\n    const TransitionType = TRANSITION_TYPES[settings.type];\n    if (!TransitionType) {\n      log.error(`unsupported transition type '${settings.type}'`)();\n      return;\n    }\n    const transition = new TransitionType(this.timeline);\n    transition.start({\n      ...settings,\n      fromValue,\n      toValue\n    });\n    transitions.set(key, transition);\n  }\n  remove(key) {\n    const {\n      transitions\n    } = this;\n    if (transitions.has(key)) {\n      transitions.get(key).cancel();\n      transitions.delete(key);\n    }\n  }\n  update() {\n    const propsInTransition = {};\n    for (const [key, transition] of this.transitions) {\n      transition.update();\n      propsInTransition[key] = transition.value;\n      if (!transition.inProgress) {\n        // transition ended\n        this.remove(key);\n      }\n    }\n    return propsInTransition;\n  }\n  clear() {\n    for (const key of this.transitions.keys()) {\n      this.remove(key);\n    }\n  }\n}\n//# sourceMappingURL=uniform-transition-manager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}