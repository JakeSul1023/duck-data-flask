{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\n/** Holds a set of output buffers for pipeline (WebGL only) */\nexport class TransformFeedback extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    layout: undefined,\n    buffers: {}\n  };\n  get [Symbol.toStringTag]() {\n    return 'TransformFeedback';\n  }\n  constructor(device, props) {\n    super(device, props, TransformFeedback.defaultProps);\n  }\n}","map":{"version":3,"names":["Resource","TransformFeedback","defaultProps","layout","undefined","buffers","Symbol","toStringTag","constructor","device","props"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\transform-feedback.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {PrimitiveTopology} from '../types/parameters';\nimport {ShaderLayout} from '../types/shader-layout';\nimport type {Buffer} from './buffer';\nimport {Resource, ResourceProps} from './resource';\n\n/** For bindRange */\nexport type BufferRange = {\n  buffer: Buffer;\n  byteOffset?: number;\n  byteLength?: number;\n};\n\n/** Configures a set of output buffers for pipeline (WebGL only) */\nexport type TransformFeedbackProps = ResourceProps & {\n  /** Layout of shader (for varyings) */\n  layout: ShaderLayout;\n  /** Buffer bindings (for varyings) */\n  buffers: Record<string, Buffer | BufferRange>;\n};\n\n/** Holds a set of output buffers for pipeline (WebGL only) */\nexport abstract class TransformFeedback extends Resource<TransformFeedbackProps> {\n  static override defaultProps: Required<TransformFeedbackProps> = {\n    ...Resource.defaultProps,\n    layout: undefined!,\n    buffers: {}\n  };\n\n  get [Symbol.toStringTag](): string {\n    return 'TransformFeedback';\n  }\n\n  constructor(device: Device, props: TransformFeedbackProps) {\n    super(device, props, TransformFeedback.defaultProps);\n  }\n\n  abstract begin(topology?: PrimitiveTopology): void;\n  abstract end(): void;\n\n  abstract setBuffers(buffers: Record<string, Buffer | BufferRange>): void;\n  abstract setBuffer(locationOrName: string | number, bufferOrRange: Buffer | BufferRange): void;\n  abstract getBuffer(locationOrName: string | number): Buffer | BufferRange | null;\n}\n"],"mappings":"AAAA;AACA;AACA;AAMA,SAAQA,QAAQ,QAAgB;AAiBhC;AACA,OAAM,MAAgBC,iBAAkB,SAAQD,QAAgC;EAC9E,OAAgBE,YAAY,GAAqC;IAC/D,GAAGF,QAAQ,CAACE,YAAY;IACxBC,MAAM,EAAEC,SAAU;IAClBC,OAAO,EAAE;GACV;EAED,KAAKC,MAAM,CAACC,WAAW,IAAC;IACtB,OAAO,mBAAmB;EAC5B;EAEAC,YAAYC,MAAc,EAAEC,KAA6B;IACvD,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAET,iBAAiB,CAACC,YAAY,CAAC;EACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}