{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst DEFAULT_SAX_EVENTS = {\n  ontext: () => {},\n  onprocessinginstruction: () => {},\n  onsgmldeclaration: () => {},\n  ondoctype: () => {},\n  oncomment: () => {},\n  onopentagstart: () => {},\n  onattribute: () => {},\n  onopentag: () => {},\n  onclosetag: () => {},\n  onopencdata: () => {},\n  oncdata: () => {},\n  onclosecdata: () => {},\n  onerror: () => {},\n  onend: () => {},\n  onready: () => {},\n  onscript: () => {},\n  onopennamespace: () => {},\n  onclosenamespace: () => {}\n};\nconst DEFAULT_SAX_PARSER_OPTIONS = {\n  ...DEFAULT_SAX_EVENTS,\n  strict: false,\n  MAX_BUFFER_LENGTH: 64 * 1024,\n  lowercase: false,\n  lowercasetags: false,\n  noscript: false,\n  strictEntities: false,\n  xmlns: undefined,\n  position: undefined,\n  trim: undefined,\n  normalize: undefined\n};\nconst EVENTS = ['text', 'processinginstruction', 'sgmldeclaration', 'doctype', 'comment', 'opentagstart', 'attribute', 'opentag', 'closetag', 'opencdata', 'cdata', 'closecdata', 'error', 'end', 'ready', 'script', 'opennamespace', 'closenamespace'];\nconst BUFFERS = ['comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype', 'procInstName', 'procInstBody', 'entity', 'attribName', 'attribValue', 'cdata', 'script'];\nconst nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\nconst nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\nconst entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\nconst entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\nexport const ENTITIES = {\n  amp: '&',\n  gt: '>',\n  lt: '<',\n  quot: '\"',\n  apos: \"'\",\n  AElig: 198,\n  Aacute: 193,\n  Acirc: 194,\n  Agrave: 192,\n  Aring: 197,\n  Atilde: 195,\n  Auml: 196,\n  Ccedil: 199,\n  ETH: 208,\n  Eacute: 201,\n  Ecirc: 202,\n  Egrave: 200,\n  Euml: 203,\n  Iacute: 205,\n  Icirc: 206,\n  Igrave: 204,\n  Iuml: 207,\n  Ntilde: 209,\n  Oacute: 211,\n  Ocirc: 212,\n  Ograve: 210,\n  Oslash: 216,\n  Otilde: 213,\n  Ouml: 214,\n  THORN: 222,\n  Uacute: 218,\n  Ucirc: 219,\n  Ugrave: 217,\n  Uuml: 220,\n  Yacute: 221,\n  aacute: 225,\n  acirc: 226,\n  aelig: 230,\n  agrave: 224,\n  aring: 229,\n  atilde: 227,\n  auml: 228,\n  ccedil: 231,\n  eacute: 233,\n  ecirc: 234,\n  egrave: 232,\n  eth: 240,\n  euml: 235,\n  iacute: 237,\n  icirc: 238,\n  igrave: 236,\n  iuml: 239,\n  ntilde: 241,\n  oacute: 243,\n  ocirc: 244,\n  ograve: 242,\n  oslash: 248,\n  otilde: 245,\n  ouml: 246,\n  szlig: 223,\n  thorn: 254,\n  uacute: 250,\n  ucirc: 251,\n  ugrave: 249,\n  uuml: 252,\n  yacute: 253,\n  yuml: 255,\n  copy: 169,\n  reg: 174,\n  nbsp: 160,\n  iexcl: 161,\n  cent: 162,\n  pound: 163,\n  curren: 164,\n  yen: 165,\n  brvbar: 166,\n  sect: 167,\n  uml: 168,\n  ordf: 170,\n  laquo: 171,\n  not: 172,\n  shy: 173,\n  macr: 175,\n  deg: 176,\n  plusmn: 177,\n  sup1: 185,\n  sup2: 178,\n  sup3: 179,\n  acute: 180,\n  micro: 181,\n  para: 182,\n  middot: 183,\n  cedil: 184,\n  ordm: 186,\n  raquo: 187,\n  frac14: 188,\n  frac12: 189,\n  frac34: 190,\n  iquest: 191,\n  times: 215,\n  divide: 247,\n  OElig: 338,\n  oelig: 339,\n  Scaron: 352,\n  scaron: 353,\n  Yuml: 376,\n  fnof: 402,\n  circ: 710,\n  tilde: 732,\n  Alpha: 913,\n  Beta: 914,\n  Gamma: 915,\n  Delta: 916,\n  Epsilon: 917,\n  Zeta: 918,\n  Eta: 919,\n  Theta: 920,\n  Iota: 921,\n  Kappa: 922,\n  Lambda: 923,\n  Mu: 924,\n  Nu: 925,\n  Xi: 926,\n  Omicron: 927,\n  Pi: 928,\n  Rho: 929,\n  Sigma: 931,\n  Tau: 932,\n  Upsilon: 933,\n  Phi: 934,\n  Chi: 935,\n  Psi: 936,\n  Omega: 937,\n  alpha: 945,\n  beta: 946,\n  gamma: 947,\n  delta: 948,\n  epsilon: 949,\n  zeta: 950,\n  eta: 951,\n  theta: 952,\n  iota: 953,\n  kappa: 954,\n  lambda: 955,\n  mu: 956,\n  nu: 957,\n  xi: 958,\n  omicron: 959,\n  pi: 960,\n  rho: 961,\n  sigmaf: 962,\n  sigma: 963,\n  tau: 964,\n  upsilon: 965,\n  phi: 966,\n  chi: 967,\n  psi: 968,\n  omega: 969,\n  thetasym: 977,\n  upsih: 978,\n  piv: 982,\n  ensp: 8194,\n  emsp: 8195,\n  thinsp: 8201,\n  zwnj: 8204,\n  zwj: 8205,\n  lrm: 8206,\n  rlm: 8207,\n  ndash: 8211,\n  mdash: 8212,\n  lsquo: 8216,\n  rsquo: 8217,\n  sbquo: 8218,\n  ldquo: 8220,\n  rdquo: 8221,\n  bdquo: 8222,\n  dagger: 8224,\n  Dagger: 8225,\n  bull: 8226,\n  hellip: 8230,\n  permil: 8240,\n  prime: 8242,\n  Prime: 8243,\n  lsaquo: 8249,\n  rsaquo: 8250,\n  oline: 8254,\n  frasl: 8260,\n  euro: 8364,\n  image: 8465,\n  weierp: 8472,\n  real: 8476,\n  trade: 8482,\n  alefsym: 8501,\n  larr: 8592,\n  uarr: 8593,\n  rarr: 8594,\n  darr: 8595,\n  harr: 8596,\n  crarr: 8629,\n  lArr: 8656,\n  uArr: 8657,\n  rArr: 8658,\n  dArr: 8659,\n  hArr: 8660,\n  forall: 8704,\n  part: 8706,\n  exist: 8707,\n  empty: 8709,\n  nabla: 8711,\n  isin: 8712,\n  notin: 8713,\n  ni: 8715,\n  prod: 8719,\n  sum: 8721,\n  minus: 8722,\n  lowast: 8727,\n  radic: 8730,\n  prop: 8733,\n  infin: 8734,\n  ang: 8736,\n  and: 8743,\n  or: 8744,\n  cap: 8745,\n  cup: 8746,\n  int: 8747,\n  there4: 8756,\n  sim: 8764,\n  cong: 8773,\n  asymp: 8776,\n  ne: 8800,\n  equiv: 8801,\n  le: 8804,\n  ge: 8805,\n  sub: 8834,\n  sup: 8835,\n  nsub: 8836,\n  sube: 8838,\n  supe: 8839,\n  oplus: 8853,\n  otimes: 8855,\n  perp: 8869,\n  sdot: 8901,\n  lceil: 8968,\n  rceil: 8969,\n  lfloor: 8970,\n  rfloor: 8971,\n  lang: 9001,\n  rang: 9002,\n  loz: 9674,\n  spades: 9824,\n  clubs: 9827,\n  hearts: 9829,\n  diams: 9830\n};\nObject.keys(ENTITIES).forEach(key => {\n  const e = ENTITIES[key];\n  ENTITIES[key] = typeof e === 'number' ? String.fromCharCode(e) : e;\n});\n/**\n * Internal helper class\n */\nclass SAX {\n  EVENTS = EVENTS;\n  ENTITIES = {\n    // TODO: make it readonly, needed for entity-mega test\n    // amp, gt, lt, quot and apos are resolved to strings instead of numerical\n    // codes, IDK why\n    ...ENTITIES\n  };\n  XML_ENTITIES = {\n    amp: '&',\n    gt: '>',\n    lt: '<',\n    quot: '\"',\n    apos: \"'\"\n  };\n  S = 0;\n  opt;\n  trackPosition = false;\n  column = 0;\n  line = 0;\n  c = '';\n  error;\n  q = '';\n  bufferCheckPosition;\n  closed = false;\n  tags = [];\n  looseCase = '';\n  closedRoot = false;\n  sawRoot = false;\n  strict = false;\n  tag;\n  strictEntities;\n  state;\n  noscript = false;\n  attribList = [];\n  ns;\n  position = 0;\n  STATE = {\n    BEGIN: this.S++,\n    // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: this.S++,\n    // leading whitespace\n    TEXT: this.S++,\n    // general stuff\n    TEXT_ENTITY: this.S++,\n    // &amp and such.\n    OPEN_WAKA: this.S++,\n    // <\n    SGML_DECL: this.S++,\n    // <!BLARG\n    SGML_DECL_QUOTED: this.S++,\n    // <!BLARG foo \"bar\n    DOCTYPE: this.S++,\n    // <!DOCTYPE\n    DOCTYPE_QUOTED: this.S++,\n    // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: this.S++,\n    // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: this.S++,\n    // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: this.S++,\n    // <!-\n    COMMENT: this.S++,\n    // <!--\n    COMMENT_ENDING: this.S++,\n    // <!-- blah -\n    COMMENT_ENDED: this.S++,\n    // <!-- blah --\n    CDATA: this.S++,\n    // <![CDATA[ something\n    CDATA_ENDING: this.S++,\n    // ]\n    CDATA_ENDING_2: this.S++,\n    // ]]\n    PROC_INST: this.S++,\n    // <?hi\n    PROC_INST_BODY: this.S++,\n    // <?hi there\n    PROC_INST_ENDING: this.S++,\n    // <?hi \"there\" ?\n    OPEN_TAG: this.S++,\n    // <strong\n    OPEN_TAG_SLASH: this.S++,\n    // <strong /\n    ATTRIB: this.S++,\n    // <a\n    ATTRIB_NAME: this.S++,\n    // <a foo\n    ATTRIB_NAME_SAW_WHITE: this.S++,\n    // <a foo _\n    ATTRIB_VALUE: this.S++,\n    // <a foo=\n    ATTRIB_VALUE_QUOTED: this.S++,\n    // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: this.S++,\n    // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: this.S++,\n    // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: this.S++,\n    // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: this.S++,\n    // <foo bar=&quot\n    CLOSE_TAG: this.S++,\n    // </a\n    CLOSE_TAG_SAW_WHITE: this.S++,\n    // </a   >\n    SCRIPT: this.S++,\n    // <script> ...\n    SCRIPT_ENDING: this.S++ // <script> ... <\n  };\n  BUFFERS = BUFFERS;\n  // private parser: (strict: boolean, opt: any) => SAXParser;\n  CDATA = '[CDATA[';\n  DOCTYPE = 'DOCTYPE';\n  XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';\n  XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\n  rootNS = {\n    xml: this.XML_NAMESPACE,\n    xmlns: this.XMLNS_NAMESPACE\n  };\n  comment;\n  sgmlDecl;\n  textNode = '';\n  tagName;\n  doctype;\n  procInstName;\n  procInstBody;\n  entity = '';\n  attribName;\n  attribValue;\n  cdata = '';\n  script = '';\n  startTagPosition = 0;\n  constructor() {\n    this.S = 0;\n    for (const s in this.STATE) {\n      if (this.STATE.hasOwnProperty(s)) {\n        this.STATE[this.STATE[s]] = s;\n      }\n    }\n    // shorthand\n    this.S = this.STATE;\n  }\n  static charAt(chunk, i) {\n    let result = '';\n    if (i < chunk.length) {\n      result = chunk.charAt(i);\n    }\n    return result;\n  }\n  static isWhitespace(c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t';\n  }\n  static isQuote(c) {\n    return c === '\"' || c === \"'\";\n  }\n  static isAttribEnd(c) {\n    return c === '>' || SAX.isWhitespace(c);\n  }\n  static isMatch(regex, c) {\n    return regex.test(c);\n  }\n  static notMatch(regex, c) {\n    return !SAX.isMatch(regex, c);\n  }\n  static qname(name, attribute) {\n    const i = name.indexOf(':');\n    const qualName = i < 0 ? ['', name] : name.split(':');\n    let prefix = qualName[0];\n    let local = qualName[1];\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns';\n      local = '';\n    }\n    return {\n      prefix,\n      local\n    };\n  }\n  write(chunk) {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.closed) {\n      return this.errorFunction('Cannot write after close. Assign an onready handler.');\n    }\n    if (chunk === null) {\n      return this.end();\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString();\n    }\n    let i = 0;\n    let c;\n    while (true) {\n      c = SAX.charAt(chunk, i++);\n      this.c = c;\n      if (!c) {\n        break;\n      }\n      if (this.trackPosition) {\n        this.position++;\n        if (c === '\\n') {\n          this.line++;\n          this.column = 0;\n        } else {\n          this.column++;\n        }\n      }\n      switch (this.state) {\n        case this.S.BEGIN:\n          this.state = this.S.BEGIN_WHITESPACE;\n          if (c === '\\uFEFF') {\n            continue;\n          }\n          this.beginWhiteSpace(c);\n          continue;\n        case this.S.BEGIN_WHITESPACE:\n          this.beginWhiteSpace(c);\n          continue;\n        case this.S.TEXT:\n          if (this.sawRoot && !this.closedRoot) {\n            const starti = i - 1;\n            while (c && c !== '<' && c !== '&') {\n              c = SAX.charAt(chunk, i++);\n              if (c && this.trackPosition) {\n                this.position++;\n                if (c === '\\n') {\n                  this.line++;\n                  this.column = 0;\n                } else {\n                  this.column++;\n                }\n              }\n            }\n            this.textNode += chunk.substring(starti, i - 1);\n          }\n          if (c === '<' && !(this.sawRoot && this.closedRoot && !this.strict)) {\n            this.state = this.S.OPEN_WAKA;\n            this.startTagPosition = this.position;\n          } else {\n            if (!SAX.isWhitespace(c) && (!this.sawRoot || this.closedRoot)) {\n              this.strictFail('Text data outside of root node.');\n            }\n            if (c === '&') {\n              this.state = this.S.TEXT_ENTITY;\n            } else {\n              this.textNode += c;\n            }\n          }\n          continue;\n        case this.S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            this.state = this.S.SCRIPT_ENDING;\n          } else {\n            this.script += c;\n          }\n          continue;\n        case this.S.SCRIPT_ENDING:\n          if (c === '/') {\n            this.state = this.S.CLOSE_TAG;\n          } else {\n            this.script += `<${c}`;\n            this.state = this.S.SCRIPT;\n          }\n          continue;\n        case this.S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            this.state = this.S.SGML_DECL;\n            this.sgmlDecl = '';\n          } else if (SAX.isWhitespace(c)) {\n            // wait for it...\n          } else if (SAX.isMatch(nameStart, c)) {\n            this.state = this.S.OPEN_TAG;\n            this.tagName = c;\n          } else if (c === '/') {\n            this.state = this.S.CLOSE_TAG;\n            this.tagName = '';\n          } else if (c === '?') {\n            this.state = this.S.PROC_INST;\n            this.procInstName = this.procInstBody = '';\n          } else {\n            this.strictFail('Unencoded <');\n            // if there was some whitespace, then add that in.\n            if (this.startTagPosition + 1 < this.position) {\n              const pad = this.position - this.startTagPosition;\n              c = new Array(pad).join(' ') + c;\n            }\n            this.textNode += `<${c}`;\n            this.state = this.S.TEXT;\n          }\n          continue;\n        case this.S.SGML_DECL:\n          if ((this.sgmlDecl + c).toUpperCase() === this.CDATA) {\n            this.emitNode('onopencdata');\n            this.state = this.S.CDATA;\n            this.sgmlDecl = '';\n            this.cdata = '';\n          } else if (this.sgmlDecl + c === '--') {\n            this.state = this.S.COMMENT;\n            this.comment = '';\n            this.sgmlDecl = '';\n          } else if ((this.sgmlDecl + c).toUpperCase() === this.DOCTYPE) {\n            this.state = this.S.DOCTYPE;\n            if (this.doctype || this.sawRoot) {\n              this.strictFail('Inappropriately located doctype declaration');\n            }\n            this.doctype = '';\n            this.sgmlDecl = '';\n          } else if (c === '>') {\n            this.emitNode('onsgmldeclaration', this.sgmlDecl);\n            this.sgmlDecl = '';\n            this.state = this.S.TEXT;\n          } else if (SAX.isQuote(c)) {\n            this.state = this.S.SGML_DECL_QUOTED;\n            this.sgmlDecl += c;\n          } else {\n            this.sgmlDecl += c;\n          }\n          continue;\n        case this.S.SGML_DECL_QUOTED:\n          if (c === this.q) {\n            this.state = this.S.SGML_DECL;\n            this.q = '';\n          }\n          this.sgmlDecl += c;\n          continue;\n        case this.S.DOCTYPE:\n          if (c === '>') {\n            this.state = this.S.TEXT;\n            this.emitNode('ondoctype', this.doctype);\n            this.doctype = true; // just remember that we saw it.\n          } else {\n            this.doctype += c;\n            if (c === '[') {\n              this.state = this.S.DOCTYPE_DTD;\n            } else if (SAX.isQuote(c)) {\n              this.state = this.S.DOCTYPE_QUOTED;\n              this.q = c;\n            }\n          }\n          continue;\n        case this.S.DOCTYPE_QUOTED:\n          this.doctype += c;\n          if (c === this.q) {\n            this.q = '';\n            this.state = this.S.DOCTYPE;\n          }\n          continue;\n        case this.S.DOCTYPE_DTD:\n          this.doctype += c;\n          if (c === ']') {\n            this.state = this.S.DOCTYPE;\n          } else if (SAX.isQuote(c)) {\n            this.state = this.S.DOCTYPE_DTD_QUOTED;\n            this.q = c;\n          }\n          continue;\n        case this.S.DOCTYPE_DTD_QUOTED:\n          this.doctype += c;\n          if (c === this.q) {\n            this.state = this.S.DOCTYPE_DTD;\n            this.q = '';\n          }\n          continue;\n        case this.S.COMMENT:\n          if (c === '-') {\n            this.state = this.S.COMMENT_ENDING;\n          } else {\n            this.comment += c;\n          }\n          continue;\n        case this.S.COMMENT_ENDING:\n          if (c === '-') {\n            this.state = this.S.COMMENT_ENDED;\n            this.comment = this.textApplyOptions(this.comment);\n            if (this.comment) {\n              this.emitNode('oncomment', this.comment);\n            }\n            this.comment = '';\n          } else {\n            this.comment += `-${c}`;\n            this.state = this.S.COMMENT;\n          }\n          continue;\n        case this.S.COMMENT_ENDED:\n          if (c !== '>') {\n            this.strictFail('Malformed comment');\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            this.comment += `--${c}`;\n            this.state = this.S.COMMENT;\n          } else {\n            this.state = this.S.TEXT;\n          }\n          continue;\n        case this.S.CDATA:\n          if (c === ']') {\n            this.state = this.S.CDATA_ENDING;\n          } else {\n            this.cdata += c;\n          }\n          continue;\n        case this.S.CDATA_ENDING:\n          if (c === ']') {\n            this.state = this.S.CDATA_ENDING_2;\n          } else {\n            this.cdata += `]${c}`;\n            this.state = this.S.CDATA;\n          }\n          continue;\n        case this.S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (this.cdata) {\n              this.emitNode('oncdata', this.cdata);\n            }\n            this.emitNode('onclosecdata');\n            this.cdata = '';\n            this.state = this.S.TEXT;\n          } else if (c === ']') {\n            this.cdata += ']';\n          } else {\n            this.cdata += `]]${c}`;\n            this.state = this.S.CDATA;\n          }\n          continue;\n        case this.S.PROC_INST:\n          if (c === '?') {\n            this.state = this.S.PROC_INST_ENDING;\n          } else if (SAX.isWhitespace(c)) {\n            this.state = this.S.PROC_INST_BODY;\n          } else {\n            this.procInstName += c;\n          }\n          continue;\n        case this.S.PROC_INST_BODY:\n          if (!this.procInstBody && SAX.isWhitespace(c)) {\n            continue;\n          } else if (c === '?') {\n            this.state = this.S.PROC_INST_ENDING;\n          } else {\n            this.procInstBody += c;\n          }\n          continue;\n        case this.S.PROC_INST_ENDING:\n          if (c === '>') {\n            this.emitNode('onprocessinginstruction', {\n              name: this.procInstName,\n              body: this.procInstBody\n            });\n            this.procInstName = this.procInstBody = '';\n            this.state = this.S.TEXT;\n          } else {\n            this.procInstBody += `?${c}`;\n            this.state = this.S.PROC_INST_BODY;\n          }\n          continue;\n        case this.S.OPEN_TAG:\n          if (SAX.isMatch(nameBody, c)) {\n            this.tagName += c;\n          } else {\n            this.newTag();\n            if (c === '>') {\n              this.openTag();\n            } else if (c === '/') {\n              this.state = this.S.OPEN_TAG_SLASH;\n            } else {\n              if (!SAX.isWhitespace(c)) {\n                this.strictFail('Invalid character in tag name');\n              }\n              this.state = this.S.ATTRIB;\n            }\n          }\n          continue;\n        case this.S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            this.openTag(true);\n            this.closeTag();\n          } else {\n            this.strictFail('Forward-slash in opening tag not followed by >');\n            this.state = this.S.ATTRIB;\n          }\n          continue;\n        case this.S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (SAX.isWhitespace(c)) {\n            continue;\n          } else if (c === '>') {\n            this.openTag();\n          } else if (c === '/') {\n            this.state = this.S.OPEN_TAG_SLASH;\n          } else if (SAX.isMatch(nameStart, c)) {\n            this.attribName = c;\n            this.attribValue = '';\n            this.state = this.S.ATTRIB_NAME;\n          } else {\n            this.strictFail('Invalid attribute name');\n          }\n          continue;\n        case this.S.ATTRIB_NAME:\n          if (c === '=') {\n            this.state = this.S.ATTRIB_VALUE;\n          } else if (c === '>') {\n            this.strictFail('Attribute without value');\n            this.attribValue = this.attribName;\n            this.attrib();\n            this.openTag();\n          } else if (SAX.isWhitespace(c)) {\n            this.state = this.S.ATTRIB_NAME_SAW_WHITE;\n          } else if (SAX.isMatch(nameBody, c)) {\n            this.attribName += c;\n          } else {\n            this.strictFail('Invalid attribute name');\n          }\n          continue;\n        case this.S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            this.state = this.S.ATTRIB_VALUE;\n          } else if (SAX.isWhitespace(c)) {\n            continue;\n          } else {\n            this.strictFail('Attribute without value');\n            this.tag.attributes[this.attribName] = '';\n            this.attribValue = '';\n            this.emitNode('onattribute', {\n              name: this.attribName,\n              value: ''\n            });\n            this.attribName = '';\n            if (c === '>') {\n              this.openTag();\n            } else if (SAX.isMatch(nameStart, c)) {\n              this.attribName = c;\n              this.state = this.S.ATTRIB_NAME;\n            } else {\n              this.strictFail('Invalid attribute name');\n              this.state = this.S.ATTRIB;\n            }\n          }\n          continue;\n        case this.S.ATTRIB_VALUE:\n          if (SAX.isWhitespace(c)) {\n            continue;\n          } else if (SAX.isQuote(c)) {\n            this.q = c;\n            this.state = this.S.ATTRIB_VALUE_QUOTED;\n          } else {\n            this.strictFail('Unquoted attribute value');\n            this.state = this.S.ATTRIB_VALUE_UNQUOTED;\n            this.attribValue = c;\n          }\n          continue;\n        case this.S.ATTRIB_VALUE_QUOTED:\n          if (c !== this.q) {\n            if (c === '&') {\n              this.state = this.S.ATTRIB_VALUE_ENTITY_Q;\n            } else {\n              this.attribValue += c;\n            }\n            continue;\n          }\n          this.attrib();\n          this.q = '';\n          this.state = this.S.ATTRIB_VALUE_CLOSED;\n          continue;\n        case this.S.ATTRIB_VALUE_CLOSED:\n          if (SAX.isWhitespace(c)) {\n            this.state = this.S.ATTRIB;\n          } else if (c === '>') {\n            this.openTag();\n          } else if (c === '/') {\n            this.state = this.S.OPEN_TAG_SLASH;\n          } else if (SAX.isMatch(nameStart, c)) {\n            this.strictFail('No whitespace between attributes');\n            this.attribName = c;\n            this.attribValue = '';\n            this.state = this.S.ATTRIB_NAME;\n          } else {\n            this.strictFail('Invalid attribute name');\n          }\n          continue;\n        case this.S.ATTRIB_VALUE_UNQUOTED:\n          if (!SAX.isAttribEnd(c)) {\n            if (c === '&') {\n              this.state = this.S.ATTRIB_VALUE_ENTITY_U;\n            } else {\n              this.attribValue += c;\n            }\n            continue;\n          }\n          this.attrib();\n          if (c === '>') {\n            this.openTag();\n          } else {\n            this.state = this.S.ATTRIB;\n          }\n          continue;\n        case this.S.CLOSE_TAG:\n          if (!this.tagName) {\n            if (SAX.isWhitespace(c)) {\n              continue;\n            } else if (SAX.notMatch(nameStart, c)) {\n              if (this.script) {\n                this.script += `</${c}`;\n                this.state = this.S.SCRIPT;\n              } else {\n                this.strictFail('Invalid tagname in closing tag.');\n              }\n            } else {\n              this.tagName = c;\n            }\n          } else if (c === '>') {\n            this.closeTag();\n          } else if (SAX.isMatch(nameBody, c)) {\n            this.tagName += c;\n          } else if (this.script) {\n            this.script += `</${this.tagName}`;\n            this.tagName = '';\n            this.state = this.S.SCRIPT;\n          } else {\n            if (!SAX.isWhitespace(c)) {\n              this.strictFail('Invalid tagname in closing tag');\n            }\n            this.state = this.S.CLOSE_TAG_SAW_WHITE;\n          }\n          continue;\n        case this.S.CLOSE_TAG_SAW_WHITE:\n          if (SAX.isWhitespace(c)) {\n            continue;\n          }\n          if (c === '>') {\n            this.closeTag();\n          } else {\n            this.strictFail('Invalid characters in closing tag');\n          }\n          continue;\n        case this.S.TEXT_ENTITY:\n        case this.S.ATTRIB_VALUE_ENTITY_Q:\n        case this.S.ATTRIB_VALUE_ENTITY_U:\n          let returnState;\n          let buffer;\n          switch (this.state) {\n            case this.S.TEXT_ENTITY:\n              returnState = this.S.TEXT;\n              buffer = 'textNode';\n              break;\n            case this.S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = this.S.ATTRIB_VALUE_QUOTED;\n              buffer = 'attribValue';\n              break;\n            case this.S.ATTRIB_VALUE_ENTITY_U:\n              returnState = this.S.ATTRIB_VALUE_UNQUOTED;\n              buffer = 'attribValue';\n              break;\n            default:\n              throw new Error(`Unknown state: ${this.state}`);\n          }\n          if (c === ';') {\n            this[buffer] += this.parseEntity();\n            this.entity = '';\n            this.state = returnState;\n          } else if (SAX.isMatch(this.entity.length ? entityBody : entityStart, c)) {\n            this.entity += c;\n          } else {\n            this.strictFail('Invalid character in entity name');\n            this[buffer] += `&${this.entity}${c}`;\n            this.entity = '';\n            this.state = returnState;\n          }\n          continue;\n        default:\n          throw new Error(`Unknown state: ${this.state}`);\n      }\n    } // while\n    if (this.position >= this.bufferCheckPosition) {\n      this.checkBufferLength();\n    }\n    return this;\n  }\n  emit(event, data) {\n    if (this.events.hasOwnProperty(event)) {\n      const eventName = event.replace(/^on/, '');\n      this.events[event](data, eventName, this);\n    }\n  }\n  clearBuffers() {\n    for (let i = 0, l = this.BUFFERS.length; i < l; i++) {\n      this[this[i]] = '';\n    }\n  }\n  flushBuffers() {\n    this.closeText();\n    if (this.cdata !== '') {\n      this.emitNode('oncdata', this.cdata);\n      this.cdata = '';\n    }\n    if (this.script !== '') {\n      this.emitNode('onscript', this.script);\n      this.script = '';\n    }\n  }\n  end() {\n    if (this.sawRoot && !this.closedRoot) this.strictFail('Unclosed root tag');\n    if (this.state !== this.S.BEGIN && this.state !== this.S.BEGIN_WHITESPACE && this.state !== this.S.TEXT) {\n      this.errorFunction('Unexpected end');\n    }\n    this.closeText();\n    this.c = '';\n    this.closed = true;\n    this.emit('onend');\n    return new SAXParser(this.opt);\n  }\n  errorFunction(er) {\n    this.closeText();\n    if (this.trackPosition) {\n      er += `\\nLine: ${this.line}\\nColumn: ${this.column}\\nChar: ${this.c}`;\n    }\n    const error = new Error(er);\n    this.error = error;\n    this.emit('onerror', error);\n    return this;\n  }\n  attrib() {\n    if (!this.strict) {\n      this.attribName = this.attribName[this.looseCase]();\n    }\n    if (this.attribList.indexOf(this.attribName) !== -1 || this.tag.attributes.hasOwnProperty(this.attribName)) {\n      this.attribName = this.attribValue = '';\n      return;\n    }\n    if (this.opt.xmlns) {\n      const qn = SAX.qname(this.attribName, true);\n      const prefix = qn.prefix;\n      const local = qn.local;\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && this.attribValue !== this.XML_NAMESPACE) {\n          this.strictFail(`xml: prefix must be bound to ${this.XML_NAMESPACE}\\n` + `Actual: ${this.attribValue}`);\n        } else if (local === 'xmlns' && this.attribValue !== this.XMLNS_NAMESPACE) {\n          this.strictFail(`xmlns: prefix must be bound to ${this.XMLNS_NAMESPACE}\\n` + `Actual: ${this.attribValue}`);\n        } else {\n          const tag = this.tag;\n          const parent = this.tags[this.tags.length - 1] || this;\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns);\n          }\n          tag.ns[local] = this.attribValue;\n        }\n      }\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      this.attribList.push([this.attribName, this.attribValue]);\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      this.tag.attributes[this.attribName] = this.attribValue;\n      this.emitNode('onattribute', {\n        name: this.attribName,\n        value: this.attribValue\n      });\n    }\n    this.attribName = this.attribValue = '';\n  }\n  newTag() {\n    if (!this.strict) this.tagName = this.tagName[this.looseCase]();\n    const parent = this.tags[this.tags.length - 1] || this;\n    const tag = this.tag = {\n      name: this.tagName,\n      attributes: {}\n    };\n    // will be overridden if tag contains an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (this.opt.xmlns) {\n      tag.ns = parent.ns;\n    }\n    this.attribList.length = 0;\n    this.emitNode('onopentagstart', tag);\n  }\n  parseEntity() {\n    let entity = this.entity;\n    const entityLC = entity.toLowerCase();\n    let num = NaN;\n    let numStr = '';\n    if (this.ENTITIES[entity]) {\n      return this.ENTITIES[entity];\n    }\n    if (this.ENTITIES[entityLC]) {\n      return this.ENTITIES[entityLC];\n    }\n    entity = entityLC;\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2);\n        // TODO: remove tslint:disable\n        // tslint:disable-next-line\n        num = parseInt(entity, 16);\n        numStr = num.toString(16);\n      } else {\n        entity = entity.slice(1);\n        // TODO: remove tslint:disable\n        // tslint:disable-next-line\n        num = parseInt(entity, 10);\n        numStr = num.toString(10);\n      }\n    }\n    entity = entity.replace(/^0+/, '');\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      this.strictFail('Invalid character entity');\n      return `&${this.entity};`;\n    }\n    return String.fromCodePoint(num);\n  }\n  beginWhiteSpace(c) {\n    if (c === '<') {\n      this.state = this.S.OPEN_WAKA;\n      this.startTagPosition = this.position;\n    } else if (!SAX.isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      this.strictFail('Non-whitespace before first tag.');\n      this.textNode = c;\n      this.state = this.S.TEXT;\n    } else {}\n  }\n  strictFail(message) {\n    if (typeof this !== 'object' || !(this instanceof SAXParser)) {\n      throw new Error('bad call to strictFail');\n    }\n    if (this.strict) {\n      this.errorFunction(message);\n    }\n  }\n  textApplyOptions(text) {\n    if (this.opt.trim) text = text.trim();\n    if (this.opt.normalize) text = text.replace(/\\s+/g, ' ');\n    return text;\n  }\n  emitNode(nodeType, data) {\n    if (this.textNode) this.closeText();\n    this.emit(nodeType, data);\n  }\n  closeText() {\n    this.textNode = this.textApplyOptions(this.textNode);\n    // TODO: figure out why this.textNode can be \"\" and \"undefined\"\n    if (this.textNode !== undefined && this.textNode !== '' && this.textNode !== 'undefined') {\n      this.emit('ontext', this.textNode);\n    }\n    this.textNode = '';\n  }\n  checkBufferLength() {\n    const maxAllowed = Math.max(this.opt.MAX_BUFFER_LENGTH, 10);\n    let maxActual = 0;\n    for (let i = 0, l = this.BUFFERS.length; i < l; i++) {\n      const len = this[this.BUFFERS[i]]?.length || 0;\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (this.BUFFERS[i]) {\n          case 'textNode':\n            this.closeText();\n            break;\n          case 'cdata':\n            this.emitNode('oncdata', this.cdata);\n            this.cdata = '';\n            break;\n          case 'script':\n            this.emitNode('onscript', this.script);\n            this.script = '';\n            break;\n          default:\n            this.errorFunction(`Max buffer length exceeded: ${this.BUFFERS[i]}`);\n        }\n      }\n      maxActual = Math.max(maxActual, len);\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    const m = this.opt.MAX_BUFFER_LENGTH - maxActual;\n    this.bufferCheckPosition = m + this.position;\n  }\n  openTag(selfClosing) {\n    if (this.opt.xmlns) {\n      // emit namespace binding events\n      const tag = this.tag;\n      // add namespace info to tag\n      const qn = SAX.qname(this.tagName);\n      tag.prefix = qn.prefix;\n      tag.local = qn.local;\n      tag.uri = tag.ns[qn.prefix] || '';\n      if (tag.prefix && !tag.uri) {\n        this.strictFail(`Unbound namespace prefix: ${JSON.stringify(this.tagName)}`);\n        tag.uri = qn.prefix;\n      }\n      const parent = this.tags[this.tags.length - 1] || this;\n      if (tag.ns && parent.ns !== tag.ns) {\n        const that = this;\n        Object.keys(tag.ns).forEach(p => {\n          that.emitNode('onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          });\n        });\n      }\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (let i = 0, l = this.attribList.length; i < l; i++) {\n        const nv = this.attribList[i];\n        const name = nv[0];\n        const value = nv[1];\n        const qualName = SAX.qname(name, true);\n        const prefix = qualName.prefix;\n        const local = qualName.local;\n        const uri = prefix === '' ? '' : tag.ns[prefix] || '';\n        const a = {\n          name,\n          value,\n          prefix,\n          local,\n          uri\n        };\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          this.strictFail(`Unbound namespace prefix: ${JSON.stringify(prefix)}`);\n          a.uri = prefix;\n        }\n        this.tag.attributes[name] = a;\n        this.emitNode('onattribute', a);\n      }\n      this.attribList.length = 0;\n    }\n    this.tag.isSelfClosing = Boolean(selfClosing);\n    // process the tag\n    this.sawRoot = true;\n    this.tags.push(this.tag);\n    this.emitNode('onopentag', this.tag);\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!this.noscript && this.tagName.toLowerCase() === 'script') {\n        this.state = this.S.SCRIPT;\n      } else {\n        this.state = this.S.TEXT;\n      }\n      this.tag = null;\n      this.tagName = '';\n    }\n    this.attribName = this.attribValue = '';\n    this.attribList.length = 0;\n  }\n  closeTag() {\n    if (!this.tagName) {\n      this.strictFail('Weird empty close tag.');\n      this.textNode += '</>';\n      this.state = this.S.TEXT;\n      return;\n    }\n    if (this.script) {\n      if (this.tagName !== 'script') {\n        this.script += `</${this.tagName}>`;\n        this.tagName = '';\n        this.state = this.S.SCRIPT;\n        return;\n      }\n      this.emitNode('onscript', this.script);\n      this.script = '';\n    }\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    let t = this.tags.length;\n    let tagName = this.tagName;\n    if (!this.strict) {\n      tagName = tagName[this.looseCase]();\n    }\n    while (t--) {\n      const close = this.tags[t];\n      if (close.name !== tagName) {\n        // fail the first time in strict mode\n        this.strictFail('Unexpected close tag');\n      } else {\n        break;\n      }\n    }\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      this.strictFail(`Unmatched closing tag: ${this.tagName}`);\n      this.textNode += `</${this.tagName}>`;\n      this.state = this.S.TEXT;\n      return;\n    }\n    this.tagName = tagName;\n    let s = this.tags.length;\n    while (s-- > t) {\n      const tag = this.tag = this.tags.pop();\n      this.tagName = this.tag.name;\n      this.emitNode('onclosetag', this.tagName);\n      const x = {};\n      for (const i in tag.ns) {\n        if (tag.ns.hasOwnProperty(i)) {\n          x[i] = tag.ns[i];\n        }\n      }\n      const parent = this.tags[this.tags.length - 1] || this;\n      if (this.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        const that = this;\n        Object.keys(tag.ns).forEach(p => {\n          const n = tag.ns[p];\n          that.emitNode('onclosenamespace', {\n            prefix: p,\n            uri: n\n          });\n        });\n      }\n    }\n    if (t === 0) this.closedRoot = true;\n    this.tagName = this.attribValue = this.attribName = '';\n    this.attribList.length = 0;\n    this.state = this.S.TEXT;\n  }\n}\n/**\n *\n * @todo Weird inheritance, with some variables initialized in subclass\n */\nexport class SAXParser extends SAX {\n  static ENTITIES = ENTITIES;\n  opt = DEFAULT_SAX_PARSER_OPTIONS;\n  events = DEFAULT_SAX_EVENTS;\n  constructor(opt) {\n    super();\n    this.clearBuffers();\n    this.opt = opt = {\n      ...this.opt,\n      ...opt\n    };\n    this.events = {\n      ...this.events,\n      ...opt\n    };\n    this.q = this.c = '';\n    this.opt.lowercase = this.opt.lowercase || this.opt.lowercasetags;\n    this.bufferCheckPosition = this.opt.MAX_BUFFER_LENGTH;\n    this.looseCase = this.opt.lowercase ? 'toLowerCase' : 'toUpperCase';\n    this.tags = [];\n    this.closed = this.closedRoot = this.sawRoot = false;\n    this.tag = this.error = null;\n    this.strict = Boolean(this.opt.strict);\n    this.noscript = Boolean(this.opt.strict || this.opt.noscript);\n    this.state = this.S.BEGIN;\n    this.strictEntities = this.opt.strictEntities;\n    this.ENTITIES = this.strictEntities ? Object.create(this.XML_ENTITIES) : Object.create(this.ENTITIES);\n    this.attribList = [];\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (this.opt.xmlns) {\n      this.ns = Object.create(this.rootNS);\n    }\n    // mostly just for error reporting\n    this.trackPosition = this.opt.position !== false;\n    if (this.trackPosition) {\n      this.position = this.line = this.column = 0;\n    }\n    this.emit('onready');\n  }\n  resume() {\n    this.error = null;\n    return this;\n  }\n  close() {\n    return this.write(null);\n  }\n  flush() {\n    this.flushBuffers();\n  }\n}","map":{"version":3,"names":["DEFAULT_SAX_EVENTS","ontext","onprocessinginstruction","onsgmldeclaration","ondoctype","oncomment","onopentagstart","onattribute","onopentag","onclosetag","onopencdata","oncdata","onclosecdata","onerror","onend","onready","onscript","onopennamespace","onclosenamespace","DEFAULT_SAX_PARSER_OPTIONS","strict","MAX_BUFFER_LENGTH","lowercase","lowercasetags","noscript","strictEntities","xmlns","undefined","position","trim","normalize","EVENTS","BUFFERS","nameStart","nameBody","entityStart","entityBody","ENTITIES","amp","gt","lt","quot","apos","AElig","Aacute","Acirc","Agrave","Aring","Atilde","Auml","Ccedil","ETH","Eacute","Ecirc","Egrave","Euml","Iacute","Icirc","Igrave","Iuml","Ntilde","Oacute","Ocirc","Ograve","Oslash","Otilde","Ouml","THORN","Uacute","Ucirc","Ugrave","Uuml","Yacute","aacute","acirc","aelig","agrave","aring","atilde","auml","ccedil","eacute","ecirc","egrave","eth","euml","iacute","icirc","igrave","iuml","ntilde","oacute","ocirc","ograve","oslash","otilde","ouml","szlig","thorn","uacute","ucirc","ugrave","uuml","yacute","yuml","copy","reg","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","ordf","laquo","not","shy","macr","deg","plusmn","sup1","sup2","sup3","acute","micro","para","middot","cedil","ordm","raquo","frac14","frac12","frac34","iquest","times","divide","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","Object","keys","forEach","key","e","String","fromCharCode","SAX","XML_ENTITIES","S","opt","trackPosition","column","line","c","error","q","bufferCheckPosition","closed","tags","looseCase","closedRoot","sawRoot","tag","state","attribList","ns","STATE","BEGIN","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","XML_NAMESPACE","XMLNS_NAMESPACE","rootNS","xml","comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script","startTagPosition","constructor","s","hasOwnProperty","charAt","chunk","i","result","length","isWhitespace","isQuote","isAttribEnd","isMatch","regex","test","notMatch","qname","name","attribute","indexOf","qualName","split","prefix","local","write","errorFunction","end","toString","beginWhiteSpace","starti","substring","strictFail","pad","Array","join","toUpperCase","emitNode","textApplyOptions","body","newTag","openTag","closeTag","attrib","attributes","value","returnState","buffer","Error","parseEntity","checkBufferLength","emit","event","data","events","eventName","replace","clearBuffers","l","flushBuffers","closeText","SAXParser","er","qn","parent","create","push","entityLC","toLowerCase","num","NaN","numStr","slice","parseInt","isNaN","fromCodePoint","message","text","nodeType","maxAllowed","Math","max","maxActual","len","m","selfClosing","uri","JSON","stringify","that","p","nv","a","isSelfClosing","Boolean","t","close","pop","x","n","resume","flush"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/xml/dist/sax-ts/sax.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst DEFAULT_SAX_EVENTS = {\n    ontext: () => { },\n    onprocessinginstruction: () => { },\n    onsgmldeclaration: () => { },\n    ondoctype: () => { },\n    oncomment: () => { },\n    onopentagstart: () => { },\n    onattribute: () => { },\n    onopentag: () => { },\n    onclosetag: () => { },\n    onopencdata: () => { },\n    oncdata: () => { },\n    onclosecdata: () => { },\n    onerror: () => { },\n    onend: () => { },\n    onready: () => { },\n    onscript: () => { },\n    onopennamespace: () => { },\n    onclosenamespace: () => { }\n};\nconst DEFAULT_SAX_PARSER_OPTIONS = {\n    ...DEFAULT_SAX_EVENTS,\n    strict: false,\n    MAX_BUFFER_LENGTH: 64 * 1024,\n    lowercase: false,\n    lowercasetags: false,\n    noscript: false,\n    strictEntities: false,\n    xmlns: undefined,\n    position: undefined,\n    trim: undefined,\n    normalize: undefined\n};\nconst EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n];\nconst BUFFERS = [\n    'comment',\n    'sgmlDecl',\n    'textNode',\n    'tagName',\n    'doctype',\n    'procInstName',\n    'procInstBody',\n    'entity',\n    'attribName',\n    'attribValue',\n    'cdata',\n    'script'\n];\nconst nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\nconst nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\nconst entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\nconst entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\nexport const ENTITIES = {\n    amp: '&',\n    gt: '>',\n    lt: '<',\n    quot: '\"',\n    apos: \"'\",\n    AElig: 198,\n    Aacute: 193,\n    Acirc: 194,\n    Agrave: 192,\n    Aring: 197,\n    Atilde: 195,\n    Auml: 196,\n    Ccedil: 199,\n    ETH: 208,\n    Eacute: 201,\n    Ecirc: 202,\n    Egrave: 200,\n    Euml: 203,\n    Iacute: 205,\n    Icirc: 206,\n    Igrave: 204,\n    Iuml: 207,\n    Ntilde: 209,\n    Oacute: 211,\n    Ocirc: 212,\n    Ograve: 210,\n    Oslash: 216,\n    Otilde: 213,\n    Ouml: 214,\n    THORN: 222,\n    Uacute: 218,\n    Ucirc: 219,\n    Ugrave: 217,\n    Uuml: 220,\n    Yacute: 221,\n    aacute: 225,\n    acirc: 226,\n    aelig: 230,\n    agrave: 224,\n    aring: 229,\n    atilde: 227,\n    auml: 228,\n    ccedil: 231,\n    eacute: 233,\n    ecirc: 234,\n    egrave: 232,\n    eth: 240,\n    euml: 235,\n    iacute: 237,\n    icirc: 238,\n    igrave: 236,\n    iuml: 239,\n    ntilde: 241,\n    oacute: 243,\n    ocirc: 244,\n    ograve: 242,\n    oslash: 248,\n    otilde: 245,\n    ouml: 246,\n    szlig: 223,\n    thorn: 254,\n    uacute: 250,\n    ucirc: 251,\n    ugrave: 249,\n    uuml: 252,\n    yacute: 253,\n    yuml: 255,\n    copy: 169,\n    reg: 174,\n    nbsp: 160,\n    iexcl: 161,\n    cent: 162,\n    pound: 163,\n    curren: 164,\n    yen: 165,\n    brvbar: 166,\n    sect: 167,\n    uml: 168,\n    ordf: 170,\n    laquo: 171,\n    not: 172,\n    shy: 173,\n    macr: 175,\n    deg: 176,\n    plusmn: 177,\n    sup1: 185,\n    sup2: 178,\n    sup3: 179,\n    acute: 180,\n    micro: 181,\n    para: 182,\n    middot: 183,\n    cedil: 184,\n    ordm: 186,\n    raquo: 187,\n    frac14: 188,\n    frac12: 189,\n    frac34: 190,\n    iquest: 191,\n    times: 215,\n    divide: 247,\n    OElig: 338,\n    oelig: 339,\n    Scaron: 352,\n    scaron: 353,\n    Yuml: 376,\n    fnof: 402,\n    circ: 710,\n    tilde: 732,\n    Alpha: 913,\n    Beta: 914,\n    Gamma: 915,\n    Delta: 916,\n    Epsilon: 917,\n    Zeta: 918,\n    Eta: 919,\n    Theta: 920,\n    Iota: 921,\n    Kappa: 922,\n    Lambda: 923,\n    Mu: 924,\n    Nu: 925,\n    Xi: 926,\n    Omicron: 927,\n    Pi: 928,\n    Rho: 929,\n    Sigma: 931,\n    Tau: 932,\n    Upsilon: 933,\n    Phi: 934,\n    Chi: 935,\n    Psi: 936,\n    Omega: 937,\n    alpha: 945,\n    beta: 946,\n    gamma: 947,\n    delta: 948,\n    epsilon: 949,\n    zeta: 950,\n    eta: 951,\n    theta: 952,\n    iota: 953,\n    kappa: 954,\n    lambda: 955,\n    mu: 956,\n    nu: 957,\n    xi: 958,\n    omicron: 959,\n    pi: 960,\n    rho: 961,\n    sigmaf: 962,\n    sigma: 963,\n    tau: 964,\n    upsilon: 965,\n    phi: 966,\n    chi: 967,\n    psi: 968,\n    omega: 969,\n    thetasym: 977,\n    upsih: 978,\n    piv: 982,\n    ensp: 8194,\n    emsp: 8195,\n    thinsp: 8201,\n    zwnj: 8204,\n    zwj: 8205,\n    lrm: 8206,\n    rlm: 8207,\n    ndash: 8211,\n    mdash: 8212,\n    lsquo: 8216,\n    rsquo: 8217,\n    sbquo: 8218,\n    ldquo: 8220,\n    rdquo: 8221,\n    bdquo: 8222,\n    dagger: 8224,\n    Dagger: 8225,\n    bull: 8226,\n    hellip: 8230,\n    permil: 8240,\n    prime: 8242,\n    Prime: 8243,\n    lsaquo: 8249,\n    rsaquo: 8250,\n    oline: 8254,\n    frasl: 8260,\n    euro: 8364,\n    image: 8465,\n    weierp: 8472,\n    real: 8476,\n    trade: 8482,\n    alefsym: 8501,\n    larr: 8592,\n    uarr: 8593,\n    rarr: 8594,\n    darr: 8595,\n    harr: 8596,\n    crarr: 8629,\n    lArr: 8656,\n    uArr: 8657,\n    rArr: 8658,\n    dArr: 8659,\n    hArr: 8660,\n    forall: 8704,\n    part: 8706,\n    exist: 8707,\n    empty: 8709,\n    nabla: 8711,\n    isin: 8712,\n    notin: 8713,\n    ni: 8715,\n    prod: 8719,\n    sum: 8721,\n    minus: 8722,\n    lowast: 8727,\n    radic: 8730,\n    prop: 8733,\n    infin: 8734,\n    ang: 8736,\n    and: 8743,\n    or: 8744,\n    cap: 8745,\n    cup: 8746,\n    int: 8747,\n    there4: 8756,\n    sim: 8764,\n    cong: 8773,\n    asymp: 8776,\n    ne: 8800,\n    equiv: 8801,\n    le: 8804,\n    ge: 8805,\n    sub: 8834,\n    sup: 8835,\n    nsub: 8836,\n    sube: 8838,\n    supe: 8839,\n    oplus: 8853,\n    otimes: 8855,\n    perp: 8869,\n    sdot: 8901,\n    lceil: 8968,\n    rceil: 8969,\n    lfloor: 8970,\n    rfloor: 8971,\n    lang: 9001,\n    rang: 9002,\n    loz: 9674,\n    spades: 9824,\n    clubs: 9827,\n    hearts: 9829,\n    diams: 9830\n};\nObject.keys(ENTITIES).forEach((key) => {\n    const e = ENTITIES[key];\n    ENTITIES[key] = typeof e === 'number' ? String.fromCharCode(e) : e;\n});\n/**\n * Internal helper class\n */\nclass SAX {\n    EVENTS = EVENTS;\n    ENTITIES = {\n        // TODO: make it readonly, needed for entity-mega test\n        // amp, gt, lt, quot and apos are resolved to strings instead of numerical\n        // codes, IDK why\n        ...ENTITIES\n    };\n    XML_ENTITIES = {\n        amp: '&',\n        gt: '>',\n        lt: '<',\n        quot: '\"',\n        apos: \"'\"\n    };\n    S = 0;\n    opt;\n    trackPosition = false;\n    column = 0;\n    line = 0;\n    c = '';\n    error;\n    q = '';\n    bufferCheckPosition;\n    closed = false;\n    tags = [];\n    looseCase = '';\n    closedRoot = false;\n    sawRoot = false;\n    strict = false;\n    tag;\n    strictEntities;\n    state;\n    noscript = false;\n    attribList = [];\n    ns;\n    position = 0;\n    STATE = {\n        BEGIN: this.S++, // leading byte order mark or whitespace\n        BEGIN_WHITESPACE: this.S++, // leading whitespace\n        TEXT: this.S++, // general stuff\n        TEXT_ENTITY: this.S++, // &amp and such.\n        OPEN_WAKA: this.S++, // <\n        SGML_DECL: this.S++, // <!BLARG\n        SGML_DECL_QUOTED: this.S++, // <!BLARG foo \"bar\n        DOCTYPE: this.S++, // <!DOCTYPE\n        DOCTYPE_QUOTED: this.S++, // <!DOCTYPE \"//blah\n        DOCTYPE_DTD: this.S++, // <!DOCTYPE \"//blah\" [ ...\n        DOCTYPE_DTD_QUOTED: this.S++, // <!DOCTYPE \"//blah\" [ \"foo\n        COMMENT_STARTING: this.S++, // <!-\n        COMMENT: this.S++, // <!--\n        COMMENT_ENDING: this.S++, // <!-- blah -\n        COMMENT_ENDED: this.S++, // <!-- blah --\n        CDATA: this.S++, // <![CDATA[ something\n        CDATA_ENDING: this.S++, // ]\n        CDATA_ENDING_2: this.S++, // ]]\n        PROC_INST: this.S++, // <?hi\n        PROC_INST_BODY: this.S++, // <?hi there\n        PROC_INST_ENDING: this.S++, // <?hi \"there\" ?\n        OPEN_TAG: this.S++, // <strong\n        OPEN_TAG_SLASH: this.S++, // <strong /\n        ATTRIB: this.S++, // <a\n        ATTRIB_NAME: this.S++, // <a foo\n        ATTRIB_NAME_SAW_WHITE: this.S++, // <a foo _\n        ATTRIB_VALUE: this.S++, // <a foo=\n        ATTRIB_VALUE_QUOTED: this.S++, // <a foo=\"bar\n        ATTRIB_VALUE_CLOSED: this.S++, // <a foo=\"bar\"\n        ATTRIB_VALUE_UNQUOTED: this.S++, // <a foo=bar\n        ATTRIB_VALUE_ENTITY_Q: this.S++, // <foo bar=\"&quot;\"\n        ATTRIB_VALUE_ENTITY_U: this.S++, // <foo bar=&quot\n        CLOSE_TAG: this.S++, // </a\n        CLOSE_TAG_SAW_WHITE: this.S++, // </a   >\n        SCRIPT: this.S++, // <script> ...\n        SCRIPT_ENDING: this.S++ // <script> ... <\n    };\n    BUFFERS = BUFFERS;\n    // private parser: (strict: boolean, opt: any) => SAXParser;\n    CDATA = '[CDATA[';\n    DOCTYPE = 'DOCTYPE';\n    XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';\n    XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\n    rootNS = {\n        xml: this.XML_NAMESPACE,\n        xmlns: this.XMLNS_NAMESPACE\n    };\n    comment;\n    sgmlDecl;\n    textNode = '';\n    tagName;\n    doctype;\n    procInstName;\n    procInstBody;\n    entity = '';\n    attribName;\n    attribValue;\n    cdata = '';\n    script = '';\n    startTagPosition = 0;\n    constructor() {\n        this.S = 0;\n        for (const s in this.STATE) {\n            if (this.STATE.hasOwnProperty(s)) {\n                this.STATE[this.STATE[s]] = s;\n            }\n        }\n        // shorthand\n        this.S = this.STATE;\n    }\n    static charAt(chunk, i) {\n        let result = '';\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    static isWhitespace(c) {\n        return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t';\n    }\n    static isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    static isAttribEnd(c) {\n        return c === '>' || SAX.isWhitespace(c);\n    }\n    static isMatch(regex, c) {\n        return regex.test(c);\n    }\n    static notMatch(regex, c) {\n        return !SAX.isMatch(regex, c);\n    }\n    static qname(name, attribute) {\n        const i = name.indexOf(':');\n        const qualName = i < 0 ? ['', name] : name.split(':');\n        let prefix = qualName[0];\n        let local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === 'xmlns') {\n            prefix = 'xmlns';\n            local = '';\n        }\n        return { prefix, local };\n    }\n    write(chunk) {\n        if (this.error) {\n            throw this.error;\n        }\n        if (this.closed) {\n            return this.errorFunction('Cannot write after close. Assign an onready handler.');\n        }\n        if (chunk === null) {\n            return this.end();\n        }\n        if (typeof chunk === 'object') {\n            chunk = chunk.toString();\n        }\n        let i = 0;\n        let c;\n        while (true) {\n            c = SAX.charAt(chunk, i++);\n            this.c = c;\n            if (!c) {\n                break;\n            }\n            if (this.trackPosition) {\n                this.position++;\n                if (c === '\\n') {\n                    this.line++;\n                    this.column = 0;\n                }\n                else {\n                    this.column++;\n                }\n            }\n            switch (this.state) {\n                case this.S.BEGIN:\n                    this.state = this.S.BEGIN_WHITESPACE;\n                    if (c === '\\uFEFF') {\n                        continue;\n                    }\n                    this.beginWhiteSpace(c);\n                    continue;\n                case this.S.BEGIN_WHITESPACE:\n                    this.beginWhiteSpace(c);\n                    continue;\n                case this.S.TEXT:\n                    if (this.sawRoot && !this.closedRoot) {\n                        const starti = i - 1;\n                        while (c && c !== '<' && c !== '&') {\n                            c = SAX.charAt(chunk, i++);\n                            if (c && this.trackPosition) {\n                                this.position++;\n                                if (c === '\\n') {\n                                    this.line++;\n                                    this.column = 0;\n                                }\n                                else {\n                                    this.column++;\n                                }\n                            }\n                        }\n                        this.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === '<' && !(this.sawRoot && this.closedRoot && !this.strict)) {\n                        this.state = this.S.OPEN_WAKA;\n                        this.startTagPosition = this.position;\n                    }\n                    else {\n                        if (!SAX.isWhitespace(c) && (!this.sawRoot || this.closedRoot)) {\n                            this.strictFail('Text data outside of root node.');\n                        }\n                        if (c === '&') {\n                            this.state = this.S.TEXT_ENTITY;\n                        }\n                        else {\n                            this.textNode += c;\n                        }\n                    }\n                    continue;\n                case this.S.SCRIPT:\n                    // only non-strict\n                    if (c === '<') {\n                        this.state = this.S.SCRIPT_ENDING;\n                    }\n                    else {\n                        this.script += c;\n                    }\n                    continue;\n                case this.S.SCRIPT_ENDING:\n                    if (c === '/') {\n                        this.state = this.S.CLOSE_TAG;\n                    }\n                    else {\n                        this.script += `<${c}`;\n                        this.state = this.S.SCRIPT;\n                    }\n                    continue;\n                case this.S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === '!') {\n                        this.state = this.S.SGML_DECL;\n                        this.sgmlDecl = '';\n                    }\n                    else if (SAX.isWhitespace(c)) {\n                        // wait for it...\n                    }\n                    else if (SAX.isMatch(nameStart, c)) {\n                        this.state = this.S.OPEN_TAG;\n                        this.tagName = c;\n                    }\n                    else if (c === '/') {\n                        this.state = this.S.CLOSE_TAG;\n                        this.tagName = '';\n                    }\n                    else if (c === '?') {\n                        this.state = this.S.PROC_INST;\n                        this.procInstName = this.procInstBody = '';\n                    }\n                    else {\n                        this.strictFail('Unencoded <');\n                        // if there was some whitespace, then add that in.\n                        if (this.startTagPosition + 1 < this.position) {\n                            const pad = this.position - this.startTagPosition;\n                            c = new Array(pad).join(' ') + c;\n                        }\n                        this.textNode += `<${c}`;\n                        this.state = this.S.TEXT;\n                    }\n                    continue;\n                case this.S.SGML_DECL:\n                    if ((this.sgmlDecl + c).toUpperCase() === this.CDATA) {\n                        this.emitNode('onopencdata');\n                        this.state = this.S.CDATA;\n                        this.sgmlDecl = '';\n                        this.cdata = '';\n                    }\n                    else if (this.sgmlDecl + c === '--') {\n                        this.state = this.S.COMMENT;\n                        this.comment = '';\n                        this.sgmlDecl = '';\n                    }\n                    else if ((this.sgmlDecl + c).toUpperCase() === this.DOCTYPE) {\n                        this.state = this.S.DOCTYPE;\n                        if (this.doctype || this.sawRoot) {\n                            this.strictFail('Inappropriately located doctype declaration');\n                        }\n                        this.doctype = '';\n                        this.sgmlDecl = '';\n                    }\n                    else if (c === '>') {\n                        this.emitNode('onsgmldeclaration', this.sgmlDecl);\n                        this.sgmlDecl = '';\n                        this.state = this.S.TEXT;\n                    }\n                    else if (SAX.isQuote(c)) {\n                        this.state = this.S.SGML_DECL_QUOTED;\n                        this.sgmlDecl += c;\n                    }\n                    else {\n                        this.sgmlDecl += c;\n                    }\n                    continue;\n                case this.S.SGML_DECL_QUOTED:\n                    if (c === this.q) {\n                        this.state = this.S.SGML_DECL;\n                        this.q = '';\n                    }\n                    this.sgmlDecl += c;\n                    continue;\n                case this.S.DOCTYPE:\n                    if (c === '>') {\n                        this.state = this.S.TEXT;\n                        this.emitNode('ondoctype', this.doctype);\n                        this.doctype = true; // just remember that we saw it.\n                    }\n                    else {\n                        this.doctype += c;\n                        if (c === '[') {\n                            this.state = this.S.DOCTYPE_DTD;\n                        }\n                        else if (SAX.isQuote(c)) {\n                            this.state = this.S.DOCTYPE_QUOTED;\n                            this.q = c;\n                        }\n                    }\n                    continue;\n                case this.S.DOCTYPE_QUOTED:\n                    this.doctype += c;\n                    if (c === this.q) {\n                        this.q = '';\n                        this.state = this.S.DOCTYPE;\n                    }\n                    continue;\n                case this.S.DOCTYPE_DTD:\n                    this.doctype += c;\n                    if (c === ']') {\n                        this.state = this.S.DOCTYPE;\n                    }\n                    else if (SAX.isQuote(c)) {\n                        this.state = this.S.DOCTYPE_DTD_QUOTED;\n                        this.q = c;\n                    }\n                    continue;\n                case this.S.DOCTYPE_DTD_QUOTED:\n                    this.doctype += c;\n                    if (c === this.q) {\n                        this.state = this.S.DOCTYPE_DTD;\n                        this.q = '';\n                    }\n                    continue;\n                case this.S.COMMENT:\n                    if (c === '-') {\n                        this.state = this.S.COMMENT_ENDING;\n                    }\n                    else {\n                        this.comment += c;\n                    }\n                    continue;\n                case this.S.COMMENT_ENDING:\n                    if (c === '-') {\n                        this.state = this.S.COMMENT_ENDED;\n                        this.comment = this.textApplyOptions(this.comment);\n                        if (this.comment) {\n                            this.emitNode('oncomment', this.comment);\n                        }\n                        this.comment = '';\n                    }\n                    else {\n                        this.comment += `-${c}`;\n                        this.state = this.S.COMMENT;\n                    }\n                    continue;\n                case this.S.COMMENT_ENDED:\n                    if (c !== '>') {\n                        this.strictFail('Malformed comment');\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        this.comment += `--${c}`;\n                        this.state = this.S.COMMENT;\n                    }\n                    else {\n                        this.state = this.S.TEXT;\n                    }\n                    continue;\n                case this.S.CDATA:\n                    if (c === ']') {\n                        this.state = this.S.CDATA_ENDING;\n                    }\n                    else {\n                        this.cdata += c;\n                    }\n                    continue;\n                case this.S.CDATA_ENDING:\n                    if (c === ']') {\n                        this.state = this.S.CDATA_ENDING_2;\n                    }\n                    else {\n                        this.cdata += `]${c}`;\n                        this.state = this.S.CDATA;\n                    }\n                    continue;\n                case this.S.CDATA_ENDING_2:\n                    if (c === '>') {\n                        if (this.cdata) {\n                            this.emitNode('oncdata', this.cdata);\n                        }\n                        this.emitNode('onclosecdata');\n                        this.cdata = '';\n                        this.state = this.S.TEXT;\n                    }\n                    else if (c === ']') {\n                        this.cdata += ']';\n                    }\n                    else {\n                        this.cdata += `]]${c}`;\n                        this.state = this.S.CDATA;\n                    }\n                    continue;\n                case this.S.PROC_INST:\n                    if (c === '?') {\n                        this.state = this.S.PROC_INST_ENDING;\n                    }\n                    else if (SAX.isWhitespace(c)) {\n                        this.state = this.S.PROC_INST_BODY;\n                    }\n                    else {\n                        this.procInstName += c;\n                    }\n                    continue;\n                case this.S.PROC_INST_BODY:\n                    if (!this.procInstBody && SAX.isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (c === '?') {\n                        this.state = this.S.PROC_INST_ENDING;\n                    }\n                    else {\n                        this.procInstBody += c;\n                    }\n                    continue;\n                case this.S.PROC_INST_ENDING:\n                    if (c === '>') {\n                        this.emitNode('onprocessinginstruction', {\n                            name: this.procInstName,\n                            body: this.procInstBody\n                        });\n                        this.procInstName = this.procInstBody = '';\n                        this.state = this.S.TEXT;\n                    }\n                    else {\n                        this.procInstBody += `?${c}`;\n                        this.state = this.S.PROC_INST_BODY;\n                    }\n                    continue;\n                case this.S.OPEN_TAG:\n                    if (SAX.isMatch(nameBody, c)) {\n                        this.tagName += c;\n                    }\n                    else {\n                        this.newTag();\n                        if (c === '>') {\n                            this.openTag();\n                        }\n                        else if (c === '/') {\n                            this.state = this.S.OPEN_TAG_SLASH;\n                        }\n                        else {\n                            if (!SAX.isWhitespace(c)) {\n                                this.strictFail('Invalid character in tag name');\n                            }\n                            this.state = this.S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case this.S.OPEN_TAG_SLASH:\n                    if (c === '>') {\n                        this.openTag(true);\n                        this.closeTag();\n                    }\n                    else {\n                        this.strictFail('Forward-slash in opening tag not followed by >');\n                        this.state = this.S.ATTRIB;\n                    }\n                    continue;\n                case this.S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (SAX.isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (c === '>') {\n                        this.openTag();\n                    }\n                    else if (c === '/') {\n                        this.state = this.S.OPEN_TAG_SLASH;\n                    }\n                    else if (SAX.isMatch(nameStart, c)) {\n                        this.attribName = c;\n                        this.attribValue = '';\n                        this.state = this.S.ATTRIB_NAME;\n                    }\n                    else {\n                        this.strictFail('Invalid attribute name');\n                    }\n                    continue;\n                case this.S.ATTRIB_NAME:\n                    if (c === '=') {\n                        this.state = this.S.ATTRIB_VALUE;\n                    }\n                    else if (c === '>') {\n                        this.strictFail('Attribute without value');\n                        this.attribValue = this.attribName;\n                        this.attrib();\n                        this.openTag();\n                    }\n                    else if (SAX.isWhitespace(c)) {\n                        this.state = this.S.ATTRIB_NAME_SAW_WHITE;\n                    }\n                    else if (SAX.isMatch(nameBody, c)) {\n                        this.attribName += c;\n                    }\n                    else {\n                        this.strictFail('Invalid attribute name');\n                    }\n                    continue;\n                case this.S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === '=') {\n                        this.state = this.S.ATTRIB_VALUE;\n                    }\n                    else if (SAX.isWhitespace(c)) {\n                        continue;\n                    }\n                    else {\n                        this.strictFail('Attribute without value');\n                        this.tag.attributes[this.attribName] = '';\n                        this.attribValue = '';\n                        this.emitNode('onattribute', {\n                            name: this.attribName,\n                            value: ''\n                        });\n                        this.attribName = '';\n                        if (c === '>') {\n                            this.openTag();\n                        }\n                        else if (SAX.isMatch(nameStart, c)) {\n                            this.attribName = c;\n                            this.state = this.S.ATTRIB_NAME;\n                        }\n                        else {\n                            this.strictFail('Invalid attribute name');\n                            this.state = this.S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case this.S.ATTRIB_VALUE:\n                    if (SAX.isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (SAX.isQuote(c)) {\n                        this.q = c;\n                        this.state = this.S.ATTRIB_VALUE_QUOTED;\n                    }\n                    else {\n                        this.strictFail('Unquoted attribute value');\n                        this.state = this.S.ATTRIB_VALUE_UNQUOTED;\n                        this.attribValue = c;\n                    }\n                    continue;\n                case this.S.ATTRIB_VALUE_QUOTED:\n                    if (c !== this.q) {\n                        if (c === '&') {\n                            this.state = this.S.ATTRIB_VALUE_ENTITY_Q;\n                        }\n                        else {\n                            this.attribValue += c;\n                        }\n                        continue;\n                    }\n                    this.attrib();\n                    this.q = '';\n                    this.state = this.S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case this.S.ATTRIB_VALUE_CLOSED:\n                    if (SAX.isWhitespace(c)) {\n                        this.state = this.S.ATTRIB;\n                    }\n                    else if (c === '>') {\n                        this.openTag();\n                    }\n                    else if (c === '/') {\n                        this.state = this.S.OPEN_TAG_SLASH;\n                    }\n                    else if (SAX.isMatch(nameStart, c)) {\n                        this.strictFail('No whitespace between attributes');\n                        this.attribName = c;\n                        this.attribValue = '';\n                        this.state = this.S.ATTRIB_NAME;\n                    }\n                    else {\n                        this.strictFail('Invalid attribute name');\n                    }\n                    continue;\n                case this.S.ATTRIB_VALUE_UNQUOTED:\n                    if (!SAX.isAttribEnd(c)) {\n                        if (c === '&') {\n                            this.state = this.S.ATTRIB_VALUE_ENTITY_U;\n                        }\n                        else {\n                            this.attribValue += c;\n                        }\n                        continue;\n                    }\n                    this.attrib();\n                    if (c === '>') {\n                        this.openTag();\n                    }\n                    else {\n                        this.state = this.S.ATTRIB;\n                    }\n                    continue;\n                case this.S.CLOSE_TAG:\n                    if (!this.tagName) {\n                        if (SAX.isWhitespace(c)) {\n                            continue;\n                        }\n                        else if (SAX.notMatch(nameStart, c)) {\n                            if (this.script) {\n                                this.script += `</${c}`;\n                                this.state = this.S.SCRIPT;\n                            }\n                            else {\n                                this.strictFail('Invalid tagname in closing tag.');\n                            }\n                        }\n                        else {\n                            this.tagName = c;\n                        }\n                    }\n                    else if (c === '>') {\n                        this.closeTag();\n                    }\n                    else if (SAX.isMatch(nameBody, c)) {\n                        this.tagName += c;\n                    }\n                    else if (this.script) {\n                        this.script += `</${this.tagName}`;\n                        this.tagName = '';\n                        this.state = this.S.SCRIPT;\n                    }\n                    else {\n                        if (!SAX.isWhitespace(c)) {\n                            this.strictFail('Invalid tagname in closing tag');\n                        }\n                        this.state = this.S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case this.S.CLOSE_TAG_SAW_WHITE:\n                    if (SAX.isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === '>') {\n                        this.closeTag();\n                    }\n                    else {\n                        this.strictFail('Invalid characters in closing tag');\n                    }\n                    continue;\n                case this.S.TEXT_ENTITY:\n                case this.S.ATTRIB_VALUE_ENTITY_Q:\n                case this.S.ATTRIB_VALUE_ENTITY_U:\n                    let returnState;\n                    let buffer;\n                    switch (this.state) {\n                        case this.S.TEXT_ENTITY:\n                            returnState = this.S.TEXT;\n                            buffer = 'textNode';\n                            break;\n                        case this.S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = this.S.ATTRIB_VALUE_QUOTED;\n                            buffer = 'attribValue';\n                            break;\n                        case this.S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = this.S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = 'attribValue';\n                            break;\n                        default:\n                            throw new Error(`Unknown state: ${this.state}`);\n                    }\n                    if (c === ';') {\n                        this[buffer] += this.parseEntity();\n                        this.entity = '';\n                        this.state = returnState;\n                    }\n                    else if (SAX.isMatch(this.entity.length ? entityBody : entityStart, c)) {\n                        this.entity += c;\n                    }\n                    else {\n                        this.strictFail('Invalid character in entity name');\n                        this[buffer] += `&${this.entity}${c}`;\n                        this.entity = '';\n                        this.state = returnState;\n                    }\n                    continue;\n                default:\n                    throw new Error(`Unknown state: ${this.state}`);\n            }\n        } // while\n        if (this.position >= this.bufferCheckPosition) {\n            this.checkBufferLength();\n        }\n        return this;\n    }\n    emit(event, data) {\n        if (this.events.hasOwnProperty(event)) {\n            const eventName = event.replace(/^on/, '');\n            this.events[event](data, eventName, this);\n        }\n    }\n    clearBuffers() {\n        for (let i = 0, l = this.BUFFERS.length; i < l; i++) {\n            this[this[i]] = '';\n        }\n    }\n    flushBuffers() {\n        this.closeText();\n        if (this.cdata !== '') {\n            this.emitNode('oncdata', this.cdata);\n            this.cdata = '';\n        }\n        if (this.script !== '') {\n            this.emitNode('onscript', this.script);\n            this.script = '';\n        }\n    }\n    end() {\n        if (this.sawRoot && !this.closedRoot)\n            this.strictFail('Unclosed root tag');\n        if (this.state !== this.S.BEGIN &&\n            this.state !== this.S.BEGIN_WHITESPACE &&\n            this.state !== this.S.TEXT) {\n            this.errorFunction('Unexpected end');\n        }\n        this.closeText();\n        this.c = '';\n        this.closed = true;\n        this.emit('onend');\n        return new SAXParser(this.opt);\n    }\n    errorFunction(er) {\n        this.closeText();\n        if (this.trackPosition) {\n            er += `\\nLine: ${this.line}\\nColumn: ${this.column}\\nChar: ${this.c}`;\n        }\n        const error = new Error(er);\n        this.error = error;\n        this.emit('onerror', error);\n        return this;\n    }\n    attrib() {\n        if (!this.strict) {\n            this.attribName = this.attribName[this.looseCase]();\n        }\n        if (this.attribList.indexOf(this.attribName) !== -1 ||\n            this.tag.attributes.hasOwnProperty(this.attribName)) {\n            this.attribName = this.attribValue = '';\n            return;\n        }\n        if (this.opt.xmlns) {\n            const qn = SAX.qname(this.attribName, true);\n            const prefix = qn.prefix;\n            const local = qn.local;\n            if (prefix === 'xmlns') {\n                // namespace binding attribute. push the binding into scope\n                if (local === 'xml' && this.attribValue !== this.XML_NAMESPACE) {\n                    this.strictFail(`xml: prefix must be bound to ${this.XML_NAMESPACE}\\n` + `Actual: ${this.attribValue}`);\n                }\n                else if (local === 'xmlns' && this.attribValue !== this.XMLNS_NAMESPACE) {\n                    this.strictFail(`xmlns: prefix must be bound to ${this.XMLNS_NAMESPACE}\\n` +\n                        `Actual: ${this.attribValue}`);\n                }\n                else {\n                    const tag = this.tag;\n                    const parent = this.tags[this.tags.length - 1] || this;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = this.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            this.attribList.push([this.attribName, this.attribValue]);\n        }\n        else {\n            // in non-xmlns mode, we can emit the event right away\n            this.tag.attributes[this.attribName] = this.attribValue;\n            this.emitNode('onattribute', {\n                name: this.attribName,\n                value: this.attribValue\n            });\n        }\n        this.attribName = this.attribValue = '';\n    }\n    newTag() {\n        if (!this.strict)\n            this.tagName = this.tagName[this.looseCase]();\n        const parent = this.tags[this.tags.length - 1] || this;\n        const tag = (this.tag = { name: this.tagName, attributes: {} });\n        // will be overridden if tag contains an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (this.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        this.attribList.length = 0;\n        this.emitNode('onopentagstart', tag);\n    }\n    parseEntity() {\n        let entity = this.entity;\n        const entityLC = entity.toLowerCase();\n        let num = NaN;\n        let numStr = '';\n        if (this.ENTITIES[entity]) {\n            return this.ENTITIES[entity];\n        }\n        if (this.ENTITIES[entityLC]) {\n            return this.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === '#') {\n            if (entity.charAt(1) === 'x') {\n                entity = entity.slice(2);\n                // TODO: remove tslint:disable\n                // tslint:disable-next-line\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            }\n            else {\n                entity = entity.slice(1);\n                // TODO: remove tslint:disable\n                // tslint:disable-next-line\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, '');\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            this.strictFail('Invalid character entity');\n            return `&${this.entity};`;\n        }\n        return String.fromCodePoint(num);\n    }\n    beginWhiteSpace(c) {\n        if (c === '<') {\n            this.state = this.S.OPEN_WAKA;\n            this.startTagPosition = this.position;\n        }\n        else if (!SAX.isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            this.strictFail('Non-whitespace before first tag.');\n            this.textNode = c;\n            this.state = this.S.TEXT;\n        }\n        else {\n        }\n    }\n    strictFail(message) {\n        if (typeof this !== 'object' || !(this instanceof SAXParser)) {\n            throw new Error('bad call to strictFail');\n        }\n        if (this.strict) {\n            this.errorFunction(message);\n        }\n    }\n    textApplyOptions(text) {\n        if (this.opt.trim)\n            text = text.trim();\n        if (this.opt.normalize)\n            text = text.replace(/\\s+/g, ' ');\n        return text;\n    }\n    emitNode(nodeType, data) {\n        if (this.textNode)\n            this.closeText();\n        this.emit(nodeType, data);\n    }\n    closeText() {\n        this.textNode = this.textApplyOptions(this.textNode);\n        // TODO: figure out why this.textNode can be \"\" and \"undefined\"\n        if (this.textNode !== undefined && this.textNode !== '' && this.textNode !== 'undefined') {\n            this.emit('ontext', this.textNode);\n        }\n        this.textNode = '';\n    }\n    checkBufferLength() {\n        const maxAllowed = Math.max(this.opt.MAX_BUFFER_LENGTH, 10);\n        let maxActual = 0;\n        for (let i = 0, l = this.BUFFERS.length; i < l; i++) {\n            const len = this[this.BUFFERS[i]]?.length || 0;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch (this.BUFFERS[i]) {\n                    case 'textNode':\n                        this.closeText();\n                        break;\n                    case 'cdata':\n                        this.emitNode('oncdata', this.cdata);\n                        this.cdata = '';\n                        break;\n                    case 'script':\n                        this.emitNode('onscript', this.script);\n                        this.script = '';\n                        break;\n                    default:\n                        this.errorFunction(`Max buffer length exceeded: ${this.BUFFERS[i]}`);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        const m = this.opt.MAX_BUFFER_LENGTH - maxActual;\n        this.bufferCheckPosition = m + this.position;\n    }\n    openTag(selfClosing) {\n        if (this.opt.xmlns) {\n            // emit namespace binding events\n            const tag = this.tag;\n            // add namespace info to tag\n            const qn = SAX.qname(this.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || '';\n            if (tag.prefix && !tag.uri) {\n                this.strictFail(`Unbound namespace prefix: ${JSON.stringify(this.tagName)}`);\n                tag.uri = qn.prefix;\n            }\n            const parent = this.tags[this.tags.length - 1] || this;\n            if (tag.ns && parent.ns !== tag.ns) {\n                const that = this;\n                Object.keys(tag.ns).forEach((p) => {\n                    that.emitNode('onopennamespace', {\n                        prefix: p,\n                        uri: tag.ns[p]\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for (let i = 0, l = this.attribList.length; i < l; i++) {\n                const nv = this.attribList[i];\n                const name = nv[0];\n                const value = nv[1];\n                const qualName = SAX.qname(name, true);\n                const prefix = qualName.prefix;\n                const local = qualName.local;\n                const uri = prefix === '' ? '' : tag.ns[prefix] || '';\n                const a = {\n                    name,\n                    value,\n                    prefix,\n                    local,\n                    uri\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== 'xmlns' && !uri) {\n                    this.strictFail(`Unbound namespace prefix: ${JSON.stringify(prefix)}`);\n                    a.uri = prefix;\n                }\n                this.tag.attributes[name] = a;\n                this.emitNode('onattribute', a);\n            }\n            this.attribList.length = 0;\n        }\n        this.tag.isSelfClosing = Boolean(selfClosing);\n        // process the tag\n        this.sawRoot = true;\n        this.tags.push(this.tag);\n        this.emitNode('onopentag', this.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!this.noscript && this.tagName.toLowerCase() === 'script') {\n                this.state = this.S.SCRIPT;\n            }\n            else {\n                this.state = this.S.TEXT;\n            }\n            this.tag = null;\n            this.tagName = '';\n        }\n        this.attribName = this.attribValue = '';\n        this.attribList.length = 0;\n    }\n    closeTag() {\n        if (!this.tagName) {\n            this.strictFail('Weird empty close tag.');\n            this.textNode += '</>';\n            this.state = this.S.TEXT;\n            return;\n        }\n        if (this.script) {\n            if (this.tagName !== 'script') {\n                this.script += `</${this.tagName}>`;\n                this.tagName = '';\n                this.state = this.S.SCRIPT;\n                return;\n            }\n            this.emitNode('onscript', this.script);\n            this.script = '';\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        let t = this.tags.length;\n        let tagName = this.tagName;\n        if (!this.strict) {\n            tagName = tagName[this.looseCase]();\n        }\n        while (t--) {\n            const close = this.tags[t];\n            if (close.name !== tagName) {\n                // fail the first time in strict mode\n                this.strictFail('Unexpected close tag');\n            }\n            else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            this.strictFail(`Unmatched closing tag: ${this.tagName}`);\n            this.textNode += `</${this.tagName}>`;\n            this.state = this.S.TEXT;\n            return;\n        }\n        this.tagName = tagName;\n        let s = this.tags.length;\n        while (s-- > t) {\n            const tag = (this.tag = this.tags.pop());\n            this.tagName = this.tag.name;\n            this.emitNode('onclosetag', this.tagName);\n            const x = {};\n            for (const i in tag.ns) {\n                if (tag.ns.hasOwnProperty(i)) {\n                    x[i] = tag.ns[i];\n                }\n            }\n            const parent = this.tags[this.tags.length - 1] || this;\n            if (this.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                const that = this;\n                Object.keys(tag.ns).forEach((p) => {\n                    const n = tag.ns[p];\n                    that.emitNode('onclosenamespace', { prefix: p, uri: n });\n                });\n            }\n        }\n        if (t === 0)\n            this.closedRoot = true;\n        this.tagName = this.attribValue = this.attribName = '';\n        this.attribList.length = 0;\n        this.state = this.S.TEXT;\n    }\n}\n/**\n *\n * @todo Weird inheritance, with some variables initialized in subclass\n */\nexport class SAXParser extends SAX {\n    static ENTITIES = ENTITIES;\n    opt = DEFAULT_SAX_PARSER_OPTIONS;\n    events = DEFAULT_SAX_EVENTS;\n    constructor(opt) {\n        super();\n        this.clearBuffers();\n        this.opt = opt = { ...this.opt, ...opt };\n        this.events = { ...this.events, ...opt };\n        this.q = this.c = '';\n        this.opt.lowercase = this.opt.lowercase || this.opt.lowercasetags;\n        this.bufferCheckPosition = this.opt.MAX_BUFFER_LENGTH;\n        this.looseCase = this.opt.lowercase ? 'toLowerCase' : 'toUpperCase';\n        this.tags = [];\n        this.closed = this.closedRoot = this.sawRoot = false;\n        this.tag = this.error = null;\n        this.strict = Boolean(this.opt.strict);\n        this.noscript = Boolean(this.opt.strict || this.opt.noscript);\n        this.state = this.S.BEGIN;\n        this.strictEntities = this.opt.strictEntities;\n        this.ENTITIES = this.strictEntities\n            ? Object.create(this.XML_ENTITIES)\n            : Object.create(this.ENTITIES);\n        this.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (this.opt.xmlns) {\n            this.ns = Object.create(this.rootNS);\n        }\n        // mostly just for error reporting\n        this.trackPosition = this.opt.position !== false;\n        if (this.trackPosition) {\n            this.position = this.line = this.column = 0;\n        }\n        this.emit('onready');\n    }\n    resume() {\n        this.error = null;\n        return this;\n    }\n    close() {\n        return this.write(null);\n    }\n    flush() {\n        this.flushBuffers();\n    }\n}\n"],"mappings":"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G;EACTC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,GAAG,EAAE,GAAG;EACRC,IAAI,EAAE,GAAG;EACTC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,GAAG;EACTC,GAAG,EAAE,GAAG;EACRC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,GAAG,EAAE,GAAG;EACRC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,GAAG,EAAE,GAAG;EACRC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,GAAG;EACVC,GAAG,EAAE,GAAG;EACRC,GAAG,EAAE,GAAG;EACRC,IAAI,EAAE,GAAG;EACTC,GAAG,EAAE,GAAG;EACRC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE,GAAG;EACTC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}