{"ast":null,"code":"// Beginning of a minimal implementation of the Node.js path API, that doesn't pull in big polyfills.\nimport { getCWD } from \"./get-cwd.js\";\n/**\n * Replacement for Node.js path.filename\n * @param url\n */\nexport function filename(url) {\n  const slashIndex = url ? url.lastIndexOf('/') : -1;\n  return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';\n}\n/**\n * Replacement for Node.js path.dirname\n * @param url\n */\nexport function dirname(url) {\n  const slashIndex = url ? url.lastIndexOf('/') : -1;\n  return slashIndex >= 0 ? url.substr(0, slashIndex) : '';\n}\n/**\n * Replacement for Node.js path.join\n * @param parts\n */\nexport function join(...parts) {\n  const separator = '/';\n  parts = parts.map((part, index) => {\n    if (index) {\n      part = part.replace(new RegExp(`^${separator}`), '');\n    }\n    if (index !== parts.length - 1) {\n      part = part.replace(new RegExp(`${separator}$`), '');\n    }\n    return part;\n  });\n  return parts.join(separator);\n}\n/* eslint-disable no-continue */\n/**\n * https://nodejs.org/api/path.html#path_path_resolve_paths\n * @param paths A sequence of paths or path segments.\n * @return resolved path\n * Forked from BTOdell/path-resolve under MIT license\n * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE\n */\nexport function resolve(...components) {\n  const paths = [];\n  for (let _i = 0; _i < components.length; _i++) {\n    paths[_i] = components[_i];\n  }\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n  let cwd;\n  for (let i = paths.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    let path;\n    if (i >= 0) {\n      path = paths[i];\n    } else {\n      if (cwd === undefined) {\n        cwd = getCWD();\n      }\n      path = cwd;\n    }\n    // Skip empty entries\n    if (path.length === 0) {\n      continue;\n    }\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charCodeAt(0) === SLASH;\n  }\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n  // Normalize the path (removes leading slash)\n  resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n  if (resolvedAbsolute) {\n    return `/${resolvedPath}`;\n  } else if (resolvedPath.length > 0) {\n    return resolvedPath;\n  }\n  return '.';\n}\nconst SLASH = 47;\nconst DOT = 46;\n/**\n * Resolves . and .. elements in a path with directory names\n * Forked from BTOdell/path-resolve under MIT license\n * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE\n */\n/* eslint-disable max-depth */\n// eslint-disable-next-line complexity, max-statements\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  let res = '';\n  let lastSlash = -1;\n  let dots = 0;\n  let code;\n  let isAboveRoot = false;\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i);\n    } else if (code === SLASH) {\n      break;\n    } else {\n      code = SLASH;\n    }\n    if (code === SLASH) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || !isAboveRoot || res.charCodeAt(res.length - 1) !== DOT || res.charCodeAt(res.length - 2) !== DOT) {\n          if (res.length > 2) {\n            const start = res.length - 1;\n            let j = start;\n            for (; j >= 0; --j) {\n              if (res.charCodeAt(j) === SLASH) {\n                break;\n              }\n            }\n            if (j !== start) {\n              res = j === -1 ? '' : res.slice(0, j);\n              lastSlash = i;\n              dots = 0;\n              isAboveRoot = false;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSlash = i;\n            dots = 0;\n            isAboveRoot = false;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) {\n            res += '/..';\n          } else {\n            res = '..';\n          }\n          isAboveRoot = true;\n        }\n      } else {\n        const slice = path.slice(lastSlash + 1, i);\n        if (res.length > 0) {\n          res += `/${slice}`;\n        } else {\n          res = slice;\n        }\n        isAboveRoot = false;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}","map":{"version":3,"names":["getCWD","filename","url","slashIndex","lastIndexOf","substr","dirname","join","parts","separator","map","part","index","replace","RegExp","length","resolve","components","paths","_i","resolvedPath","resolvedAbsolute","cwd","i","path","undefined","charCodeAt","SLASH","normalizeStringPosix","DOT","allowAboveRoot","res","lastSlash","dots","code","isAboveRoot","start","j","slice"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js"],"sourcesContent":["// Beginning of a minimal implementation of the Node.js path API, that doesn't pull in big polyfills.\nimport { getCWD } from \"./get-cwd.js\";\n/**\n * Replacement for Node.js path.filename\n * @param url\n */\nexport function filename(url) {\n    const slashIndex = url ? url.lastIndexOf('/') : -1;\n    return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';\n}\n/**\n * Replacement for Node.js path.dirname\n * @param url\n */\nexport function dirname(url) {\n    const slashIndex = url ? url.lastIndexOf('/') : -1;\n    return slashIndex >= 0 ? url.substr(0, slashIndex) : '';\n}\n/**\n * Replacement for Node.js path.join\n * @param parts\n */\nexport function join(...parts) {\n    const separator = '/';\n    parts = parts.map((part, index) => {\n        if (index) {\n            part = part.replace(new RegExp(`^${separator}`), '');\n        }\n        if (index !== parts.length - 1) {\n            part = part.replace(new RegExp(`${separator}$`), '');\n        }\n        return part;\n    });\n    return parts.join(separator);\n}\n/* eslint-disable no-continue */\n/**\n * https://nodejs.org/api/path.html#path_path_resolve_paths\n * @param paths A sequence of paths or path segments.\n * @return resolved path\n * Forked from BTOdell/path-resolve under MIT license\n * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE\n */\nexport function resolve(...components) {\n    const paths = [];\n    for (let _i = 0; _i < components.length; _i++) {\n        paths[_i] = components[_i];\n    }\n    let resolvedPath = '';\n    let resolvedAbsolute = false;\n    let cwd;\n    for (let i = paths.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n        let path;\n        if (i >= 0) {\n            path = paths[i];\n        }\n        else {\n            if (cwd === undefined) {\n                cwd = getCWD();\n            }\n            path = cwd;\n        }\n        // Skip empty entries\n        if (path.length === 0) {\n            continue;\n        }\n        resolvedPath = `${path}/${resolvedPath}`;\n        resolvedAbsolute = path.charCodeAt(0) === SLASH;\n    }\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path (removes leading slash)\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n    if (resolvedAbsolute) {\n        return `/${resolvedPath}`;\n    }\n    else if (resolvedPath.length > 0) {\n        return resolvedPath;\n    }\n    return '.';\n}\nconst SLASH = 47;\nconst DOT = 46;\n/**\n * Resolves . and .. elements in a path with directory names\n * Forked from BTOdell/path-resolve under MIT license\n * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE\n */\n/* eslint-disable max-depth */\n// eslint-disable-next-line complexity, max-statements\nfunction normalizeStringPosix(path, allowAboveRoot) {\n    let res = '';\n    let lastSlash = -1;\n    let dots = 0;\n    let code;\n    let isAboveRoot = false;\n    for (let i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            code = path.charCodeAt(i);\n        }\n        else if (code === SLASH) {\n            break;\n        }\n        else {\n            code = SLASH;\n        }\n        if (code === SLASH) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2) {\n                if (res.length < 2 ||\n                    !isAboveRoot ||\n                    res.charCodeAt(res.length - 1) !== DOT ||\n                    res.charCodeAt(res.length - 2) !== DOT) {\n                    if (res.length > 2) {\n                        const start = res.length - 1;\n                        let j = start;\n                        for (; j >= 0; --j) {\n                            if (res.charCodeAt(j) === SLASH) {\n                                break;\n                            }\n                        }\n                        if (j !== start) {\n                            res = j === -1 ? '' : res.slice(0, j);\n                            lastSlash = i;\n                            dots = 0;\n                            isAboveRoot = false;\n                            continue;\n                        }\n                    }\n                    else if (res.length === 2 || res.length === 1) {\n                        res = '';\n                        lastSlash = i;\n                        dots = 0;\n                        isAboveRoot = false;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    if (res.length > 0) {\n                        res += '/..';\n                    }\n                    else {\n                        res = '..';\n                    }\n                    isAboveRoot = true;\n                }\n            }\n            else {\n                const slice = path.slice(lastSlash + 1, i);\n                if (res.length > 0) {\n                    res += `/${slice}`;\n                }\n                else {\n                    res = slice;\n                }\n                isAboveRoot = false;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === DOT && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}