{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\nexport class ComputePass extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    timestampQuerySet: undefined,\n    beginTimestampIndex: undefined,\n    endTimestampIndex: undefined\n  };\n  get [Symbol.toStringTag]() {\n    return 'ComputePass';\n  }\n  constructor(device, props) {\n    super(device, props, ComputePass.defaultProps);\n  }\n}","map":{"version":3,"names":["Resource","ComputePass","defaultProps","timestampQuerySet","undefined","beginTimestampIndex","endTimestampIndex","Symbol","toStringTag","constructor","device","props"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\compute-pass.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Resource, ResourceProps} from './resource';\nimport {ComputePipeline} from './compute-pipeline';\nimport type {Device} from '../device';\nimport {Buffer} from './buffer';\nimport {QuerySet} from './query-set';\n\nexport type ComputePassProps = ResourceProps & {\n  /** QuerySet to write beging/end timestamps to */\n  timestampQuerySet?: QuerySet;\n  /** QuerySet index to write begin timestamp to. No timestamp is written if not provided. */\n  beginTimestampIndex?: number;\n  /** QuerySet index to write end timestamp to. No timestamp is written if not provided. */\n  endTimestampIndex?: number;\n};\n\nexport abstract class ComputePass extends Resource<ComputePassProps> {\n  static override defaultProps: Required<ComputePassProps> = {\n    ...Resource.defaultProps,\n    timestampQuerySet: undefined!,\n    beginTimestampIndex: undefined!,\n    endTimestampIndex: undefined!\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'ComputePass';\n  }\n\n  constructor(device: Device, props: ComputePassProps) {\n    super(device, props, ComputePass.defaultProps);\n  }\n\n  abstract override destroy(): void;\n\n  abstract end(): void;\n\n  abstract setPipeline(pipeline: ComputePipeline): void;\n\n  /** Sets an array of bindings (uniform buffers, samplers, textures, ...) */\n  // abstract setBindings(bindings: Binding[]): void;\n\n  /**\n   * Dispatch work to be performed with the current ComputePipeline.\n   * @param x X dimension of the grid of workgroups to dispatch.\n   * @param y Y dimension of the grid of workgroups to dispatch.\n   * @param z Z dimension of the grid of workgroups to dispatch.\n   */\n  abstract dispatch(x: number, y?: number, z?: number): void;\n\n  /**\n   * Dispatch work to be performed with the current ComputePipeline.\n   * @param indirectBuffer buffer must be a tightly packed block of three 32-bit unsigned integer values (12 bytes total), given in the same order as the arguments for dispatch()\n   * @param indirectOffset\n   */\n  abstract dispatchIndirect(indirectBuffer: Buffer, indirectOffset?: number): void;\n\n  /** Begins a labeled debug group containing subsequent commands */\n  abstract pushDebugGroup(groupLabel: string): void;\n  /** Ends the labeled debug group most recently started by pushDebugGroup() */\n  abstract popDebugGroup(): void;\n  /** Marks a point in a stream of commands with a label */\n  abstract insertDebugMarker(markerLabel: string): void;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,QAAQ,QAAgB;AAehC,OAAM,MAAgBC,WAAY,SAAQD,QAA0B;EAClE,OAAgBE,YAAY,GAA+B;IACzD,GAAGF,QAAQ,CAACE,YAAY;IACxBC,iBAAiB,EAAEC,SAAU;IAC7BC,mBAAmB,EAAED,SAAU;IAC/BE,iBAAiB,EAAEF;GACpB;EAED,KAAcG,MAAM,CAACC,WAAW,IAAC;IAC/B,OAAO,aAAa;EACtB;EAEAC,YAAYC,MAAc,EAAEC,KAAuB;IACjD,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEV,WAAW,CAACC,YAAY,CAAC;EAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}