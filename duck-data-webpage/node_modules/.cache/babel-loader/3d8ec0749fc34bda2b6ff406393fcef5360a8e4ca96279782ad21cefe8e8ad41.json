{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// LZO\n// import {loadLibrary} from '@loaders.gl/worker-utils';\nimport { registerJSModules, getJSModule, toBuffer } from '@loaders.gl/loader-utils';\nimport { Compression } from \"./compression.js\";\n// import {isBrowser} from '@loaders.gl/loader-utils';\n// import lzo from 'lzo'; // https://bundlephobia.com/package/lzo\n// import {decompress} from 'lzo-wasm';\n// const LZO_WASM_JS_URL = './node_modules/lzo-wasm/lzo-wasm.js';\n// const LZO_WASM_WASM_URL = './node_modules/lzo-wasm/lzo-wasm.wasm';\n/**\n * Lempel-Ziv-Oberheimer compression / decompression\n */\nexport class LZOCompression extends Compression {\n  name = 'lzo';\n  extensions = [];\n  contentEncodings = [];\n  isSupported = false; // !isBrowser;\n  options;\n  /**\n   * lzo is an injectable dependency due to big size\n   * @param options\n   */\n  constructor(options) {\n    super(options);\n    this.options = options;\n    registerJSModules(options?.modules);\n  }\n  async preload(modules = {}) {\n    registerJSModules(modules);\n    // await loadLibrary(LZO_WASM_JS_URL);\n    // await loadLibrary(LZO_WASM_WASM_URL);\n  }\n  async compress(input) {\n    await this.preload();\n    const lzo = getJSModule('lzo', this.name);\n    // const inputArray = new Uint8Array(input);\n    const inputBuffer = toBuffer(input);\n    return lzo.compress(inputBuffer).buffer;\n  }\n  async decompress(input) {\n    try {\n      await this.preload();\n      const lzo = getJSModule('lzo', this.name);\n      // const inputArray = new Uint8Array(input);\n      const inputBuffer = toBuffer(input);\n      return lzo.decompress(inputBuffer).buffer;\n    } catch (error) {\n      // TODO - solve SharedArrayBuffer issues\n      // return decompress(input);\n      throw error;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}