{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* eslint-disable camelcase */\nimport { fp64 } from '@luma.gl/shadertools';\nconst {\n  fp64ify,\n  fp64ifyMatrix4\n} = fp64;\nimport { project, _memoize as memoize } from '@deck.gl/core';\nimport project64Shader from \"./project64.glsl.js\";\nexport default {\n  name: 'project64',\n  dependencies: [project, fp64],\n  vs: project64Shader,\n  getUniforms,\n  uniformTypes: {\n    scale: 'vec2<f32>',\n    // Cannot pass as vec2[16], so instead split into 2 mat4x4\n    viewProjectionMatrix: 'mat4x4<f32>',\n    viewProjectionMatrix64Low: 'mat4x4<f32>'\n  }\n};\n// TODO - this module should calculate the 64 bit uniforms\n// It is currently done by project to minimize duplicated work\nconst getMemoizedUniforms = memoize(calculateUniforms);\nfunction getUniforms(opts) {\n  if (opts && 'viewport' in opts) {\n    const {\n      viewProjectionMatrix,\n      scale\n    } = opts.viewport;\n    // We only need to update fp64 uniforms if fp32 projection is being updated\n    return getMemoizedUniforms({\n      viewProjectionMatrix,\n      scale\n    });\n  }\n  return {};\n}\nfunction calculateUniforms({\n  viewProjectionMatrix,\n  scale\n}) {\n  const glViewProjectionMatrixFP64 = fp64ifyMatrix4(viewProjectionMatrix);\n  const viewProjectionMatrix64High = new Float32Array(16);\n  const viewProjectionMatrix64Low = new Float32Array(16);\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      // Match order used in project.viewProjectionMatrix\n      const from = 4 * i + j;\n      const to = 4 * j + i;\n      viewProjectionMatrix64High[to] = glViewProjectionMatrixFP64[2 * from];\n      viewProjectionMatrix64Low[to] = glViewProjectionMatrixFP64[2 * from + 1];\n    }\n  }\n  return {\n    scale: fp64ify(scale),\n    viewProjectionMatrix: [...viewProjectionMatrix64High],\n    viewProjectionMatrix64Low: [...viewProjectionMatrix64Low]\n  };\n}","map":{"version":3,"names":["fp64","fp64ify","fp64ifyMatrix4","project","_memoize","memoize","project64Shader","name","dependencies","vs","getUniforms","uniformTypes","scale","viewProjectionMatrix","viewProjectionMatrix64Low","getMemoizedUniforms","calculateUniforms","opts","viewport","glViewProjectionMatrixFP64","viewProjectionMatrix64High","Float32Array","i","j","from","to"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\extensions\\src\\fp64\\project64.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\nimport {fp64} from '@luma.gl/shadertools';\nimport type {ShaderModule} from '@luma.gl/shadertools';\nconst {fp64ify, fp64ifyMatrix4} = fp64;\nimport {project, _memoize as memoize} from '@deck.gl/core';\n\nimport type {Viewport} from '@deck.gl/core';\nimport project64Shader from './project64.glsl';\n\ntype Project64ModuleProps = {\n  viewport: Viewport;\n};\n\nexport default {\n  name: 'project64',\n  dependencies: [project, fp64],\n  vs: project64Shader,\n  getUniforms,\n  uniformTypes: {\n    scale: 'vec2<f32>',\n    // Cannot pass as vec2[16], so instead split into 2 mat4x4\n    viewProjectionMatrix: 'mat4x4<f32>',\n    viewProjectionMatrix64Low: 'mat4x4<f32>'\n  }\n} as ShaderModule<Project64ModuleProps>;\n\n// TODO - this module should calculate the 64 bit uniforms\n// It is currently done by project to minimize duplicated work\n\nconst getMemoizedUniforms = memoize(calculateUniforms);\n\nfunction getUniforms(opts?: Project64ModuleProps | {}): Record<string, any> {\n  if (opts && 'viewport' in opts) {\n    const {viewProjectionMatrix, scale} = opts.viewport;\n    // We only need to update fp64 uniforms if fp32 projection is being updated\n    return getMemoizedUniforms({viewProjectionMatrix, scale});\n  }\n  return {};\n}\n\nfunction calculateUniforms({\n  viewProjectionMatrix,\n  scale\n}: {\n  viewProjectionMatrix: number[];\n  scale: number;\n}) {\n  const glViewProjectionMatrixFP64 = fp64ifyMatrix4(viewProjectionMatrix);\n  const viewProjectionMatrix64High = new Float32Array(16);\n  const viewProjectionMatrix64Low = new Float32Array(16);\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      // Match order used in project.viewProjectionMatrix\n      const from = 4 * i + j;\n      const to = 4 * j + i;\n      viewProjectionMatrix64High[to] = glViewProjectionMatrixFP64[2 * from];\n      viewProjectionMatrix64Low[to] = glViewProjectionMatrixFP64[2 * from + 1];\n    }\n  }\n  return {\n    scale: fp64ify(scale),\n    viewProjectionMatrix: [...viewProjectionMatrix64High],\n    viewProjectionMatrix64Low: [...viewProjectionMatrix64Low]\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA,SAAQA,IAAI,QAAO,sBAAsB;AAEzC,MAAM;EAACC,OAAO;EAAEC;AAAc,CAAC,GAAGF,IAAI;AACtC,SAAQG,OAAO,EAAEC,QAAQ,IAAIC,OAAO,QAAO,eAAe;AAG1D,OAAOC,eAAe;AAMtB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE,CAACL,OAAO,EAAEH,IAAI,CAAC;EAC7BS,EAAE,EAAEH,eAAe;EACnBI,WAAW;EACXC,YAAY,EAAE;IACZC,KAAK,EAAE,WAAW;IAClB;IACAC,oBAAoB,EAAE,aAAa;IACnCC,yBAAyB,EAAE;;CAEQ;AAEvC;AACA;AAEA,MAAMC,mBAAmB,GAAGV,OAAO,CAACW,iBAAiB,CAAC;AAEtD,SAASN,WAAWA,CAACO,IAAgC;EACnD,IAAIA,IAAI,IAAI,UAAU,IAAIA,IAAI,EAAE;IAC9B,MAAM;MAACJ,oBAAoB;MAAED;IAAK,CAAC,GAAGK,IAAI,CAACC,QAAQ;IACnD;IACA,OAAOH,mBAAmB,CAAC;MAACF,oBAAoB;MAAED;IAAK,CAAC,CAAC;EAC3D;EACA,OAAO,EAAE;AACX;AAEA,SAASI,iBAAiBA,CAAC;EACzBH,oBAAoB;EACpBD;AAAK,CAIN;EACC,MAAMO,0BAA0B,GAAGjB,cAAc,CAACW,oBAAoB,CAAC;EACvE,MAAMO,0BAA0B,GAAG,IAAIC,YAAY,CAAC,EAAE,CAAC;EACvD,MAAMP,yBAAyB,GAAG,IAAIO,YAAY,CAAC,EAAE,CAAC;EACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B;MACA,MAAMC,IAAI,GAAG,CAAC,GAAGF,CAAC,GAAGC,CAAC;MACtB,MAAME,EAAE,GAAG,CAAC,GAAGF,CAAC,GAAGD,CAAC;MACpBF,0BAA0B,CAACK,EAAE,CAAC,GAAGN,0BAA0B,CAAC,CAAC,GAAGK,IAAI,CAAC;MACrEV,yBAAyB,CAACW,EAAE,CAAC,GAAGN,0BAA0B,CAAC,CAAC,GAAGK,IAAI,GAAG,CAAC,CAAC;IAC1E;EACF;EACA,OAAO;IACLZ,KAAK,EAAEX,OAAO,CAACW,KAAK,CAAC;IACrBC,oBAAoB,EAAE,CAAC,GAAGO,0BAA0B,CAAC;IACrDN,yBAAyB,EAAE,CAAC,GAAGA,yBAAyB;GACzD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}