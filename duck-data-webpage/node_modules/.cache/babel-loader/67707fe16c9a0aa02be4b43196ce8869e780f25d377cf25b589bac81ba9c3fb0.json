{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { generateGLSLForModule } from \"./glsl/generate-glsl.js\";\nimport { generateWGSLForModule } from \"./wgsl/generate-wgsl.js\";\n/** Generates shader code for a module */\nexport function generateShaderForModule(module, options) {\n  switch (options.shaderLanguage) {\n    case 'glsl':\n      return generateGLSLForModule(module, options);\n    case 'wgsl':\n      return generateWGSLForModule(module, options);\n  }\n}","map":{"version":3,"names":["generateGLSLForModule","generateWGSLForModule","generateShaderForModule","module","options","shaderLanguage"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\lib\\shader-generator\\generate-shader.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {ShaderModule} from '../shader-module/shader-module';\n\nimport type {GLSLGenerationOptions} from './glsl/generate-glsl';\nimport {generateGLSLForModule} from './glsl/generate-glsl';\n\nimport type {WGSLGenerationOptions} from './wgsl/generate-wgsl';\nimport {generateWGSLForModule} from './wgsl/generate-wgsl';\n\n/** Options for how to generate shader code from a module */\nexport type ShaderGenerationOptions = GLSLGenerationOptions | WGSLGenerationOptions;\n\n/** Generates shader code for a module */\nexport function generateShaderForModule(\n  module: ShaderModule<Record<string, unknown>>,\n  options: ShaderGenerationOptions\n): string {\n  switch (options.shaderLanguage) {\n    case 'glsl':\n      return generateGLSLForModule(module, options);\n    case 'wgsl':\n      return generateWGSLForModule(module, options);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAKA,SAAQA,qBAAqB,QAAC;AAG9B,SAAQC,qBAAqB,QAAC;AAK9B;AACA,OAAM,SAAUC,uBAAuBA,CACrCC,MAA6C,EAC7CC,OAAgC;EAEhC,QAAQA,OAAO,CAACC,cAAc;IAC5B,KAAK,MAAM;MACT,OAAOL,qBAAqB,CAACG,MAAM,EAAEC,OAAO,CAAC;IAC/C,KAAK,MAAM;MACT,OAAOH,qBAAqB,CAACE,MAAM,EAAEC,OAAO,CAAC;EACjD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}