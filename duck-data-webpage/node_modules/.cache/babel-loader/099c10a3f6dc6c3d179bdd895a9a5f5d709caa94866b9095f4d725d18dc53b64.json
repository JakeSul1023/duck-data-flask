{"ast":null,"code":"import { TOUCH_ACTION_NONE, TOUCH_ACTION_PAN_X, TOUCH_ACTION_PAN_Y, TOUCH_ACTION_MANIPULATION, TOUCH_ACTION_AUTO } from \"./touchaction-Consts.js\";\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @returns valid touchAction\n */\nexport default function cleanTouchActions(actions) {\n  // none\n  if (actions.includes(TOUCH_ACTION_NONE)) {\n    return TOUCH_ACTION_NONE;\n  }\n  const hasPanX = actions.includes(TOUCH_ACTION_PAN_X);\n  const hasPanY = actions.includes(TOUCH_ACTION_PAN_Y);\n  // if both pan-x and pan-y are set (different recognizers\n  // for different directions, e.g. horizontal pan but vertical swipe?)\n  // we need none (as otherwise with pan-x pan-y combined none of these\n  // recognizers will work, since the browser would handle all panning\n  if (hasPanX && hasPanY) {\n    return TOUCH_ACTION_NONE;\n  }\n  // pan-x OR pan-y\n  if (hasPanX || hasPanY) {\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n  }\n  // manipulation\n  if (actions.includes(TOUCH_ACTION_MANIPULATION)) {\n    return TOUCH_ACTION_MANIPULATION;\n  }\n  return TOUCH_ACTION_AUTO;\n}","map":{"version":3,"names":["TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","cleanTouchActions","actions","includes","hasPanX","hasPanY"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\touchaction\\clean-touch-actions.ts"],"sourcesContent":["import {\n  TOUCH_ACTION_NONE,\n  TOUCH_ACTION_PAN_X,\n  TOUCH_ACTION_PAN_Y,\n  TOUCH_ACTION_MANIPULATION,\n  TOUCH_ACTION_AUTO\n} from './touchaction-Consts';\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @returns valid touchAction\n */\nexport default function cleanTouchActions(actions: string): string {\n  // none\n  if (actions.includes(TOUCH_ACTION_NONE)) {\n    return TOUCH_ACTION_NONE;\n  }\n\n  const hasPanX = actions.includes(TOUCH_ACTION_PAN_X);\n  const hasPanY = actions.includes(TOUCH_ACTION_PAN_Y);\n\n  // if both pan-x and pan-y are set (different recognizers\n  // for different directions, e.g. horizontal pan but vertical swipe?)\n  // we need none (as otherwise with pan-x pan-y combined none of these\n  // recognizers will work, since the browser would handle all panning\n  if (hasPanX && hasPanY) {\n    return TOUCH_ACTION_NONE;\n  }\n\n  // pan-x OR pan-y\n  if (hasPanX || hasPanY) {\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n  }\n\n  // manipulation\n  if (actions.includes(TOUCH_ACTION_MANIPULATION)) {\n    return TOUCH_ACTION_MANIPULATION;\n  }\n\n  return TOUCH_ACTION_AUTO;\n}\n"],"mappings":"AAAA,SACEA,iBAAiB,EACjBC,kBAAkB,EAClBC,kBAAkB,EAClBC,yBAAyB,EACzBC,iBAAiB,QAClB;AAED;;;;AAIA,eAAc,SAAUC,iBAAiBA,CAACC,OAAe;EACvD;EACA,IAAIA,OAAO,CAACC,QAAQ,CAACP,iBAAiB,CAAC,EAAE;IACvC,OAAOA,iBAAiB;EAC1B;EAEA,MAAMQ,OAAO,GAAGF,OAAO,CAACC,QAAQ,CAACN,kBAAkB,CAAC;EACpD,MAAMQ,OAAO,GAAGH,OAAO,CAACC,QAAQ,CAACL,kBAAkB,CAAC;EAEpD;EACA;EACA;EACA;EACA,IAAIM,OAAO,IAAIC,OAAO,EAAE;IACtB,OAAOT,iBAAiB;EAC1B;EAEA;EACA,IAAIQ,OAAO,IAAIC,OAAO,EAAE;IACtB,OAAOD,OAAO,GAAGP,kBAAkB,GAAGC,kBAAkB;EAC1D;EAEA;EACA,IAAII,OAAO,CAACC,QAAQ,CAACJ,yBAAyB,CAAC,EAAE;IAC/C,OAAOA,yBAAyB;EAClC;EAEA,OAAOC,iBAAiB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}