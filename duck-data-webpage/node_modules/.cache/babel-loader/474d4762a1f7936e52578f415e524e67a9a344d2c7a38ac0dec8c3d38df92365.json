{"ast":null,"code":"import { Recognizer } from \"../recognizer/recognizer.js\";\nimport { RecognizerState } from \"../recognizer/recognizer-state.js\";\nimport { InputEvent } from \"../input/input-consts.js\";\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n */\nexport class AttrRecognizer extends Recognizer {\n  /**\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\n   */\n  attrTest(input) {\n    const optionPointers = this.options.pointers;\n    return optionPointers === 0 || input.pointers.length === optionPointers;\n  }\n  /**\n   * Process the input and return the state for the recognizer\n   */\n  process(input) {\n    const {\n      state\n    } = this;\n    const {\n      eventType\n    } = input;\n    const isRecognized = state & (RecognizerState.Began | RecognizerState.Changed);\n    const isValid = this.attrTest(input);\n    // on cancel input and we've recognized before, return STATE_CANCELLED\n    if (isRecognized && (eventType & InputEvent.Cancel || !isValid)) {\n      return state | RecognizerState.Cancelled;\n    } else if (isRecognized || isValid) {\n      if (eventType & InputEvent.End) {\n        return state | RecognizerState.Ended;\n      } else if (!(state & RecognizerState.Began)) {\n        return RecognizerState.Began;\n      }\n      return state | RecognizerState.Changed;\n    }\n    return RecognizerState.Failed;\n  }\n}\n//# sourceMappingURL=attribute.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}