{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { _LayersPass as LayersPass } from '@deck.gl/core';\nconst TERRAIN_BLENDING = {\n  blendColorOperation: 'max',\n  blendColorSrcFactor: 'one',\n  blendColorDstFactor: 'one',\n  blendAlphaOperation: 'max',\n  blendAlphaSrcFactor: 'one',\n  blendAlphaDstFactor: 'one'\n};\n/** Renders textures used by the TerrainEffect render pass */\nexport class TerrainPass extends LayersPass {\n  getRenderableLayers(viewport, opts) {\n    const {\n      layers\n    } = opts;\n    const result = [];\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts, true);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n      }\n    }\n    return result;\n  }\n  renderHeightMap(heightMap, opts) {\n    // console.log('Updating height map')\n    const target = heightMap.getRenderFramebuffer();\n    const viewport = heightMap.renderViewport;\n    if (!target || !viewport) {\n      return;\n    }\n    target.resize(viewport);\n    this.render({\n      ...opts,\n      target,\n      pass: 'terrain-height-map',\n      layers: opts.layers,\n      viewports: [viewport],\n      effects: [],\n      clearColor: [0, 0, 0, 0]\n    });\n  }\n  renderTerrainCover(terrainCover, opts) {\n    // console.log('Updating terrain cover ' + terrainCover.id)\n    const target = terrainCover.getRenderFramebuffer();\n    const viewport = terrainCover.renderViewport;\n    if (!target || !viewport) {\n      return;\n    }\n    const layers = terrainCover.filterLayers(opts.layers);\n    target.resize(viewport);\n    this.render({\n      ...opts,\n      target,\n      pass: `terrain-cover-${terrainCover.id}`,\n      layers,\n      effects: [],\n      viewports: [viewport],\n      clearColor: [0, 0, 0, 0]\n    });\n  }\n  getLayerParameters(layer, layerIndex, viewport) {\n    return {\n      ...layer.props.parameters,\n      blend: true,\n      depthCompare: 'always',\n      ...(layer.props.operation.includes('terrain') && TERRAIN_BLENDING)\n    };\n  }\n  getShaderModuleProps(layer, effects, otherShaderModuleProps) {\n    return {\n      terrain: {\n        project: otherShaderModuleProps.project\n      }\n    };\n  }\n}","map":{"version":3,"names":["_LayersPass","LayersPass","TERRAIN_BLENDING","blendColorOperation","blendColorSrcFactor","blendColorDstFactor","blendAlphaOperation","blendAlphaSrcFactor","blendAlphaDstFactor","TerrainPass","getRenderableLayers","viewport","opts","layers","result","drawParamsByIndex","_getDrawLayerParams","i","length","layer","isComposite","shouldDrawLayer","push","renderHeightMap","heightMap","target","getRenderFramebuffer","renderViewport","resize","render","pass","viewports","effects","clearColor","renderTerrainCover","terrainCover","filterLayers","id","getLayerParameters","layerIndex","props","parameters","blend","depthCompare","operation","includes","getShaderModuleProps","otherShaderModuleProps","terrain","project"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\extensions\\src\\terrain\\terrain-pass.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Parameters, RenderPipelineParameters} from '@luma.gl/core';\nimport {Layer, Viewport, _LayersPass as LayersPass, LayersPassRenderOptions} from '@deck.gl/core';\nimport type {HeightMapBuilder} from './height-map-builder';\nimport type {TerrainCover} from './terrain-cover';\n\nexport type TerrainPassRenderOptions = LayersPassRenderOptions;\n\nconst TERRAIN_BLENDING: RenderPipelineParameters = {\n  blendColorOperation: 'max',\n  blendColorSrcFactor: 'one',\n  blendColorDstFactor: 'one',\n  blendAlphaOperation: 'max',\n  blendAlphaSrcFactor: 'one',\n  blendAlphaDstFactor: 'one'\n};\n\n/** Renders textures used by the TerrainEffect render pass */\nexport class TerrainPass extends LayersPass {\n  getRenderableLayers(viewport: Viewport, opts: TerrainPassRenderOptions): Layer[] {\n    const {layers} = opts;\n    const result: Layer[] = [];\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts, true);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n      }\n    }\n\n    return result;\n  }\n\n  renderHeightMap(heightMap: HeightMapBuilder, opts: Partial<TerrainPassRenderOptions>) {\n    // console.log('Updating height map')\n    const target = heightMap.getRenderFramebuffer();\n    const viewport = heightMap.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    target.resize(viewport);\n\n    this.render({\n      ...opts,\n      target,\n      pass: 'terrain-height-map',\n      layers: opts.layers!,\n      viewports: [viewport],\n      effects: [],\n      clearColor: [0, 0, 0, 0]\n    });\n  }\n\n  renderTerrainCover(terrainCover: TerrainCover, opts: Partial<TerrainPassRenderOptions>) {\n    // console.log('Updating terrain cover ' + terrainCover.id)\n    const target = terrainCover.getRenderFramebuffer();\n    const viewport = terrainCover.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    const layers = terrainCover.filterLayers(opts.layers!);\n    target.resize(viewport);\n\n    this.render({\n      ...opts,\n      target,\n      pass: `terrain-cover-${terrainCover.id}`,\n      layers,\n      effects: [],\n      viewports: [viewport],\n      clearColor: [0, 0, 0, 0]\n    });\n  }\n\n  protected getLayerParameters(\n    layer: Layer<{}>,\n    layerIndex: number,\n    viewport: Viewport\n  ): Parameters {\n    return {\n      ...layer.props.parameters,\n      blend: true,\n      depthCompare: 'always',\n      ...(layer.props.operation.includes('terrain') && TERRAIN_BLENDING)\n    };\n  }\n\n  getShaderModuleProps(layer: Layer, effects: any, otherShaderModuleProps: Record<string, any>) {\n    return {\n      terrain: {\n        project: otherShaderModuleProps.project\n      }\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}