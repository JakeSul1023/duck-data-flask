{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { convertToArrayRow, convertToObjectRow, inferHeadersFromArrayRow, inferHeadersFromObjectRow } from \"../simple-table/row-utils.js\";\nconst DEFAULT_ROW_COUNT = 100;\nexport class RowTableBatchAggregator {\n  schema;\n  options;\n  length = 0;\n  objectRows = null;\n  arrayRows = null;\n  cursor = 0;\n  _headers = null;\n  constructor(schema, options) {\n    this.options = options;\n    this.schema = schema;\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (schema) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n  rowCount() {\n    return this.length;\n  }\n  addArrayRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n    // TODO - infer schema at a higher level, instead of hacking headers here?\n    this._headers ||= inferHeadersFromArrayRow(row);\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n  addObjectRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n    // TODO - infer schema at a higher level, instead of hacking headers here?\n    this._headers ||= inferHeadersFromObjectRow(row);\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n  getBatch() {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      // @ts-expect-error we should infer a schema\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}