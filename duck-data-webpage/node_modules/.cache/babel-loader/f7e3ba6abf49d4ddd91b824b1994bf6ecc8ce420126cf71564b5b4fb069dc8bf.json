{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport function unpackIndexedGeometry(geometry) {\n  const {\n    indices,\n    attributes\n  } = geometry;\n  if (!indices) {\n    return geometry;\n  }\n  const vertexCount = indices.value.length;\n  const unpackedAttributes = {};\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {\n      constant,\n      value,\n      size\n    } = attribute;\n    if (constant || !size) {\n      continue; // eslint-disable-line\n    }\n    const unpackedValue = new value.constructor(vertexCount * size);\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {\n      size,\n      value: unpackedValue\n    };\n  }\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}\n// export function calculateVertexNormals(positions: Float32Array): Uint8Array {\n//   let normals = new Uint8Array(positions.length / 3);\n//   for (let i = 0; i < positions.length; i++) {\n//     const vec1 = new Vector3(positions.subarray(i * 3, i + 0, i + 3));\n//     const vec2 = new Vector3(positions.subarray(i + 3, i + 6));\n//     const vec3 = new Vector3(positions.subarray(i + 6, i + 9));\n//     const normal = new Vector3(vec1).cross(vec2).normalize();\n//     normals.set(normal[0], i + 4);\n//     normals.set(normal[1], i + 4 + 1);\n//     normals.set(normal[2], i + 2);\n//   }\n//   const normal = new Vector3(vec1).cross(vec2).normalize();\n// }","map":{"version":3,"names":["unpackIndexedGeometry","geometry","indices","attributes","vertexCount","value","length","unpackedAttributes","attributeName","attribute","constant","size","unpackedValue","constructor","x","index","i","Object","assign"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\geometry\\geometry-utils.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport function unpackIndexedGeometry(geometry: any) {\n  const {indices, attributes} = geometry;\n  if (!indices) {\n    return geometry;\n  }\n\n  const vertexCount = indices.value.length;\n  const unpackedAttributes: Record<string, any> = {};\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {constant, value, size} = attribute;\n    if (constant || !size) {\n      continue; // eslint-disable-line\n    }\n    const unpackedValue = new value.constructor(vertexCount * size);\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {size, value: unpackedValue};\n  }\n\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}\n\n// export function calculateVertexNormals(positions: Float32Array): Uint8Array {\n//   let normals = new Uint8Array(positions.length / 3);\n\n//   for (let i = 0; i < positions.length; i++) {\n//     const vec1 = new Vector3(positions.subarray(i * 3, i + 0, i + 3));\n//     const vec2 = new Vector3(positions.subarray(i + 3, i + 6));\n//     const vec3 = new Vector3(positions.subarray(i + 6, i + 9));\n\n//     const normal = new Vector3(vec1).cross(vec2).normalize();\n//     normals.set(normal[0], i + 4);\n//     normals.set(normal[1], i + 4 + 1);\n//     normals.set(normal[2], i + 2);\n//   }\n//   const normal = new Vector3(vec1).cross(vec2).normalize();\n// }\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAM,SAAUA,qBAAqBA,CAACC,QAAa;EACjD,MAAM;IAACC,OAAO;IAAEC;EAAU,CAAC,GAAGF,QAAQ;EACtC,IAAI,CAACC,OAAO,EAAE;IACZ,OAAOD,QAAQ;EACjB;EAEA,MAAMG,WAAW,GAAGF,OAAO,CAACG,KAAK,CAACC,MAAM;EACxC,MAAMC,kBAAkB,GAAwB,EAAE;EAElD,KAAK,MAAMC,aAAa,IAAIL,UAAU,EAAE;IACtC,MAAMM,SAAS,GAAGN,UAAU,CAACK,aAAa,CAAC;IAC3C,MAAM;MAACE,QAAQ;MAAEL,KAAK;MAAEM;IAAI,CAAC,GAAGF,SAAS;IACzC,IAAIC,QAAQ,IAAI,CAACC,IAAI,EAAE;MACrB,SAAS,CAAC;IACZ;IACA,MAAMC,aAAa,GAAG,IAAIP,KAAK,CAACQ,WAAW,CAACT,WAAW,GAAGO,IAAI,CAAC;IAC/D,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,WAAW,EAAE,EAAEU,CAAC,EAAE;MACpC,MAAMC,KAAK,GAAGb,OAAO,CAACG,KAAK,CAACS,CAAC,CAAC;MAC9B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,EAAEK,CAAC,EAAE,EAAE;QAC7BJ,aAAa,CAACE,CAAC,GAAGH,IAAI,GAAGK,CAAC,CAAC,GAAGX,KAAK,CAACU,KAAK,GAAGJ,IAAI,GAAGK,CAAC,CAAC;MACvD;IACF;IACAT,kBAAkB,CAACC,aAAa,CAAC,GAAG;MAACG,IAAI;MAAEN,KAAK,EAAEO;IAAa,CAAC;EAClE;EAEA,OAAO;IACLT,UAAU,EAAEc,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEf,UAAU,EAAEI,kBAAkB;GAC7D;AACH;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}