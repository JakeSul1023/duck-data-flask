{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from THREE.js under MIT license\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\nimport { clamp } from '@math.gl/core';\n/**  */\nlet float16Tables = null;\n/** Storage that can be viewed both as float and integer */\nconst buffer = new ArrayBuffer(4);\nconst floatView = new Float32Array(buffer);\nconst uint32View = new Uint32Array(buffer);\n/**\n * float32 to float16\n * @param val\n * @returns\n */\nexport function toHalfFloat(val) {\n  float16Tables ||= generateFloat16Tables();\n  // if ( Math.abs( val ) > 65504 ) console.warn( 'toHalfFloat(): Value out of range.' );\n  val = clamp(val, -65504, 65504);\n  floatView[0] = val;\n  const f = uint32View[0];\n  const e = f >> 23 & 0x1ff;\n  return float16Tables.baseTable[e] + ((f & 0x007fffff) >> float16Tables.shiftTable[e]);\n}\n/**\n * float16 to float32\n * @param val\n * @returns\n */\nexport function fromHalfFloat(val) {\n  float16Tables ||= generateFloat16Tables();\n  const m = val >> 10;\n  uint32View[0] = float16Tables.mantissaTable[float16Tables.offsetTable[m] + (val & 0x3ff)] + float16Tables.exponentTable[m];\n  return floatView[0];\n}\nfunction generateFloat16Tables() {\n  // float32 to float16 helpers\n  const baseTable = new Uint32Array(512);\n  const shiftTable = new Uint32Array(512);\n  for (let i = 0; i < 256; ++i) {\n    const e = i - 127;\n    // very small number (0, -0)\n    if (e < -27) {\n      baseTable[i] = 0x0000;\n      baseTable[i | 0x100] = 0x8000;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n      // small number (denorm)\n    } else if (e < -14) {\n      baseTable[i] = 0x0400 >> -e - 14;\n      baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n      shiftTable[i] = -e - 1;\n      shiftTable[i | 0x100] = -e - 1;\n      // normal number\n    } else if (e <= 15) {\n      baseTable[i] = e + 15 << 10;\n      baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n      // large number (Infinity, -Infinity)\n    } else if (e < 128) {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n      // stay (NaN, Infinity, -Infinity)\n    } else {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n    }\n  }\n  // float16 to float32 helpers\n  const mantissaTable = new Uint32Array(2048);\n  const exponentTable = new Uint32Array(64);\n  const offsetTable = new Uint32Array(64);\n  for (let i = 1; i < 1024; ++i) {\n    let m = i << 13; // zero pad mantissa bits\n    let e = 0; // zero exponent\n    // normalized\n    while ((m & 0x00800000) === 0) {\n      m <<= 1;\n      e -= 0x00800000; // decrement exponent\n    }\n    m &= ~0x00800000; // clear leading 1 bit\n    e += 0x38800000; // adjust bias\n    mantissaTable[i] = m | e;\n  }\n  for (let i = 1024; i < 2048; ++i) {\n    mantissaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n  for (let i = 1; i < 31; ++i) {\n    exponentTable[i] = i << 23;\n  }\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  for (let i = 33; i < 63; ++i) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 64; ++i) {\n    if (i !== 32) {\n      offsetTable[i] = 1024;\n    }\n  }\n  return {\n    baseTable,\n    shiftTable,\n    mantissaTable,\n    exponentTable,\n    offsetTable\n  };\n}","map":{"version":3,"names":["clamp","float16Tables","buffer","ArrayBuffer","floatView","Float32Array","uint32View","Uint32Array","toHalfFloat","val","generateFloat16Tables","f","e","baseTable","shiftTable","fromHalfFloat","m","mantissaTable","offsetTable","exponentTable","i"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules\\math\\fp16\\fp16-utils.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Forked from THREE.js under MIT license\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nimport {clamp} from '@math.gl/core';\n\n/** Pre-calculated tables for float16 conversion */\ntype Float16Tables = {\n  // float32 to float16 helpers\n  baseTable: Uint32Array;\n  shiftTable: Uint32Array;\n  // float16 to float32 helpers\n  mantissaTable: Uint32Array;\n  exponentTable: Uint32Array;\n  offsetTable: Uint32Array;\n};\n\n/**  */\nlet float16Tables: Float16Tables | null = null;\n\n/** Storage that can be viewed both as float and integer */\nconst buffer = new ArrayBuffer(4);\nconst floatView = new Float32Array(buffer);\nconst uint32View = new Uint32Array(buffer);\n\n/**\n * float32 to float16\n * @param val\n * @returns\n */\nexport function toHalfFloat(val: number): number {\n  float16Tables ||= generateFloat16Tables();\n\n  // if ( Math.abs( val ) > 65504 ) console.warn( 'toHalfFloat(): Value out of range.' );\n\n  val = clamp(val, -65504, 65504);\n\n  floatView[0] = val;\n  const f = uint32View[0];\n  const e = (f >> 23) & 0x1ff;\n  return float16Tables.baseTable[e] + ((f & 0x007fffff) >> float16Tables.shiftTable[e]);\n}\n\n/**\n * float16 to float32\n * @param val\n * @returns\n */\nexport function fromHalfFloat(val: number): number {\n  float16Tables ||= generateFloat16Tables();\n\n  const m = val >> 10;\n  uint32View[0] =\n    float16Tables.mantissaTable[float16Tables.offsetTable[m] + (val & 0x3ff)] +\n    float16Tables.exponentTable[m];\n  return floatView[0];\n}\n\nfunction generateFloat16Tables(): Float16Tables {\n  // float32 to float16 helpers\n\n  const baseTable = new Uint32Array(512);\n  const shiftTable = new Uint32Array(512);\n\n  for (let i = 0; i < 256; ++i) {\n    const e = i - 127;\n\n    // very small number (0, -0)\n\n    if (e < -27) {\n      baseTable[i] = 0x0000;\n      baseTable[i | 0x100] = 0x8000;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // small number (denorm)\n    } else if (e < -14) {\n      baseTable[i] = 0x0400 >> (-e - 14);\n      baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n      shiftTable[i] = -e - 1;\n      shiftTable[i | 0x100] = -e - 1;\n\n      // normal number\n    } else if (e <= 15) {\n      baseTable[i] = (e + 15) << 10;\n      baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n\n      // large number (Infinity, -Infinity)\n    } else if (e < 128) {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // stay (NaN, Infinity, -Infinity)\n    } else {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n    }\n  }\n\n  // float16 to float32 helpers\n\n  const mantissaTable = new Uint32Array(2048);\n  const exponentTable = new Uint32Array(64);\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 1; i < 1024; ++i) {\n    let m = i << 13; // zero pad mantissa bits\n    let e = 0; // zero exponent\n\n    // normalized\n    while ((m & 0x00800000) === 0) {\n      m <<= 1;\n      e -= 0x00800000; // decrement exponent\n    }\n\n    m &= ~0x00800000; // clear leading 1 bit\n    e += 0x38800000; // adjust bias\n\n    mantissaTable[i] = m | e;\n  }\n\n  for (let i = 1024; i < 2048; ++i) {\n    mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  for (let i = 1; i < 31; ++i) {\n    exponentTable[i] = i << 23;\n  }\n\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n\n  for (let i = 33; i < 63; ++i) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  exponentTable[63] = 0xc7800000;\n\n  for (let i = 1; i < 64; ++i) {\n    if (i !== 32) {\n      offsetTable[i] = 1024;\n    }\n  }\n\n  return {baseTable, shiftTable, mantissaTable, exponentTable, offsetTable};\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA,SAAQA,KAAK,QAAO,eAAe;AAanC;AACA,IAAIC,aAAa,GAAyB,IAAI;AAE9C;AACA,MAAMC,MAAM,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;AACjC,MAAMC,SAAS,GAAG,IAAIC,YAAY,CAACH,MAAM,CAAC;AAC1C,MAAMI,UAAU,GAAG,IAAIC,WAAW,CAACL,MAAM,CAAC;AAE1C;;;;;AAKA,OAAM,SAAUM,WAAWA,CAACC,GAAW;EACrCR,aAAa,KAAKS,qBAAqB,EAAE;EAEzC;EAEAD,GAAG,GAAGT,KAAK,CAACS,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAE/BL,SAAS,CAAC,CAAC,CAAC,GAAGK,GAAG;EAClB,MAAME,CAAC,GAAGL,UAAU,CAAC,CAAC,CAAC;EACvB,MAAMM,CAAC,GAAID,CAAC,IAAI,EAAE,GAAI,KAAK;EAC3B,OAAOV,aAAa,CAACY,SAAS,CAACD,CAAC,CAAC,IAAI,CAACD,CAAC,GAAG,UAAU,KAAKV,aAAa,CAACa,UAAU,CAACF,CAAC,CAAC,CAAC;AACvF;AAEA;;;;;AAKA,OAAM,SAAUG,aAAaA,CAACN,GAAW;EACvCR,aAAa,KAAKS,qBAAqB,EAAE;EAEzC,MAAMM,CAAC,GAAGP,GAAG,IAAI,EAAE;EACnBH,UAAU,CAAC,CAAC,CAAC,GACXL,aAAa,CAACgB,aAAa,CAAChB,aAAa,CAACiB,WAAW,CAACF,CAAC,CAAC,IAAIP,GAAG,GAAG,KAAK,CAAC,CAAC,GACzER,aAAa,CAACkB,aAAa,CAACH,CAAC,CAAC;EAChC,OAAOZ,SAAS,CAAC,CAAC,CAAC;AACrB;AAEA,SAASM,qBAAqBA,CAAA;EAC5B;EAEA,MAAMG,SAAS,GAAG,IAAIN,WAAW,CAAC,GAAG,CAAC;EACtC,MAAMO,UAAU,GAAG,IAAIP,WAAW,CAAC,GAAG,CAAC;EAEvC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAE,EAAEA,CAAC,EAAE;IAC5B,MAAMR,CAAC,GAAGQ,CAAC,GAAG,GAAG;IAEjB;IAEA,IAAIR,CAAC,GAAG,CAAC,EAAE,EAAE;MACXC,SAAS,CAACO,CAAC,CAAC,GAAG,MAAM;MACrBP,SAAS,CAACO,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM;MAC7BN,UAAU,CAACM,CAAC,CAAC,GAAG,EAAE;MAClBN,UAAU,CAACM,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE;MAE1B;IACF,CAAC,MAAM,IAAIR,CAAC,GAAG,CAAC,EAAE,EAAE;MAClBC,SAAS,CAACO,CAAC,CAAC,GAAG,MAAM,IAAK,CAACR,CAAC,GAAG,EAAG;MAClCC,SAAS,CAACO,CAAC,GAAG,KAAK,CAAC,GAAI,MAAM,IAAK,CAACR,CAAC,GAAG,EAAG,GAAI,MAAM;MACrDE,UAAU,CAACM,CAAC,CAAC,GAAG,CAACR,CAAC,GAAG,CAAC;MACtBE,UAAU,CAACM,CAAC,GAAG,KAAK,CAAC,GAAG,CAACR,CAAC,GAAG,CAAC;MAE9B;IACF,CAAC,MAAM,IAAIA,CAAC,IAAI,EAAE,EAAE;MAClBC,SAAS,CAACO,CAAC,CAAC,GAAIR,CAAC,GAAG,EAAE,IAAK,EAAE;MAC7BC,SAAS,CAACO,CAAC,GAAG,KAAK,CAAC,GAAKR,CAAC,GAAG,EAAE,IAAK,EAAE,GAAI,MAAM;MAChDE,UAAU,CAACM,CAAC,CAAC,GAAG,EAAE;MAClBN,UAAU,CAACM,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE;MAE1B;IACF,CAAC,MAAM,IAAIR,CAAC,GAAG,GAAG,EAAE;MAClBC,SAAS,CAACO,CAAC,CAAC,GAAG,MAAM;MACrBP,SAAS,CAACO,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM;MAC7BN,UAAU,CAACM,CAAC,CAAC,GAAG,EAAE;MAClBN,UAAU,CAACM,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE;MAE1B;IACF,CAAC,MAAM;MACLP,SAAS,CAACO,CAAC,CAAC,GAAG,MAAM;MACrBP,SAAS,CAACO,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM;MAC7BN,UAAU,CAACM,CAAC,CAAC,GAAG,EAAE;MAClBN,UAAU,CAACM,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE;IAC5B;EACF;EAEA;EAEA,MAAMH,aAAa,GAAG,IAAIV,WAAW,CAAC,IAAI,CAAC;EAC3C,MAAMY,aAAa,GAAG,IAAIZ,WAAW,CAAC,EAAE,CAAC;EACzC,MAAMW,WAAW,GAAG,IAAIX,WAAW,CAAC,EAAE,CAAC;EAEvC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAE,EAAEA,CAAC,EAAE;IAC7B,IAAIJ,CAAC,GAAGI,CAAC,IAAI,EAAE,CAAC,CAAC;IACjB,IAAIR,CAAC,GAAG,CAAC,CAAC,CAAC;IAEX;IACA,OAAO,CAACI,CAAC,GAAG,UAAU,MAAM,CAAC,EAAE;MAC7BA,CAAC,KAAK,CAAC;MACPJ,CAAC,IAAI,UAAU,CAAC,CAAC;IACnB;IAEAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClBJ,CAAC,IAAI,UAAU,CAAC,CAAC;IAEjBK,aAAa,CAACG,CAAC,CAAC,GAAGJ,CAAC,GAAGJ,CAAC;EAC1B;EAEA,KAAK,IAAIQ,CAAC,GAAG,IAAI,EAAEA,CAAC,GAAG,IAAI,EAAE,EAAEA,CAAC,EAAE;IAChCH,aAAa,CAACG,CAAC,CAAC,GAAG,UAAU,IAAKA,CAAC,GAAG,IAAI,IAAK,EAAE,CAAC;EACpD;EAEA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;IAC3BD,aAAa,CAACC,CAAC,CAAC,GAAGA,CAAC,IAAI,EAAE;EAC5B;EAEAD,aAAa,CAAC,EAAE,CAAC,GAAG,UAAU;EAC9BA,aAAa,CAAC,EAAE,CAAC,GAAG,UAAU;EAE9B,KAAK,IAAIC,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;IAC5BD,aAAa,CAACC,CAAC,CAAC,GAAG,UAAU,IAAKA,CAAC,GAAG,EAAE,IAAK,EAAE,CAAC;EAClD;EAEAD,aAAa,CAAC,EAAE,CAAC,GAAG,UAAU;EAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;IAC3B,IAAIA,CAAC,KAAK,EAAE,EAAE;MACZF,WAAW,CAACE,CAAC,CAAC,GAAG,IAAI;IACvB;EACF;EAEA,OAAO;IAACP,SAAS;IAAEC,UAAU;IAAEG,aAAa;IAAEE,aAAa;IAAED;EAAW,CAAC;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}