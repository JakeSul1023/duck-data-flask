{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { NodeWorker } from \"../node/worker_threads.js\";\nimport { isBrowser } from \"../env-utils/globals.js\";\nimport { assert } from \"../env-utils/assert.js\";\nimport { getLoadableWorkerURL } from \"../worker-utils/get-loadable-worker-url.js\";\nimport { getTransferList } from \"../worker-utils/get-transfer-list.js\";\nconst NOOP = () => {};\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  name;\n  source;\n  url;\n  terminated = false;\n  worker;\n  onMessage;\n  onError;\n  _loadableURL = '';\n  /** Checks if workers are supported on this platform */\n  static isSupported() {\n    return typeof Worker !== 'undefined' && isBrowser || typeof NodeWorker !== 'undefined' && !isBrowser;\n  }\n  constructor(props) {\n    const {\n      name,\n      source,\n      url\n    } = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = error => console.log(error); // eslint-disable-line\n    this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy() {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    this.terminated = true;\n  }\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data, transferList) {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n  // PRIVATE\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param event\n   */\n  _getErrorFromErrorEvent(event) {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name} from ${this.url}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({\n      source: this.source,\n      url: this.url\n    });\n    const worker = new Worker(this._loadableURL, {\n      name: this.name\n    });\n    worker.onmessage = event => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = error => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = event => console.error(event); // eslint-disable-line\n    return worker;\n  }\n  /**\n   * Creates a worker thread in node.js\n   * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool\n   */\n  _createNodeWorker() {\n    let worker;\n    if (this.url) {\n      // Make sure relative URLs start with './'\n      const absolute = this.url.includes(':/') || this.url.startsWith('/');\n      const url = absolute ? this.url : `./${this.url}`;\n      // console.log('Starting work from', url);\n      worker = new NodeWorker(url, {\n        eval: false\n      });\n    } else if (this.source) {\n      worker = new NodeWorker(this.source, {\n        eval: true\n      });\n    } else {\n      throw new Error('no worker');\n    }\n    worker.on('message', data => {\n      // console.error('message', data);\n      this.onMessage(data);\n    });\n    worker.on('error', error => {\n      // console.error('error', error);\n      this.onError(error);\n    });\n    worker.on('exit', code => {\n      // console.error('exit', code);\n    });\n    return worker;\n  }\n}","map":{"version":3,"names":["NodeWorker","isBrowser","assert","getLoadableWorkerURL","getTransferList","NOOP","WorkerThread","name","source","url","terminated","worker","onMessage","onError","_loadableURL","isSupported","Worker","constructor","props","error","console","log","_createBrowserWorker","_createNodeWorker","destroy","terminate","isRunning","Boolean","postMessage","data","transferList","_getErrorFromErrorEvent","event","message","lineno","colno","Error","onmessage","onerror","onmessageerror","absolute","includes","startsWith","eval","on","code"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { NodeWorker } from \"../node/worker_threads.js\";\nimport { isBrowser } from \"../env-utils/globals.js\";\nimport { assert } from \"../env-utils/assert.js\";\nimport { getLoadableWorkerURL } from \"../worker-utils/get-loadable-worker-url.js\";\nimport { getTransferList } from \"../worker-utils/get-transfer-list.js\";\nconst NOOP = () => { };\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n    name;\n    source;\n    url;\n    terminated = false;\n    worker;\n    onMessage;\n    onError;\n    _loadableURL = '';\n    /** Checks if workers are supported on this platform */\n    static isSupported() {\n        return ((typeof Worker !== 'undefined' && isBrowser) ||\n            (typeof NodeWorker !== 'undefined' && !isBrowser));\n    }\n    constructor(props) {\n        const { name, source, url } = props;\n        assert(source || url); // Either source or url must be defined\n        this.name = name;\n        this.source = source;\n        this.url = url;\n        this.onMessage = NOOP;\n        this.onError = (error) => console.log(error); // eslint-disable-line\n        this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n    }\n    /**\n     * Terminate this worker thread\n     * @note Can free up significant memory\n     */\n    destroy() {\n        this.onMessage = NOOP;\n        this.onError = NOOP;\n        this.worker.terminate(); // eslint-disable-line @typescript-eslint/no-floating-promises\n        this.terminated = true;\n    }\n    get isRunning() {\n        return Boolean(this.onMessage);\n    }\n    /**\n     * Send a message to this worker thread\n     * @param data any data structure, ideally consisting mostly of transferrable objects\n     * @param transferList If not supplied, calculated automatically by traversing data\n     */\n    postMessage(data, transferList) {\n        transferList = transferList || getTransferList(data);\n        // @ts-ignore\n        this.worker.postMessage(data, transferList);\n    }\n    // PRIVATE\n    /**\n     * Generate a standard Error from an ErrorEvent\n     * @param event\n     */\n    _getErrorFromErrorEvent(event) {\n        // Note Error object does not have the expected fields if loading failed completely\n        // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n        // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n        let message = 'Failed to load ';\n        message += `worker ${this.name} from ${this.url}. `;\n        if (event.message) {\n            message += `${event.message} in `;\n        }\n        // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n        // message += hasFilename ? event.filename : this.source.slice(0, 100);\n        if (event.lineno) {\n            message += `:${event.lineno}:${event.colno}`;\n        }\n        return new Error(message);\n    }\n    /**\n     * Creates a worker thread on the browser\n     */\n    _createBrowserWorker() {\n        this._loadableURL = getLoadableWorkerURL({ source: this.source, url: this.url });\n        const worker = new Worker(this._loadableURL, { name: this.name });\n        worker.onmessage = (event) => {\n            if (!event.data) {\n                this.onError(new Error('No data received'));\n            }\n            else {\n                this.onMessage(event.data);\n            }\n        };\n        // This callback represents an uncaught exception in the worker thread\n        worker.onerror = (error) => {\n            this.onError(this._getErrorFromErrorEvent(error));\n            this.terminated = true;\n        };\n        // TODO - not clear when this would be called, for now just log in case it happens\n        worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n        return worker;\n    }\n    /**\n     * Creates a worker thread in node.js\n     * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool\n     */\n    _createNodeWorker() {\n        let worker;\n        if (this.url) {\n            // Make sure relative URLs start with './'\n            const absolute = this.url.includes(':/') || this.url.startsWith('/');\n            const url = absolute ? this.url : `./${this.url}`;\n            // console.log('Starting work from', url);\n            worker = new NodeWorker(url, { eval: false });\n        }\n        else if (this.source) {\n            worker = new NodeWorker(this.source, { eval: true });\n        }\n        else {\n            throw new Error('no worker');\n        }\n        worker.on('message', (data) => {\n            // console.error('message', data);\n            this.onMessage(data);\n        });\n        worker.on('error', (error) => {\n            // console.error('error', error);\n            this.onError(error);\n        });\n        worker.on('exit', (code) => {\n            // console.error('exit', code);\n        });\n        return worker;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}