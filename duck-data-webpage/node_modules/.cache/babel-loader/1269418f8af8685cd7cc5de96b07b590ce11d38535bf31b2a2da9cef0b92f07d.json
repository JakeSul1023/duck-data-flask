{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport Tar from \"./lib/tar/tar.js\";\nconst TAR_BUILDER_OPTIONS = {\n  recordsPerBlock: 20\n};\n/**\n * Build a tar file by adding files\n */\nexport class TarBuilder {\n  static get properties() {\n    return {\n      id: 'tar',\n      name: 'TAR',\n      extensions: ['tar'],\n      mimeTypes: ['application/x-tar'],\n      builder: TarBuilder,\n      options: TAR_BUILDER_OPTIONS\n    };\n  }\n  options;\n  tape;\n  count = 0;\n  constructor(options) {\n    this.options = {\n      ...TAR_BUILDER_OPTIONS,\n      ...options\n    };\n    this.tape = new Tar(this.options.recordsPerBlock);\n  }\n  /** Adds a file to the archive. */\n  addFile(filename, buffer) {\n    this.tape.append(filename, new Uint8Array(buffer));\n    this.count++;\n  }\n  async build() {\n    return new Response(this.tape.save()).arrayBuffer();\n  }\n}","map":{"version":3,"names":["Tar","TAR_BUILDER_OPTIONS","recordsPerBlock","TarBuilder","properties","id","name","extensions","mimeTypes","builder","options","tape","count","constructor","addFile","filename","buffer","append","Uint8Array","build","Response","save","arrayBuffer"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/zip/dist/tar-builder.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport Tar from \"./lib/tar/tar.js\";\nconst TAR_BUILDER_OPTIONS = {\n    recordsPerBlock: 20\n};\n/**\n * Build a tar file by adding files\n */\nexport class TarBuilder {\n    static get properties() {\n        return {\n            id: 'tar',\n            name: 'TAR',\n            extensions: ['tar'],\n            mimeTypes: ['application/x-tar'],\n            builder: TarBuilder,\n            options: TAR_BUILDER_OPTIONS\n        };\n    }\n    options;\n    tape;\n    count = 0;\n    constructor(options) {\n        this.options = { ...TAR_BUILDER_OPTIONS, ...options };\n        this.tape = new Tar(this.options.recordsPerBlock);\n    }\n    /** Adds a file to the archive. */\n    addFile(filename, buffer) {\n        this.tape.append(filename, new Uint8Array(buffer));\n        this.count++;\n    }\n    async build() {\n        return new Response(this.tape.save()).arrayBuffer();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,GAAG,MAAM,kBAAkB;AAClC,MAAMC,mBAAmB,GAAG;EACxBC,eAAe,EAAE;AACrB,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,UAAU,CAAC;EACpB,WAAWC,UAAUA,CAAA,EAAG;IACpB,OAAO;MACHC,EAAE,EAAE,KAAK;MACTC,IAAI,EAAE,KAAK;MACXC,UAAU,EAAE,CAAC,KAAK,CAAC;MACnBC,SAAS,EAAE,CAAC,mBAAmB,CAAC;MAChCC,OAAO,EAAEN,UAAU;MACnBO,OAAO,EAAET;IACb,CAAC;EACL;EACAS,OAAO;EACPC,IAAI;EACJC,KAAK,GAAG,CAAC;EACTC,WAAWA,CAACH,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAG;MAAE,GAAGT,mBAAmB;MAAE,GAAGS;IAAQ,CAAC;IACrD,IAAI,CAACC,IAAI,GAAG,IAAIX,GAAG,CAAC,IAAI,CAACU,OAAO,CAACR,eAAe,CAAC;EACrD;EACA;EACAY,OAAOA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IACtB,IAAI,CAACL,IAAI,CAACM,MAAM,CAACF,QAAQ,EAAE,IAAIG,UAAU,CAACF,MAAM,CAAC,CAAC;IAClD,IAAI,CAACJ,KAAK,EAAE;EAChB;EACA,MAAMO,KAAKA,CAAA,EAAG;IACV,OAAO,IAAIC,QAAQ,CAAC,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACvD;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}