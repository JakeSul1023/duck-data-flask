{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { DirectionalLight } from \"./directional-light.js\";\nimport { getSunDirection } from '@math.gl/sun';\nexport default class SunLight extends DirectionalLight {\n  constructor(opts) {\n    super(opts);\n    this.timestamp = opts.timestamp;\n  }\n  getProjectedLight({\n    layer\n  }) {\n    const {\n      viewport\n    } = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      // @ts-expect-error longitude and latitude are not defined on all viewports\n      const {\n        latitude,\n        longitude\n      } = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude);\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["DirectionalLight","getSunDirection","SunLight","constructor","opts","timestamp","getProjectedLight","layer","viewport","context","isGlobe","resolution","x","y","z","direction","latitude","longitude"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\effects\\lighting\\sun-light.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DirectionalLight} from './directional-light';\nimport {getSunDirection} from '@math.gl/sun';\n\nimport type Layer from '../../lib/layer';\n\nexport type SunLightOptions = {\n  id?: string;\n  /** Light color, [r, g, b] in the 0-255 range\n   * @default [255, 255, 255]\n   */\n  color?: [number, number, number];\n  /** Light intensity, higher number is brighter\n   * @default 1.0\n   */\n  intensity?: number;\n  /**\n   * The time at which to position the sun. Either a Date object or a timestamp (milliseconds elapsed since unix time 0)\n   */\n  timestamp: number | Date;\n  /** (Experimental) render shadows casted by this light\n   * @default false\n   */\n  _shadow?: boolean;\n};\n\nexport default class SunLight extends DirectionalLight {\n  timestamp: number | Date;\n\n  constructor(opts: SunLightOptions) {\n    super(opts);\n\n    this.timestamp = opts.timestamp;\n  }\n\n  getProjectedLight({layer}: {layer: Layer}): DirectionalLight {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      // @ts-expect-error longitude and latitude are not defined on all viewports\n      const {latitude, longitude} = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude) as [\n        number,\n        number,\n        number\n      ];\n    }\n\n    return this;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,gBAAgB,QAAC;AACzB,SAAQC,eAAe,QAAO,cAAc;AAwB5C,eAAc,MAAOC,QAAS,SAAQF,gBAAgB;EAGpDG,YAAYC,IAAqB;IAC/B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,SAAS,GAAGD,IAAI,CAACC,SAAS;EACjC;EAEAC,iBAAiBA,CAAC;IAACC;EAAK,CAAiB;IACvC,MAAM;MAACC;IAAQ,CAAC,GAAGD,KAAK,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,QAAQ,CAACG,UAAU,IAAIH,QAAQ,CAACG,UAAU,GAAG,CAAC;IAE9D,IAAID,OAAO,EAAE;MACX;MACA,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGb,eAAe,CAAC,IAAI,CAACI,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;MACvD,IAAI,CAACU,SAAS,GAAG,CAACH,CAAC,EAAE,CAACE,CAAC,EAAED,CAAC,CAAC;IAC7B,CAAC,MAAM;MACL;MACA,MAAM;QAACG,QAAQ;QAAEC;MAAS,CAAC,GAAGT,QAAQ;MACtC,IAAI,CAACO,SAAS,GAAGd,eAAe,CAAC,IAAI,CAACI,SAAS,EAAEW,QAAQ,EAAEC,SAAS,CAInE;IACH;IAEA,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}