{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/engine';\nimport { gouraudMaterial } from '@luma.gl/shadertools';\nimport { pointCloudUniforms } from \"./point-cloud-layer-uniforms.js\";\nimport vs from \"./point-cloud-layer-vertex.glsl.js\";\nimport fs from \"./point-cloud-layer-fragment.glsl.js\";\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  //  point radius in pixels\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  // Depreated\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {\n    header,\n    attributes\n  } = data;\n  if (!header || !attributes) {\n    return;\n  }\n  data.length = header.vertexCount;\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    const {\n      size,\n      value\n    } = attributes.COLOR_0;\n    attributes.instanceColors = {\n      size,\n      type: 'unorm8',\n      value\n    };\n  }\n}\n/** Render a point cloud with 3D positions, normals and colors. */\nclass PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudMaterial, picking, pointCloudUniforms]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n  updateState(params) {\n    const {\n      changeFlags,\n      props\n    } = params;\n    super.updateState(params);\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      pointSize,\n      sizeUnits\n    } = this.props;\n    const model = this.state.model;\n    const pointCloudProps = {\n      sizeUnits: UNIT[sizeUnits],\n      radiusPixels: pointSize\n    };\n    model.shaderInputs.setProps({\n      pointCloud: pointCloudProps\n    });\n    model.draw(this.context.renderPass);\n  }\n  _getModel() {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = i / 3 * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-list',\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\nexport default PointCloudLayer;\n//# sourceMappingURL=point-cloud-layer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}