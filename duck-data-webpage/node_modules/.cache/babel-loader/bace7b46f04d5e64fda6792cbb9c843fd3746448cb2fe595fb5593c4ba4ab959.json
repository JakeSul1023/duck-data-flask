{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst isObject = value => value && typeof value === 'object';\n// Loads a deep structure of urls (objects and arrays of urls)\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function asyncDeepMap(tree, func, options = {}) {\n  return await mapSubtree(tree, func, options);\n}\nexport async function mapSubtree(object, func, options) {\n  if (Array.isArray(object)) {\n    return await mapArray(object, func, options);\n  }\n  if (isObject(object)) {\n    return await mapObject(object, func, options);\n  }\n  // TODO - ignore non-urls, non-arraybuffers?\n  const url = object;\n  return await func(url, options);\n}\n// HELPERS\nasync function mapObject(object, func, options) {\n  const promises = [];\n  const values = {};\n  for (const key in object) {\n    const url = object[key];\n    const promise = mapSubtree(url, func, options).then(value => {\n      values[key] = value;\n    });\n    promises.push(promise);\n  }\n  await Promise.all(promises);\n  return values;\n}\nasync function mapArray(urlArray, func, options = {}) {\n  const promises = urlArray.map(url => mapSubtree(url, func, options));\n  return await Promise.all(promises);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}