{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { UNIT } from '@deck.gl/core';\nimport { CubeGeometry } from '@luma.gl/engine';\nimport ColumnLayer from \"./column-layer.js\";\nconst defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    value: [1, 1]\n  }\n};\nclass GridCellLayer extends ColumnLayer {\n  _updateGeometry() {\n    const geometry = new CubeGeometry();\n    this.state.fillModel.setGeometry(geometry);\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      elevationScale,\n      extruded,\n      offset,\n      coverage,\n      cellSize,\n      angle,\n      radiusUnits\n    } = this.props;\n    const fillModel = this.state.fillModel;\n    const columnProps = {\n      radius: cellSize / 2,\n      radiusUnits: UNIT[radiusUnits],\n      angle,\n      offset,\n      extruded,\n      stroked: false,\n      coverage,\n      elevationScale,\n      edgeDistance: 1,\n      isStroke: false,\n      widthUnits: 0,\n      widthScale: 0,\n      widthMinPixels: 0,\n      widthMaxPixels: 0\n    };\n    fillModel.shaderInputs.setProps({\n      column: columnProps\n    });\n    fillModel.draw(this.context.renderPass);\n  }\n}\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\nexport default GridCellLayer;","map":{"version":3,"names":["UNIT","CubeGeometry","ColumnLayer","defaultProps","cellSize","type","min","value","offset","GridCellLayer","_updateGeometry","geometry","state","fillModel","setGeometry","draw","uniforms","elevationScale","extruded","coverage","angle","radiusUnits","props","columnProps","radius","stroked","edgeDistance","isStroke","widthUnits","widthScale","widthMinPixels","widthMaxPixels","shaderInputs","setProps","column","context","renderPass","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\column-layer\\grid-cell-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {DefaultProps} from '@deck.gl/core';\nimport {UNIT} from '@deck.gl/core';\nimport {CubeGeometry} from '@luma.gl/engine';\nimport ColumnLayer, {ColumnLayerProps} from './column-layer';\nimport {ColumnProps} from './column-layer-uniforms';\n\nconst defaultProps: DefaultProps<GridCellLayerProps> = {\n  cellSize: {type: 'number', min: 0, value: 1000},\n  offset: {type: 'array', value: [1, 1]}\n};\n\n/** All properties supported by GridCellLayer. */\nexport type GridCellLayerProps<DataT = unknown> = _GridCellLayerProps & ColumnLayerProps<DataT>;\n\n/** Properties added by GridCellLayer. */\ntype _GridCellLayerProps = {\n  /**\n   * @default 1000\n   */\n  cellSize?: number;\n};\n\nexport default class GridCellLayer<DataT = any, ExtraPropsT extends {} = {}> extends ColumnLayer<\n  DataT,\n  ExtraPropsT & Required<_GridCellLayerProps>\n> {\n  static layerName = 'GridCellLayer';\n  static defaultProps = defaultProps;\n\n  protected _updateGeometry() {\n    const geometry = new CubeGeometry();\n    this.state.fillModel!.setGeometry(geometry);\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, offset, coverage, cellSize, angle, radiusUnits} = this.props;\n    const fillModel = this.state.fillModel!;\n    const columnProps: ColumnProps = {\n      radius: cellSize / 2,\n      radiusUnits: UNIT[radiusUnits],\n      angle,\n      offset,\n      extruded,\n      stroked: false,\n      coverage,\n      elevationScale,\n      edgeDistance: 1,\n      isStroke: false,\n      widthUnits: 0,\n      widthScale: 0,\n      widthMinPixels: 0,\n      widthMaxPixels: 0\n    };\n    fillModel.shaderInputs.setProps({column: columnProps});\n    fillModel.draw(this.context.renderPass);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,IAAI,QAAO,eAAe;AAClC,SAAQC,YAAY,QAAO,iBAAiB;AAC5C,OAAOC,WAA+B;AAGtC,MAAMC,YAAY,GAAqC;EACrDC,QAAQ,EAAE;IAACC,IAAI,EAAE,QAAQ;IAAEC,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAI,CAAC;EAC/CC,MAAM,EAAE;IAACH,IAAI,EAAE,OAAO;IAAEE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;EAAC;CACtC;AAaD,MAAqBE,aAAwD,SAAQP,WAGpF;EAIWQ,eAAeA,CAAA;IACvB,MAAMC,QAAQ,GAAG,IAAIV,YAAY,EAAE;IACnC,IAAI,CAACW,KAAK,CAACC,SAAU,CAACC,WAAW,CAACH,QAAQ,CAAC;EAC7C;EAEAI,IAAIA,CAAC;IAACC;EAAQ,CAAC;IACb,MAAM;MAACC,cAAc;MAAEC,QAAQ;MAAEV,MAAM;MAAEW,QAAQ;MAAEf,QAAQ;MAAEgB,KAAK;MAAEC;IAAW,CAAC,GAAG,IAAI,CAACC,KAAK;IAC7F,MAAMT,SAAS,GAAG,IAAI,CAACD,KAAK,CAACC,SAAU;IACvC,MAAMU,WAAW,GAAgB;MAC/BC,MAAM,EAAEpB,QAAQ,GAAG,CAAC;MACpBiB,WAAW,EAAErB,IAAI,CAACqB,WAAW,CAAC;MAC9BD,KAAK;MACLZ,MAAM;MACNU,QAAQ;MACRO,OAAO,EAAE,KAAK;MACdN,QAAQ;MACRF,cAAc;MACdS,YAAY,EAAE,CAAC;MACfC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,CAAC;MACjBC,cAAc,EAAE;KACjB;IACDlB,SAAS,CAACmB,YAAY,CAACC,QAAQ,CAAC;MAACC,MAAM,EAAEX;IAAW,CAAC,CAAC;IACtDV,SAAS,CAACE,IAAI,CAAC,IAAI,CAACoB,OAAO,CAACC,UAAU,CAAC;EACzC;;AA7BO3B,aAAA,CAAA4B,SAAS,GAAG,eAAe;AAC3B5B,aAAA,CAAAN,YAAY,GAAGA,YAAY;eALfM,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}