{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { MathArray } from \"./base/math-array.js\";\nimport { Quaternion } from \"./quaternion.js\";\nimport { clamp } from \"../lib/common.js\";\nimport { checkNumber } from \"../lib/validators.js\";\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n// eslint-disable-next-line no-shadow\nvar RotationOrder;\n(function (RotationOrder) {\n  RotationOrder[RotationOrder[\"ZYX\"] = 0] = \"ZYX\";\n  RotationOrder[RotationOrder[\"YXZ\"] = 1] = \"YXZ\";\n  RotationOrder[RotationOrder[\"XZY\"] = 2] = \"XZY\";\n  RotationOrder[RotationOrder[\"ZXY\"] = 3] = \"ZXY\";\n  RotationOrder[RotationOrder[\"YZX\"] = 4] = \"YZX\";\n  RotationOrder[RotationOrder[\"XYZ\"] = 5] = \"XYZ\";\n})(RotationOrder || (RotationOrder = {}));\nexport class Euler extends MathArray {\n  // Constants\n  static get ZYX() {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ() {\n    return RotationOrder.YXZ;\n  }\n  static get XZY() {\n    return RotationOrder.XZY;\n  }\n  static get ZXY() {\n    return RotationOrder.ZXY;\n  }\n  static get YZX() {\n    return RotationOrder.YZX;\n  }\n  static get XYZ() {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw() {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder() {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders() {\n    return RotationOrder;\n  }\n  static rotationOrder(order) {\n    return RotationOrder[order];\n  }\n  get ELEMENTS() {\n    return 4;\n  }\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // @ts-expect-error\n      // eslint-disable-next-line prefer-rest-params\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object) {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n  validate() {\n    return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n  }\n  // Does not copy the orientation element\n  toArray(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n  // Copies the orientation element\n  toArray4(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n  toVector3(result = [-0, -0, -0]) {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha() {\n    return this[0];\n  }\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n  get beta() {\n    return this[1];\n  }\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n  get gamma() {\n    return this[2];\n  }\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n  // phi, theta, psi angle notation\n  get phi() {\n    return this[0];\n  }\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n  get theta() {\n    return this[1];\n  }\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n  get psi() {\n    return this[2];\n  }\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n  get roll() {\n    return this[0];\n  }\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n  get pitch() {\n    return this[1];\n  }\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n  get yaw() {\n    return this[2];\n  }\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n  // rotation order, in all three angle notations\n  get order() {\n    return this[3];\n  }\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n  // Constructors\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n  // TODO - with and without 4th element\n  fromArray(array, offset = 0) {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n  fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n  // ACCESSORS\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n  // TODO - move to Quaternion\n  getQuaternion() {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ:\n        {\n          const ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n          te[0] = c * e;\n          te[4] = -c * f;\n          te[8] = d;\n          te[1] = af + be * d;\n          te[5] = ae - bf * d;\n          te[9] = -b * c;\n          te[2] = bf - ae * d;\n          te[6] = be + af * d;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.YXZ:\n        {\n          const ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n          te[0] = ce + df * b;\n          te[4] = de * b - cf;\n          te[8] = a * d;\n          te[1] = a * f;\n          te[5] = a * e;\n          te[9] = -b;\n          te[2] = cf * b - de;\n          te[6] = df + ce * b;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.ZXY:\n        {\n          const ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n          te[0] = ce - df * b;\n          te[4] = -a * f;\n          te[8] = de + cf * b;\n          te[1] = cf + de * b;\n          te[5] = a * e;\n          te[9] = df - ce * b;\n          te[2] = -a * d;\n          te[6] = b;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.ZYX:\n        {\n          const ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n          te[0] = c * e;\n          te[4] = be * d - af;\n          te[8] = ae * d + bf;\n          te[1] = c * f;\n          te[5] = bf * d + ae;\n          te[9] = af * d - be;\n          te[2] = -d;\n          te[6] = b * c;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.YZX:\n        {\n          const ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n          te[0] = c * e;\n          te[4] = bd - ac * f;\n          te[8] = bc * f + ad;\n          te[1] = f;\n          te[5] = a * e;\n          te[9] = -b * e;\n          te[2] = -d * e;\n          te[6] = ad * f + bc;\n          te[10] = ac - bd * f;\n          break;\n        }\n      case Euler.XZY:\n        {\n          const ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n          te[0] = c * e;\n          te[4] = -f;\n          te[8] = d * e;\n          te[1] = ac * f + bd;\n          te[5] = a * e;\n          te[9] = ad * f - bc;\n          te[2] = bc * f - ad;\n          te[6] = b * e;\n          te[10] = bd * f + ac;\n          break;\n        }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n  toQuaternion() {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n// HELPER FUNCTIONS\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n//# sourceMappingURL=euler.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}