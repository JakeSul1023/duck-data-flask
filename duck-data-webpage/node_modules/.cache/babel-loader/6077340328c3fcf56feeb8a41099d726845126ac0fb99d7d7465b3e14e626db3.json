{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CanvasContext } from '@luma.gl/core';\nimport { WEBGLFramebuffer } from \"./resources/webgl-framebuffer.js\";\n/**\n * A WebGL Canvas Context which manages the canvas and handles drawing buffer resizing etc\n */\nexport class WebGLCanvasContext extends CanvasContext {\n  device;\n  format = 'rgba8unorm';\n  depthStencilFormat = 'depth24plus';\n  presentationSize;\n  _framebuffer = null;\n  get [Symbol.toStringTag]() {\n    return 'WebGLCanvasContext';\n  }\n  constructor(device, props) {\n    // Note: Base class creates / looks up the canvas (unless under Node.js)\n    super(props);\n    this.device = device;\n    this.presentationSize = [-1, -1];\n    this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);\n    this.update();\n  }\n  getCurrentFramebuffer() {\n    this.update();\n    // Setting handle to null returns a reference to the default framebuffer\n    this._framebuffer = this._framebuffer || new WEBGLFramebuffer(this.device, {\n      handle: null\n    });\n    return this._framebuffer;\n  }\n  /** Resizes and updates render targets if necessary */\n  update() {\n    const size = this.getPixelSize();\n    const sizeChanged = size[0] !== this.presentationSize[0] || size[1] !== this.presentationSize[1];\n    if (sizeChanged) {\n      this.presentationSize = size;\n      this.resize();\n    }\n  }\n  /**\n   * Resize the canvas' drawing buffer.\n   *\n   * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n   * Can be called every frame\n   *\n   * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n   * for best visual results, usually set to either:\n   *  canvas CSS width x canvas CSS height\n   *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n   * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n   */\n  resize(options) {\n    if (!this.device.gl) return;\n    // Resize browser context .\n    if (this.canvas) {\n      const devicePixelRatio = this.getDevicePixelRatio(options?.useDevicePixels);\n      this.setDevicePixelRatio(devicePixelRatio, options);\n      return;\n    }\n  }\n  commit() {\n    // gl.commit was ultimately removed from the WebGL standard??\n    // if (this.offScreen && this.gl.commit) {\n    //   // @ts-expect-error gl.commit is not officially part of WebGL2RenderingContext\n    //   this.gl.commit();\n    // }\n  }\n}","map":{"version":3,"names":["CanvasContext","WEBGLFramebuffer","WebGLCanvasContext","device","format","depthStencilFormat","presentationSize","_framebuffer","Symbol","toStringTag","constructor","props","_setAutoCreatedCanvasId","id","update","getCurrentFramebuffer","handle","size","getPixelSize","sizeChanged","resize","options","gl","canvas","devicePixelRatio","getDevicePixelRatio","useDevicePixels","setDevicePixelRatio","commit"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\webgl-canvas-context.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CanvasContextProps, TextureFormat} from '@luma.gl/core';\nimport {CanvasContext} from '@luma.gl/core';\nimport {WebGLDevice} from './webgl-device';\nimport {WEBGLFramebuffer} from './resources/webgl-framebuffer';\n\n/**\n * A WebGL Canvas Context which manages the canvas and handles drawing buffer resizing etc\n */\nexport class WebGLCanvasContext extends CanvasContext {\n  readonly device: WebGLDevice;\n  readonly format: TextureFormat = 'rgba8unorm';\n  readonly depthStencilFormat: TextureFormat = 'depth24plus';\n\n  presentationSize: [number, number];\n  private _framebuffer: WEBGLFramebuffer | null = null;\n\n  get [Symbol.toStringTag](): string {\n    return 'WebGLCanvasContext';\n  }\n\n  constructor(device: WebGLDevice, props: CanvasContextProps) {\n    // Note: Base class creates / looks up the canvas (unless under Node.js)\n    super(props);\n    this.device = device;\n    this.presentationSize = [-1, -1];\n    this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);\n    this.update();\n  }\n\n  getCurrentFramebuffer(): WEBGLFramebuffer {\n    this.update();\n    // Setting handle to null returns a reference to the default framebuffer\n    this._framebuffer = this._framebuffer || new WEBGLFramebuffer(this.device, {handle: null});\n    return this._framebuffer;\n  }\n\n  /** Resizes and updates render targets if necessary */\n  update() {\n    const size = this.getPixelSize();\n    const sizeChanged =\n      size[0] !== this.presentationSize[0] || size[1] !== this.presentationSize[1];\n    if (sizeChanged) {\n      this.presentationSize = size;\n      this.resize();\n    }\n  }\n\n  /**\n   * Resize the canvas' drawing buffer.\n   *\n   * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n   * Can be called every frame\n   *\n   * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n   * for best visual results, usually set to either:\n   *  canvas CSS width x canvas CSS height\n   *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n   * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n   */\n  resize(options?: {width?: number; height?: number; useDevicePixels?: boolean | number}): void {\n    if (!this.device.gl) return;\n\n    // Resize browser context .\n    if (this.canvas) {\n      const devicePixelRatio = this.getDevicePixelRatio(options?.useDevicePixels);\n      this.setDevicePixelRatio(devicePixelRatio, options);\n      return;\n    }\n  }\n\n  commit() {\n    // gl.commit was ultimately removed from the WebGL standard??\n    // if (this.offScreen && this.gl.commit) {\n    //   // @ts-expect-error gl.commit is not officially part of WebGL2RenderingContext\n    //   this.gl.commit();\n    // }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,aAAa,QAAO,eAAe;AAE3C,SAAQC,gBAAgB,QAAC;AAEzB;;;AAGA,OAAM,MAAOC,kBAAmB,SAAQF,aAAa;EAC1CG,MAAM;EACNC,MAAM,GAAkB,YAAY;EACpCC,kBAAkB,GAAkB,aAAa;EAE1DC,gBAAgB;EACRC,YAAY,GAA4B,IAAI;EAEpD,KAAKC,MAAM,CAACC,WAAW,IAAC;IACtB,OAAO,oBAAoB;EAC7B;EAEAC,YAAYP,MAAmB,EAAEQ,KAAyB;IACxD;IACA,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,gBAAgB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,IAAI,CAACM,uBAAuB,CAAC,GAAG,IAAI,CAACT,MAAM,CAACU,EAAE,SAAS,CAAC;IACxD,IAAI,CAACC,MAAM,EAAE;EACf;EAEAC,qBAAqBA,CAAA;IACnB,IAAI,CAACD,MAAM,EAAE;IACb;IACA,IAAI,CAACP,YAAY,GAAG,IAAI,CAACA,YAAY,IAAI,IAAIN,gBAAgB,CAAC,IAAI,CAACE,MAAM,EAAE;MAACa,MAAM,EAAE;IAAI,CAAC,CAAC;IAC1F,OAAO,IAAI,CAACT,YAAY;EAC1B;EAEA;EACAO,MAAMA,CAAA;IACJ,MAAMG,IAAI,GAAG,IAAI,CAACC,YAAY,EAAE;IAChC,MAAMC,WAAW,GACfF,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAACX,gBAAgB,CAAC,CAAC,CAAC,IAAIW,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAACX,gBAAgB,CAAC,CAAC,CAAC;IAC9E,IAAIa,WAAW,EAAE;MACf,IAAI,CAACb,gBAAgB,GAAGW,IAAI;MAC5B,IAAI,CAACG,MAAM,EAAE;IACf;EACF;EAEA;;;;;;;;;;;;EAYAA,MAAMA,CAACC,OAA+E;IACpF,IAAI,CAAC,IAAI,CAAClB,MAAM,CAACmB,EAAE,EAAE;IAErB;IACA,IAAI,IAAI,CAACC,MAAM,EAAE;MACf,MAAMC,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,CAACJ,OAAO,EAAEK,eAAe,CAAC;MAC3E,IAAI,CAACC,mBAAmB,CAACH,gBAAgB,EAAEH,OAAO,CAAC;MACnD;IACF;EACF;EAEAO,MAAMA,CAAA;IACJ;IACA;IACA;IACA;IACA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}