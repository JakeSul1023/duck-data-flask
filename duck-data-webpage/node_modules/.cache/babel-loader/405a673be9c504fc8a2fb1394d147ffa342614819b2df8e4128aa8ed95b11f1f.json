{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { DoublyLinkedList } from \"../utils/doubly-linked-list.js\";\n/**\n * Stores tiles with content loaded.\n * @private\n */\nexport class TilesetCache {\n  _list;\n  _sentinel;\n  _trimTiles;\n  constructor() {\n    // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n    // (sentinel, tail] -> tiles that were selected this frame\n    this._list = new DoublyLinkedList();\n    this._sentinel = this._list.add('sentinel');\n    this._trimTiles = false;\n  }\n  reset() {\n    // Move sentinel node to the tail so, at the start of the frame, all tiles\n    // may be potentially replaced.  Tiles are moved to the right of the sentinel\n    // when they are selected so they will not be replaced.\n    this._list.splice(this._list.tail, this._sentinel);\n  }\n  touch(tile) {\n    const node = tile._cacheNode;\n    if (node) {\n      this._list.splice(this._sentinel, node);\n    }\n  }\n  add(tileset, tile, addCallback) {\n    if (!tile._cacheNode) {\n      tile._cacheNode = this._list.add(tile);\n      if (addCallback) {\n        addCallback(tileset, tile);\n      }\n    }\n  }\n  unloadTile(tileset, tile, unloadCallback) {\n    const node = tile._cacheNode;\n    if (!node) {\n      return;\n    }\n    this._list.remove(node);\n    tile._cacheNode = null;\n    if (unloadCallback) {\n      unloadCallback(tileset, tile);\n    }\n  }\n  unloadTiles(tileset, unloadCallback) {\n    const trimTiles = this._trimTiles;\n    this._trimTiles = false;\n    const list = this._list;\n    const maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n    // Traverse the list only to the sentinel since tiles/nodes to the\n    // right of the sentinel were used this frame.\n    // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n    const sentinel = this._sentinel;\n    let node = list.head;\n    while (node !== sentinel && (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)) {\n      // @ts-expect-error\n      const tile = node.item;\n      // @ts-expect-error\n      node = node.next;\n      this.unloadTile(tileset, tile, unloadCallback);\n    }\n  }\n  trim() {\n    this._trimTiles = true;\n  }\n}","map":{"version":3,"names":["DoublyLinkedList","TilesetCache","_list","_sentinel","_trimTiles","constructor","add","reset","splice","tail","touch","tile","node","_cacheNode","tileset","addCallback","unloadTile","unloadCallback","remove","unloadTiles","trimTiles","list","maximumMemoryUsageInBytes","maximumMemoryUsage","sentinel","head","gpuMemoryUsageInBytes","item","next","trim"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/tiles/dist/tileset/tileset-cache.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { DoublyLinkedList } from \"../utils/doubly-linked-list.js\";\n/**\n * Stores tiles with content loaded.\n * @private\n */\nexport class TilesetCache {\n    _list;\n    _sentinel;\n    _trimTiles;\n    constructor() {\n        // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n        // (sentinel, tail] -> tiles that were selected this frame\n        this._list = new DoublyLinkedList();\n        this._sentinel = this._list.add('sentinel');\n        this._trimTiles = false;\n    }\n    reset() {\n        // Move sentinel node to the tail so, at the start of the frame, all tiles\n        // may be potentially replaced.  Tiles are moved to the right of the sentinel\n        // when they are selected so they will not be replaced.\n        this._list.splice(this._list.tail, this._sentinel);\n    }\n    touch(tile) {\n        const node = tile._cacheNode;\n        if (node) {\n            this._list.splice(this._sentinel, node);\n        }\n    }\n    add(tileset, tile, addCallback) {\n        if (!tile._cacheNode) {\n            tile._cacheNode = this._list.add(tile);\n            if (addCallback) {\n                addCallback(tileset, tile);\n            }\n        }\n    }\n    unloadTile(tileset, tile, unloadCallback) {\n        const node = tile._cacheNode;\n        if (!node) {\n            return;\n        }\n        this._list.remove(node);\n        tile._cacheNode = null;\n        if (unloadCallback) {\n            unloadCallback(tileset, tile);\n        }\n    }\n    unloadTiles(tileset, unloadCallback) {\n        const trimTiles = this._trimTiles;\n        this._trimTiles = false;\n        const list = this._list;\n        const maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n        // Traverse the list only to the sentinel since tiles/nodes to the\n        // right of the sentinel were used this frame.\n        // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n        const sentinel = this._sentinel;\n        let node = list.head;\n        while (node !== sentinel &&\n            (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)) {\n            // @ts-expect-error\n            const tile = node.item;\n            // @ts-expect-error\n            node = node.next;\n            this.unloadTile(tileset, tile, unloadCallback);\n        }\n    }\n    trim() {\n        this._trimTiles = true;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,gCAAgC;AACjE;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,CAAC;EACtBC,KAAK;EACLC,SAAS;EACTC,UAAU;EACVC,WAAWA,CAAA,EAAG;IACV;IACA;IACA,IAAI,CAACH,KAAK,GAAG,IAAIF,gBAAgB,CAAC,CAAC;IACnC,IAAI,CAACG,SAAS,GAAG,IAAI,CAACD,KAAK,CAACI,GAAG,CAAC,UAAU,CAAC;IAC3C,IAAI,CAACF,UAAU,GAAG,KAAK;EAC3B;EACAG,KAAKA,CAAA,EAAG;IACJ;IACA;IACA;IACA,IAAI,CAACL,KAAK,CAACM,MAAM,CAAC,IAAI,CAACN,KAAK,CAACO,IAAI,EAAE,IAAI,CAACN,SAAS,CAAC;EACtD;EACAO,KAAKA,CAACC,IAAI,EAAE;IACR,MAAMC,IAAI,GAAGD,IAAI,CAACE,UAAU;IAC5B,IAAID,IAAI,EAAE;MACN,IAAI,CAACV,KAAK,CAACM,MAAM,CAAC,IAAI,CAACL,SAAS,EAAES,IAAI,CAAC;IAC3C;EACJ;EACAN,GAAGA,CAACQ,OAAO,EAAEH,IAAI,EAAEI,WAAW,EAAE;IAC5B,IAAI,CAACJ,IAAI,CAACE,UAAU,EAAE;MAClBF,IAAI,CAACE,UAAU,GAAG,IAAI,CAACX,KAAK,CAACI,GAAG,CAACK,IAAI,CAAC;MACtC,IAAII,WAAW,EAAE;QACbA,WAAW,CAACD,OAAO,EAAEH,IAAI,CAAC;MAC9B;IACJ;EACJ;EACAK,UAAUA,CAACF,OAAO,EAAEH,IAAI,EAAEM,cAAc,EAAE;IACtC,MAAML,IAAI,GAAGD,IAAI,CAACE,UAAU;IAC5B,IAAI,CAACD,IAAI,EAAE;MACP;IACJ;IACA,IAAI,CAACV,KAAK,CAACgB,MAAM,CAACN,IAAI,CAAC;IACvBD,IAAI,CAACE,UAAU,GAAG,IAAI;IACtB,IAAII,cAAc,EAAE;MAChBA,cAAc,CAACH,OAAO,EAAEH,IAAI,CAAC;IACjC;EACJ;EACAQ,WAAWA,CAACL,OAAO,EAAEG,cAAc,EAAE;IACjC,MAAMG,SAAS,GAAG,IAAI,CAAChB,UAAU;IACjC,IAAI,CAACA,UAAU,GAAG,KAAK;IACvB,MAAMiB,IAAI,GAAG,IAAI,CAACnB,KAAK;IACvB,MAAMoB,yBAAyB,GAAGR,OAAO,CAACS,kBAAkB,GAAG,IAAI,GAAG,IAAI;IAC1E;IACA;IACA;IACA,MAAMC,QAAQ,GAAG,IAAI,CAACrB,SAAS;IAC/B,IAAIS,IAAI,GAAGS,IAAI,CAACI,IAAI;IACpB,OAAOb,IAAI,KAAKY,QAAQ,KACnBV,OAAO,CAACY,qBAAqB,GAAGJ,yBAAyB,IAAIF,SAAS,CAAC,EAAE;MAC1E;MACA,MAAMT,IAAI,GAAGC,IAAI,CAACe,IAAI;MACtB;MACAf,IAAI,GAAGA,IAAI,CAACgB,IAAI;MAChB,IAAI,CAACZ,UAAU,CAACF,OAAO,EAAEH,IAAI,EAAEM,cAAc,CAAC;IAClD;EACJ;EACAY,IAAIA,CAAA,EAAG;IACH,IAAI,CAACzB,UAAU,GAAG,IAAI;EAC1B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}