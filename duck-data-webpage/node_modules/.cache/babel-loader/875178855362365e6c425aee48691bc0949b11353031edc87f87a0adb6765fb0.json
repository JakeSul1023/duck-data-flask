{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { load } from '@loaders.gl/core';\nexport default class Resource {\n  constructor(id, data, context) {\n    this._loadCount = 0;\n    this._subscribers = new Set();\n    this.id = id;\n    this.context = context;\n    this.setData(data);\n  }\n  // consumer: {onChange: Function}\n  subscribe(consumer) {\n    this._subscribers.add(consumer);\n  }\n  unsubscribe(consumer) {\n    this._subscribers.delete(consumer);\n  }\n  inUse() {\n    return this._subscribers.size > 0;\n  }\n  delete() {\n    // Remove any resources created\n  }\n  getData() {\n    return this.isLoaded ? this._error ? Promise.reject(this._error) : this._content : this._loader.then(() => this.getData());\n  }\n  setData(data, forceUpdate) {\n    if (data === this._data && !forceUpdate) {\n      return;\n    }\n    this._data = data;\n    const loadCount = ++this._loadCount;\n    let loader = data;\n    if (typeof data === 'string') {\n      loader = load(data);\n    }\n    if (loader instanceof Promise) {\n      this.isLoaded = false;\n      this._loader = loader.then(result => {\n        // check if source has changed\n        if (this._loadCount === loadCount) {\n          this.isLoaded = true;\n          this._error = undefined;\n          this._content = result;\n        }\n      }).catch(error => {\n        if (this._loadCount === loadCount) {\n          this.isLoaded = true;\n          this._error = error || true;\n        }\n      });\n    } else {\n      this.isLoaded = true;\n      this._error = undefined;\n      this._content = data;\n    }\n    for (const subscriber of this._subscribers) {\n      subscriber.onChange(this.getData());\n    }\n  }\n}\n//# sourceMappingURL=resource.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}