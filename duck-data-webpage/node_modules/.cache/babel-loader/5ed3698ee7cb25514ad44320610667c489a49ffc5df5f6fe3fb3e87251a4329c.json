{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport async function fetchProgress(response, onProgress,\n// TODO better callback types\nonDone = () => {}, onError = () => {}) {\n  response = await response;\n  if (!response.ok) {\n    // ERROR checking needs to be done separately\n    return response;\n  }\n  const body = response.body;\n  if (!body) {\n    // 'ReadableStream not yet supported in this browser.\n    return response;\n  }\n  const contentLength = response.headers.get('content-length') || 0;\n  const totalBytes = contentLength ? parseInt(contentLength) : 0;\n  if (!(totalBytes > 0)) {\n    return response;\n  }\n  // Currently override only implemented in browser\n  if (typeof ReadableStream === 'undefined' || !body.getReader) {\n    return response;\n  }\n  // Create a new stream that invisbly wraps original stream\n  const progressStream = new ReadableStream({\n    async start(controller) {\n      const reader = body.getReader();\n      await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n  });\n  return new Response(progressStream);\n}\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n    loadedBytes += value.byteLength;\n    const percent = Math.round(loadedBytes / totalBytes * 100);\n    onProgress(percent, {\n      loadedBytes,\n      totalBytes\n    });\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}","map":{"version":3,"names":["fetchProgress","response","onProgress","onDone","onError","ok","body","contentLength","headers","get","totalBytes","parseInt","ReadableStream","getReader","progressStream","start","controller","reader","read","Response","loadedBytes","done","value","close","byteLength","percent","Math","round","enqueue","error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/progress/fetch-progress.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport async function fetchProgress(response, onProgress, // TODO better callback types\nonDone = () => { }, onError = () => { }) {\n    response = await response;\n    if (!response.ok) {\n        // ERROR checking needs to be done separately\n        return response;\n    }\n    const body = response.body;\n    if (!body) {\n        // 'ReadableStream not yet supported in this browser.\n        return response;\n    }\n    const contentLength = response.headers.get('content-length') || 0;\n    const totalBytes = contentLength ? parseInt(contentLength) : 0;\n    if (!(totalBytes > 0)) {\n        return response;\n    }\n    // Currently override only implemented in browser\n    if (typeof ReadableStream === 'undefined' || !body.getReader) {\n        return response;\n    }\n    // Create a new stream that invisbly wraps original stream\n    const progressStream = new ReadableStream({\n        async start(controller) {\n            const reader = body.getReader();\n            await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n        }\n    });\n    return new Response(progressStream);\n}\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n    try {\n        const { done, value } = await reader.read();\n        if (done) {\n            onDone();\n            controller.close();\n            return;\n        }\n        loadedBytes += value.byteLength;\n        const percent = Math.round((loadedBytes / totalBytes) * 100);\n        onProgress(percent, { loadedBytes, totalBytes });\n        controller.enqueue(value);\n        await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n    }\n    catch (error) {\n        controller.error(error);\n        onError(error);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,aAAaA,CAACC,QAAQ,EAAEC,UAAU;AAAE;AAC1DC,MAAM,GAAGA,CAAA,KAAM,CAAE,CAAC,EAAEC,OAAO,GAAGA,CAAA,KAAM,CAAE,CAAC,EAAE;EACrCH,QAAQ,GAAG,MAAMA,QAAQ;EACzB,IAAI,CAACA,QAAQ,CAACI,EAAE,EAAE;IACd;IACA,OAAOJ,QAAQ;EACnB;EACA,MAAMK,IAAI,GAAGL,QAAQ,CAACK,IAAI;EAC1B,IAAI,CAACA,IAAI,EAAE;IACP;IACA,OAAOL,QAAQ;EACnB;EACA,MAAMM,aAAa,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC;EACjE,MAAMC,UAAU,GAAGH,aAAa,GAAGI,QAAQ,CAACJ,aAAa,CAAC,GAAG,CAAC;EAC9D,IAAI,EAAEG,UAAU,GAAG,CAAC,CAAC,EAAE;IACnB,OAAOT,QAAQ;EACnB;EACA;EACA,IAAI,OAAOW,cAAc,KAAK,WAAW,IAAI,CAACN,IAAI,CAACO,SAAS,EAAE;IAC1D,OAAOZ,QAAQ;EACnB;EACA;EACA,MAAMa,cAAc,GAAG,IAAIF,cAAc,CAAC;IACtC,MAAMG,KAAKA,CAACC,UAAU,EAAE;MACpB,MAAMC,MAAM,GAAGX,IAAI,CAACO,SAAS,CAAC,CAAC;MAC/B,MAAMK,IAAI,CAACF,UAAU,EAAEC,MAAM,EAAE,CAAC,EAAEP,UAAU,EAAER,UAAU,EAAEC,MAAM,EAAEC,OAAO,CAAC;IAC9E;EACJ,CAAC,CAAC;EACF,OAAO,IAAIe,QAAQ,CAACL,cAAc,CAAC;AACvC;AACA;AACA;AACA;AACA,eAAeI,IAAIA,CAACF,UAAU,EAAEC,MAAM,EAAEG,WAAW,EAAEV,UAAU,EAAER,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC1F,IAAI;IACA,MAAM;MAAEiB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,MAAM,CAACC,IAAI,CAAC,CAAC;IAC3C,IAAIG,IAAI,EAAE;MACNlB,MAAM,CAAC,CAAC;MACRa,UAAU,CAACO,KAAK,CAAC,CAAC;MAClB;IACJ;IACAH,WAAW,IAAIE,KAAK,CAACE,UAAU;IAC/B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEP,WAAW,GAAGV,UAAU,GAAI,GAAG,CAAC;IAC5DR,UAAU,CAACuB,OAAO,EAAE;MAAEL,WAAW;MAAEV;IAAW,CAAC,CAAC;IAChDM,UAAU,CAACY,OAAO,CAACN,KAAK,CAAC;IACzB,MAAMJ,IAAI,CAACF,UAAU,EAAEC,MAAM,EAAEG,WAAW,EAAEV,UAAU,EAAER,UAAU,EAAEC,MAAM,EAAEC,OAAO,CAAC;EACxF,CAAC,CACD,OAAOyB,KAAK,EAAE;IACVb,UAAU,CAACa,KAAK,CAACA,KAAK,CAAC;IACvBzB,OAAO,CAACyB,KAAK,CAAC;EAClB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}