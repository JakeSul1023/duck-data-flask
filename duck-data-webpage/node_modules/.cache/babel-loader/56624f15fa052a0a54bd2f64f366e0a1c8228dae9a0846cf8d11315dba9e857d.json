{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ArrowLikeSchema } from \"./arrow-like-schema.js\";\nimport { deduceTableSchema } from \"../simple-table/table-schema.js\";\nimport { getTableCell, getTableLength, getTableNumCols\n// getTableCell,\n// getTableRowShape,\n// getTableColumnIndex,\n// getTableColumnName,\n// getTableRowAsObject,\n// getTableRowAsArray\n} from \"../simple-table/table-accessors.js\";\nclass ArrowLikeVector {\n  table;\n  columnName;\n  constructor(table, columnName) {\n    this.table = table;\n    this.columnName = columnName;\n  }\n  get(rowIndex) {\n    return getTableCell(this.table, rowIndex, this.columnName);\n  }\n  toArray() {\n    switch (this.table.shape) {\n      case 'arrow-table':\n        const arrowTable = this.table.data;\n        return arrowTable.getChild(this.columnName)?.toArray();\n      case 'columnar-table':\n        return this.table.data[this.columnName];\n      default:\n        throw new Error(this.table.shape);\n    }\n  }\n}\n/**\n * Class that provides an API similar to Apache Arrow Table class\n * Forwards methods directly if the underlying table is Arrow, otherwise calls accessor functions\n */\nexport class ArrowLikeTable {\n  schema;\n  table;\n  constructor(table) {\n    const schema = table.schema || deduceTableSchema(table);\n    this.schema = new ArrowLikeSchema(schema.fields, schema.metadata);\n    this.table = {\n      ...table,\n      schema\n    };\n  }\n  // get schema() {\n  //   return this.table.schema;\n  // }\n  get data() {\n    return this.table.shape === 'geojson-table' ? this.table.features : this.table.data;\n  }\n  get numCols() {\n    return getTableNumCols(this.table);\n  }\n  get length() {\n    return getTableLength(this.table);\n  }\n  getChild(columnName) {\n    return new ArrowLikeVector(this.table, columnName);\n  }\n}","map":{"version":3,"names":["ArrowLikeSchema","deduceTableSchema","getTableCell","getTableLength","getTableNumCols","ArrowLikeVector","table","columnName","constructor","get","rowIndex","toArray","shape","arrowTable","data","getChild","Error","ArrowLikeTable","schema","fields","metadata","features","numCols","length"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/arrow-api/arrow-like-table.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ArrowLikeSchema } from \"./arrow-like-schema.js\";\nimport { deduceTableSchema } from \"../simple-table/table-schema.js\";\nimport { getTableCell, getTableLength, getTableNumCols\n// getTableCell,\n// getTableRowShape,\n// getTableColumnIndex,\n// getTableColumnName,\n// getTableRowAsObject,\n// getTableRowAsArray\n } from \"../simple-table/table-accessors.js\";\nclass ArrowLikeVector {\n    table;\n    columnName;\n    constructor(table, columnName) {\n        this.table = table;\n        this.columnName = columnName;\n    }\n    get(rowIndex) {\n        return getTableCell(this.table, rowIndex, this.columnName);\n    }\n    toArray() {\n        switch (this.table.shape) {\n            case 'arrow-table':\n                const arrowTable = this.table.data;\n                return arrowTable.getChild(this.columnName)?.toArray();\n            case 'columnar-table':\n                return this.table.data[this.columnName];\n            default:\n                throw new Error(this.table.shape);\n        }\n    }\n}\n/**\n * Class that provides an API similar to Apache Arrow Table class\n * Forwards methods directly if the underlying table is Arrow, otherwise calls accessor functions\n */\nexport class ArrowLikeTable {\n    schema;\n    table;\n    constructor(table) {\n        const schema = table.schema || deduceTableSchema(table);\n        this.schema = new ArrowLikeSchema(schema.fields, schema.metadata);\n        this.table = { ...table, schema };\n    }\n    // get schema() {\n    //   return this.table.schema;\n    // }\n    get data() {\n        return this.table.shape === 'geojson-table' ? this.table.features : this.table.data;\n    }\n    get numCols() {\n        return getTableNumCols(this.table);\n    }\n    get length() {\n        return getTableLength(this.table);\n    }\n    getChild(columnName) {\n        return new ArrowLikeVector(this.table, columnName);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,wBAAwB;AACxD,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,YAAY,EAAEC,cAAc,EAAEC;AACvC;AACA;AACA;AACA;AACA;AACA;AAAA,OACQ,oCAAoC;AAC5C,MAAMC,eAAe,CAAC;EAClBC,KAAK;EACLC,UAAU;EACVC,WAAWA,CAACF,KAAK,EAAEC,UAAU,EAAE;IAC3B,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAChC;EACAE,GAAGA,CAACC,QAAQ,EAAE;IACV,OAAOR,YAAY,CAAC,IAAI,CAACI,KAAK,EAAEI,QAAQ,EAAE,IAAI,CAACH,UAAU,CAAC;EAC9D;EACAI,OAAOA,CAAA,EAAG;IACN,QAAQ,IAAI,CAACL,KAAK,CAACM,KAAK;MACpB,KAAK,aAAa;QACd,MAAMC,UAAU,GAAG,IAAI,CAACP,KAAK,CAACQ,IAAI;QAClC,OAAOD,UAAU,CAACE,QAAQ,CAAC,IAAI,CAACR,UAAU,CAAC,EAAEI,OAAO,CAAC,CAAC;MAC1D,KAAK,gBAAgB;QACjB,OAAO,IAAI,CAACL,KAAK,CAACQ,IAAI,CAAC,IAAI,CAACP,UAAU,CAAC;MAC3C;QACI,MAAM,IAAIS,KAAK,CAAC,IAAI,CAACV,KAAK,CAACM,KAAK,CAAC;IACzC;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,cAAc,CAAC;EACxBC,MAAM;EACNZ,KAAK;EACLE,WAAWA,CAACF,KAAK,EAAE;IACf,MAAMY,MAAM,GAAGZ,KAAK,CAACY,MAAM,IAAIjB,iBAAiB,CAACK,KAAK,CAAC;IACvD,IAAI,CAACY,MAAM,GAAG,IAAIlB,eAAe,CAACkB,MAAM,CAACC,MAAM,EAAED,MAAM,CAACE,QAAQ,CAAC;IACjE,IAAI,CAACd,KAAK,GAAG;MAAE,GAAGA,KAAK;MAAEY;IAAO,CAAC;EACrC;EACA;EACA;EACA;EACA,IAAIJ,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACR,KAAK,CAACM,KAAK,KAAK,eAAe,GAAG,IAAI,CAACN,KAAK,CAACe,QAAQ,GAAG,IAAI,CAACf,KAAK,CAACQ,IAAI;EACvF;EACA,IAAIQ,OAAOA,CAAA,EAAG;IACV,OAAOlB,eAAe,CAAC,IAAI,CAACE,KAAK,CAAC;EACtC;EACA,IAAIiB,MAAMA,CAAA,EAAG;IACT,OAAOpB,cAAc,CAAC,IAAI,CAACG,KAAK,CAAC;EACrC;EACAS,QAAQA,CAACR,UAAU,EAAE;IACjB,OAAO,IAAIF,eAAe,CAAC,IAAI,CAACC,KAAK,EAAEC,UAAU,CAAC;EACtD;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}