{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(object, recursive = true, transfers) {\n  // Make sure that items in the transfer list is unique\n  const transfersSet = transfers || new Set();\n  if (!object) {\n    // ignore\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n    // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n    // Do not iterate through the content in this case\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  // @ts-ignore\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}\n/**\n * Recursively drop non serializable values like functions and regexps.\n * @param object\n */\nexport function getTransferListForWriter(object) {\n  if (object === null) {\n    return {};\n  }\n  const clone = Object.assign({}, object);\n  Object.keys(clone).forEach(key => {\n    // Typed Arrays and Arrays are passed with no change\n    if (typeof object[key] === 'object' && !ArrayBuffer.isView(object[key]) && !(object[key] instanceof Array)) {\n      clone[key] = getTransferListForWriter(object[key]);\n    } else if (typeof clone[key] === 'function' || clone[key] instanceof RegExp) {\n      clone[key] = {};\n    } else {\n      clone[key] = object[key];\n    }\n  });\n  return clone;\n}","map":{"version":3,"names":["getTransferList","object","recursive","transfers","transfersSet","Set","isTransferable","add","buffer","ArrayBuffer","isView","key","undefined","Array","from","MessagePort","ImageBitmap","OffscreenCanvas","getTransferListForWriter","clone","Object","assign","keys","forEach","RegExp"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-transfer-list.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(object, recursive = true, transfers) {\n    // Make sure that items in the transfer list is unique\n    const transfersSet = transfers || new Set();\n    if (!object) {\n        // ignore\n    }\n    else if (isTransferable(object)) {\n        transfersSet.add(object);\n    }\n    else if (isTransferable(object.buffer)) {\n        // Typed array\n        transfersSet.add(object.buffer);\n    }\n    else if (ArrayBuffer.isView(object)) {\n        // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n        // Do not iterate through the content in this case\n    }\n    else if (recursive && typeof object === 'object') {\n        for (const key in object) {\n            // Avoid perf hit - only go one level deep\n            getTransferList(object[key], recursive, transfersSet);\n        }\n    }\n    // If transfers is defined, is internal recursive call\n    // Otherwise it's called by the user\n    return transfers === undefined ? Array.from(transfersSet) : [];\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object) {\n    if (!object) {\n        return false;\n    }\n    if (object instanceof ArrayBuffer) {\n        return true;\n    }\n    if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n        return true;\n    }\n    if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n        return true;\n    }\n    // @ts-ignore\n    if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n        return true;\n    }\n    return false;\n}\n/**\n * Recursively drop non serializable values like functions and regexps.\n * @param object\n */\nexport function getTransferListForWriter(object) {\n    if (object === null) {\n        return {};\n    }\n    const clone = Object.assign({}, object);\n    Object.keys(clone).forEach((key) => {\n        // Typed Arrays and Arrays are passed with no change\n        if (typeof object[key] === 'object' &&\n            !ArrayBuffer.isView(object[key]) &&\n            !(object[key] instanceof Array)) {\n            clone[key] = getTransferListForWriter(object[key]);\n        }\n        else if (typeof clone[key] === 'function' || clone[key] instanceof RegExp) {\n            clone[key] = {};\n        }\n        else {\n            clone[key] = object[key];\n        }\n    });\n    return clone;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,MAAM,EAAEC,SAAS,GAAG,IAAI,EAAEC,SAAS,EAAE;EACjE;EACA,MAAMC,YAAY,GAAGD,SAAS,IAAI,IAAIE,GAAG,CAAC,CAAC;EAC3C,IAAI,CAACJ,MAAM,EAAE;IACT;EAAA,CACH,MACI,IAAIK,cAAc,CAACL,MAAM,CAAC,EAAE;IAC7BG,YAAY,CAACG,GAAG,CAACN,MAAM,CAAC;EAC5B,CAAC,MACI,IAAIK,cAAc,CAACL,MAAM,CAACO,MAAM,CAAC,EAAE;IACpC;IACAJ,YAAY,CAACG,GAAG,CAACN,MAAM,CAACO,MAAM,CAAC;EACnC,CAAC,MACI,IAAIC,WAAW,CAACC,MAAM,CAACT,MAAM,CAAC,EAAE;IACjC;IACA;EAAA,CACH,MACI,IAAIC,SAAS,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC9C,KAAK,MAAMU,GAAG,IAAIV,MAAM,EAAE;MACtB;MACAD,eAAe,CAACC,MAAM,CAACU,GAAG,CAAC,EAAET,SAAS,EAAEE,YAAY,CAAC;IACzD;EACJ;EACA;EACA;EACA,OAAOD,SAAS,KAAKS,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACV,YAAY,CAAC,GAAG,EAAE;AAClE;AACA;AACA,SAASE,cAAcA,CAACL,MAAM,EAAE;EAC5B,IAAI,CAACA,MAAM,EAAE;IACT,OAAO,KAAK;EAChB;EACA,IAAIA,MAAM,YAAYQ,WAAW,EAAE;IAC/B,OAAO,IAAI;EACf;EACA,IAAI,OAAOM,WAAW,KAAK,WAAW,IAAId,MAAM,YAAYc,WAAW,EAAE;IACrE,OAAO,IAAI;EACf;EACA,IAAI,OAAOC,WAAW,KAAK,WAAW,IAAIf,MAAM,YAAYe,WAAW,EAAE;IACrE,OAAO,IAAI;EACf;EACA;EACA,IAAI,OAAOC,eAAe,KAAK,WAAW,IAAIhB,MAAM,YAAYgB,eAAe,EAAE;IAC7E,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACjB,MAAM,EAAE;EAC7C,IAAIA,MAAM,KAAK,IAAI,EAAE;IACjB,OAAO,CAAC,CAAC;EACb;EACA,MAAMkB,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEpB,MAAM,CAAC;EACvCmB,MAAM,CAACE,IAAI,CAACH,KAAK,CAAC,CAACI,OAAO,CAAEZ,GAAG,IAAK;IAChC;IACA,IAAI,OAAOV,MAAM,CAACU,GAAG,CAAC,KAAK,QAAQ,IAC/B,CAACF,WAAW,CAACC,MAAM,CAACT,MAAM,CAACU,GAAG,CAAC,CAAC,IAChC,EAAEV,MAAM,CAACU,GAAG,CAAC,YAAYE,KAAK,CAAC,EAAE;MACjCM,KAAK,CAACR,GAAG,CAAC,GAAGO,wBAAwB,CAACjB,MAAM,CAACU,GAAG,CAAC,CAAC;IACtD,CAAC,MACI,IAAI,OAAOQ,KAAK,CAACR,GAAG,CAAC,KAAK,UAAU,IAAIQ,KAAK,CAACR,GAAG,CAAC,YAAYa,MAAM,EAAE;MACvEL,KAAK,CAACR,GAAG,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC,MACI;MACDQ,KAAK,CAACR,GAAG,CAAC,GAAGV,MAAM,CAACU,GAAG,CAAC;IAC5B;EACJ,CAAC,CAAC;EACF,OAAOQ,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}