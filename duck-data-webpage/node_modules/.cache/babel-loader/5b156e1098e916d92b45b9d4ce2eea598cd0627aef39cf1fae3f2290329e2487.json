{"ast":null,"code":"import { concatenateArrayBuffers } from '@loaders.gl/loader-utils';\nexport const signature = new Uint8Array([0x01, 0x00]);\n/**\n * creates zip64 extra field\n * @param options info that can be placed into zip64 field\n * @returns buffer with field\n */\nexport function createZip64Info(options) {\n  const optionsToUse = {\n    ...options,\n    zip64Length: (options.offset ? 1 : 0) * 8 + (options.size ? 1 : 0) * 16\n  };\n  const arraysToConcat = [];\n  for (const field of ZIP64_FIELDS) {\n    if (!optionsToUse[field.name ?? ''] && !field.default) {\n      continue; // eslint-disable-line no-continue\n    }\n    const newValue = new DataView(new ArrayBuffer(field.size));\n    NUMBER_SETTERS[field.size](newValue, 0, optionsToUse[field.name ?? ''] ?? field.default);\n    arraysToConcat.push(newValue.buffer);\n  }\n  return concatenateArrayBuffers(...arraysToConcat);\n}\n/**\n * Writes values into buffer according to the bytes amount\n * @param header header where to write the data\n * @param fieldSize size of the field in bytes\n * @param fieldOffset offset of the field\n * @param value value to be written\n */\nexport function setFieldToNumber(header, fieldSize, fieldOffset, value) {\n  NUMBER_SETTERS[fieldSize](header, Number(fieldOffset), value);\n}\n/** functions to write values into buffer according to the bytes amount */\nconst NUMBER_SETTERS = {\n  2: (header, offset, value) => {\n    header.setUint16(offset, Number(value > 0xffff ? 0xffff : value), true);\n  },\n  4: (header, offset, value) => {\n    header.setUint32(offset, Number(value > 0xffffffff ? 0xffffffff : value), true);\n  },\n  8: (header, offset, value) => {\n    header.setBigUint64(offset, BigInt(value), true);\n  }\n};\n/** zip64 info fields description, we need it as a pattern to build a zip64 info */\nconst ZIP64_FIELDS = [\n// Header ID 0x0001\n{\n  size: 2,\n  default: new DataView(signature.buffer).getUint16(0, true)\n},\n// Size of the extra field chunk (8, 16, 24 or 28)\n{\n  size: 2,\n  name: 'zip64Length'\n},\n// Original uncompressed file size\n{\n  size: 8,\n  name: 'size'\n},\n// Size of compressed data\n{\n  size: 8,\n  name: 'size'\n},\n// Offset of local header record\n{\n  size: 8,\n  name: 'offset'\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}