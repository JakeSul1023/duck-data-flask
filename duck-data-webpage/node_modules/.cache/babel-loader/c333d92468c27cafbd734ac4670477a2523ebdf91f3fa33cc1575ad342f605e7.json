{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport Transition from \"./transition.js\";\nimport { cloneAttribute, getAttributeBufferLength } from \"./gpu-transition-utils.js\";\nexport class GPUTransitionBase {\n  constructor(_ref) {\n    let {\n      device,\n      attribute,\n      timeline\n    } = _ref;\n    this.buffers = [];\n    /** The vertex count of the last buffer.\n     * Buffer may be larger than the actual length we want to use\n     * because we only reallocate buffers when they grow, not when they shrink,\n     * due to performance costs */\n    this.currentLength = 0;\n    this.device = device;\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = cloneAttribute(attribute);\n    this.currentStartIndices = attribute.startIndices;\n  }\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n  start(transitionSettings, numInstances) {\n    let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n    this.settings = transitionSettings;\n    this.currentStartIndices = this.attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(this.attribute, numInstances);\n    this.transition.start({\n      ...transitionSettings,\n      duration\n    });\n  }\n  update() {\n    const updated = this.transition.update();\n    if (updated) {\n      this.onUpdate();\n    }\n    return updated;\n  }\n  setBuffer(buffer) {\n    this.attributeInTransition.setData({\n      buffer,\n      normalized: this.attribute.settings.normalized,\n      // Retain placeholder value to generate correct shader layout\n      value: this.attributeInTransition.value\n    });\n  }\n  cancel() {\n    this.transition.cancel();\n  }\n  delete() {\n    this.cancel();\n    for (const buffer of this.buffers) {\n      buffer.destroy();\n    }\n    this.buffers.length = 0;\n  }\n}\n//# sourceMappingURL=gpu-transition.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}