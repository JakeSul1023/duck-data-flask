{"ast":null,"code":"/**\n * Checks if bigint can be converted to number and convert it if possible\n * @param bigint bigint to be converted\n * @returns number\n */\nconst toNumber = bigint => {\n  if (bigint > Number.MAX_SAFE_INTEGER) {\n    throw new Error('Offset is out of bounds');\n  }\n  return Number(bigint);\n};\n/**\n * Provides file data using DataView\n * @deprecated - will be replaced with ReadableFile\n */\nexport class DataViewFile {\n  /** The DataView from which data is provided */\n  file;\n  constructor(file) {\n    this.file = file;\n  }\n  async destroy() {}\n  /**\n   * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint8(offset) {\n    return this.file.getUint8(toNumber(offset));\n  }\n  /**\n   * Gets an unsigned 16-bit intege at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint16(offset) {\n    return this.file.getUint16(toNumber(offset), true);\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint32(offset) {\n    return this.file.getUint32(toNumber(offset), true);\n  }\n  /**\n   * Gets an unsigned 64-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getBigUint64(offset) {\n    return this.file.getBigUint64(toNumber(offset), true);\n  }\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in bytes, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  async slice(startOffset, endOffset) {\n    return this.file.buffer.slice(toNumber(startOffset), toNumber(endOffset));\n  }\n  /** the length (in bytes) of the data. */\n  get length() {\n    return BigInt(this.file.byteLength);\n  }\n}","map":{"version":3,"names":["toNumber","bigint","Number","MAX_SAFE_INTEGER","Error","DataViewFile","file","constructor","destroy","getUint8","offset","getUint16","getUint32","getBigUint64","slice","startOffset","endOffset","buffer","length","BigInt","byteLength"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/loader-utils/dist/lib/file-provider/data-view-file.js"],"sourcesContent":["/**\n * Checks if bigint can be converted to number and convert it if possible\n * @param bigint bigint to be converted\n * @returns number\n */\nconst toNumber = (bigint) => {\n    if (bigint > Number.MAX_SAFE_INTEGER) {\n        throw new Error('Offset is out of bounds');\n    }\n    return Number(bigint);\n};\n/**\n * Provides file data using DataView\n * @deprecated - will be replaced with ReadableFile\n */\nexport class DataViewFile {\n    /** The DataView from which data is provided */\n    file;\n    constructor(file) {\n        this.file = file;\n    }\n    async destroy() { }\n    /**\n     * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint8(offset) {\n        return this.file.getUint8(toNumber(offset));\n    }\n    /**\n     * Gets an unsigned 16-bit intege at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint16(offset) {\n        return this.file.getUint16(toNumber(offset), true);\n    }\n    /**\n     * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint32(offset) {\n        return this.file.getUint32(toNumber(offset), true);\n    }\n    /**\n     * Gets an unsigned 64-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getBigUint64(offset) {\n        return this.file.getBigUint64(toNumber(offset), true);\n    }\n    /**\n     * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n     * @param startOffset The offset, in bytes, from the start of the file where to start reading the data.\n     * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n     */\n    async slice(startOffset, endOffset) {\n        return this.file.buffer.slice(toNumber(startOffset), toNumber(endOffset));\n    }\n    /** the length (in bytes) of the data. */\n    get length() {\n        return BigInt(this.file.byteLength);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAIC,MAAM,IAAK;EACzB,IAAIA,MAAM,GAAGC,MAAM,CAACC,gBAAgB,EAAE;IAClC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C;EACA,OAAOF,MAAM,CAACD,MAAM,CAAC;AACzB,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,CAAC;EACtB;EACAC,IAAI;EACJC,WAAWA,CAACD,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACA,MAAME,OAAOA,CAAA,EAAG,CAAE;EAClB;AACJ;AACA;AACA;EACI,MAAMC,QAAQA,CAACC,MAAM,EAAE;IACnB,OAAO,IAAI,CAACJ,IAAI,CAACG,QAAQ,CAACT,QAAQ,CAACU,MAAM,CAAC,CAAC;EAC/C;EACA;AACJ;AACA;AACA;EACI,MAAMC,SAASA,CAACD,MAAM,EAAE;IACpB,OAAO,IAAI,CAACJ,IAAI,CAACK,SAAS,CAACX,QAAQ,CAACU,MAAM,CAAC,EAAE,IAAI,CAAC;EACtD;EACA;AACJ;AACA;AACA;EACI,MAAME,SAASA,CAACF,MAAM,EAAE;IACpB,OAAO,IAAI,CAACJ,IAAI,CAACM,SAAS,CAACZ,QAAQ,CAACU,MAAM,CAAC,EAAE,IAAI,CAAC;EACtD;EACA;AACJ;AACA;AACA;EACI,MAAMG,YAAYA,CAACH,MAAM,EAAE;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACO,YAAY,CAACb,QAAQ,CAACU,MAAM,CAAC,EAAE,IAAI,CAAC;EACzD;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMI,KAAKA,CAACC,WAAW,EAAEC,SAAS,EAAE;IAChC,OAAO,IAAI,CAACV,IAAI,CAACW,MAAM,CAACH,KAAK,CAACd,QAAQ,CAACe,WAAW,CAAC,EAAEf,QAAQ,CAACgB,SAAS,CAAC,CAAC;EAC7E;EACA;EACA,IAAIE,MAAMA,CAAA,EAAG;IACT,OAAOC,MAAM,CAAC,IAAI,CAACb,IAAI,CAACc,UAAU,CAAC;EACvC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}