{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport async function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(modelNode => {\n      // TODO v9 getUnforms() was removed, hack it with props.uniforms\n      Object.values(modelNode.model.uniforms).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}","map":{"version":3,"names":["waitForGLTFAssets","gltfObjects","remaining","scenes","forEach","scene","traverse","modelNode","Object","values","model","uniforms","uniform","loaded","push","waitWhileCondition","some","condition","Promise","resolve","requestAnimationFrame"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\mesh-layers\\src\\scenegraph-layer\\gltf-utils.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* global requestAnimationFrame */\nimport type {GroupNode, ScenegraphNode, ModelNode} from '@luma.gl/engine';\n\nexport async function waitForGLTFAssets(gltfObjects: {scenes: GroupNode[]}): Promise<void> {\n  const remaining: any[] = [];\n\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse((modelNode: ScenegraphNode) => {\n      // TODO v9 getUnforms() was removed, hack it with props.uniforms\n      Object.values((modelNode as ModelNode).model.uniforms).forEach((uniform: any) => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition: () => boolean): Promise<void> {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAKA,OAAO,eAAeA,iBAAiBA,CAACC,WAAkC;EACxE,MAAMC,SAAS,GAAU,EAAE;EAE3BD,WAAW,CAACE,MAAM,CAACC,OAAO,CAACC,KAAK,IAAG;IACjCA,KAAK,CAACC,QAAQ,CAAEC,SAAyB,IAAI;MAC3C;MACAC,MAAM,CAACC,MAAM,CAAEF,SAAuB,CAACG,KAAK,CAACC,QAAQ,CAAC,CAACP,OAAO,CAAEQ,OAAY,IAAI;QAC9E,IAAIA,OAAO,CAACC,MAAM,KAAK,KAAK,EAAE;UAC5BX,SAAS,CAACY,IAAI,CAACF,OAAO,CAAC;QACzB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO,MAAMG,kBAAkB,CAAC,MAAMb,SAAS,CAACc,IAAI,CAACJ,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,CAAC,CAAC;AACnF;AAEA,eAAeE,kBAAkBA,CAACE,SAAwB;EACxD,OAAOA,SAAS,EAAE,EAAE;IAClB,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,qBAAqB,CAACD,OAAO,CAAC,CAAC;EAC9D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}