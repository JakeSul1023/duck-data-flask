{"ast":null,"code":"import DRACOBuilder from \"./lib/draco-builder.js\";\nimport { loadDracoEncoderModule } from \"./lib/draco-module-loader.js\";\nimport { VERSION } from \"./lib/utils/version.js\";\nconst DEFAULT_DRACO_WRITER_OPTIONS = {\n  pointcloud: false,\n  // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING', // Use draco defaults\n  // speed: [5, 5], // Use draco defaults\n  // quantization: { // Use draco defaults\n  //   POSITION: 10\n  // }\n};\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  options: {\n    draco: DEFAULT_DRACO_WRITER_OPTIONS\n  },\n  encode\n};\nasync function encode(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Dynamically load draco\n  const {\n    draco\n  } = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}