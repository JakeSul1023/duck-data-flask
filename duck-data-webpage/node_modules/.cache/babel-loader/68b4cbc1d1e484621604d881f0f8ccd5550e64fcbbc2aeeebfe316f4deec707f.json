{"ast":null,"code":"// @eslint-disable\n// @ts-nocheck\nimport * as glMatrix from './common.js';\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n/**\n * Creates a new identity mat4\n *\n * @returns a new 4x4 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n  out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n  out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n  out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n  out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n  out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n  out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n  out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n  out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n  out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n  out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n  out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n  out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n  out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n  out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n  out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n  out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n  const b0 = a00 * a11 - a01 * a10;\n  const b1 = a00 * a12 - a02 * a10;\n  const b2 = a01 * a12 - a02 * a11;\n  const b3 = a20 * a31 - a21 * a30;\n  const b4 = a20 * a32 - a22 * a30;\n  const b5 = a21 * a32 - a22 * a31;\n  const b6 = a00 * b5 - a01 * b4 + a02 * b3;\n  const b7 = a10 * b5 - a11 * b4 + a12 * b3;\n  const b8 = a20 * b2 - a21 * b1 + a22 * b0;\n  const b9 = a30 * b2 - a31 * b1 + a32 * b0;\n  // Calculate the determinant\n  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n  // Cache only the current line of the second matrix\n  let b0 = b[0];\n  let b1 = b[1];\n  let b2 = b[2];\n  let b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n  let b00;\n  let b01;\n  let b02;\n  let b10;\n  let b11;\n  let b12;\n  let b20;\n  let b21;\n  let b22;\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  // Perform axis-specific matrix multiplication\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  const translation = new glMatrix.ARRAY_TYPE(3);\n  const bx = -a[0];\n  const by = -a[1];\n  const bz = -a[2];\n  const bw = a[3];\n  const ax = a[4];\n  const ay = a[5];\n  const az = a[6];\n  const aw = a[7];\n  const magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  // Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  const scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  const is1 = 1 / scaling[0];\n  const is2 = 1 / scaling[1];\n  const is3 = 1 / scaling[2];\n  const sm11 = mat[0] * is1;\n  const sm12 = mat[1] * is2;\n  const sm13 = mat[2] * is3;\n  const sm21 = mat[4] * is1;\n  const sm22 = mat[5] * is2;\n  const sm23 = mat[6] * is3;\n  const sm31 = mat[8] * is1;\n  const sm32 = mat[9] * is2;\n  const sm33 = mat[10] * is3;\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n  return out;\n}\n/**\n * Decomposes a transformation matrix into its rotation, translation\n * and scale components. Returns only the rotation component\n * @param  {quat} out_r Quaternion to receive the rotation component\n * @param  {vec3} out_t Vector to receive the translation vector\n * @param  {vec3} out_s Vector to receive the scaling factor\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @returns {quat} out_r\n */\nexport function decompose(out_r, out_t, out_s, mat) {\n  out_t[0] = mat[12];\n  out_t[1] = mat[13];\n  out_t[2] = mat[14];\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n  out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  const is1 = 1 / out_s[0];\n  const is2 = 1 / out_s[1];\n  const is3 = 1 / out_s[2];\n  const sm11 = m11 * is1;\n  const sm12 = m12 * is2;\n  const sm13 = m13 * is3;\n  const sm21 = m21 * is1;\n  const sm22 = m22 * is2;\n  const sm23 = m23 * is3;\n  const sm31 = m31 * is1;\n  const sm32 = m32 * is2;\n  const sm33 = m33 * is3;\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out_r[3] = 0.25 * S;\n    out_r[0] = (sm23 - sm32) / S;\n    out_r[1] = (sm31 - sm13) / S;\n    out_r[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out_r[3] = (sm23 - sm32) / S;\n    out_r[0] = 0.25 * S;\n    out_r[1] = (sm12 + sm21) / S;\n    out_r[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out_r[3] = (sm31 - sm13) / S;\n    out_r[0] = (sm12 + sm21) / S;\n    out_r[1] = 0.25 * S;\n    out_r[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out_r[3] = (sm12 - sm21) / S;\n    out_r[0] = (sm31 + sm13) / S;\n    out_r[1] = (sm23 + sm32) / S;\n    out_r[2] = 0.25 * S;\n  }\n  return out_r;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n  const ox = o[0];\n  const oy = o[1];\n  const oz = o[2];\n  const out0 = (1 - (yy + zz)) * sx;\n  const out1 = (xy + wz) * sx;\n  const out2 = (xz - wy) * sx;\n  const out4 = (xy - wz) * sy;\n  const out5 = (1 - (xx + zz)) * sy;\n  const out6 = (yz + wx) * sy;\n  const out8 = (xz + wy) * sz;\n  const out9 = (yz - wx) * sz;\n  const out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  const rl = 1 / (right - left);\n  const tb = 1 / (top - bottom);\n  const nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\nexport const perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  const upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  const downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  const leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  const rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  const xScale = 2.0 / (leftTan + rightTan);\n  const yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\nexport const ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let len;\n  let x0;\n  let x1;\n  let x2;\n  let y0;\n  let y1;\n  let y2;\n  let z0;\n  let z1;\n  let z2;\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n  const centerx = center[0];\n  const centery = center[1];\n  const centerz = center[2];\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n  let z0 = eyex - target[0];\n  let z1 = eyey - target[1];\n  let z2 = eyez - target[2];\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n  let x0 = upy * z2 - upz * z1;\n  let x1 = upz * z0 - upx * z2;\n  let x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]}, ${a[9]}, ${a[10]}, ${a[11]}, ${a[12]}, ${a[13]}, ${a[14]}, ${a[15]})`;\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + a[6] * a[6] + a[7] * a[7] + a[8] * a[8] + a[9] * a[9] + a[10] * a[10] + a[11] * a[11] + a[12] * a[12] + a[13] * a[13] + a[14] * a[14] + a[15] * a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const a9 = a[9];\n  const a10 = a[10];\n  const a11 = a[11];\n  const a12 = a[12];\n  const a13 = a[13];\n  const a14 = a[14];\n  const a15 = a[15];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  const b9 = b[9];\n  const b10 = b[10];\n  const b11 = b[11];\n  const b12 = b[12];\n  const b13 = b[13];\n  const b14 = b[14];\n  const b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","multiply","b","translate","v","x","y","z","scale","rotate","rad","axis","len","Math","sqrt","c","s","t","b12","b20","b21","b22","EPSILON","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","decompose","out_r","out_t","out_s","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","PI","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b13","b14","b15","max","mul","sub"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\gl-matrix\\mat4.ts"],"sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns a new 4x4 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(\n  out,\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n  out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n  out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n  out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n  out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n  out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n  out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n  out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n  out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n  out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n  out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n  out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n  out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n  out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n  out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n  out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b0 = a00 * a11 - a01 * a10;\n  const b1 = a00 * a12 - a02 * a10;\n  const b2 = a01 * a12 - a02 * a11;\n  const b3 = a20 * a31 - a21 * a30;\n  const b4 = a20 * a32 - a22 * a30;\n  const b5 = a21 * a32 - a22 * a31;\n  const b6 = a00 * b5 - a01 * b4 + a02 * b3;\n  const b7 = a10 * b5 - a11 * b4 + a12 * b3;\n  const b8 = a20 * b2 - a21 * b1 + a22 * b0;\n  const b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n  // Calculate the determinant\n  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0 = b[0];\n  let b1 = b[1];\n  let b2 = b[2];\n  let b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n  let b00;\n  let b01;\n  let b02;\n  let b10;\n  let b11;\n  let b12;\n  let b20;\n  let b21;\n  let b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  const translation = new glMatrix.ARRAY_TYPE(3);\n  const bx = -a[0];\n  const by = -a[1];\n  const bz = -a[2];\n  const bw = a[3];\n  const ax = a[4];\n  const ay = a[5];\n  const az = a[6];\n  const aw = a[7];\n\n  const magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  // Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\n    translation[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\n    translation[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  const scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n\n  const is1 = 1 / scaling[0];\n  const is2 = 1 / scaling[1];\n  const is3 = 1 / scaling[2];\n\n  const sm11 = mat[0] * is1;\n  const sm12 = mat[1] * is2;\n  const sm13 = mat[2] * is3;\n  const sm21 = mat[4] * is1;\n  const sm22 = mat[5] * is2;\n  const sm23 = mat[6] * is3;\n  const sm31 = mat[8] * is1;\n  const sm32 = mat[9] * is2;\n  const sm33 = mat[10] * is3;\n\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Decomposes a transformation matrix into its rotation, translation\n * and scale components. Returns only the rotation component\n * @param  {quat} out_r Quaternion to receive the rotation component\n * @param  {vec3} out_t Vector to receive the translation vector\n * @param  {vec3} out_s Vector to receive the scaling factor\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @returns {quat} out_r\n */\nexport function decompose(out_r, out_t, out_s, mat) {\n  out_t[0] = mat[12];\n  out_t[1] = mat[13];\n  out_t[2] = mat[14];\n\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n\n  out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  const is1 = 1 / out_s[0];\n  const is2 = 1 / out_s[1];\n  const is3 = 1 / out_s[2];\n\n  const sm11 = m11 * is1;\n  const sm12 = m12 * is2;\n  const sm13 = m13 * is3;\n  const sm21 = m21 * is1;\n  const sm22 = m22 * is2;\n  const sm23 = m23 * is3;\n  const sm31 = m31 * is1;\n  const sm32 = m32 * is2;\n  const sm33 = m33 * is3;\n\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out_r[3] = 0.25 * S;\n    out_r[0] = (sm23 - sm32) / S;\n    out_r[1] = (sm31 - sm13) / S;\n    out_r[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out_r[3] = (sm23 - sm32) / S;\n    out_r[0] = 0.25 * S;\n    out_r[1] = (sm12 + sm21) / S;\n    out_r[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out_r[3] = (sm31 - sm13) / S;\n    out_r[0] = (sm12 + sm21) / S;\n    out_r[1] = 0.25 * S;\n    out_r[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out_r[3] = (sm12 - sm21) / S;\n    out_r[0] = (sm31 + sm13) / S;\n    out_r[1] = (sm23 + sm32) / S;\n    out_r[2] = 0.25 * S;\n  }\n\n  return out_r;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  const ox = o[0];\n  const oy = o[1];\n  const oz = o[2];\n\n  const out0 = (1 - (yy + zz)) * sx;\n  const out1 = (xy + wz) * sx;\n  const out2 = (xz - wy) * sx;\n  const out4 = (xy - wz) * sy;\n  const out5 = (1 - (xx + zz)) * sy;\n  const out6 = (yz + wx) * sy;\n  const out8 = (xz + wy) * sz;\n  const out9 = (yz - wx) * sz;\n  const out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  const rl = 1 / (right - left);\n  const tb = 1 / (top - bottom);\n  const nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\nexport const perspective = perspectiveNO;\n\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n  const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n  const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n  const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n  const xScale = 2.0 / (leftTan + rightTan);\n  const yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\nexport const ortho = orthoNO;\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let len;\n  let x0;\n  let x1;\n  let x2;\n  let y0;\n  let y1;\n  let y2;\n  let z0;\n  let z1;\n  let z2;\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n  const centerx = center[0];\n  const centery = center[1];\n  const centerz = center[2];\n\n  if (\n    Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n    Math.abs(eyey - centery) < glMatrix.EPSILON &&\n    Math.abs(eyez - centerz) < glMatrix.EPSILON\n  ) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n\n  let z0 = eyex - target[0];\n  let z1 = eyey - target[1];\n  let z2 = eyez - target[2];\n\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1;\n  let x1 = upz * z0 - upx * z2;\n  let x2 = upx * z1 - upy * z0;\n\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]}, ${a[9]}, ${a[10]}, ${a[11]}, ${a[12]}, ${a[13]}, ${a[14]}, ${a[15]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(\n    a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8] +\n      a[9] * a[9] +\n      a[10] * a[10] +\n      a[11] * a[11] +\n      a[12] * a[12] +\n      a[13] * a[13] +\n      a[14] * a[14] +\n      a[15] * a[15]\n  );\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7] &&\n    a[8] === b[8] &&\n    a[9] === b[9] &&\n    a[10] === b[10] &&\n    a[11] === b[11] &&\n    a[12] === b[12] &&\n    a[13] === b[13] &&\n    a[14] === b[14] &&\n    a[15] === b[15]\n  );\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const a9 = a[9];\n  const a10 = a[10];\n  const a11 = a[11];\n  const a12 = a[12];\n  const a13 = a[13];\n  const a14 = a[14];\n  const a15 = a[15];\n\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  const b9 = b[9];\n  const b10 = b[10];\n  const b11 = b[11];\n  const b12 = b[12];\n  const b13 = b[13];\n  const b14 = b[14];\n  const b15 = b[15];\n\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n    Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n    Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n    Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n    Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n    Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n    Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n    Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15))\n  );\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n"],"mappings":"AAAA;AACA;AAEA,OAAO,KAAKA,QAAQ,MAAM,aAAa;AAEvC;;;;AAKA;;;;;AAKA,OAAM,SAAUC,MAAMA,CAAA;EACpB,MAAMC,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,EAAE,CAAC;EACvC,IAAIH,QAAQ,CAACG,UAAU,IAAIC,YAAY,EAAE;IACvCF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;IACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;IACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;IACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACb;EACAA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUG,KAAKA,CAACC,CAAC;EACrB,MAAMJ,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,EAAE,CAAC;EACvCD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACf,OAAOJ,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUK,IAAIA,CAACL,GAAG,EAAEI,CAAC;EACzBJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACf,OAAOJ,GAAG;AACZ;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAM,SAAUM,UAAUA,CACxBC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG;EAEH,MAAMtB,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,EAAE,CAAC;EACvCD,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG;EACZP,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG;EACZR,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;EACZT,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG;EACZV,GAAG,CAAC,CAAC,CAAC,GAAGW,GAAG;EACZX,GAAG,CAAC,CAAC,CAAC,GAAGY,GAAG;EACZZ,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG;EACZb,GAAG,CAAC,CAAC,CAAC,GAAGc,GAAG;EACZd,GAAG,CAAC,CAAC,CAAC,GAAGe,GAAG;EACZf,GAAG,CAAC,CAAC,CAAC,GAAGgB,GAAG;EACZhB,GAAG,CAAC,EAAE,CAAC,GAAGiB,GAAG;EACbjB,GAAG,CAAC,EAAE,CAAC,GAAGkB,GAAG;EACblB,GAAG,CAAC,EAAE,CAAC,GAAGmB,GAAG;EACbnB,GAAG,CAAC,EAAE,CAAC,GAAGoB,GAAG;EACbpB,GAAG,CAAC,EAAE,CAAC,GAAGqB,GAAG;EACbrB,GAAG,CAAC,EAAE,CAAC,GAAGsB,GAAG;EACb,OAAOtB,GAAG;AACZ;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUuB,GAAGA,CACjBvB,GAAG,EACHO,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG;EAEHtB,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG;EACZP,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG;EACZR,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;EACZT,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG;EACZV,GAAG,CAAC,CAAC,CAAC,GAAGW,GAAG;EACZX,GAAG,CAAC,CAAC,CAAC,GAAGY,GAAG;EACZZ,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG;EACZb,GAAG,CAAC,CAAC,CAAC,GAAGc,GAAG;EACZd,GAAG,CAAC,CAAC,CAAC,GAAGe,GAAG;EACZf,GAAG,CAAC,CAAC,CAAC,GAAGgB,GAAG;EACZhB,GAAG,CAAC,EAAE,CAAC,GAAGiB,GAAG;EACbjB,GAAG,CAAC,EAAE,CAAC,GAAGkB,GAAG;EACblB,GAAG,CAAC,EAAE,CAAC,GAAGmB,GAAG;EACbnB,GAAG,CAAC,EAAE,CAAC,GAAGoB,GAAG;EACbpB,GAAG,CAAC,EAAE,CAAC,GAAGqB,GAAG;EACbrB,GAAG,CAAC,EAAE,CAAC,GAAGsB,GAAG;EACb,OAAOtB,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUwB,QAAQA,CAACxB,GAAG;EAC1BA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUyB,SAASA,CAACzB,GAAG,EAAEI,CAAC;EAC9B;EACA,IAAIJ,GAAG,KAAKI,CAAC,EAAE;IACb,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;IAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;IAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;IAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;IAChB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;IAChB,MAAM2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;IAEjBJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACdJ,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG;IACZ1B,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACdJ,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG;IACZ3B,GAAG,CAAC,CAAC,CAAC,GAAG6B,GAAG;IACZ7B,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAG4B,GAAG;IACb5B,GAAG,CAAC,EAAE,CAAC,GAAG8B,GAAG;IACb9B,GAAG,CAAC,EAAE,CAAC,GAAG+B,GAAG;EACf,CAAC,MAAM;IACL/B,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACdJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACdJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACdJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACdJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACjB;EAEA,OAAOJ,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUgC,MAAMA,CAAChC,GAAG,EAAEI,CAAC;EAC3B,MAAM6B,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM8B,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMmC,GAAG,GAAGnC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMoC,GAAG,GAAGpC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMqC,GAAG,GAAGrC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMsC,GAAG,GAAGtC,CAAC,CAAC,EAAE,CAAC;EAEjB,MAAMuC,GAAG,GAAGV,GAAG,GAAGE,GAAG,GAAGT,GAAG,GAAGQ,GAAG;EACjC,MAAMU,GAAG,GAAGX,GAAG,GAAGJ,GAAG,GAAGF,GAAG,GAAGO,GAAG;EACjC,MAAMW,GAAG,GAAGZ,GAAG,GAAGH,GAAG,GAAGF,GAAG,GAAGM,GAAG;EACjC,MAAMY,GAAG,GAAGpB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGQ,GAAG;EACjC,MAAMY,GAAG,GAAGrB,GAAG,GAAGI,GAAG,GAAGF,GAAG,GAAGO,GAAG;EACjC,MAAMa,GAAG,GAAGrB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;EACjC,MAAMoB,GAAG,GAAGb,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;EACjC,MAAMW,GAAG,GAAGd,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG;EACjC,MAAMY,GAAG,GAAGf,GAAG,GAAGM,GAAG,GAAGX,GAAG,GAAGQ,GAAG;EACjC,MAAMa,GAAG,GAAGf,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;EACjC,MAAMa,GAAG,GAAGhB,GAAG,GAAGK,GAAG,GAAGX,GAAG,GAAGS,GAAG;EACjC,MAAMc,GAAG,GAAGhB,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG;EAEjC;EACA,IAAIc,GAAG,GAAGZ,GAAG,GAAGW,GAAG,GAAGV,GAAG,GAAGS,GAAG,GAAGR,GAAG,GAAGO,GAAG,GAAGN,GAAG,GAAGK,GAAG,GAAGJ,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;EAE/E,IAAI,CAACM,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACAA,GAAG,GAAG,GAAG,GAAGA,GAAG;EAEfvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACmC,GAAG,GAAGmB,GAAG,GAAGzB,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG,IAAIG,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC2B,GAAG,GAAG0B,GAAG,GAAG3B,GAAG,GAAG4B,GAAG,GAAG1B,GAAG,GAAGwB,GAAG,IAAIG,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACwC,GAAG,GAAGQ,GAAG,GAAGP,GAAG,GAAGM,GAAG,GAAGL,GAAG,GAAGI,GAAG,IAAIS,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACsC,GAAG,GAAGS,GAAG,GAAGV,GAAG,GAAGW,GAAG,GAAGjB,GAAG,GAAGe,GAAG,IAAIS,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6B,GAAG,GAAGsB,GAAG,GAAGjB,GAAG,GAAGoB,GAAG,GAAGxB,GAAG,GAAGoB,GAAG,IAAIK,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACiC,GAAG,GAAGqB,GAAG,GAAG3B,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG,IAAIK,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACyC,GAAG,GAAGI,GAAG,GAAGN,GAAG,GAAGS,GAAG,GAAGN,GAAG,GAAGE,GAAG,IAAIW,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACoC,GAAG,GAAGY,GAAG,GAAGV,GAAG,GAAGO,GAAG,GAAGd,GAAG,GAAGa,GAAG,IAAIW,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAACkC,GAAG,GAAGmB,GAAG,GAAGlB,GAAG,GAAGgB,GAAG,GAAGrB,GAAG,GAAGmB,GAAG,IAAIM,GAAG;EAClDvD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC0B,GAAG,GAAGyB,GAAG,GAAGlB,GAAG,GAAGoB,GAAG,GAAGzB,GAAG,GAAGqB,GAAG,IAAIM,GAAG;EAClDvD,GAAG,CAAC,EAAE,CAAC,GAAG,CAACuC,GAAG,GAAGQ,GAAG,GAAGP,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG,IAAIY,GAAG;EACnDvD,GAAG,CAAC,EAAE,CAAC,GAAG,CAACqC,GAAG,GAAGQ,GAAG,GAAGT,GAAG,GAAGW,GAAG,GAAGhB,GAAG,GAAGY,GAAG,IAAIY,GAAG;EACnDvD,GAAG,CAAC,EAAE,CAAC,GAAG,CAACmC,GAAG,GAAGe,GAAG,GAAGhB,GAAG,GAAGkB,GAAG,GAAGvB,GAAG,GAAGoB,GAAG,IAAIM,GAAG;EACnDvD,GAAG,CAAC,EAAE,CAAC,GAAG,CAACiC,GAAG,GAAGmB,GAAG,GAAG1B,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG,IAAIM,GAAG;EACnDvD,GAAG,CAAC,EAAE,CAAC,GAAG,CAACwC,GAAG,GAAGI,GAAG,GAAGL,GAAG,GAAGO,GAAG,GAAGL,GAAG,GAAGE,GAAG,IAAIY,GAAG;EACnDvD,GAAG,CAAC,EAAE,CAAC,GAAG,CAACoC,GAAG,GAAGU,GAAG,GAAGT,GAAG,GAAGO,GAAG,GAAGN,GAAG,GAAGK,GAAG,IAAIY,GAAG;EAEnD,OAAOvD,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUwD,OAAOA,CAACxD,GAAG,EAAEI,CAAC;EAC5B,MAAM6B,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM8B,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMmC,GAAG,GAAGnC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMoC,GAAG,GAAGpC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMqC,GAAG,GAAGrC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMsC,GAAG,GAAGtC,CAAC,CAAC,EAAE,CAAC;EAEjB,MAAMuC,GAAG,GAAGV,GAAG,GAAGE,GAAG,GAAGT,GAAG,GAAGQ,GAAG;EACjC,MAAMU,GAAG,GAAGX,GAAG,GAAGJ,GAAG,GAAGF,GAAG,GAAGO,GAAG;EACjC,MAAMW,GAAG,GAAGZ,GAAG,GAAGH,GAAG,GAAGF,GAAG,GAAGM,GAAG;EACjC,MAAMY,GAAG,GAAGpB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGQ,GAAG;EACjC,MAAMY,GAAG,GAAGrB,GAAG,GAAGI,GAAG,GAAGF,GAAG,GAAGO,GAAG;EACjC,MAAMa,GAAG,GAAGrB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;EACjC,MAAMoB,GAAG,GAAGb,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;EACjC,MAAMW,GAAG,GAAGd,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG;EACjC,MAAMY,GAAG,GAAGf,GAAG,GAAGM,GAAG,GAAGX,GAAG,GAAGQ,GAAG;EACjC,MAAMa,GAAG,GAAGf,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;EACjC,MAAMa,GAAG,GAAGhB,GAAG,GAAGK,GAAG,GAAGX,GAAG,GAAGS,GAAG;EACjC,MAAMc,GAAG,GAAGhB,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG;EAEjCzC,GAAG,CAAC,CAAC,CAAC,GAAGmC,GAAG,GAAGmB,GAAG,GAAGzB,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG;EAC1CpD,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG,GAAG0B,GAAG,GAAG3B,GAAG,GAAG4B,GAAG,GAAG1B,GAAG,GAAGwB,GAAG;EAC1CpD,GAAG,CAAC,CAAC,CAAC,GAAGwC,GAAG,GAAGQ,GAAG,GAAGP,GAAG,GAAGM,GAAG,GAAGL,GAAG,GAAGI,GAAG;EAC1C9C,GAAG,CAAC,CAAC,CAAC,GAAGsC,GAAG,GAAGS,GAAG,GAAGV,GAAG,GAAGW,GAAG,GAAGjB,GAAG,GAAGe,GAAG;EAC1C9C,GAAG,CAAC,CAAC,CAAC,GAAG6B,GAAG,GAAGsB,GAAG,GAAGjB,GAAG,GAAGoB,GAAG,GAAGxB,GAAG,GAAGoB,GAAG;EAC1ClD,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG,GAAGqB,GAAG,GAAG3B,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG;EAC1ClD,GAAG,CAAC,CAAC,CAAC,GAAGyC,GAAG,GAAGI,GAAG,GAAGN,GAAG,GAAGS,GAAG,GAAGN,GAAG,GAAGE,GAAG;EAC1C5C,GAAG,CAAC,CAAC,CAAC,GAAGoC,GAAG,GAAGY,GAAG,GAAGV,GAAG,GAAGO,GAAG,GAAGd,GAAG,GAAGa,GAAG;EAC1C5C,GAAG,CAAC,CAAC,CAAC,GAAGkC,GAAG,GAAGmB,GAAG,GAAGlB,GAAG,GAAGgB,GAAG,GAAGrB,GAAG,GAAGmB,GAAG;EAC1CjD,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAGyB,GAAG,GAAGlB,GAAG,GAAGoB,GAAG,GAAGzB,GAAG,GAAGqB,GAAG;EAC1CjD,GAAG,CAAC,EAAE,CAAC,GAAGuC,GAAG,GAAGQ,GAAG,GAAGP,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG;EAC3C3C,GAAG,CAAC,EAAE,CAAC,GAAGqC,GAAG,GAAGQ,GAAG,GAAGT,GAAG,GAAGW,GAAG,GAAGhB,GAAG,GAAGY,GAAG;EAC3C3C,GAAG,CAAC,EAAE,CAAC,GAAGmC,GAAG,GAAGe,GAAG,GAAGhB,GAAG,GAAGkB,GAAG,GAAGvB,GAAG,GAAGoB,GAAG;EAC3CjD,GAAG,CAAC,EAAE,CAAC,GAAGiC,GAAG,GAAGmB,GAAG,GAAG1B,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG;EAC3CjD,GAAG,CAAC,EAAE,CAAC,GAAGwC,GAAG,GAAGI,GAAG,GAAGL,GAAG,GAAGO,GAAG,GAAGL,GAAG,GAAGE,GAAG;EAC3C3C,GAAG,CAAC,EAAE,CAAC,GAAGoC,GAAG,GAAGU,GAAG,GAAGT,GAAG,GAAGO,GAAG,GAAGN,GAAG,GAAGK,GAAG;EAC3C,OAAO3C,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUyD,WAAWA,CAACrD,CAAC;EAC3B,MAAM6B,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM8B,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMmC,GAAG,GAAGnC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMoC,GAAG,GAAGpC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMqC,GAAG,GAAGrC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMsC,GAAG,GAAGtC,CAAC,CAAC,EAAE,CAAC;EAEjB,MAAMsD,EAAE,GAAGzB,GAAG,GAAGE,GAAG,GAAGT,GAAG,GAAGQ,GAAG;EAChC,MAAMyB,EAAE,GAAG1B,GAAG,GAAGJ,GAAG,GAAGF,GAAG,GAAGO,GAAG;EAChC,MAAM0B,EAAE,GAAGlC,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGQ,GAAG;EAChC,MAAM0B,EAAE,GAAGzB,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;EAChC,MAAMuB,EAAE,GAAG1B,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG;EAChC,MAAMwB,EAAE,GAAG1B,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;EAChC,MAAMwB,EAAE,GAAG/B,GAAG,GAAG8B,EAAE,GAAGrC,GAAG,GAAGoC,EAAE,GAAGnC,GAAG,GAAGkC,EAAE;EACzC,MAAMI,EAAE,GAAG/B,GAAG,GAAG6B,EAAE,GAAG5B,GAAG,GAAG2B,EAAE,GAAGjC,GAAG,GAAGgC,EAAE;EACzC,MAAMK,EAAE,GAAG9B,GAAG,GAAGwB,EAAE,GAAGvB,GAAG,GAAGsB,EAAE,GAAGrB,GAAG,GAAGoB,EAAE;EACzC,MAAMS,EAAE,GAAG5B,GAAG,GAAGqB,EAAE,GAAGpB,GAAG,GAAGmB,EAAE,GAAGlB,GAAG,GAAGiB,EAAE;EAEzC;EACA,OAAO5B,GAAG,GAAGkC,EAAE,GAAGpC,GAAG,GAAGqC,EAAE,GAAGvB,GAAG,GAAGwB,EAAE,GAAGnC,GAAG,GAAGoC,EAAE;AAClD;AAEA;;;;;;;;AAQA,OAAM,SAAUC,QAAQA,CAACpE,GAAG,EAAEI,CAAC,EAAEiE,CAAC;EAChC,MAAMpC,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM8B,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMmC,GAAG,GAAGnC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMoC,GAAG,GAAGpC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMqC,GAAG,GAAGrC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMsC,GAAG,GAAGtC,CAAC,CAAC,EAAE,CAAC;EAEjB;EACA,IAAIsD,EAAE,GAAGW,CAAC,CAAC,CAAC,CAAC;EACb,IAAIV,EAAE,GAAGU,CAAC,CAAC,CAAC,CAAC;EACb,IAAIT,EAAE,GAAGS,CAAC,CAAC,CAAC,CAAC;EACb,IAAIR,EAAE,GAAGQ,CAAC,CAAC,CAAC,CAAC;EACbrE,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGtB,GAAG;EAClDvC,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAGhC,GAAG,GAAGiC,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGvB,GAAG,GAAGwB,EAAE,GAAGrB,GAAG;EAClDxC,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAG/B,GAAG,GAAGgC,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAGtB,GAAG,GAAGuB,EAAE,GAAGpB,GAAG;EAClDzC,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAGnB,GAAG;EAElDgB,EAAE,GAAGW,CAAC,CAAC,CAAC,CAAC;EACTV,EAAE,GAAGU,CAAC,CAAC,CAAC,CAAC;EACTT,EAAE,GAAGS,CAAC,CAAC,CAAC,CAAC;EACTR,EAAE,GAAGQ,CAAC,CAAC,CAAC,CAAC;EACTrE,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGtB,GAAG;EAClDvC,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAGhC,GAAG,GAAGiC,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGvB,GAAG,GAAGwB,EAAE,GAAGrB,GAAG;EAClDxC,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAG/B,GAAG,GAAGgC,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAGtB,GAAG,GAAGuB,EAAE,GAAGpB,GAAG;EAClDzC,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAGnB,GAAG;EAElDgB,EAAE,GAAGW,CAAC,CAAC,CAAC,CAAC;EACTV,EAAE,GAAGU,CAAC,CAAC,CAAC,CAAC;EACTT,EAAE,GAAGS,CAAC,CAAC,EAAE,CAAC;EACVR,EAAE,GAAGQ,CAAC,CAAC,EAAE,CAAC;EACVrE,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGtB,GAAG;EAClDvC,GAAG,CAAC,CAAC,CAAC,GAAG0D,EAAE,GAAGhC,GAAG,GAAGiC,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGvB,GAAG,GAAGwB,EAAE,GAAGrB,GAAG;EAClDxC,GAAG,CAAC,EAAE,CAAC,GAAG0D,EAAE,GAAG/B,GAAG,GAAGgC,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAGtB,GAAG,GAAGuB,EAAE,GAAGpB,GAAG;EACnDzC,GAAG,CAAC,EAAE,CAAC,GAAG0D,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAGnB,GAAG;EAEnDgB,EAAE,GAAGW,CAAC,CAAC,EAAE,CAAC;EACVV,EAAE,GAAGU,CAAC,CAAC,EAAE,CAAC;EACVT,EAAE,GAAGS,CAAC,CAAC,EAAE,CAAC;EACVR,EAAE,GAAGQ,CAAC,CAAC,EAAE,CAAC;EACVrE,GAAG,CAAC,EAAE,CAAC,GAAG0D,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGzB,GAAG,GAAG0B,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGtB,GAAG;EACnDvC,GAAG,CAAC,EAAE,CAAC,GAAG0D,EAAE,GAAGhC,GAAG,GAAGiC,EAAE,GAAGxB,GAAG,GAAGyB,EAAE,GAAGvB,GAAG,GAAGwB,EAAE,GAAGrB,GAAG;EACnDxC,GAAG,CAAC,EAAE,CAAC,GAAG0D,EAAE,GAAG/B,GAAG,GAAGgC,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAGtB,GAAG,GAAGuB,EAAE,GAAGpB,GAAG;EACnDzC,GAAG,CAAC,EAAE,CAAC,GAAG0D,EAAE,GAAG9B,GAAG,GAAG+B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAG7B,GAAG,GAAG8B,EAAE,GAAGnB,GAAG;EACnD,OAAO1C,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUsE,SAASA,CAACtE,GAAG,EAAEI,CAAC,EAAEmE,CAAC;EACjC,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EACd,MAAMG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EACd,IAAItC,GAAG;EACP,IAAIP,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIM,GAAG;EACP,IAAIC,GAAG;EACP,IAAIN,GAAG;EACP,IAAIC,GAAG;EACP,IAAIM,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIP,GAAG;EAEP,IAAI3B,CAAC,KAAKJ,GAAG,EAAE;IACbA,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC,GAAGpE,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC,GAAGrE,CAAC,CAAC,CAAC,CAAC,GAAGsE,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;IAChDJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC,GAAGpE,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC,GAAGrE,CAAC,CAAC,CAAC,CAAC,GAAGsE,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;IAChDJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC,GAAGpE,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC,GAAGrE,CAAC,CAAC,EAAE,CAAC,GAAGsE,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;IACjDJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC,GAAGpE,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC,GAAGrE,CAAC,CAAC,EAAE,CAAC,GAAGsE,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;EACnD,CAAC,MAAM;IACL6B,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;IACVsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;IACVuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;IACVwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;IACV8B,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;IACV+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;IACVyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;IACV0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;IACVgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;IACViC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;IACVkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;IACX2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;IAEXJ,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG;IACZjC,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG;IACZ1B,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG;IACZ3B,GAAG,CAAC,CAAC,CAAC,GAAG4B,GAAG;IACZ5B,GAAG,CAAC,CAAC,CAAC,GAAGkC,GAAG;IACZlC,GAAG,CAAC,CAAC,CAAC,GAAGmC,GAAG;IACZnC,GAAG,CAAC,CAAC,CAAC,GAAG6B,GAAG;IACZ7B,GAAG,CAAC,CAAC,CAAC,GAAG8B,GAAG;IACZ9B,GAAG,CAAC,CAAC,CAAC,GAAGoC,GAAG;IACZpC,GAAG,CAAC,CAAC,CAAC,GAAGqC,GAAG;IACZrC,GAAG,CAAC,EAAE,CAAC,GAAGsC,GAAG;IACbtC,GAAG,CAAC,EAAE,CAAC,GAAG+B,GAAG;IAEb/B,GAAG,CAAC,EAAE,CAAC,GAAGiC,GAAG,GAAGuC,CAAC,GAAGtC,GAAG,GAAGuC,CAAC,GAAGrC,GAAG,GAAGsC,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;IAC7CJ,GAAG,CAAC,EAAE,CAAC,GAAG0B,GAAG,GAAG8C,CAAC,GAAGrC,GAAG,GAAGsC,CAAC,GAAGpC,GAAG,GAAGqC,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;IAC7CJ,GAAG,CAAC,EAAE,CAAC,GAAG2B,GAAG,GAAG6C,CAAC,GAAG3C,GAAG,GAAG4C,CAAC,GAAGnC,GAAG,GAAGoC,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;IAC7CJ,GAAG,CAAC,EAAE,CAAC,GAAG4B,GAAG,GAAG4C,CAAC,GAAG1C,GAAG,GAAG2C,CAAC,GAAG1C,GAAG,GAAG2C,CAAC,GAAGtE,CAAC,CAAC,EAAE,CAAC;EAC/C;EAEA,OAAOJ,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU2E,KAAKA,CAAC3E,GAAG,EAAEI,CAAC,EAAEmE,CAAC;EAC7B,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EACd,MAAMG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EAEdvE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC;EACjBxE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC;EACjBxE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC;EACjBxE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGoE,CAAC;EACjBxE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC;EACjBzE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC;EACjBzE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC;EACjBzE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGqE,CAAC;EACjBzE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGsE,CAAC;EACjB1E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGsE,CAAC;EACjB1E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGsE,CAAC;EACnB1E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGsE,CAAC;EACnB1E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACf,OAAOJ,GAAG;AACZ;AAEA;;;;;;;;;AASA,OAAM,SAAU4E,MAAMA,CAAC5E,GAAG,EAAEI,CAAC,EAAEyE,GAAG,EAAEC,IAAI;EACtC,IAAIN,CAAC,GAAGM,IAAI,CAAC,CAAC,CAAC;EACf,IAAIL,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC;EACf,IAAIJ,CAAC,GAAGI,IAAI,CAAC,CAAC,CAAC;EACf,IAAIC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACT,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;EAC1C,IAAIQ,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EACL,IAAInD,GAAG;EACP,IAAIP,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIM,GAAG;EACP,IAAIC,GAAG;EACP,IAAIN,GAAG;EACP,IAAIC,GAAG;EACP,IAAIM,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIP,GAAG;EACP,IAAIY,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIQ,GAAG;EACP,IAAIC,GAAG;EACP,IAAI+B,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EACP,IAAIC,GAAG;EAEP,IAAIT,GAAG,GAAGjF,QAAQ,CAAC2F,OAAO,EAAE;IAC1B,OAAO,IAAI;EACb;EAEAV,GAAG,GAAG,CAAC,GAAGA,GAAG;EACbP,CAAC,IAAIO,GAAG;EACRN,CAAC,IAAIM,GAAG;EACRL,CAAC,IAAIK,GAAG;EAERI,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACjBK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EACjBO,CAAC,GAAG,CAAC,GAAGF,CAAC;EAETjD,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;EACVsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EACVuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EACVwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EACV8B,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;EACV+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;EACVyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EACV0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;EACVgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;EACViC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;EACVkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;EACX2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;EAEX;EACAuC,GAAG,GAAG6B,CAAC,GAAGA,CAAC,GAAGY,CAAC,GAAGF,CAAC;EACnBtC,GAAG,GAAG6B,CAAC,GAAGD,CAAC,GAAGY,CAAC,GAAGV,CAAC,GAAGS,CAAC;EACvBtC,GAAG,GAAG6B,CAAC,GAAGF,CAAC,GAAGY,CAAC,GAAGX,CAAC,GAAGU,CAAC;EACvB9B,GAAG,GAAGmB,CAAC,GAAGC,CAAC,GAAGW,CAAC,GAAGV,CAAC,GAAGS,CAAC;EACvB7B,GAAG,GAAGmB,CAAC,GAAGA,CAAC,GAAGW,CAAC,GAAGF,CAAC;EACnBG,GAAG,GAAGX,CAAC,GAAGD,CAAC,GAAGW,CAAC,GAAGZ,CAAC,GAAGW,CAAC;EACvBG,GAAG,GAAGd,CAAC,GAAGE,CAAC,GAAGU,CAAC,GAAGX,CAAC,GAAGU,CAAC;EACvBI,GAAG,GAAGd,CAAC,GAAGC,CAAC,GAAGU,CAAC,GAAGZ,CAAC,GAAGW,CAAC;EACvBK,GAAG,GAAGd,CAAC,GAAGA,CAAC,GAAGU,CAAC,GAAGF,CAAC;EAEnB;EACAlF,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG,GAAGU,GAAG,GAAGT,GAAG,GAAGU,GAAG,GAAGR,GAAG,GAAGS,GAAG;EAC1C7C,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAGiB,GAAG,GAAGR,GAAG,GAAGS,GAAG,GAAGP,GAAG,GAAGQ,GAAG;EAC1C7C,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG,GAAGgB,GAAG,GAAGd,GAAG,GAAGe,GAAG,GAAGN,GAAG,GAAGO,GAAG;EAC1C7C,GAAG,CAAC,CAAC,CAAC,GAAG4B,GAAG,GAAGe,GAAG,GAAGb,GAAG,GAAGc,GAAG,GAAGb,GAAG,GAAGc,GAAG;EAC1C7C,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG,GAAGoB,GAAG,GAAGnB,GAAG,GAAGoB,GAAG,GAAGlB,GAAG,GAAGiD,GAAG;EAC1CrF,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAG2B,GAAG,GAAGlB,GAAG,GAAGmB,GAAG,GAAGjB,GAAG,GAAGgD,GAAG;EAC1CrF,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG,GAAG0B,GAAG,GAAGxB,GAAG,GAAGyB,GAAG,GAAGhB,GAAG,GAAG+C,GAAG;EAC1CrF,GAAG,CAAC,CAAC,CAAC,GAAG4B,GAAG,GAAGyB,GAAG,GAAGvB,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsD,GAAG;EAC1CrF,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG,GAAGqD,GAAG,GAAGpD,GAAG,GAAGqD,GAAG,GAAGnD,GAAG,GAAGoD,GAAG;EAC1CxF,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAG4D,GAAG,GAAGnD,GAAG,GAAGoD,GAAG,GAAGlD,GAAG,GAAGmD,GAAG;EAC1CxF,GAAG,CAAC,EAAE,CAAC,GAAG2B,GAAG,GAAG2D,GAAG,GAAGzD,GAAG,GAAG0D,GAAG,GAAGjD,GAAG,GAAGkD,GAAG;EAC3CxF,GAAG,CAAC,EAAE,CAAC,GAAG4B,GAAG,GAAG0D,GAAG,GAAGxD,GAAG,GAAGyD,GAAG,GAAGxD,GAAG,GAAGyD,GAAG;EAE3C,IAAIpF,CAAC,KAAKJ,GAAG,EAAE;IACb;IACAA,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACjB;EACA,OAAOJ,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU4F,OAAOA,CAAC5F,GAAG,EAAEI,CAAC,EAAEyE,GAAG;EACjC,MAAMM,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACvB,MAAMK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EACvB,MAAM3C,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;EAEjB,IAAIA,CAAC,KAAKJ,GAAG,EAAE;IACb;IACAA,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACjB;EAEA;EACAJ,GAAG,CAAC,CAAC,CAAC,GAAGkC,GAAG,GAAGgD,CAAC,GAAG9C,GAAG,GAAG+C,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGmC,GAAG,GAAG+C,CAAC,GAAG7C,GAAG,GAAG8C,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG6B,GAAG,GAAGqD,CAAC,GAAG5C,GAAG,GAAG6C,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG8B,GAAG,GAAGoD,CAAC,GAAGnD,GAAG,GAAGoD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGoC,GAAG,GAAG8C,CAAC,GAAGhD,GAAG,GAAGiD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGqC,GAAG,GAAG6C,CAAC,GAAG/C,GAAG,GAAGgD,CAAC;EAC1BnF,GAAG,CAAC,EAAE,CAAC,GAAGsC,GAAG,GAAG4C,CAAC,GAAGrD,GAAG,GAAGsD,CAAC;EAC3BnF,GAAG,CAAC,EAAE,CAAC,GAAG+B,GAAG,GAAGmD,CAAC,GAAGpD,GAAG,GAAGqD,CAAC;EAC3B,OAAOnF,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU6F,OAAOA,CAAC7F,GAAG,EAAEI,CAAC,EAAEyE,GAAG;EACjC,MAAMM,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACvB,MAAMK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EACvB,MAAM5C,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgC,GAAG,GAAGhC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiC,GAAG,GAAGjC,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkC,GAAG,GAAGlC,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM2B,GAAG,GAAG3B,CAAC,CAAC,EAAE,CAAC;EAEjB,IAAIA,CAAC,KAAKJ,GAAG,EAAE;IACb;IACAA,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACjB;EAEA;EACAJ,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG,GAAGiD,CAAC,GAAG9C,GAAG,GAAG+C,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAGwD,CAAC,GAAG7C,GAAG,GAAG8C,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG,GAAGuD,CAAC,GAAG5C,GAAG,GAAG6C,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG4B,GAAG,GAAGsD,CAAC,GAAGnD,GAAG,GAAGoD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG,GAAGkD,CAAC,GAAG/C,GAAG,GAAG8C,CAAC;EAC1BlF,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAGyD,CAAC,GAAG9C,GAAG,GAAG6C,CAAC;EAC1BlF,GAAG,CAAC,EAAE,CAAC,GAAG2B,GAAG,GAAGwD,CAAC,GAAG7C,GAAG,GAAG4C,CAAC;EAC3BlF,GAAG,CAAC,EAAE,CAAC,GAAG4B,GAAG,GAAGuD,CAAC,GAAGpD,GAAG,GAAGmD,CAAC;EAC3B,OAAOlF,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU8F,OAAOA,CAAC9F,GAAG,EAAEI,CAAC,EAAEyE,GAAG;EACjC,MAAMM,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACvB,MAAMK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EACvB,MAAM5C,GAAG,GAAG7B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM8B,GAAG,GAAG9B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM+B,GAAG,GAAG/B,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,CAAC,CAAC;EAEhB,IAAIA,CAAC,KAAKJ,GAAG,EAAE;IACb;IACAA,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;IACfJ,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACjB;EAEA;EACAJ,GAAG,CAAC,CAAC,CAAC,GAAGiC,GAAG,GAAGiD,CAAC,GAAGhD,GAAG,GAAGiD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAGwD,CAAC,GAAG/C,GAAG,GAAGgD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG,GAAGuD,CAAC,GAAGrD,GAAG,GAAGsD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG4B,GAAG,GAAGsD,CAAC,GAAGpD,GAAG,GAAGqD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGkC,GAAG,GAAGgD,CAAC,GAAGjD,GAAG,GAAGkD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGmC,GAAG,GAAG+C,CAAC,GAAGxD,GAAG,GAAGyD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG6B,GAAG,GAAGqD,CAAC,GAAGvD,GAAG,GAAGwD,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG8B,GAAG,GAAGoD,CAAC,GAAGtD,GAAG,GAAGuD,CAAC;EAC1B,OAAOnF,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAU+F,eAAeA,CAAC/F,GAAG,EAAEuE,CAAC;EACpCvE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUgG,WAAWA,CAAChG,GAAG,EAAEuE,CAAC;EAChCvE,GAAG,CAAC,CAAC,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACbvE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACbvE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUiG,YAAYA,CAACjG,GAAG,EAAE6E,GAAG,EAAEC,IAAI;EACzC,IAAIN,CAAC,GAAGM,IAAI,CAAC,CAAC,CAAC;EACf,IAAIL,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC;EACf,IAAIJ,CAAC,GAAGI,IAAI,CAAC,CAAC,CAAC;EACf,IAAIC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACT,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;EAC1C,IAAIQ,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EAEL,IAAIL,GAAG,GAAGjF,QAAQ,CAAC2F,OAAO,EAAE;IAC1B,OAAO,IAAI;EACb;EAEAV,GAAG,GAAG,CAAC,GAAGA,GAAG;EACbP,CAAC,IAAIO,GAAG;EACRN,CAAC,IAAIM,GAAG;EACRL,CAAC,IAAIK,GAAG;EAERI,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACjBK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EACjBO,CAAC,GAAG,CAAC,GAAGF,CAAC;EAET;EACAlF,GAAG,CAAC,CAAC,CAAC,GAAGwE,CAAC,GAAGA,CAAC,GAAGY,CAAC,GAAGF,CAAC;EACtBlF,GAAG,CAAC,CAAC,CAAC,GAAGyE,CAAC,GAAGD,CAAC,GAAGY,CAAC,GAAGV,CAAC,GAAGS,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG0E,CAAC,GAAGF,CAAC,GAAGY,CAAC,GAAGX,CAAC,GAAGU,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGwE,CAAC,GAAGC,CAAC,GAAGW,CAAC,GAAGV,CAAC,GAAGS,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGyE,CAAC,GAAGA,CAAC,GAAGW,CAAC,GAAGF,CAAC;EACtBlF,GAAG,CAAC,CAAC,CAAC,GAAG0E,CAAC,GAAGD,CAAC,GAAGW,CAAC,GAAGZ,CAAC,GAAGW,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGwE,CAAC,GAAGE,CAAC,GAAGU,CAAC,GAAGX,CAAC,GAAGU,CAAC;EAC1BnF,GAAG,CAAC,CAAC,CAAC,GAAGyE,CAAC,GAAGC,CAAC,GAAGU,CAAC,GAAGZ,CAAC,GAAGW,CAAC;EAC1BnF,GAAG,CAAC,EAAE,CAAC,GAAG0E,CAAC,GAAGA,CAAC,GAAGU,CAAC,GAAGF,CAAC;EACvBlF,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUkG,aAAaA,CAAClG,GAAG,EAAE6E,GAAG;EACpC,MAAMM,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACvB,MAAMK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EAEvB;EACA7E,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGkF,CAAC;EACVlF,GAAG,CAAC,CAAC,CAAC,GAAGmF,CAAC;EACVnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAACmF,CAAC;EACXnF,GAAG,CAAC,EAAE,CAAC,GAAGkF,CAAC;EACXlF,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUmG,aAAaA,CAACnG,GAAG,EAAE6E,GAAG;EACpC,MAAMM,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACvB,MAAMK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EAEvB;EACA7E,GAAG,CAAC,CAAC,CAAC,GAAGkF,CAAC;EACVlF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAACmF,CAAC;EACXnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGmF,CAAC;EACVnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAGkF,CAAC;EACXlF,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUoG,aAAaA,CAACpG,GAAG,EAAE6E,GAAG;EACpC,MAAMM,CAAC,GAAGH,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACvB,MAAMK,CAAC,GAAGF,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EAEvB;EACA7E,GAAG,CAAC,CAAC,CAAC,GAAGkF,CAAC;EACVlF,GAAG,CAAC,CAAC,CAAC,GAAGmF,CAAC;EACVnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAACmF,CAAC;EACXnF,GAAG,CAAC,CAAC,CAAC,GAAGkF,CAAC;EACVlF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUqG,uBAAuBA,CAACrG,GAAG,EAAEsG,CAAC,EAAE/B,CAAC;EAC/C;EACA,MAAMC,CAAC,GAAG8B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM7B,CAAC,GAAG6B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM5B,CAAC,GAAG4B,CAAC,CAAC,CAAC,CAAC;EACd,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAEhB,MAAMiC,EAAE,GAAGnC,CAAC,GAAGgC,EAAE;EACjB,MAAMI,EAAE,GAAGpC,CAAC,GAAGiC,EAAE;EACjB,MAAMI,EAAE,GAAGrC,CAAC,GAAGkC,EAAE;EACjB,MAAMI,EAAE,GAAGrC,CAAC,GAAGgC,EAAE;EACjB,MAAMM,EAAE,GAAGtC,CAAC,GAAGiC,EAAE;EACjB,MAAMM,EAAE,GAAGtC,CAAC,GAAGgC,EAAE;EACjB,MAAMO,EAAE,GAAGV,CAAC,GAAGC,EAAE;EACjB,MAAMU,EAAE,GAAGX,CAAC,GAAGE,EAAE;EACjB,MAAMU,EAAE,GAAGZ,CAAC,GAAGG,EAAE;EAEjB1G,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI8G,EAAE,GAAGE,EAAE,CAAC;EACtBhH,GAAG,CAAC,CAAC,CAAC,GAAG4G,EAAE,GAAGO,EAAE;EAChBnH,GAAG,CAAC,CAAC,CAAC,GAAG6G,EAAE,GAAGK,EAAE;EAChBlH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG4G,EAAE,GAAGO,EAAE;EAChBnH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI2G,EAAE,GAAGK,EAAE,CAAC;EACtBhH,GAAG,CAAC,CAAC,CAAC,GAAG+G,EAAE,GAAGE,EAAE;EAChBjH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG6G,EAAE,GAAGK,EAAE;EAChBlH,GAAG,CAAC,CAAC,CAAC,GAAG+G,EAAE,GAAGE,EAAE;EAChBjH,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI2G,EAAE,GAAGG,EAAE,CAAC;EACvB9G,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUoH,SAASA,CAACpH,GAAG,EAAEI,CAAC;EAC9B,MAAMiH,WAAW,GAAG,IAAIvH,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EAC9C,MAAMqH,EAAE,GAAG,CAAClH,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMmH,EAAE,GAAG,CAACnH,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMoH,EAAE,GAAG,CAACpH,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqH,EAAE,GAAGrH,CAAC,CAAC,CAAC,CAAC;EACf,MAAMsH,EAAE,GAAGtH,CAAC,CAAC,CAAC,CAAC;EACf,MAAMuH,EAAE,GAAGvH,CAAC,CAAC,CAAC,CAAC;EACf,MAAMwH,EAAE,GAAGxH,CAAC,CAAC,CAAC,CAAC;EACf,MAAMyH,EAAE,GAAGzH,CAAC,CAAC,CAAC,CAAC;EAEf,MAAM0H,SAAS,GAAGR,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE;EACvD;EACA,IAAIK,SAAS,GAAG,CAAC,EAAE;IACjBT,WAAW,CAAC,CAAC,CAAC,GAAI,CAACK,EAAE,GAAGD,EAAE,GAAGI,EAAE,GAAGP,EAAE,GAAGK,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE,IAAI,CAAC,GAAIO,SAAS;IAC1ET,WAAW,CAAC,CAAC,CAAC,GAAI,CAACM,EAAE,GAAGF,EAAE,GAAGI,EAAE,GAAGN,EAAE,GAAGK,EAAE,GAAGN,EAAE,GAAGI,EAAE,GAAGF,EAAE,IAAI,CAAC,GAAIM,SAAS;IAC1ET,WAAW,CAAC,CAAC,CAAC,GAAI,CAACO,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE,GAAGE,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE,IAAI,CAAC,GAAIQ,SAAS;EAC5E,CAAC,MAAM;IACLT,WAAW,CAAC,CAAC,CAAC,GAAG,CAACK,EAAE,GAAGD,EAAE,GAAGI,EAAE,GAAGP,EAAE,GAAGK,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE,IAAI,CAAC;IAC5DF,WAAW,CAAC,CAAC,CAAC,GAAG,CAACM,EAAE,GAAGF,EAAE,GAAGI,EAAE,GAAGN,EAAE,GAAGK,EAAE,GAAGN,EAAE,GAAGI,EAAE,GAAGF,EAAE,IAAI,CAAC;IAC5DH,WAAW,CAAC,CAAC,CAAC,GAAG,CAACO,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE,GAAGE,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE,IAAI,CAAC;EAC9D;EACAjB,uBAAuB,CAACrG,GAAG,EAAEI,CAAC,EAAEiH,WAAW,CAAC;EAC5C,OAAOrH,GAAG;AACZ;AAEA;;;;;;;;;AASA,OAAM,SAAU+H,cAAcA,CAAC/H,GAAG,EAAEgI,GAAG;EACrChI,GAAG,CAAC,CAAC,CAAC,GAAGgI,GAAG,CAAC,EAAE,CAAC;EAChBhI,GAAG,CAAC,CAAC,CAAC,GAAGgI,GAAG,CAAC,EAAE,CAAC;EAChBhI,GAAG,CAAC,CAAC,CAAC,GAAGgI,GAAG,CAAC,EAAE,CAAC;EAEhB,OAAOhI,GAAG;AACZ;AAEA;;;;;;;;;;AAUA,OAAM,SAAUiI,UAAUA,CAACjI,GAAG,EAAEgI,GAAG;EACjC,MAAMpH,GAAG,GAAGoH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMnH,GAAG,GAAGmH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMlH,GAAG,GAAGkH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMhH,GAAG,GAAGgH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM/G,GAAG,GAAG+G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM9G,GAAG,GAAG8G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM5G,GAAG,GAAG4G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM3G,GAAG,GAAG2G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM1G,GAAG,GAAG0G,GAAG,CAAC,EAAE,CAAC;EAEnBhI,GAAG,CAAC,CAAC,CAAC,GAAGgF,IAAI,CAACC,IAAI,CAACrE,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,CAAC;EACrDd,GAAG,CAAC,CAAC,CAAC,GAAGgF,IAAI,CAACC,IAAI,CAACjE,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,CAAC;EACrDlB,GAAG,CAAC,CAAC,CAAC,GAAGgF,IAAI,CAACC,IAAI,CAAC7D,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,CAAC;EAErD,OAAOtB,GAAG;AACZ;AAEA;;;;;;;;;AASA,OAAM,SAAUkI,WAAWA,CAAClI,GAAG,EAAEgI,GAAG;EAClC,MAAMG,OAAO,GAAG,IAAIrI,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EAC1CgI,UAAU,CAACE,OAAO,EAAEH,GAAG,CAAC;EAExB,MAAMI,GAAG,GAAG,CAAC,GAAGD,OAAO,CAAC,CAAC,CAAC;EAC1B,MAAME,GAAG,GAAG,CAAC,GAAGF,OAAO,CAAC,CAAC,CAAC;EAC1B,MAAMG,GAAG,GAAG,CAAC,GAAGH,OAAO,CAAC,CAAC,CAAC;EAE1B,MAAMI,IAAI,GAAGP,GAAG,CAAC,CAAC,CAAC,GAAGI,GAAG;EACzB,MAAMI,IAAI,GAAGR,GAAG,CAAC,CAAC,CAAC,GAAGK,GAAG;EACzB,MAAMI,IAAI,GAAGT,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG;EACzB,MAAMI,IAAI,GAAGV,GAAG,CAAC,CAAC,CAAC,GAAGI,GAAG;EACzB,MAAMO,IAAI,GAAGX,GAAG,CAAC,CAAC,CAAC,GAAGK,GAAG;EACzB,MAAMO,IAAI,GAAGZ,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG;EACzB,MAAMO,IAAI,GAAGb,GAAG,CAAC,CAAC,CAAC,GAAGI,GAAG;EACzB,MAAMU,IAAI,GAAGd,GAAG,CAAC,CAAC,CAAC,GAAGK,GAAG;EACzB,MAAMU,IAAI,GAAGf,GAAG,CAAC,EAAE,CAAC,GAAGM,GAAG;EAE1B,MAAMU,KAAK,GAAGT,IAAI,GAAGI,IAAI,GAAGI,IAAI;EAChC,IAAIE,CAAC,GAAG,CAAC;EAET,IAAID,KAAK,GAAG,CAAC,EAAE;IACbC,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC+D,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;IAC9BhJ,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGiJ,CAAC;IACjBjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC4I,IAAI,GAAGE,IAAI,IAAIG,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6I,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAACwI,IAAI,GAAGE,IAAI,IAAIO,CAAC;EAC5B,CAAC,MAAM,IAAIV,IAAI,GAAGI,IAAI,IAAIJ,IAAI,GAAGQ,IAAI,EAAE;IACrCE,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC,GAAG,GAAGsD,IAAI,GAAGI,IAAI,GAAGI,IAAI,CAAC,GAAG,CAAC;IAC3C/I,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC4I,IAAI,GAAGE,IAAI,IAAIG,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGiJ,CAAC;IACjBjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAACwI,IAAI,GAAGE,IAAI,IAAIO,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6I,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;EAC5B,CAAC,MAAM,IAAIN,IAAI,GAAGI,IAAI,EAAE;IACtBE,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC,GAAG,GAAG0D,IAAI,GAAGJ,IAAI,GAAGQ,IAAI,CAAC,GAAG,CAAC;IAC3C/I,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6I,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAACwI,IAAI,GAAGE,IAAI,IAAIO,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGiJ,CAAC;IACjBjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC4I,IAAI,GAAGE,IAAI,IAAIG,CAAC;EAC5B,CAAC,MAAM;IACLA,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC,GAAG,GAAG8D,IAAI,GAAGR,IAAI,GAAGI,IAAI,CAAC,GAAG,CAAC;IAC3C3I,GAAG,CAAC,CAAC,CAAC,GAAG,CAACwI,IAAI,GAAGE,IAAI,IAAIO,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6I,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC4I,IAAI,GAAGE,IAAI,IAAIG,CAAC;IAC1BjJ,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGiJ,CAAC;EACnB;EAEA,OAAOjJ,GAAG;AACZ;AAEA;;;;;;;;;AASA,OAAM,SAAUkJ,SAASA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAErB,GAAG;EAChDoB,KAAK,CAAC,CAAC,CAAC,GAAGpB,GAAG,CAAC,EAAE,CAAC;EAClBoB,KAAK,CAAC,CAAC,CAAC,GAAGpB,GAAG,CAAC,EAAE,CAAC;EAClBoB,KAAK,CAAC,CAAC,CAAC,GAAGpB,GAAG,CAAC,EAAE,CAAC;EAElB,MAAMpH,GAAG,GAAGoH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMnH,GAAG,GAAGmH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMlH,GAAG,GAAGkH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMhH,GAAG,GAAGgH,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM/G,GAAG,GAAG+G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM9G,GAAG,GAAG8G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM5G,GAAG,GAAG4G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM3G,GAAG,GAAG2G,GAAG,CAAC,CAAC,CAAC;EAClB,MAAM1G,GAAG,GAAG0G,GAAG,CAAC,EAAE,CAAC;EAEnBqB,KAAK,CAAC,CAAC,CAAC,GAAGrE,IAAI,CAACC,IAAI,CAACrE,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,CAAC;EACvDuI,KAAK,CAAC,CAAC,CAAC,GAAGrE,IAAI,CAACC,IAAI,CAACjE,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,CAAC;EACvDmI,KAAK,CAAC,CAAC,CAAC,GAAGrE,IAAI,CAACC,IAAI,CAAC7D,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,CAAC;EAEvD,MAAM8G,GAAG,GAAG,CAAC,GAAGiB,KAAK,CAAC,CAAC,CAAC;EACxB,MAAMhB,GAAG,GAAG,CAAC,GAAGgB,KAAK,CAAC,CAAC,CAAC;EACxB,MAAMf,GAAG,GAAG,CAAC,GAAGe,KAAK,CAAC,CAAC,CAAC;EAExB,MAAMd,IAAI,GAAG3H,GAAG,GAAGwH,GAAG;EACtB,MAAMI,IAAI,GAAG3H,GAAG,GAAGwH,GAAG;EACtB,MAAMI,IAAI,GAAG3H,GAAG,GAAGwH,GAAG;EACtB,MAAMI,IAAI,GAAG1H,GAAG,GAAGoH,GAAG;EACtB,MAAMO,IAAI,GAAG1H,GAAG,GAAGoH,GAAG;EACtB,MAAMO,IAAI,GAAG1H,GAAG,GAAGoH,GAAG;EACtB,MAAMO,IAAI,GAAGzH,GAAG,GAAGgH,GAAG;EACtB,MAAMU,IAAI,GAAGzH,GAAG,GAAGgH,GAAG;EACtB,MAAMU,IAAI,GAAGzH,GAAG,GAAGgH,GAAG;EAEtB,MAAMU,KAAK,GAAGT,IAAI,GAAGI,IAAI,GAAGI,IAAI;EAChC,IAAIE,CAAC,GAAG,CAAC;EAET,IAAID,KAAK,GAAG,CAAC,EAAE;IACbC,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC+D,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;IAC9BG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGF,CAAC;IACnBE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACP,IAAI,GAAGE,IAAI,IAAIG,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACN,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACX,IAAI,GAAGE,IAAI,IAAIO,CAAC;EAC9B,CAAC,MAAM,IAAIV,IAAI,GAAGI,IAAI,IAAIJ,IAAI,GAAGQ,IAAI,EAAE;IACrCE,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC,GAAG,GAAGsD,IAAI,GAAGI,IAAI,GAAGI,IAAI,CAAC,GAAG,CAAC;IAC3CI,KAAK,CAAC,CAAC,CAAC,GAAG,CAACP,IAAI,GAAGE,IAAI,IAAIG,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGF,CAAC;IACnBE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACX,IAAI,GAAGE,IAAI,IAAIO,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACN,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;EAC9B,CAAC,MAAM,IAAIN,IAAI,GAAGI,IAAI,EAAE;IACtBE,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC,GAAG,GAAG0D,IAAI,GAAGJ,IAAI,GAAGQ,IAAI,CAAC,GAAG,CAAC;IAC3CI,KAAK,CAAC,CAAC,CAAC,GAAG,CAACN,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACX,IAAI,GAAGE,IAAI,IAAIO,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGF,CAAC;IACnBE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACP,IAAI,GAAGE,IAAI,IAAIG,CAAC;EAC9B,CAAC,MAAM;IACLA,CAAC,GAAGjE,IAAI,CAACC,IAAI,CAAC,GAAG,GAAG8D,IAAI,GAAGR,IAAI,GAAGI,IAAI,CAAC,GAAG,CAAC;IAC3CQ,KAAK,CAAC,CAAC,CAAC,GAAG,CAACX,IAAI,GAAGE,IAAI,IAAIO,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACN,IAAI,GAAGJ,IAAI,IAAIQ,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,CAACP,IAAI,GAAGE,IAAI,IAAIG,CAAC;IAC5BE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGF,CAAC;EACrB;EAEA,OAAOE,KAAK;AACd;AAEA;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUG,4BAA4BA,CAACtJ,GAAG,EAAEsG,CAAC,EAAE/B,CAAC,EAAEY,CAAC;EACvD;EACA,MAAMX,CAAC,GAAG8B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM7B,CAAC,GAAG6B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM5B,CAAC,GAAG4B,CAAC,CAAC,CAAC,CAAC;EACd,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAEhB,MAAMiC,EAAE,GAAGnC,CAAC,GAAGgC,EAAE;EACjB,MAAMI,EAAE,GAAGpC,CAAC,GAAGiC,EAAE;EACjB,MAAMI,EAAE,GAAGrC,CAAC,GAAGkC,EAAE;EACjB,MAAMI,EAAE,GAAGrC,CAAC,GAAGgC,EAAE;EACjB,MAAMM,EAAE,GAAGtC,CAAC,GAAGiC,EAAE;EACjB,MAAMM,EAAE,GAAGtC,CAAC,GAAGgC,EAAE;EACjB,MAAMO,EAAE,GAAGV,CAAC,GAAGC,EAAE;EACjB,MAAMU,EAAE,GAAGX,CAAC,GAAGE,EAAE;EACjB,MAAMU,EAAE,GAAGZ,CAAC,GAAGG,EAAE;EACjB,MAAM6C,EAAE,GAAGpE,CAAC,CAAC,CAAC,CAAC;EACf,MAAMqE,EAAE,GAAGrE,CAAC,CAAC,CAAC,CAAC;EACf,MAAMsE,EAAE,GAAGtE,CAAC,CAAC,CAAC,CAAC;EAEfnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI8G,EAAE,GAAGE,EAAE,CAAC,IAAIuC,EAAE;EAC7BvJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC4G,EAAE,GAAGO,EAAE,IAAIoC,EAAE;EACvBvJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6G,EAAE,GAAGK,EAAE,IAAIqC,EAAE;EACvBvJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC4G,EAAE,GAAGO,EAAE,IAAIqC,EAAE;EACvBxJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI2G,EAAE,GAAGK,EAAE,CAAC,IAAIwC,EAAE;EAC7BxJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC+G,EAAE,GAAGE,EAAE,IAAIuC,EAAE;EACvBxJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6G,EAAE,GAAGK,EAAE,IAAIuC,EAAE;EACvBzJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC+G,EAAE,GAAGE,EAAE,IAAIwC,EAAE;EACvBzJ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI2G,EAAE,GAAGG,EAAE,CAAC,IAAI2C,EAAE;EAC9BzJ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC;EACdvE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAU0J,kCAAkCA,CAAC1J,GAAG,EAAEsG,CAAC,EAAE/B,CAAC,EAAEY,CAAC,EAAEwE,CAAC;EAChE;EACA,MAAMnF,CAAC,GAAG8B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM7B,CAAC,GAAG6B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM5B,CAAC,GAAG4B,CAAC,CAAC,CAAC,CAAC;EACd,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAEhB,MAAMiC,EAAE,GAAGnC,CAAC,GAAGgC,EAAE;EACjB,MAAMI,EAAE,GAAGpC,CAAC,GAAGiC,EAAE;EACjB,MAAMI,EAAE,GAAGrC,CAAC,GAAGkC,EAAE;EACjB,MAAMI,EAAE,GAAGrC,CAAC,GAAGgC,EAAE;EACjB,MAAMM,EAAE,GAAGtC,CAAC,GAAGiC,EAAE;EACjB,MAAMM,EAAE,GAAGtC,CAAC,GAAGgC,EAAE;EACjB,MAAMO,EAAE,GAAGV,CAAC,GAAGC,EAAE;EACjB,MAAMU,EAAE,GAAGX,CAAC,GAAGE,EAAE;EACjB,MAAMU,EAAE,GAAGZ,CAAC,GAAGG,EAAE;EAEjB,MAAM6C,EAAE,GAAGpE,CAAC,CAAC,CAAC,CAAC;EACf,MAAMqE,EAAE,GAAGrE,CAAC,CAAC,CAAC,CAAC;EACf,MAAMsE,EAAE,GAAGtE,CAAC,CAAC,CAAC,CAAC;EAEf,MAAMyE,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;EACf,MAAME,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;EACf,MAAMG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;EAEf,MAAMI,IAAI,GAAG,CAAC,CAAC,IAAIjD,EAAE,GAAGE,EAAE,CAAC,IAAIuC,EAAE;EACjC,MAAMS,IAAI,GAAG,CAACpD,EAAE,GAAGO,EAAE,IAAIoC,EAAE;EAC3B,MAAMU,IAAI,GAAG,CAACpD,EAAE,GAAGK,EAAE,IAAIqC,EAAE;EAC3B,MAAMW,IAAI,GAAG,CAACtD,EAAE,GAAGO,EAAE,IAAIqC,EAAE;EAC3B,MAAMW,IAAI,GAAG,CAAC,CAAC,IAAIxD,EAAE,GAAGK,EAAE,CAAC,IAAIwC,EAAE;EACjC,MAAMY,IAAI,GAAG,CAACrD,EAAE,GAAGE,EAAE,IAAIuC,EAAE;EAC3B,MAAMa,IAAI,GAAG,CAACxD,EAAE,GAAGK,EAAE,IAAIuC,EAAE;EAC3B,MAAMa,IAAI,GAAG,CAACvD,EAAE,GAAGE,EAAE,IAAIwC,EAAE;EAC3B,MAAMc,KAAK,GAAG,CAAC,CAAC,IAAI5D,EAAE,GAAGG,EAAE,CAAC,IAAI2C,EAAE;EAElCzJ,GAAG,CAAC,CAAC,CAAC,GAAG+J,IAAI;EACb/J,GAAG,CAAC,CAAC,CAAC,GAAGgK,IAAI;EACbhK,GAAG,CAAC,CAAC,CAAC,GAAGiK,IAAI;EACbjK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGkK,IAAI;EACblK,GAAG,CAAC,CAAC,CAAC,GAAGmK,IAAI;EACbnK,GAAG,CAAC,CAAC,CAAC,GAAGoK,IAAI;EACbpK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGqK,IAAI;EACbrK,GAAG,CAAC,CAAC,CAAC,GAAGsK,IAAI;EACbtK,GAAG,CAAC,EAAE,CAAC,GAAGuK,KAAK;EACfvK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC,GAAGqF,EAAE,IAAIG,IAAI,GAAGH,EAAE,GAAGM,IAAI,GAAGL,EAAE,GAAGQ,IAAI,GAAGP,EAAE,CAAC;EACzD9J,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC,GAAGsF,EAAE,IAAIG,IAAI,GAAGJ,EAAE,GAAGO,IAAI,GAAGN,EAAE,GAAGS,IAAI,GAAGR,EAAE,CAAC;EACzD9J,GAAG,CAAC,EAAE,CAAC,GAAGuE,CAAC,CAAC,CAAC,CAAC,GAAGuF,EAAE,IAAIG,IAAI,GAAGL,EAAE,GAAGQ,IAAI,GAAGP,EAAE,GAAGU,KAAK,GAAGT,EAAE,CAAC;EAC1D9J,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUwK,QAAQA,CAACxK,GAAG,EAAEsG,CAAC;EAC7B,MAAM9B,CAAC,GAAG8B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM7B,CAAC,GAAG6B,CAAC,CAAC,CAAC,CAAC;EACd,MAAM5B,CAAC,GAAG4B,CAAC,CAAC,CAAC,CAAC;EACd,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAChB,MAAMiC,EAAE,GAAGhC,CAAC,GAAGA,CAAC;EAEhB,MAAMiC,EAAE,GAAGnC,CAAC,GAAGgC,EAAE;EACjB,MAAMiE,EAAE,GAAGhG,CAAC,GAAG+B,EAAE;EACjB,MAAMM,EAAE,GAAGrC,CAAC,GAAGgC,EAAE;EACjB,MAAMiE,EAAE,GAAGhG,CAAC,GAAG8B,EAAE;EACjB,MAAMmE,EAAE,GAAGjG,CAAC,GAAG+B,EAAE;EACjB,MAAMO,EAAE,GAAGtC,CAAC,GAAGgC,EAAE;EACjB,MAAMO,EAAE,GAAGV,CAAC,GAAGC,EAAE;EACjB,MAAMU,EAAE,GAAGX,CAAC,GAAGE,EAAE;EACjB,MAAMU,EAAE,GAAGZ,CAAC,GAAGG,EAAE;EAEjB1G,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG8G,EAAE,GAAGE,EAAE;EACpBhH,GAAG,CAAC,CAAC,CAAC,GAAGyK,EAAE,GAAGtD,EAAE;EAChBnH,GAAG,CAAC,CAAC,CAAC,GAAG0K,EAAE,GAAGxD,EAAE;EAChBlH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAGyK,EAAE,GAAGtD,EAAE;EAChBnH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG2G,EAAE,GAAGK,EAAE;EACpBhH,GAAG,CAAC,CAAC,CAAC,GAAG2K,EAAE,GAAG1D,EAAE;EAChBjH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAG0K,EAAE,GAAGxD,EAAE;EAChBlH,GAAG,CAAC,CAAC,CAAC,GAAG2K,EAAE,GAAG1D,EAAE;EAChBjH,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG2G,EAAE,GAAGG,EAAE;EACrB9G,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAU4K,OAAOA,CAAC5K,GAAG,EAAE6K,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG;EAC9D,MAAMC,EAAE,GAAG,CAAC,IAAIL,KAAK,GAAGD,IAAI,CAAC;EAC7B,MAAMO,EAAE,GAAG,CAAC,IAAIJ,GAAG,GAAGD,MAAM,CAAC;EAC7B,MAAMM,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;EAC3BlL,GAAG,CAAC,CAAC,CAAC,GAAGiL,IAAI,GAAG,CAAC,GAAGE,EAAE;EACtBnL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGiL,IAAI,GAAG,CAAC,GAAGG,EAAE;EACtBpL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC8K,KAAK,GAAGD,IAAI,IAAIM,EAAE;EAC5BnL,GAAG,CAAC,CAAC,CAAC,GAAG,CAACgL,GAAG,GAAGD,MAAM,IAAIK,EAAE;EAC5BpL,GAAG,CAAC,EAAE,CAAC,GAAG,CAACkL,GAAG,GAAGD,IAAI,IAAII,EAAE;EAC3BrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAGkL,GAAG,GAAGD,IAAI,GAAG,CAAC,GAAGI,EAAE;EAC7BrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAUsL,aAAaA,CAACtL,GAAG,EAAEuL,IAAI,EAAEC,MAAM,EAAEP,IAAI,EAAEC,GAAG;EACxD,MAAMO,CAAC,GAAG,GAAG,GAAGzG,IAAI,CAAC0G,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC;EAClCvL,GAAG,CAAC,CAAC,CAAC,GAAGyL,CAAC,GAAGD,MAAM;EACnBxL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGyL,CAAC;EACVzL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,IAAIkL,GAAG,IAAI,IAAI,IAAIA,GAAG,KAAKS,QAAQ,EAAE;IACnC,MAAMN,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;IAC3BlL,GAAG,CAAC,EAAE,CAAC,GAAG,CAACkL,GAAG,GAAGD,IAAI,IAAII,EAAE;IAC3BrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGkL,GAAG,GAAGD,IAAI,GAAGI,EAAE;EAC/B,CAAC,MAAM;IACLrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACZA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAGiL,IAAI;EACrB;EACA,OAAOjL,GAAG;AACZ;AAEA;;;;AAIA,OAAO,MAAM4L,WAAW,GAAGN,aAAa;AAExC;;;;;;;;;;;;;AAaA,OAAM,SAAUO,aAAaA,CAAC7L,GAAG,EAAEuL,IAAI,EAAEC,MAAM,EAAEP,IAAI,EAAEC,GAAG;EACxD,MAAMO,CAAC,GAAG,GAAG,GAAGzG,IAAI,CAAC0G,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC;EAClCvL,GAAG,CAAC,CAAC,CAAC,GAAGyL,CAAC,GAAGD,MAAM;EACnBxL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGyL,CAAC;EACVzL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,IAAIkL,GAAG,IAAI,IAAI,IAAIA,GAAG,KAAKS,QAAQ,EAAE;IACnC,MAAMN,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;IAC3BlL,GAAG,CAAC,EAAE,CAAC,GAAGkL,GAAG,GAAGG,EAAE;IAClBrL,GAAG,CAAC,EAAE,CAAC,GAAGkL,GAAG,GAAGD,IAAI,GAAGI,EAAE;EAC3B,CAAC,MAAM;IACLrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACZA,GAAG,CAAC,EAAE,CAAC,GAAG,CAACiL,IAAI;EACjB;EACA,OAAOjL,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAU8L,0BAA0BA,CAAC9L,GAAG,EAAE+L,GAAG,EAAEd,IAAI,EAAEC,GAAG;EAC5D,MAAMc,KAAK,GAAGhH,IAAI,CAAC0G,GAAG,CAAEK,GAAG,CAACE,SAAS,GAAGjH,IAAI,CAACkH,EAAE,GAAI,KAAK,CAAC;EACzD,MAAMC,OAAO,GAAGnH,IAAI,CAAC0G,GAAG,CAAEK,GAAG,CAACK,WAAW,GAAGpH,IAAI,CAACkH,EAAE,GAAI,KAAK,CAAC;EAC7D,MAAMG,OAAO,GAAGrH,IAAI,CAAC0G,GAAG,CAAEK,GAAG,CAACO,WAAW,GAAGtH,IAAI,CAACkH,EAAE,GAAI,KAAK,CAAC;EAC7D,MAAMK,QAAQ,GAAGvH,IAAI,CAAC0G,GAAG,CAAEK,GAAG,CAACS,YAAY,GAAGxH,IAAI,CAACkH,EAAE,GAAI,KAAK,CAAC;EAC/D,MAAMO,MAAM,GAAG,GAAG,IAAIJ,OAAO,GAAGE,QAAQ,CAAC;EACzC,MAAMG,MAAM,GAAG,GAAG,IAAIV,KAAK,GAAGG,OAAO,CAAC;EAEtCnM,GAAG,CAAC,CAAC,CAAC,GAAGyM,MAAM;EACfzM,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;EACZA,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;EACZA,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;EACZA,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;EACZA,GAAG,CAAC,CAAC,CAAC,GAAG0M,MAAM;EACf1M,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;EACZA,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;EACZA,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAACqM,OAAO,GAAGE,QAAQ,IAAIE,MAAM,GAAG,GAAG,CAAC;EAC/CzM,GAAG,CAAC,CAAC,CAAC,GAAG,CAACgM,KAAK,GAAGG,OAAO,IAAIO,MAAM,GAAG,GAAG;EACzC1M,GAAG,CAAC,EAAE,CAAC,GAAGkL,GAAG,IAAID,IAAI,GAAGC,GAAG,CAAC;EAC5BlL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;EACdA,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG;EACbA,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG;EACbA,GAAG,CAAC,EAAE,CAAC,GAAIkL,GAAG,GAAGD,IAAI,IAAKA,IAAI,GAAGC,GAAG,CAAC;EACrClL,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG;EACb,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;;;;AAcA,OAAM,SAAU2M,OAAOA,CAAC3M,GAAG,EAAE6K,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG;EAC9D,MAAM0B,EAAE,GAAG,CAAC,IAAI/B,IAAI,GAAGC,KAAK,CAAC;EAC7B,MAAM+B,EAAE,GAAG,CAAC,IAAI9B,MAAM,GAAGC,GAAG,CAAC;EAC7B,MAAMK,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;EAC3BlL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG4M,EAAE;EAChB5M,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG6M,EAAE;EAChB7M,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGqL,EAAE;EAChBrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC6K,IAAI,GAAGC,KAAK,IAAI8B,EAAE;EAC7B5M,GAAG,CAAC,EAAE,CAAC,GAAG,CAACgL,GAAG,GAAGD,MAAM,IAAI8B,EAAE;EAC7B7M,GAAG,CAAC,EAAE,CAAC,GAAG,CAACkL,GAAG,GAAGD,IAAI,IAAII,EAAE;EAC3BrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;AAIA,OAAO,MAAM8M,KAAK,GAAGH,OAAO;AAE5B;;;;;;;;;;;;;;AAcA,OAAM,SAAUI,OAAOA,CAAC/M,GAAG,EAAE6K,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG;EAC9D,MAAM0B,EAAE,GAAG,CAAC,IAAI/B,IAAI,GAAGC,KAAK,CAAC;EAC7B,MAAM+B,EAAE,GAAG,CAAC,IAAI9B,MAAM,GAAGC,GAAG,CAAC;EAC7B,MAAMK,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;EAC3BlL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG4M,EAAE;EAChB5M,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG6M,EAAE;EAChB7M,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAGqL,EAAE;EACZrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC6K,IAAI,GAAGC,KAAK,IAAI8B,EAAE;EAC7B5M,GAAG,CAAC,EAAE,CAAC,GAAG,CAACgL,GAAG,GAAGD,MAAM,IAAI8B,EAAE;EAC7B7M,GAAG,CAAC,EAAE,CAAC,GAAGiL,IAAI,GAAGI,EAAE;EACnBrL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;AAUA,OAAM,SAAUgN,MAAMA,CAAChN,GAAG,EAAEiN,GAAG,EAAEC,MAAM,EAAEC,EAAE;EACzC,IAAIpI,GAAG;EACP,IAAIqI,EAAE;EACN,IAAIC,EAAE;EACN,IAAI7G,EAAE;EACN,IAAI8G,EAAE;EACN,IAAIC,EAAE;EACN,IAAI9G,EAAE;EACN,IAAI+G,EAAE;EACN,IAAIC,EAAE;EACN,IAAI/G,EAAE;EACN,MAAMgH,IAAI,GAAGT,GAAG,CAAC,CAAC,CAAC;EACnB,MAAMU,IAAI,GAAGV,GAAG,CAAC,CAAC,CAAC;EACnB,MAAMW,IAAI,GAAGX,GAAG,CAAC,CAAC,CAAC;EACnB,MAAMY,GAAG,GAAGV,EAAE,CAAC,CAAC,CAAC;EACjB,MAAMW,GAAG,GAAGX,EAAE,CAAC,CAAC,CAAC;EACjB,MAAMY,GAAG,GAAGZ,EAAE,CAAC,CAAC,CAAC;EACjB,MAAMa,OAAO,GAAGd,MAAM,CAAC,CAAC,CAAC;EACzB,MAAMe,OAAO,GAAGf,MAAM,CAAC,CAAC,CAAC;EACzB,MAAMgB,OAAO,GAAGhB,MAAM,CAAC,CAAC,CAAC;EAEzB,IACElI,IAAI,CAACmJ,GAAG,CAACT,IAAI,GAAGM,OAAO,CAAC,GAAGlO,QAAQ,CAAC2F,OAAO,IAC3CT,IAAI,CAACmJ,GAAG,CAACR,IAAI,GAAGM,OAAO,CAAC,GAAGnO,QAAQ,CAAC2F,OAAO,IAC3CT,IAAI,CAACmJ,GAAG,CAACP,IAAI,GAAGM,OAAO,CAAC,GAAGpO,QAAQ,CAAC2F,OAAO,EAC3C;IACA,OAAOjE,QAAQ,CAACxB,GAAG,CAAC;EACtB;EAEAwN,EAAE,GAAGE,IAAI,GAAGM,OAAO;EACnBP,EAAE,GAAGE,IAAI,GAAGM,OAAO;EACnBvH,EAAE,GAAGkH,IAAI,GAAGM,OAAO;EAEnBnJ,GAAG,GAAG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACuI,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAG/G,EAAE,GAAGA,EAAE,CAAC;EAChD8G,EAAE,IAAIzI,GAAG;EACT0I,EAAE,IAAI1I,GAAG;EACT2B,EAAE,IAAI3B,GAAG;EAETqI,EAAE,GAAGU,GAAG,GAAGpH,EAAE,GAAGqH,GAAG,GAAGN,EAAE;EACxBJ,EAAE,GAAGU,GAAG,GAAGP,EAAE,GAAGK,GAAG,GAAGnH,EAAE;EACxBF,EAAE,GAAGqH,GAAG,GAAGJ,EAAE,GAAGK,GAAG,GAAGN,EAAE;EACxBzI,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACmI,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAG7G,EAAE,GAAGA,EAAE,CAAC;EAC5C,IAAI,CAACzB,GAAG,EAAE;IACRqI,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACN7G,EAAE,GAAG,CAAC;EACR,CAAC,MAAM;IACLzB,GAAG,GAAG,CAAC,GAAGA,GAAG;IACbqI,EAAE,IAAIrI,GAAG;IACTsI,EAAE,IAAItI,GAAG;IACTyB,EAAE,IAAIzB,GAAG;EACX;EAEAuI,EAAE,GAAGG,EAAE,GAAGjH,EAAE,GAAGE,EAAE,GAAG2G,EAAE;EACtBE,EAAE,GAAG7G,EAAE,GAAG0G,EAAE,GAAGI,EAAE,GAAGhH,EAAE;EACtBC,EAAE,GAAG+G,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE;EAEtBrI,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACqI,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAG9G,EAAE,GAAGA,EAAE,CAAC;EAC5C,IAAI,CAAC1B,GAAG,EAAE;IACRuI,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACN9G,EAAE,GAAG,CAAC;EACR,CAAC,MAAM;IACL1B,GAAG,GAAG,CAAC,GAAGA,GAAG;IACbuI,EAAE,IAAIvI,GAAG;IACTwI,EAAE,IAAIxI,GAAG;IACT0B,EAAE,IAAI1B,GAAG;EACX;EAEA/E,GAAG,CAAC,CAAC,CAAC,GAAGoN,EAAE;EACXpN,GAAG,CAAC,CAAC,CAAC,GAAGsN,EAAE;EACXtN,GAAG,CAAC,CAAC,CAAC,GAAGwN,EAAE;EACXxN,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGqN,EAAE;EACXrN,GAAG,CAAC,CAAC,CAAC,GAAGuN,EAAE;EACXvN,GAAG,CAAC,CAAC,CAAC,GAAGyN,EAAE;EACXzN,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGwG,EAAE;EACXxG,GAAG,CAAC,CAAC,CAAC,GAAGyG,EAAE;EACXzG,GAAG,CAAC,EAAE,CAAC,GAAG0G,EAAE;EACZ1G,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEoN,EAAE,GAAGM,IAAI,GAAGL,EAAE,GAAGM,IAAI,GAAGnH,EAAE,GAAGoH,IAAI,CAAC;EAC9C5N,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEsN,EAAE,GAAGI,IAAI,GAAGH,EAAE,GAAGI,IAAI,GAAGlH,EAAE,GAAGmH,IAAI,CAAC;EAC9C5N,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEwN,EAAE,GAAGE,IAAI,GAAGD,EAAE,GAAGE,IAAI,GAAGjH,EAAE,GAAGkH,IAAI,CAAC;EAC9C5N,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;AASA,OAAM,SAAUoO,QAAQA,CAACpO,GAAG,EAAEiN,GAAG,EAAEoB,MAAM,EAAElB,EAAE;EAC3C,MAAMO,IAAI,GAAGT,GAAG,CAAC,CAAC,CAAC;EACnB,MAAMU,IAAI,GAAGV,GAAG,CAAC,CAAC,CAAC;EACnB,MAAMW,IAAI,GAAGX,GAAG,CAAC,CAAC,CAAC;EACnB,MAAMY,GAAG,GAAGV,EAAE,CAAC,CAAC,CAAC;EACjB,MAAMW,GAAG,GAAGX,EAAE,CAAC,CAAC,CAAC;EACjB,MAAMY,GAAG,GAAGZ,EAAE,CAAC,CAAC,CAAC;EAEjB,IAAIK,EAAE,GAAGE,IAAI,GAAGW,MAAM,CAAC,CAAC,CAAC;EACzB,IAAIZ,EAAE,GAAGE,IAAI,GAAGU,MAAM,CAAC,CAAC,CAAC;EACzB,IAAI3H,EAAE,GAAGkH,IAAI,GAAGS,MAAM,CAAC,CAAC,CAAC;EAEzB,IAAItJ,GAAG,GAAGyI,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAG/G,EAAE,GAAGA,EAAE;EACrC,IAAI3B,GAAG,GAAG,CAAC,EAAE;IACXA,GAAG,GAAG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACF,GAAG,CAAC;IACxByI,EAAE,IAAIzI,GAAG;IACT0I,EAAE,IAAI1I,GAAG;IACT2B,EAAE,IAAI3B,GAAG;EACX;EAEA,IAAIqI,EAAE,GAAGU,GAAG,GAAGpH,EAAE,GAAGqH,GAAG,GAAGN,EAAE;EAC5B,IAAIJ,EAAE,GAAGU,GAAG,GAAGP,EAAE,GAAGK,GAAG,GAAGnH,EAAE;EAC5B,IAAIF,EAAE,GAAGqH,GAAG,GAAGJ,EAAE,GAAGK,GAAG,GAAGN,EAAE;EAE5BzI,GAAG,GAAGqI,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAG7G,EAAE,GAAGA,EAAE;EACjC,IAAIzB,GAAG,GAAG,CAAC,EAAE;IACXA,GAAG,GAAG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACF,GAAG,CAAC;IACxBqI,EAAE,IAAIrI,GAAG;IACTsI,EAAE,IAAItI,GAAG;IACTyB,EAAE,IAAIzB,GAAG;EACX;EAEA/E,GAAG,CAAC,CAAC,CAAC,GAAGoN,EAAE;EACXpN,GAAG,CAAC,CAAC,CAAC,GAAGqN,EAAE;EACXrN,GAAG,CAAC,CAAC,CAAC,GAAGwG,EAAE;EACXxG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGyN,EAAE,GAAGjH,EAAE,GAAGE,EAAE,GAAG2G,EAAE;EAC1BrN,GAAG,CAAC,CAAC,CAAC,GAAG0G,EAAE,GAAG0G,EAAE,GAAGI,EAAE,GAAGhH,EAAE;EAC1BxG,GAAG,CAAC,CAAC,CAAC,GAAGwN,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE;EAC1BpN,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGwN,EAAE;EACXxN,GAAG,CAAC,CAAC,CAAC,GAAGyN,EAAE;EACXzN,GAAG,CAAC,EAAE,CAAC,GAAG0G,EAAE;EACZ1G,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG0N,IAAI;EACd1N,GAAG,CAAC,EAAE,CAAC,GAAG2N,IAAI;EACd3N,GAAG,CAAC,EAAE,CAAC,GAAG4N,IAAI;EACd5N,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUsO,GAAGA,CAAClO,CAAC;EACnB,OAAO,QAAQA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,EAAE,CAAC,KAAKA,CAAC,CAAC,EAAE,CAAC,KAAKA,CAAC,CAAC,EAAE,CAAC,KAAKA,CAAC,CAAC,EAAE,CAAC,KAAKA,CAAC,CAAC,EAAE,CAAC,KAAKA,CAAC,CAAC,EAAE,CAAC,GAAG;AACrK;AAEA;;;;;;AAMA,OAAM,SAAUmO,IAAIA,CAACnO,CAAC;EACpB,OAAO4E,IAAI,CAACC,IAAI,CACd7E,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACTA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,GACbA,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,GACbA,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,GACbA,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,GACbA,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,GACbA,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,CAChB;AACH;AAEA;;;;;;;;AAQA,OAAM,SAAUoO,GAAGA,CAACxO,GAAG,EAAEI,CAAC,EAAEiE,CAAC;EAC3BrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvB,OAAOrE,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUyO,QAAQA,CAACzO,GAAG,EAAEI,CAAC,EAAEiE,CAAC;EAChCrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC;EACpBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC;EACvB,OAAOrE,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU0O,cAAcA,CAAC1O,GAAG,EAAEI,CAAC,EAAEiE,CAAC;EACtCrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC;EACjBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC;EACnBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC;EACnBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC;EACnBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC;EACnBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC;EACnBrE,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC;EACnB,OAAOrE,GAAG;AACZ;AAEA;;;;;;;;;AASA,OAAM,SAAU2O,oBAAoBA,CAAC3O,GAAG,EAAEI,CAAC,EAAEiE,CAAC,EAAEM,KAAK;EACnD3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiE,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;EAC5B3E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC,GAAGM,KAAK;EAC/B3E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC,GAAGM,KAAK;EAC/B3E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC,GAAGM,KAAK;EAC/B3E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC,GAAGM,KAAK;EAC/B3E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC,GAAGM,KAAK;EAC/B3E,GAAG,CAAC,EAAE,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC,GAAGiE,CAAC,CAAC,EAAE,CAAC,GAAGM,KAAK;EAC/B,OAAO3E,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAU4O,WAAWA,CAACxO,CAAC,EAAEiE,CAAC;EAC9B,OACEjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,CAAC,CAAC,KAAKiE,CAAC,CAAC,CAAC,CAAC,IACbjE,CAAC,CAAC,EAAE,CAAC,KAAKiE,CAAC,CAAC,EAAE,CAAC,IACfjE,CAAC,CAAC,EAAE,CAAC,KAAKiE,CAAC,CAAC,EAAE,CAAC,IACfjE,CAAC,CAAC,EAAE,CAAC,KAAKiE,CAAC,CAAC,EAAE,CAAC,IACfjE,CAAC,CAAC,EAAE,CAAC,KAAKiE,CAAC,CAAC,EAAE,CAAC,IACfjE,CAAC,CAAC,EAAE,CAAC,KAAKiE,CAAC,CAAC,EAAE,CAAC,IACfjE,CAAC,CAAC,EAAE,CAAC,KAAKiE,CAAC,CAAC,EAAE,CAAC;AAEnB;AAEA;;;;;;;AAOA,OAAM,SAAUwK,MAAMA,CAACzO,CAAC,EAAEiE,CAAC;EACzB,MAAMyK,EAAE,GAAG1O,CAAC,CAAC,CAAC,CAAC;EACf,MAAM2O,EAAE,GAAG3O,CAAC,CAAC,CAAC,CAAC;EACf,MAAM4O,EAAE,GAAG5O,CAAC,CAAC,CAAC,CAAC;EACf,MAAM6O,EAAE,GAAG7O,CAAC,CAAC,CAAC,CAAC;EACf,MAAM8O,EAAE,GAAG9O,CAAC,CAAC,CAAC,CAAC;EACf,MAAM+O,EAAE,GAAG/O,CAAC,CAAC,CAAC,CAAC;EACf,MAAMgP,EAAE,GAAGhP,CAAC,CAAC,CAAC,CAAC;EACf,MAAMiP,EAAE,GAAGjP,CAAC,CAAC,CAAC,CAAC;EACf,MAAMkP,EAAE,GAAGlP,CAAC,CAAC,CAAC,CAAC;EACf,MAAMmP,EAAE,GAAGnP,CAAC,CAAC,CAAC,CAAC;EACf,MAAM8B,GAAG,GAAG9B,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM+B,GAAG,GAAG/B,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM0B,GAAG,GAAG1B,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMoP,GAAG,GAAGpP,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMqP,GAAG,GAAGrP,CAAC,CAAC,EAAE,CAAC;EAEjB,MAAMsD,EAAE,GAAGW,CAAC,CAAC,CAAC,CAAC;EACf,MAAMV,EAAE,GAAGU,CAAC,CAAC,CAAC,CAAC;EACf,MAAMT,EAAE,GAAGS,CAAC,CAAC,CAAC,CAAC;EACf,MAAMR,EAAE,GAAGQ,CAAC,CAAC,CAAC,CAAC;EACf,MAAMP,EAAE,GAAGO,CAAC,CAAC,CAAC,CAAC;EACf,MAAMN,EAAE,GAAGM,CAAC,CAAC,CAAC,CAAC;EACf,MAAML,EAAE,GAAGK,CAAC,CAAC,CAAC,CAAC;EACf,MAAMJ,EAAE,GAAGI,CAAC,CAAC,CAAC,CAAC;EACf,MAAMH,EAAE,GAAGG,CAAC,CAAC,CAAC,CAAC;EACf,MAAMF,EAAE,GAAGE,CAAC,CAAC,CAAC,CAAC;EACf,MAAMhB,GAAG,GAAGgB,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMf,GAAG,GAAGe,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMqL,GAAG,GAAGrL,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMsL,GAAG,GAAGtL,CAAC,CAAC,EAAE,CAAC;EACjB,MAAMuL,GAAG,GAAGvL,CAAC,CAAC,EAAE,CAAC;EAEjB,OACEW,IAAI,CAACmJ,GAAG,CAACW,EAAE,GAAGpL,EAAE,CAAC,IAAI5D,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACW,EAAE,CAAC,EAAE9J,IAAI,CAACmJ,GAAG,CAACzK,EAAE,CAAC,CAAC,IACjFsB,IAAI,CAACmJ,GAAG,CAACY,EAAE,GAAGpL,EAAE,CAAC,IAAI7D,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACY,EAAE,CAAC,EAAE/J,IAAI,CAACmJ,GAAG,CAACxK,EAAE,CAAC,CAAC,IACjFqB,IAAI,CAACmJ,GAAG,CAACa,EAAE,GAAGpL,EAAE,CAAC,IAAI9D,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACa,EAAE,CAAC,EAAEhK,IAAI,CAACmJ,GAAG,CAACvK,EAAE,CAAC,CAAC,IACjFoB,IAAI,CAACmJ,GAAG,CAACc,EAAE,GAAGpL,EAAE,CAAC,IAAI/D,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACc,EAAE,CAAC,EAAEjK,IAAI,CAACmJ,GAAG,CAACtK,EAAE,CAAC,CAAC,IACjFmB,IAAI,CAACmJ,GAAG,CAACe,EAAE,GAAGpL,EAAE,CAAC,IAAIhE,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACe,EAAE,CAAC,EAAElK,IAAI,CAACmJ,GAAG,CAACrK,EAAE,CAAC,CAAC,IACjFkB,IAAI,CAACmJ,GAAG,CAACgB,EAAE,GAAGpL,EAAE,CAAC,IAAIjE,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACgB,EAAE,CAAC,EAAEnK,IAAI,CAACmJ,GAAG,CAACpK,EAAE,CAAC,CAAC,IACjFiB,IAAI,CAACmJ,GAAG,CAACiB,EAAE,GAAGpL,EAAE,CAAC,IAAIlE,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACiB,EAAE,CAAC,EAAEpK,IAAI,CAACmJ,GAAG,CAACnK,EAAE,CAAC,CAAC,IACjFgB,IAAI,CAACmJ,GAAG,CAACkB,EAAE,GAAGpL,EAAE,CAAC,IAAInE,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACkB,EAAE,CAAC,EAAErK,IAAI,CAACmJ,GAAG,CAAClK,EAAE,CAAC,CAAC,IACjFe,IAAI,CAACmJ,GAAG,CAACmB,EAAE,GAAGpL,EAAE,CAAC,IAAIpE,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACmB,EAAE,CAAC,EAAEtK,IAAI,CAACmJ,GAAG,CAACjK,EAAE,CAAC,CAAC,IACjFc,IAAI,CAACmJ,GAAG,CAACoB,EAAE,GAAGpL,EAAE,CAAC,IAAIrE,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACoB,EAAE,CAAC,EAAEvK,IAAI,CAACmJ,GAAG,CAAChK,EAAE,CAAC,CAAC,IACjFa,IAAI,CAACmJ,GAAG,CAACjM,GAAG,GAAGmB,GAAG,CAAC,IAAIvD,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACjM,GAAG,CAAC,EAAE8C,IAAI,CAACmJ,GAAG,CAAC9K,GAAG,CAAC,CAAC,IACrF2B,IAAI,CAACmJ,GAAG,CAAChM,GAAG,GAAGmB,GAAG,CAAC,IAAIxD,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAAChM,GAAG,CAAC,EAAE6C,IAAI,CAACmJ,GAAG,CAAC7K,GAAG,CAAC,CAAC,IACrF0B,IAAI,CAACmJ,GAAG,CAACtM,GAAG,GAAGwD,GAAG,CAAC,IAAIvF,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACtM,GAAG,CAAC,EAAEmD,IAAI,CAACmJ,GAAG,CAAC9I,GAAG,CAAC,CAAC,IACrFL,IAAI,CAACmJ,GAAG,CAACrM,GAAG,GAAG4N,GAAG,CAAC,IAAI5P,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACrM,GAAG,CAAC,EAAEkD,IAAI,CAACmJ,GAAG,CAACuB,GAAG,CAAC,CAAC,IACrF1K,IAAI,CAACmJ,GAAG,CAACqB,GAAG,GAAGG,GAAG,CAAC,IAAI7P,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACqB,GAAG,CAAC,EAAExK,IAAI,CAACmJ,GAAG,CAACwB,GAAG,CAAC,CAAC,IACrF3K,IAAI,CAACmJ,GAAG,CAACsB,GAAG,GAAGG,GAAG,CAAC,IAAI9P,QAAQ,CAAC2F,OAAO,GAAGT,IAAI,CAAC6K,GAAG,CAAC,GAAG,EAAE7K,IAAI,CAACmJ,GAAG,CAACsB,GAAG,CAAC,EAAEzK,IAAI,CAACmJ,GAAG,CAACyB,GAAG,CAAC,CAAC;AAEzF;AAEA;;;;AAIA,OAAO,MAAME,GAAG,GAAG1L,QAAQ;AAE3B;;;;AAIA,OAAO,MAAM2L,GAAG,GAAGtB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}