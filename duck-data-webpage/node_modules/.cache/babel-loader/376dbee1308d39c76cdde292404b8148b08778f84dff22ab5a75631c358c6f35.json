{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { worldToLngLat } from '@math.gl/web-mercator';\nconst TILE_SIZE = 512;\nexport function quadkeyToWorldBounds(quadkey, coverage) {\n  let x = 0;\n  let y = 0;\n  let mask = 1 << quadkey.length;\n  const scale = mask / TILE_SIZE;\n  for (let i = 0; i < quadkey.length; i++) {\n    mask >>= 1;\n    const q = parseInt(quadkey[i]);\n    if (q % 2) x |= mask;\n    if (q > 1) y |= mask;\n  }\n  return [[x / scale, TILE_SIZE - y / scale], [(x + coverage) / scale, TILE_SIZE - (y + coverage) / scale]];\n}\nexport function getQuadkeyPolygon(quadkey, coverage = 1) {\n  const [topLeft, bottomRight] = quadkeyToWorldBounds(quadkey, coverage);\n  const [w, n] = worldToLngLat(topLeft);\n  const [e, s] = worldToLngLat(bottomRight);\n  return [e, n, e, s, w, s, w, n, e, n];\n}","map":{"version":3,"names":["worldToLngLat","TILE_SIZE","quadkeyToWorldBounds","quadkey","coverage","x","y","mask","length","scale","i","q","parseInt","getQuadkeyPolygon","topLeft","bottomRight","w","n","e","s"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\quadkey-layer\\quadkey-utils.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {worldToLngLat} from '@math.gl/web-mercator';\n\nconst TILE_SIZE = 512;\n\nexport function quadkeyToWorldBounds(quadkey: string, coverage: number): [number[], number[]] {\n  let x = 0;\n  let y = 0;\n  let mask = 1 << quadkey.length;\n  const scale = mask / TILE_SIZE;\n\n  for (let i = 0; i < quadkey.length; i++) {\n    mask >>= 1;\n    const q = parseInt(quadkey[i]);\n    if (q % 2) x |= mask;\n    if (q > 1) y |= mask;\n  }\n  return [\n    [x / scale, TILE_SIZE - y / scale],\n    [(x + coverage) / scale, TILE_SIZE - (y + coverage) / scale]\n  ];\n}\n\nexport function getQuadkeyPolygon(quadkey: string, coverage = 1): number[] {\n  const [topLeft, bottomRight] = quadkeyToWorldBounds(quadkey, coverage);\n  const [w, n] = worldToLngLat(topLeft);\n  const [e, s] = worldToLngLat(bottomRight);\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,aAAa,QAAO,uBAAuB;AAEnD,MAAMC,SAAS,GAAG,GAAG;AAErB,OAAM,SAAUC,oBAAoBA,CAACC,OAAe,EAAEC,QAAgB;EACpE,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,IAAI,GAAG,CAAC,IAAIJ,OAAO,CAACK,MAAM;EAC9B,MAAMC,KAAK,GAAGF,IAAI,GAAGN,SAAS;EAE9B,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,OAAO,CAACK,MAAM,EAAEE,CAAC,EAAE,EAAE;IACvCH,IAAI,KAAK,CAAC;IACV,MAAMI,CAAC,GAAGC,QAAQ,CAACT,OAAO,CAACO,CAAC,CAAC,CAAC;IAC9B,IAAIC,CAAC,GAAG,CAAC,EAAEN,CAAC,IAAIE,IAAI;IACpB,IAAII,CAAC,GAAG,CAAC,EAAEL,CAAC,IAAIC,IAAI;EACtB;EACA,OAAO,CACL,CAACF,CAAC,GAAGI,KAAK,EAAER,SAAS,GAAGK,CAAC,GAAGG,KAAK,CAAC,EAClC,CAAC,CAACJ,CAAC,GAAGD,QAAQ,IAAIK,KAAK,EAAER,SAAS,GAAG,CAACK,CAAC,GAAGF,QAAQ,IAAIK,KAAK,CAAC,CAC7D;AACH;AAEA,OAAM,SAAUI,iBAAiBA,CAACV,OAAe,EAAEC,QAAQ,GAAG,CAAC;EAC7D,MAAM,CAACU,OAAO,EAAEC,WAAW,CAAC,GAAGb,oBAAoB,CAACC,OAAO,EAAEC,QAAQ,CAAC;EACtE,MAAM,CAACY,CAAC,EAAEC,CAAC,CAAC,GAAGjB,aAAa,CAACc,OAAO,CAAC;EACrC,MAAM,CAACI,CAAC,EAAEC,CAAC,CAAC,GAAGnB,aAAa,CAACe,WAAW,CAAC;EACzC,OAAO,CAACG,CAAC,EAAED,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEH,CAAC,EAAEG,CAAC,EAAEH,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAED,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}