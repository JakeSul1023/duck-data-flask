{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport { OrbitState } from \"./orbit-controller.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n  _calculateNewZoom(_ref) {\n    let {\n      scale,\n      startZoom\n    } = _ref;\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\nexport default class OrthographicController extends Controller {\n  constructor() {\n    super(...arguments);\n    this.ControllerState = OrthographicState;\n    this.transition = {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n    };\n    this.dragMode = 'pan';\n  }\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}\n//# sourceMappingURL=orthographic-controller.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}