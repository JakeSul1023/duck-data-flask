{"ast":null,"code":"/**\n * Checks if bigint can be converted to number and convert it if possible\n * @param bigint bigint to be converted\n * @returns number\n */\nconst toNumber = bigint => {\n  if (bigint > Number.MAX_SAFE_INTEGER) {\n    throw new Error('Offset is out of bounds');\n  }\n  return Number(bigint);\n};\n/**\n * Provides file data using DataView\n * @deprecated - will be replaced with ReadableFile\n */\nexport class DataViewFile {\n  /** The DataView from which data is provided */\n  file;\n  constructor(file) {\n    this.file = file;\n  }\n  async destroy() {}\n  /**\n   * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint8(offset) {\n    return this.file.getUint8(toNumber(offset));\n  }\n  /**\n   * Gets an unsigned 16-bit intege at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint16(offset) {\n    return this.file.getUint16(toNumber(offset), true);\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint32(offset) {\n    return this.file.getUint32(toNumber(offset), true);\n  }\n  /**\n   * Gets an unsigned 64-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getBigUint64(offset) {\n    return this.file.getBigUint64(toNumber(offset), true);\n  }\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in bytes, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  async slice(startOffset, endOffset) {\n    return this.file.buffer.slice(toNumber(startOffset), toNumber(endOffset));\n  }\n  /** the length (in bytes) of the data. */\n  get length() {\n    return BigInt(this.file.byteLength);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}