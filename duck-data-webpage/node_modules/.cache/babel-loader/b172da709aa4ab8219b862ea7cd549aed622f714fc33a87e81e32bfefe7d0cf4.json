{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Note: The numeric values here are matched by shader code in the\n// \"project\" and \"project64\" shader modules. Both places need to be\n// updated.\nimport log from \"../utils/log.js\";\nimport { Pan, InputDirection, Pinch, Tap } from 'mjolnir.js';\n/**\n * The coordinate system that positions/dimensions are defined in.\n */\nexport const COORDINATE_SYSTEM = {\n  /**\n   * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise\n   */\n  DEFAULT: -1,\n  /**\n   * Positions are interpreted as [longitude, latitude, elevation]\n   * longitude/latitude are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT: 1,\n  /**\n   * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.\n   * Dimensions are in meters.\n   */\n  METER_OFFSETS: 2,\n  /**\n   * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.\n   * deltaLng/deltaLat are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT_OFFSETS: 3,\n  /**\n   * Positions and dimensions are in the common units of the viewport.\n   */\n  CARTESIAN: 0\n};\n// Deprecated\n/* eslint-disable accessor-pairs */\nObject.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {\n  get: () => {\n    log.deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();\n    return 0;\n  }\n});\n/* eslint-enable accessor-pairs */\n/**\n * How coordinates are transformed from the world space into the common space.\n */\nexport const PROJECTION_MODE = {\n  /**\n   * Render geospatial data in Web Mercator projection\n   */\n  WEB_MERCATOR: 1,\n  /**\n   * Render geospatial data as a 3D globe\n   */\n  GLOBE: 2,\n  /**\n   * (Internal use only) Web Mercator projection at high zoom\n   */\n  WEB_MERCATOR_AUTO_OFFSET: 4,\n  /**\n   * No transformation\n   */\n  IDENTITY: 0\n};\nexport const UNIT = {\n  common: 0,\n  meters: 1,\n  pixels: 2\n};\nexport const EVENT_HANDLERS = {\n  click: 'onClick',\n  panstart: 'onDragStart',\n  panmove: 'onDrag',\n  panend: 'onDragEnd'\n};\nexport const RECOGNIZERS = {\n  multipan: [Pan, {\n    threshold: 10,\n    direction: InputDirection.Vertical,\n    pointers: 2\n  }],\n  pinch: [Pinch, {}, null, ['multipan']],\n  pan: [Pan, {\n    threshold: 1\n  }, ['pinch'], ['multipan']],\n  dblclick: [Tap, {\n    event: 'dblclick',\n    taps: 2\n  }],\n  click: [Tap, {\n    event: 'click'\n  }, null, ['dblclick']]\n};\n/**\n * @deprecated Use string constants directly\n */\nexport const OPERATION = {\n  DRAW: 'draw',\n  MASK: 'mask',\n  TERRAIN: 'terrain'\n};\n//# sourceMappingURL=constants.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}