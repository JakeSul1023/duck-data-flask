{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ArrowLikeSchema } from \"./arrow-like-schema.js\";\nimport { deduceTableSchema } from \"../simple-table/table-schema.js\";\nimport { getTableCell, getTableLength, getTableNumCols\n// getTableCell,\n// getTableRowShape,\n// getTableColumnIndex,\n// getTableColumnName,\n// getTableRowAsObject,\n// getTableRowAsArray\n} from \"../simple-table/table-accessors.js\";\nclass ArrowLikeVector {\n  table;\n  columnName;\n  constructor(table, columnName) {\n    this.table = table;\n    this.columnName = columnName;\n  }\n  get(rowIndex) {\n    return getTableCell(this.table, rowIndex, this.columnName);\n  }\n  toArray() {\n    switch (this.table.shape) {\n      case 'arrow-table':\n        const arrowTable = this.table.data;\n        return arrowTable.getChild(this.columnName)?.toArray();\n      case 'columnar-table':\n        return this.table.data[this.columnName];\n      default:\n        throw new Error(this.table.shape);\n    }\n  }\n}\n/**\n * Class that provides an API similar to Apache Arrow Table class\n * Forwards methods directly if the underlying table is Arrow, otherwise calls accessor functions\n */\nexport class ArrowLikeTable {\n  schema;\n  table;\n  constructor(table) {\n    const schema = table.schema || deduceTableSchema(table);\n    this.schema = new ArrowLikeSchema(schema.fields, schema.metadata);\n    this.table = {\n      ...table,\n      schema\n    };\n  }\n  // get schema() {\n  //   return this.table.schema;\n  // }\n  get data() {\n    return this.table.shape === 'geojson-table' ? this.table.features : this.table.data;\n  }\n  get numCols() {\n    return getTableNumCols(this.table);\n  }\n  get length() {\n    return getTableLength(this.table);\n  }\n  getChild(columnName) {\n    return new ArrowLikeVector(this.table, columnName);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}