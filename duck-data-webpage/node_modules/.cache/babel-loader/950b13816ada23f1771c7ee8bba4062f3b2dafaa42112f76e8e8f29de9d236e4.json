{"ast":null,"code":"// probe.gl, MIT license\nimport Stat from \"./stat.js\";\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  constructor(options) {\n    this.stats = {};\n    this.id = options.id;\n    this.stats = {};\n    this._initializeStats(options.stats);\n    Object.seal(this);\n  }\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'count';\n    return this._getOrCreate({\n      name,\n      type\n    });\n  }\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n  /** Reset all stats */\n  reset() {\n    for (const stat of Object.values(this.stats)) {\n      stat.reset();\n    }\n    return this;\n  }\n  forEach(fn) {\n    for (const stat of Object.values(this.stats)) {\n      fn(stat);\n    }\n  }\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n    return table;\n  }\n  _initializeStats() {\n    let stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n  _getOrCreate(stat) {\n    const {\n      name,\n      type\n    } = stat;\n    let result = this.stats[name];\n    if (!result) {\n      if (stat instanceof Stat) {\n        result = stat;\n      } else {\n        result = new Stat(name, type);\n      }\n      this.stats[name] = result;\n    }\n    return result;\n  }\n}\n//# sourceMappingURL=stats.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}