{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport ChildProcess from 'child_process';\n// Get an available port\n// Works on Unix systems\nexport function getAvailablePort(defaultPort = 3000) {\n  return new Promise(resolve => {\n    // Get a list of all ports in use\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout) => {\n      if (error) {\n        // likely no permission, e.g. CI\n        resolve(defaultPort);\n        return;\n      }\n      const portsInUse = [];\n      const regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach(line => {\n        const match = regex.exec(line);\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      let port = defaultPort;\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n      resolve(port);\n    });\n  });\n}","map":{"version":3,"names":["ChildProcess","getAvailablePort","defaultPort","Promise","resolve","exec","error","stdout","portsInUse","regex","split","forEach","line","match","push","Number","port","includes"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/process-utils/process-utils.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport ChildProcess from 'child_process';\n// Get an available port\n// Works on Unix systems\nexport function getAvailablePort(defaultPort = 3000) {\n    return new Promise((resolve) => {\n        // Get a list of all ports in use\n        ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout) => {\n            if (error) {\n                // likely no permission, e.g. CI\n                resolve(defaultPort);\n                return;\n            }\n            const portsInUse = [];\n            const regex = /:(\\d+) \\(LISTEN\\)/;\n            stdout.split('\\n').forEach((line) => {\n                const match = regex.exec(line);\n                if (match) {\n                    portsInUse.push(Number(match[1]));\n                }\n            });\n            let port = defaultPort;\n            while (portsInUse.includes(port)) {\n                port++;\n            }\n            resolve(port);\n        });\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,YAAY,MAAM,eAAe;AACxC;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,WAAW,GAAG,IAAI,EAAE;EACjD,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC5B;IACAJ,YAAY,CAACK,IAAI,CAAC,6BAA6B,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChE,IAAID,KAAK,EAAE;QACP;QACAF,OAAO,CAACF,WAAW,CAAC;QACpB;MACJ;MACA,MAAMM,UAAU,GAAG,EAAE;MACrB,MAAMC,KAAK,GAAG,mBAAmB;MACjCF,MAAM,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;QACjC,MAAMC,KAAK,GAAGJ,KAAK,CAACJ,IAAI,CAACO,IAAI,CAAC;QAC9B,IAAIC,KAAK,EAAE;UACPL,UAAU,CAACM,IAAI,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC;MACJ,CAAC,CAAC;MACF,IAAIG,IAAI,GAAGd,WAAW;MACtB,OAAOM,UAAU,CAACS,QAAQ,CAACD,IAAI,CAAC,EAAE;QAC9BA,IAAI,EAAE;MACV;MACAZ,OAAO,CAACY,IAAI,CAAC;IACjB,CAAC,CAAC;EACN,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}