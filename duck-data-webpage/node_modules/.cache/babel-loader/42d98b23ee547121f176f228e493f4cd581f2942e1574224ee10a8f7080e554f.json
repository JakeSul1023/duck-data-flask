{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { Vector3 } from '@math.gl/core';\nimport { GL, octDecode } from '@loaders.gl/math';\nconst scratchNormal = new Vector3();\nexport function normalize3DTileNormalAttribute(tile, normals) {\n  if (!normals) {\n    return null;\n  }\n  if (tile.isOctEncoded16P) {\n    const decodedArray = new Float32Array((tile.pointsLength || 0) * 3);\n    for (let i = 0; i < (tile.pointsLength || 0); i++) {\n      octDecode(normals[i * 2], normals[i * 2 + 1], scratchNormal);\n      // @ts-ignore\n      scratchNormal.toArray(decodedArray, i * 3);\n    }\n    return {\n      type: GL.FLOAT,\n      size: 2,\n      value: decodedArray\n    };\n  }\n  return {\n    type: GL.FLOAT,\n    size: 2,\n    value: normals\n  };\n}","map":{"version":3,"names":["Vector3","GL","octDecode","scratchNormal","normalize3DTileNormalAttribute","tile","normals","isOctEncoded16P","decodedArray","Float32Array","pointsLength","i","toArray","type","FLOAT","size","value"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/normalize-3d-tile-normals.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { Vector3 } from '@math.gl/core';\nimport { GL, octDecode } from '@loaders.gl/math';\nconst scratchNormal = new Vector3();\nexport function normalize3DTileNormalAttribute(tile, normals) {\n    if (!normals) {\n        return null;\n    }\n    if (tile.isOctEncoded16P) {\n        const decodedArray = new Float32Array((tile.pointsLength || 0) * 3);\n        for (let i = 0; i < (tile.pointsLength || 0); i++) {\n            octDecode(normals[i * 2], normals[i * 2 + 1], scratchNormal);\n            // @ts-ignore\n            scratchNormal.toArray(decodedArray, i * 3);\n        }\n        return {\n            type: GL.FLOAT,\n            size: 2,\n            value: decodedArray\n        };\n    }\n    return {\n        type: GL.FLOAT,\n        size: 2,\n        value: normals\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,EAAE,EAAEC,SAAS,QAAQ,kBAAkB;AAChD,MAAMC,aAAa,GAAG,IAAIH,OAAO,CAAC,CAAC;AACnC,OAAO,SAASI,8BAA8BA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC1D,IAAI,CAACA,OAAO,EAAE;IACV,OAAO,IAAI;EACf;EACA,IAAID,IAAI,CAACE,eAAe,EAAE;IACtB,MAAMC,YAAY,GAAG,IAAIC,YAAY,CAAC,CAACJ,IAAI,CAACK,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC;IACnE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIN,IAAI,CAACK,YAAY,IAAI,CAAC,CAAC,EAAEC,CAAC,EAAE,EAAE;MAC/CT,SAAS,CAACI,OAAO,CAACK,CAAC,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAER,aAAa,CAAC;MAC5D;MACAA,aAAa,CAACS,OAAO,CAACJ,YAAY,EAAEG,CAAC,GAAG,CAAC,CAAC;IAC9C;IACA,OAAO;MACHE,IAAI,EAAEZ,EAAE,CAACa,KAAK;MACdC,IAAI,EAAE,CAAC;MACPC,KAAK,EAAER;IACX,CAAC;EACL;EACA,OAAO;IACHK,IAAI,EAAEZ,EAAE,CAACa,KAAK;IACdC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAEV;EACX,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}