{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { asciiToBase64, base64ToAscii } from \"./base64-utils.js\";\n/**\n * Encode a number (usually a digest from a hash function / cipher) as either hex or base64\n * Suitable for hashes like CRC32 where the number of required bits fit withing a JavaScript number.\n */\nexport function encodeNumber(number, encoding) {\n  switch (encoding) {\n    case 'hex':\n      return convertNumberToHex(number);\n    case 'base64':\n      return convertHexToBase64(convertNumberToHex(number));\n    default:\n      throw new Error(encoding);\n  }\n}\n/** Encode a hex string, aeither return hex or re-encode as base64 */\nexport function encodeHex(hex, encoding) {\n  switch (encoding) {\n    case 'hex':\n      return hex;\n    case 'base64':\n      return convertHexToBase64(hex);\n    default:\n      throw new Error(encoding);\n  }\n}\nexport function encodeBase64(base64, encoding) {\n  switch (encoding) {\n    case 'hex':\n      return convertBase64ToHex(base64);\n    case 'base64':\n      return base64;\n    default:\n      throw new Error(encoding);\n  }\n}\n/**\n * Convert a hexadecimal string to base64 encoded string representation\n */\nfunction convertHexToBase64(hexstring) {\n  // Add leading zero to keep even count of digits\n  // eg. f85d741 => 0f85d741\n  if (hexstring.length % 2 !== 0) {\n    hexstring = `0${hexstring}`;\n  }\n  const matches = hexstring.match(/\\w{2}/g) || [];\n  const string = matches.map(a => String.fromCharCode(parseInt(a, 16))).join('');\n  // TODO - define how to handle failures\n  return asciiToBase64(string) || '';\n}\n/**\n * Convert a base64 encoded string to hexadecimal encoded string representation\n */\nfunction convertBase64ToHex(base64String) {\n  return [...base64ToAscii(base64String)].map(c => c.charCodeAt(0).toString(16).padStart(2, '0')).join('');\n}\n/**\n * Converts a number to hex\n */\nfunction convertNumberToHex(cipher) {\n  const hexString = cipher.toString(16);\n  return hexString === '0' ? `0${hexString}` : hexString;\n}","map":{"version":3,"names":["asciiToBase64","base64ToAscii","encodeNumber","number","encoding","convertNumberToHex","convertHexToBase64","Error","encodeHex","hex","encodeBase64","base64","convertBase64ToHex","hexstring","length","matches","match","string","map","a","String","fromCharCode","parseInt","join","base64String","c","charCodeAt","toString","padStart","cipher","hexString"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/crypto/dist/lib/utils/digest-utils.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { asciiToBase64, base64ToAscii } from \"./base64-utils.js\";\n/**\n * Encode a number (usually a digest from a hash function / cipher) as either hex or base64\n * Suitable for hashes like CRC32 where the number of required bits fit withing a JavaScript number.\n */\nexport function encodeNumber(number, encoding) {\n    switch (encoding) {\n        case 'hex':\n            return convertNumberToHex(number);\n        case 'base64':\n            return convertHexToBase64(convertNumberToHex(number));\n        default:\n            throw new Error(encoding);\n    }\n}\n/** Encode a hex string, aeither return hex or re-encode as base64 */\nexport function encodeHex(hex, encoding) {\n    switch (encoding) {\n        case 'hex':\n            return hex;\n        case 'base64':\n            return convertHexToBase64(hex);\n        default:\n            throw new Error(encoding);\n    }\n}\nexport function encodeBase64(base64, encoding) {\n    switch (encoding) {\n        case 'hex':\n            return convertBase64ToHex(base64);\n        case 'base64':\n            return base64;\n        default:\n            throw new Error(encoding);\n    }\n}\n/**\n * Convert a hexadecimal string to base64 encoded string representation\n */\nfunction convertHexToBase64(hexstring) {\n    // Add leading zero to keep even count of digits\n    // eg. f85d741 => 0f85d741\n    if (hexstring.length % 2 !== 0) {\n        hexstring = `0${hexstring}`;\n    }\n    const matches = hexstring.match(/\\w{2}/g) || [];\n    const string = matches.map((a) => String.fromCharCode(parseInt(a, 16))).join('');\n    // TODO - define how to handle failures\n    return asciiToBase64(string) || '';\n}\n/**\n * Convert a base64 encoded string to hexadecimal encoded string representation\n */\nfunction convertBase64ToHex(base64String) {\n    return [...base64ToAscii(base64String)]\n        .map((c) => c.charCodeAt(0).toString(16).padStart(2, '0'))\n        .join('');\n}\n/**\n * Converts a number to hex\n */\nfunction convertNumberToHex(cipher) {\n    const hexString = cipher.toString(16);\n    return hexString === '0' ? `0${hexString}` : hexString;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,aAAa,EAAEC,aAAa,QAAQ,mBAAmB;AAChE;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAC3C,QAAQA,QAAQ;IACZ,KAAK,KAAK;MACN,OAAOC,kBAAkB,CAACF,MAAM,CAAC;IACrC,KAAK,QAAQ;MACT,OAAOG,kBAAkB,CAACD,kBAAkB,CAACF,MAAM,CAAC,CAAC;IACzD;MACI,MAAM,IAAII,KAAK,CAACH,QAAQ,CAAC;EACjC;AACJ;AACA;AACA,OAAO,SAASI,SAASA,CAACC,GAAG,EAAEL,QAAQ,EAAE;EACrC,QAAQA,QAAQ;IACZ,KAAK,KAAK;MACN,OAAOK,GAAG;IACd,KAAK,QAAQ;MACT,OAAOH,kBAAkB,CAACG,GAAG,CAAC;IAClC;MACI,MAAM,IAAIF,KAAK,CAACH,QAAQ,CAAC;EACjC;AACJ;AACA,OAAO,SAASM,YAAYA,CAACC,MAAM,EAAEP,QAAQ,EAAE;EAC3C,QAAQA,QAAQ;IACZ,KAAK,KAAK;MACN,OAAOQ,kBAAkB,CAACD,MAAM,CAAC;IACrC,KAAK,QAAQ;MACT,OAAOA,MAAM;IACjB;MACI,MAAM,IAAIJ,KAAK,CAACH,QAAQ,CAAC;EACjC;AACJ;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACO,SAAS,EAAE;EACnC;EACA;EACA,IAAIA,SAAS,CAACC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5BD,SAAS,GAAG,IAAIA,SAAS,EAAE;EAC/B;EACA,MAAME,OAAO,GAAGF,SAAS,CAACG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;EAC/C,MAAMC,MAAM,GAAGF,OAAO,CAACG,GAAG,CAAEC,CAAC,IAAKC,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAACI,IAAI,CAAC,EAAE,CAAC;EAChF;EACA,OAAOvB,aAAa,CAACiB,MAAM,CAAC,IAAI,EAAE;AACtC;AACA;AACA;AACA;AACA,SAASL,kBAAkBA,CAACY,YAAY,EAAE;EACtC,OAAO,CAAC,GAAGvB,aAAa,CAACuB,YAAY,CAAC,CAAC,CAClCN,GAAG,CAAEO,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACzDL,IAAI,CAAC,EAAE,CAAC;AACjB;AACA;AACA;AACA;AACA,SAASlB,kBAAkBA,CAACwB,MAAM,EAAE;EAChC,MAAMC,SAAS,GAAGD,MAAM,CAACF,QAAQ,CAAC,EAAE,CAAC;EACrC,OAAOG,SAAS,KAAK,GAAG,GAAG,IAAIA,SAAS,EAAE,GAAGA,SAAS;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}