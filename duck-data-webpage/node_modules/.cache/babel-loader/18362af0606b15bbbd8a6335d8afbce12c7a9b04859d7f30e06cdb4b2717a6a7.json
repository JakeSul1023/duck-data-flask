{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parsePBRMaterial } from '@luma.gl/gltf';\nimport { pbrMaterial } from '@luma.gl/shadertools';\nimport { Model } from '@luma.gl/engine';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { meshUniforms } from \"./mesh-layer-uniforms.js\";\nimport vs from \"./mesh-layer-vertex.glsl.js\";\nimport fs from \"./mesh-layer-fragment.glsl.js\";\nfunction validateGeometryAttributes(attributes) {\n  const positionAttribute = attributes.positions || attributes.POSITION;\n  const vertexCount = positionAttribute.value.length / positionAttribute.size;\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {\n      size: 4,\n      value: new Uint8Array(vertexCount * 4).fill(255),\n      normalized: true\n    };\n  }\n}\nconst defaultProps = {\n  pbrMaterial: {\n    type: 'object',\n    value: null\n  },\n  featureIds: {\n    type: 'array',\n    value: null,\n    optional: true\n  }\n};\nclass MeshLayer extends SimpleMeshLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbrMaterial, meshUniforms);\n    return {\n      ...shaders,\n      vs,\n      fs\n    };\n  }\n  initializeState() {\n    const {\n      featureIds\n    } = this.props;\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    if (featureIds) {\n      // attributeManager is always defined in a primitive layer\n      attributeManager.add({\n        featureIdsPickingColors: {\n          type: 'uint8',\n          size: 3,\n          noAlloc: true,\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n  draw(opts) {\n    const {\n      featureIds\n    } = this.props;\n    const {\n      model\n    } = this.state;\n    if (!model) {\n      return;\n    }\n    const meshProps = {\n      pickFeatureIds: Boolean(featureIds)\n    };\n    const pbrProjectionProps = {\n      // Needed for PBR (TODO: find better way to get it)\n      camera: model.uniforms.cameraPosition\n    };\n    model.shaderInputs.setProps({\n      pbrProjection: pbrProjectionProps,\n      mesh: meshProps\n    });\n    super.draw(opts);\n  }\n  getModel(mesh) {\n    const {\n      id\n    } = this.props;\n    const parsedPBRMaterial = this.parseMaterial(this.props.pbrMaterial, mesh);\n    // Keep material to explicitly remove textures\n    this.setState({\n      parsedPBRMaterial\n    });\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.device, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      defines: {\n        ...shaders.defines,\n        ...parsedPBRMaterial?.defines,\n        HAS_UV_REGIONS: mesh.attributes.uvRegions ? 1 : 0\n      },\n      parameters: parsedPBRMaterial?.parameters,\n      isInstanced: true\n    });\n    return model;\n  }\n  updatePbrMaterialUniforms(material) {\n    const {\n      model\n    } = this.state;\n    if (model) {\n      const {\n        mesh\n      } = this.props;\n      const parsedPBRMaterial = this.parseMaterial(material, mesh);\n      // Keep material to explicitly remove textures\n      this.setState({\n        parsedPBRMaterial\n      });\n      const {\n        pbr_baseColorSampler\n      } = parsedPBRMaterial.bindings;\n      const {\n        emptyTexture\n      } = this.state;\n      const simpleMeshProps = {\n        sampler: pbr_baseColorSampler || emptyTexture,\n        hasTexture: Boolean(pbr_baseColorSampler)\n      };\n      const {\n        camera,\n        ...pbrMaterialProps\n      } = {\n        ...parsedPBRMaterial.bindings,\n        ...parsedPBRMaterial.uniforms\n      };\n      model.shaderInputs.setProps({\n        simpleMesh: simpleMeshProps,\n        pbrMaterial: pbrMaterialProps\n      });\n    }\n  }\n  parseMaterial(material, mesh) {\n    const unlit = Boolean(material.pbrMetallicRoughness && material.pbrMetallicRoughness.baseColorTexture);\n    return parsePBRMaterial(this.context.device, {\n      unlit,\n      ...material\n    }, {\n      NORMAL: mesh.attributes.normals,\n      TEXCOORD_0: mesh.attributes.texCoords\n    }, {\n      pbrDebug: false,\n      lights: true,\n      useTangents: false\n    });\n  }\n  calculateFeatureIdsPickingColors(attribute) {\n    // This updater is only called if featureIds is not null\n    const featureIds = this.props.featureIds;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n    attribute.value = value;\n  }\n  finalizeState(context) {\n    super.finalizeState(context);\n    this.state.parsedPBRMaterial?.generatedTextures.forEach(texture => texture.destroy());\n    this.setState({\n      parsedPBRMaterial: null\n    });\n  }\n}\nMeshLayer.layerName = 'MeshLayer';\nMeshLayer.defaultProps = defaultProps;\nexport default MeshLayer;","map":{"version":3,"names":["parsePBRMaterial","pbrMaterial","Model","SimpleMeshLayer","meshUniforms","vs","fs","validateGeometryAttributes","attributes","positionAttribute","positions","POSITION","vertexCount","value","length","size","hasColorAttribute","COLOR_0","colors","Uint8Array","fill","normalized","defaultProps","type","featureIds","optional","MeshLayer","getShaders","shaders","modules","push","initializeState","props","attributeManager","getAttributeManager","add","featureIdsPickingColors","noAlloc","update","calculateFeatureIdsPickingColors","updateState","params","oldProps","updatePbrMaterialUniforms","draw","opts","model","state","meshProps","pickFeatureIds","Boolean","pbrProjectionProps","camera","uniforms","cameraPosition","shaderInputs","setProps","pbrProjection","mesh","getModel","id","parsedPBRMaterial","parseMaterial","setState","context","device","geometry","bufferLayout","getBufferLayouts","defines","HAS_UV_REGIONS","uvRegions","parameters","isInstanced","material","pbr_baseColorSampler","bindings","emptyTexture","simpleMeshProps","sampler","hasTexture","pbrMaterialProps","simpleMesh","unlit","pbrMetallicRoughness","baseColorTexture","NORMAL","normals","TEXCOORD_0","texCoords","pbrDebug","lights","useTangents","attribute","Uint8ClampedArray","pickingColor","index","encodePickingColor","finalizeState","generatedTextures","forEach","texture","destroy","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\mesh-layer\\mesh-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumericArray} from '@math.gl/core';\nimport {parsePBRMaterial, ParsedPBRMaterial} from '@luma.gl/gltf';\nimport {pbrMaterial} from '@luma.gl/shadertools';\nimport {Model} from '@luma.gl/engine';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {UpdateParameters, DefaultProps, LayerContext} from '@deck.gl/core';\nimport {SimpleMeshLayer, SimpleMeshLayerProps} from '@deck.gl/mesh-layers';\n\nimport {MeshProps, meshUniforms} from './mesh-layer-uniforms';\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nexport type Mesh = {\n  attributes: MeshAttributes;\n  indices?: MeshAttribute;\n};\n\nfunction validateGeometryAttributes(attributes: MeshAttributes) {\n  const positionAttribute = attributes.positions || attributes.POSITION;\n  const vertexCount = positionAttribute.value.length / positionAttribute.size;\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {\n      size: 4,\n      value: new Uint8Array(vertexCount * 4).fill(255),\n      normalized: true\n    };\n  }\n}\n\nconst defaultProps: DefaultProps<MeshLayerProps> = {\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\n/** All properties supported by MeshLayer. */\nexport type MeshLayerProps<DataT = unknown> = _MeshLayerProps & SimpleMeshLayerProps<DataT>;\n\n/** Properties added by MeshLayer. */\ntype _MeshLayerProps = {\n  /**\n   * PBR material object. _lighting must be pbr for this to work\n   */\n  pbrMaterial?: any; // TODO add type when converting Tile3DLayer\n\n  /**\n   * List of feature ids.\n   */\n  featureIds?: NumericArray | null;\n};\n\nexport default class MeshLayer<DataT = any, ExtraProps extends {} = {}> extends SimpleMeshLayer<\n  DataT,\n  Required<_MeshLayerProps> & ExtraProps\n> {\n  static layerName = 'MeshLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbrMaterial, meshUniforms);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    if (featureIds) {\n      // attributeManager is always defined in a primitive layer\n      attributeManager!.add({\n        featureIdsPickingColors: {\n          type: 'uint8',\n          size: 3,\n          noAlloc: true,\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps} = params;\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    const {model} = this.state;\n    if (!model) {\n      return;\n    }\n    const meshProps: MeshProps = {\n      pickFeatureIds: Boolean(featureIds)\n    };\n    const pbrProjectionProps = {\n      // Needed for PBR (TODO: find better way to get it)\n      camera: model.uniforms.cameraPosition as [number, number, number]\n    };\n    model.shaderInputs.setProps({\n      pbrProjection: pbrProjectionProps,\n      mesh: meshProps\n    });\n\n    super.draw(opts);\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const {id} = this.props;\n    const parsedPBRMaterial = this.parseMaterial(this.props.pbrMaterial, mesh);\n    // Keep material to explicitly remove textures\n    this.setState({parsedPBRMaterial});\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.device, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      defines: {\n        ...shaders.defines,\n        ...parsedPBRMaterial?.defines,\n        HAS_UV_REGIONS: mesh.attributes.uvRegions ? 1 : 0\n      },\n      parameters: parsedPBRMaterial?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(material) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const parsedPBRMaterial = this.parseMaterial(material, mesh as Mesh);\n      // Keep material to explicitly remove textures\n      this.setState({parsedPBRMaterial});\n\n      const {pbr_baseColorSampler} = parsedPBRMaterial.bindings;\n      const {emptyTexture} = this.state;\n      const simpleMeshProps = {\n        sampler: pbr_baseColorSampler || emptyTexture,\n        hasTexture: Boolean(pbr_baseColorSampler)\n      };\n      const {camera, ...pbrMaterialProps} = {\n        ...parsedPBRMaterial.bindings,\n        ...parsedPBRMaterial.uniforms\n      };\n      model.shaderInputs.setProps({simpleMesh: simpleMeshProps, pbrMaterial: pbrMaterialProps});\n    }\n  }\n\n  parseMaterial(material, mesh: Mesh): ParsedPBRMaterial {\n    const unlit = Boolean(\n      material.pbrMetallicRoughness && material.pbrMetallicRoughness.baseColorTexture\n    );\n\n    return parsePBRMaterial(\n      this.context.device,\n      {unlit, ...material},\n      {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      {\n        pbrDebug: false,\n        lights: true,\n        useTangents: false\n      }\n    );\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    // This updater is only called if featureIds is not null\n    const featureIds = this.props.featureIds!;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    this.state.parsedPBRMaterial?.generatedTextures.forEach(texture => texture.destroy());\n    this.setState({parsedPBRMaterial: null});\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}