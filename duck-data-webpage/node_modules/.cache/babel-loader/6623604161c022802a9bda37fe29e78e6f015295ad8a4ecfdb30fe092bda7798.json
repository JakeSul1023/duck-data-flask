{"ast":null,"code":"import { jsx as _jsx } from \"preact/jsx-runtime\";\nimport { render } from 'preact';\nimport { WidgetImpl } from \"./widget-impl.js\";\nimport { IconButton } from \"./components.js\";\n/**\n * A button widget that resets the view state of deck to an initial state.\n */\nexport class ResetViewWidget extends WidgetImpl {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      ...ResetViewWidget.defaultProps,\n      ...props\n    });\n    this.className = 'deck-widget-reset-view';\n    this.placement = 'top-left';\n    this.placement = props.placement ?? this.placement;\n  }\n  setProps(props) {\n    this.placement = props.placement ?? this.placement;\n    super.setProps(props);\n  }\n  onRenderHTML() {\n    const element = this.element;\n    if (!element) return;\n    render(_jsx(IconButton, {\n      className: \"deck-widget-reset-focus\",\n      label: this.props.label,\n      onClick: this.handleClick.bind(this)\n    }), element);\n  }\n  handleClick() {\n    const initialViewState = this.props.initialViewState || this.deck?.props.initialViewState;\n    this.setViewState(initialViewState);\n  }\n  setViewState(viewState) {\n    const viewId = this.props.viewId || viewState?.id || 'default-view';\n    const nextViewState = {\n      ...viewState\n      // only works for geospatial?\n      // transitionDuration: this.props.transitionDuration,\n      // transitionInterpolator: new FlyToInterpolator()\n    };\n    // @ts-ignore Using private method temporary until there's a public one\n    this.deck._onViewStateChange({\n      viewId,\n      viewState: nextViewState,\n      interactionState: {}\n    });\n  }\n}\nResetViewWidget.defaultProps = {\n  ...WidgetImpl.defaultProps,\n  id: 'reset-view',\n  placement: 'top-left',\n  label: 'Reset View',\n  initialViewState: undefined,\n  viewId: undefined\n};\n//# sourceMappingURL=reset-view-widget.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}