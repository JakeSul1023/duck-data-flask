{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { GL } from '@loaders.gl/math'; // math.gl/geometry;\nimport Tile3DFeatureTable from \"../classes/tile-3d-feature-table.js\";\n// import Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport { parse3DTileHeaderSync } from \"./helpers/parse-3d-tile-header.js\";\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from \"./helpers/parse-3d-tile-tables.js\";\nimport { parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT } from \"./helpers/parse-3d-tile-gltf-view.js\";\nexport async function parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n  const extensions = tile?.gltf?.extensions;\n  if (extensions && extensions.CESIUM_RTC) {\n    tile.rtcCenter = extensions.CESIUM_RTC.center;\n  }\n  return byteOffset;\n}\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  return byteOffset;\n}","map":{"version":3,"names":["GL","Tile3DFeatureTable","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","parse3DTileGLTFViewSync","extractGLTF","GLTF_FORMAT","parseBatchedModel3DTile","tile","arrayBuffer","byteOffset","options","context","parseBatchedModel","EMBEDDED","extensions","gltf","CESIUM_RTC","rtcCenter","center","featureTable","featureTableJson","featureTableBinary","getGlobalProperty","FLOAT"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-batched-model.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { GL } from '@loaders.gl/math'; // math.gl/geometry;\nimport Tile3DFeatureTable from \"../classes/tile-3d-feature-table.js\";\n// import Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport { parse3DTileHeaderSync } from \"./helpers/parse-3d-tile-header.js\";\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from \"./helpers/parse-3d-tile-tables.js\";\nimport { parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT } from \"./helpers/parse-3d-tile-gltf-view.js\";\nexport async function parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n    byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n    await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n    const extensions = tile?.gltf?.extensions;\n    if (extensions && extensions.CESIUM_RTC) {\n        tile.rtcCenter = extensions.CESIUM_RTC.center;\n    }\n    return byteOffset;\n}\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n    byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n    byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n    byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n    byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n    const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n    tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n    return byteOffset;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,EAAE,QAAQ,kBAAkB,CAAC,CAAC;AACvC,OAAOC,kBAAkB,MAAM,qCAAqC;AACpE;AACA,SAASC,qBAAqB,QAAQ,mCAAmC;AACzE,SAASC,2BAA2B,EAAEC,qBAAqB,QAAQ,mCAAmC;AACtG,SAASC,uBAAuB,EAAEC,WAAW,EAAEC,WAAW,QAAQ,sCAAsC;AACxG,OAAO,eAAeC,uBAAuBA,CAACC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC3FF,UAAU,GAAGG,iBAAiB,CAACL,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAC/E,MAAMP,WAAW,CAACG,IAAI,EAAEF,WAAW,CAACQ,QAAQ,EAAEH,OAAO,EAAEC,OAAO,CAAC;EAC/D,MAAMG,UAAU,GAAGP,IAAI,EAAEQ,IAAI,EAAED,UAAU;EACzC,IAAIA,UAAU,IAAIA,UAAU,CAACE,UAAU,EAAE;IACrCT,IAAI,CAACU,SAAS,GAAGH,UAAU,CAACE,UAAU,CAACE,MAAM;EACjD;EACA,OAAOT,UAAU;AACrB;AACA,SAASG,iBAAiBA,CAACL,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACxEF,UAAU,GAAGT,qBAAqB,CAACO,IAAI,EAAEC,WAAW,EAAEC,UAAU,CAAC;EACjEA,UAAU,GAAGR,2BAA2B,CAACM,IAAI,EAAEC,WAAW,EAAEC,UAAU,CAAC;EACvEA,UAAU,GAAGP,qBAAqB,CAACK,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,CAAC;EAC1ED,UAAU,GAAGN,uBAAuB,CAACI,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,CAAC;EAC5E,MAAMS,YAAY,GAAG,IAAIpB,kBAAkB,CAACQ,IAAI,CAACa,gBAAgB,EAAEb,IAAI,CAACc,kBAAkB,CAAC;EAC3Fd,IAAI,CAACU,SAAS,GAAGE,YAAY,CAACG,iBAAiB,CAAC,YAAY,EAAExB,EAAE,CAACyB,KAAK,EAAE,CAAC,CAAC;EAC1E,OAAOd,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}