{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isObject } from \"../../javascript-utils/is-type.js\";\nimport { fetchFile } from \"../fetch/fetch-file.js\";\nimport { getGlobalLoaderOptions } from \"./option-utils.js\";\n/**\n * Gets the current fetch function from options and context\n * @param options\n * @param context\n */\nexport function getFetchFunction(options, context) {\n  const globalOptions = getGlobalLoaderOptions();\n  const loaderOptions = options || globalOptions;\n  // options.fetch can be a function\n  if (typeof loaderOptions.fetch === 'function') {\n    return loaderOptions.fetch;\n  }\n  // options.fetch can be an options object\n  if (isObject(loaderOptions.fetch)) {\n    return url => fetchFile(url, loaderOptions.fetch);\n  }\n  // else refer to context (from parent loader) if available\n  if (context?.fetch) {\n    return context?.fetch;\n  }\n  // else return the default fetch function\n  return fetchFile;\n}","map":{"version":3,"names":["isObject","fetchFile","getGlobalLoaderOptions","getFetchFunction","options","context","globalOptions","loaderOptions","fetch","url"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isObject } from \"../../javascript-utils/is-type.js\";\nimport { fetchFile } from \"../fetch/fetch-file.js\";\nimport { getGlobalLoaderOptions } from \"./option-utils.js\";\n/**\n * Gets the current fetch function from options and context\n * @param options\n * @param context\n */\nexport function getFetchFunction(options, context) {\n    const globalOptions = getGlobalLoaderOptions();\n    const loaderOptions = options || globalOptions;\n    // options.fetch can be a function\n    if (typeof loaderOptions.fetch === 'function') {\n        return loaderOptions.fetch;\n    }\n    // options.fetch can be an options object\n    if (isObject(loaderOptions.fetch)) {\n        return (url) => fetchFile(url, loaderOptions.fetch);\n    }\n    // else refer to context (from parent loader) if available\n    if (context?.fetch) {\n        return context?.fetch;\n    }\n    // else return the default fetch function\n    return fetchFile;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,mCAAmC;AAC5D,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,sBAAsB,QAAQ,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAC/C,MAAMC,aAAa,GAAGJ,sBAAsB,CAAC,CAAC;EAC9C,MAAMK,aAAa,GAAGH,OAAO,IAAIE,aAAa;EAC9C;EACA,IAAI,OAAOC,aAAa,CAACC,KAAK,KAAK,UAAU,EAAE;IAC3C,OAAOD,aAAa,CAACC,KAAK;EAC9B;EACA;EACA,IAAIR,QAAQ,CAACO,aAAa,CAACC,KAAK,CAAC,EAAE;IAC/B,OAAQC,GAAG,IAAKR,SAAS,CAACQ,GAAG,EAAEF,aAAa,CAACC,KAAK,CAAC;EACvD;EACA;EACA,IAAIH,OAAO,EAAEG,KAAK,EAAE;IAChB,OAAOH,OAAO,EAAEG,KAAK;EACzB;EACA;EACA,OAAOP,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}