{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT and Apache-2.0\n// Copyright (c) vis.gl contributors\nimport { assert, Vector2 } from '@math.gl/core';\nimport { PerspectiveOffCenterFrustum } from \"./perspective-off-center-frustum.js\";\nconst defined = val => val !== null && typeof val !== 'undefined';\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n *\n * @example\n * var frustum = new PerspectiveFrustum({\n *     fov : Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport class PerspectiveFrustum {\n  constructor(options = {}) {\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n    const {\n      fov,\n      aspectRatio,\n      near = 1.0,\n      far = 500000000.0,\n      xOffset = 0.0,\n      yOffset = 0.0\n    } = options;\n    this.fov = fov;\n    this.aspectRatio = aspectRatio;\n    this.near = near;\n    this.far = far;\n    this.xOffset = xOffset;\n    this.yOffset = yOffset;\n  }\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   */\n  clone() {\n    return new PerspectiveFrustum({\n      aspectRatio: this.aspectRatio,\n      fov: this.fov,\n      near: this.near,\n      far: this.far\n    });\n  }\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other) {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n    this._update();\n    other._update();\n    return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this.near === other.near && this.far === other.far && this._offCenterFrustum.equals(other._offCenterFrustum);\n  }\n  /**\n   * Gets the perspective projection matrix computed from the view this.\n   */\n  get projectionMatrix() {\n    this._update();\n    return this._offCenterFrustum.projectionMatrix;\n  }\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   */\n  get infiniteProjectionMatrix() {\n    this._update();\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   */\n  get fovy() {\n    this._update();\n    return this._fovy;\n  }\n  /**\n   * @private\n   */\n  get sseDenominator() {\n    this._update();\n    return this._sseDenominator;\n  }\n  /**\n   * Creates a culling volume for this this.ion.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the this.\n   * var cullingVolume = this.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(/** A Vector3 defines the eye position. */\n  position, /** A Vector3 defines the view direction. */\n  direction, /** A Vector3 defines the up direction. */\n  up) {\n    this._update();\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n  /**\n   * Returns the pixel's width and height in meters.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * var distance = Vector3.magnitude(toCenterProj);\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(/** The width of the drawing buffer. */\n  drawingBufferWidth, /** The height of the drawing buffer. */\n  drawingBufferHeight, /** The distance to the near plane in meters. */\n  distance, /** The object onto which to store the result. */\n  result) {\n    this._update();\n    return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result || new Vector2());\n  }\n  // eslint-disable-next-line complexity, max-statements\n  _update() {\n    assert(Number.isFinite(this.fov) && Number.isFinite(this.aspectRatio) && Number.isFinite(this.near) && Number.isFinite(this.far));\n    // 'fov, aspectRatio, near, or far parameters are not set.'\n    const f = this._offCenterFrustum;\n    if (this.fov !== this._fov || this.aspectRatio !== this._aspectRatio || this.near !== this._near || this.far !== this._far || this.xOffset !== this._xOffset || this.yOffset !== this._yOffset) {\n      assert(this.fov >= 0 && this.fov < Math.PI);\n      // throw new DeveloperError('fov must be in the range [0, PI).');\n      assert(this.aspectRatio > 0);\n      // throw new DeveloperError('aspectRatio must be positive.');\n      assert(this.near >= 0 && this.near < this.far);\n      // throw new DeveloperError('near must be greater than zero and less than far.');\n      this._aspectRatio = this.aspectRatio;\n      this._fov = this.fov;\n      this._fovy = this.aspectRatio <= 1 ? this.fov : Math.atan(Math.tan(this.fov * 0.5) / this.aspectRatio) * 2.0;\n      this._near = this.near;\n      this._far = this.far;\n      this._sseDenominator = 2.0 * Math.tan(0.5 * this._fovy);\n      this._xOffset = this.xOffset;\n      this._yOffset = this.yOffset;\n      f.top = this.near * Math.tan(0.5 * this._fovy);\n      f.bottom = -f.top;\n      f.right = this.aspectRatio * f.top;\n      f.left = -f.right;\n      f.near = this.near;\n      f.far = this.far;\n      f.right += this.xOffset;\n      f.left += this.xOffset;\n      f.top += this.yOffset;\n      f.bottom += this.yOffset;\n    }\n  }\n}","map":{"version":3,"names":["assert","Vector2","PerspectiveOffCenterFrustum","defined","val","PerspectiveFrustum","constructor","options","_offCenterFrustum","fov","aspectRatio","near","far","xOffset","yOffset","clone","equals","other","_update","projectionMatrix","infiniteProjectionMatrix","fovy","_fovy","sseDenominator","_sseDenominator","computeCullingVolume","position","direction","up","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","result","Number","isFinite","f","_fov","_aspectRatio","_near","_far","_xOffset","_yOffset","Math","PI","atan","tan","top","bottom","right","left"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\culling\\src\\lib\\perspective-frustum.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT and Apache-2.0\n// Copyright (c) vis.gl contributors\n\n// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\nimport {NumericArray} from '@math.gl/types';\nimport {assert, Matrix4, Vector2} from '@math.gl/core';\nimport {PerspectiveOffCenterFrustum} from './perspective-off-center-frustum';\nimport {CullingVolume} from './culling-volume';\n\nconst defined = (val: unknown) => val !== null && typeof val !== 'undefined';\n\ntype PerspectiveFrustumOptions = {\n  /** The angle of the field of view (FOV), in radians. */\n  fov?: number;\n  /** The aspect ratio of the frustum's width to it's height. */\n  aspectRatio?: number;\n  /** The distance of the near plane. */\n  near?: number;\n  /** The distance of the far plane. */\n  far?: number;\n  /** The offset in the x direction. */\n  xOffset?: number;\n  /** The offset in the y direction. */\n  yOffset?: number;\n};\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n *\n * @example\n * var frustum = new PerspectiveFrustum({\n *     fov : Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport class PerspectiveFrustum {\n  private _offCenterFrustum = new PerspectiveOffCenterFrustum();\n  /**\n   * The angle of the field of view (FOV), in radians.  This angle will be used\n   * as the horizontal FOV if the width is greater than the height, otherwise\n   * it will be the vertical FOV.\n   */\n  fov?: number;\n  private _fov: number;\n  private _fovy: number;\n  private _sseDenominator: number;\n  /**\n   * The aspect ratio of the frustum's width to it's height.\n   */\n  aspectRatio?: number;\n  private _aspectRatio: number;\n  /**\n   * The distance of the near plane.\n   * @default 1.0\n   */\n  near: number;\n  private _near: number;\n  /**\n   * The distance of the far plane.\n   * @default 500000000.0\n   */\n  far: number;\n  private _far: number;\n  /**\n   * Offsets the frustum in the x direction.\n   * @default 0.0\n   */\n  xOffset: number;\n  private _xOffset: number;\n  /**\n   * Offsets the frustum in the y direction.\n   * @default 0.0\n   */\n  yOffset: number;\n  private _yOffset: number;\n\n  constructor(options: PerspectiveFrustumOptions = {}) {\n    const {fov, aspectRatio, near = 1.0, far = 500000000.0, xOffset = 0.0, yOffset = 0.0} = options;\n\n    this.fov = fov;\n    this.aspectRatio = aspectRatio;\n    this.near = near;\n    this.far = far;\n    this.xOffset = xOffset;\n    this.yOffset = yOffset;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   */\n  clone(): PerspectiveFrustum {\n    return new PerspectiveFrustum({\n      aspectRatio: this.aspectRatio,\n      fov: this.fov,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other: PerspectiveFrustum): boolean {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n\n    this._update();\n    other._update();\n\n    return (\n      this.fov === other.fov &&\n      this.aspectRatio === other.aspectRatio &&\n      this.near === other.near &&\n      this.far === other.far &&\n      this._offCenterFrustum.equals(other._offCenterFrustum)\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view this.\n   */\n  get projectionMatrix(): Matrix4 {\n    this._update();\n    return this._offCenterFrustum.projectionMatrix;\n  }\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   */\n  get infiniteProjectionMatrix(): Matrix4 {\n    this._update();\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   */\n  get fovy(): number {\n    this._update();\n    return this._fovy;\n  }\n\n  /**\n   * @private\n   */\n  get sseDenominator(): number {\n    this._update();\n    return this._sseDenominator;\n  }\n\n  /**\n   * Creates a culling volume for this this.ion.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the this.\n   * var cullingVolume = this.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(\n    /** A Vector3 defines the eye position. */\n    position: Readonly<NumericArray>,\n    /** A Vector3 defines the view direction. */\n    direction: Readonly<NumericArray>,\n    /** A Vector3 defines the up direction. */\n    up: Readonly<NumericArray>\n  ): CullingVolume {\n    this._update();\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * var distance = Vector3.magnitude(toCenterProj);\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(\n    /** The width of the drawing buffer. */\n    drawingBufferWidth: number,\n    /** The height of the drawing buffer. */\n    drawingBufferHeight: number,\n    /** The distance to the near plane in meters. */\n    distance: number,\n    /** The object onto which to store the result. */\n    result?: Vector2\n  ): Vector2 {\n    this._update();\n    return this._offCenterFrustum.getPixelDimensions(\n      drawingBufferWidth,\n      drawingBufferHeight,\n      distance,\n      result || new Vector2()\n    );\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  private _update(): void {\n    assert(\n      Number.isFinite(this.fov) &&\n        Number.isFinite(this.aspectRatio) &&\n        Number.isFinite(this.near) &&\n        Number.isFinite(this.far)\n    );\n    // 'fov, aspectRatio, near, or far parameters are not set.'\n\n    const f = this._offCenterFrustum;\n\n    if (\n      this.fov !== this._fov ||\n      this.aspectRatio !== this._aspectRatio ||\n      this.near !== this._near ||\n      this.far !== this._far ||\n      this.xOffset !== this._xOffset ||\n      this.yOffset !== this._yOffset\n    ) {\n      assert(this.fov >= 0 && this.fov < Math.PI);\n      // throw new DeveloperError('fov must be in the range [0, PI).');\n\n      assert(this.aspectRatio > 0);\n      // throw new DeveloperError('aspectRatio must be positive.');\n\n      assert(this.near >= 0 && this.near < this.far);\n      // throw new DeveloperError('near must be greater than zero and less than far.');\n\n      this._aspectRatio = this.aspectRatio;\n      this._fov = this.fov;\n      this._fovy =\n        this.aspectRatio <= 1\n          ? this.fov\n          : Math.atan(Math.tan(this.fov * 0.5) / this.aspectRatio) * 2.0;\n      this._near = this.near;\n      this._far = this.far;\n      this._sseDenominator = 2.0 * Math.tan(0.5 * this._fovy);\n      this._xOffset = this.xOffset;\n      this._yOffset = this.yOffset;\n\n      f.top = this.near * Math.tan(0.5 * this._fovy);\n      f.bottom = -f.top;\n      f.right = this.aspectRatio * f.top;\n      f.left = -f.right;\n      f.near = this.near;\n      f.far = this.far;\n\n      f.right += this.xOffset;\n      f.left += this.xOffset;\n      f.top += this.yOffset;\n      f.bottom += this.yOffset;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}