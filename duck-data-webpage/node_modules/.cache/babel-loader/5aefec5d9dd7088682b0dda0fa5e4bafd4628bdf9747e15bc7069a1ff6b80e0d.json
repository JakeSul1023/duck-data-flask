{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { INVALID_INDEX } from \"./picking-uniforms.js\";\n/**\n * Helper class for using the new picking module\n * @todo Port to WebGPU\n * @todo Support multiple models\n * @todo Switching picking module\n */\nexport class PickingManager {\n  device;\n  props;\n  /** Info from latest pick operation */\n  pickInfo = {\n    batchIndex: null,\n    objectIndex: null\n  };\n  /** Framebuffer used for picking */\n  framebuffer = null;\n  static defaultProps = {\n    shaderInputs: undefined,\n    onObjectPicked: () => {}\n  };\n  constructor(device, props) {\n    this.device = device;\n    this.props = {\n      ...PickingManager.defaultProps,\n      ...props\n    };\n  }\n  destroy() {\n    this.framebuffer?.destroy();\n  }\n  // TODO - Ask for a cached framebuffer? a Framebuffer factory?\n  getFramebuffer() {\n    if (!this.framebuffer) {\n      this.framebuffer = this.device.createFramebuffer({\n        colorAttachments: ['rgba8unorm', 'rg32sint'],\n        depthStencilAttachment: 'depth24plus'\n      });\n    }\n    return this.framebuffer;\n  }\n  /** Clear highlighted / picked object */\n  clearPickState() {\n    this.props.shaderInputs.setProps({\n      picking: {\n        highlightedObjectIndex: null\n      }\n    });\n  }\n  /** Prepare for rendering picking colors */\n  beginRenderPass() {\n    const framebuffer = this.getFramebuffer();\n    framebuffer.resize(this.device.getDefaultCanvasContext().getPixelSize());\n    this.props.shaderInputs?.setProps({\n      picking: {\n        isActive: true\n      }\n    });\n    const pickingPass = this.device.beginRenderPass({\n      framebuffer,\n      clearColors: [new Float32Array([0, 0, 0, 0]), new Int32Array([-1, -1, 0, 0])],\n      clearDepth: 1\n    });\n    return pickingPass;\n  }\n  getPickInfo(mousePosition) {\n    const framebuffer = this.getFramebuffer();\n    // use the center pixel location in device pixel range\n    const [pickX, pickY] = this.getPickPosition(mousePosition);\n    // Read back\n    const pixelData = this.device.readPixelsToArrayWebGL(framebuffer, {\n      sourceX: pickX,\n      sourceY: pickY,\n      sourceWidth: 1,\n      sourceHeight: 1,\n      sourceAttachment: 1\n    });\n    if (!pixelData) {\n      return null;\n    }\n    const pickInfo = {\n      objectIndex: pixelData[0] === INVALID_INDEX ? null : pixelData[0],\n      batchIndex: pixelData[1] === INVALID_INDEX ? null : pixelData[1]\n    };\n    // Call callback if picked object has changed\n    if (pickInfo.objectIndex !== this.pickInfo.objectIndex || pickInfo.batchIndex !== this.pickInfo.batchIndex) {\n      this.pickInfo = pickInfo;\n      this.props.onObjectPicked(pickInfo);\n      // console.log(`Object ${pickInfo.objectIndex} in batch ${pickInfo.batchIndex} was picked`)\n    }\n    this.props.shaderInputs?.setProps({\n      picking: {\n        isActive: false,\n        highlightedBatchIndex: pickInfo.batchIndex,\n        highlightedObjectIndex: pickInfo.objectIndex\n      }\n    });\n    return this.pickInfo;\n  }\n  /**\n   * Get pick position in device pixel range\n   * use the center pixel location in device pixel range\n   */\n  getPickPosition(mousePosition) {\n    const devicePixels = this.device.getDefaultCanvasContext().cssToDevicePixels(mousePosition);\n    const pickX = devicePixels.x + Math.floor(devicePixels.width / 2);\n    const pickY = devicePixels.y + Math.floor(devicePixels.height / 2);\n    return [pickX, pickY];\n  }\n}","map":{"version":3,"names":["INVALID_INDEX","PickingManager","device","props","pickInfo","batchIndex","objectIndex","framebuffer","defaultProps","shaderInputs","undefined","onObjectPicked","constructor","destroy","getFramebuffer","createFramebuffer","colorAttachments","depthStencilAttachment","clearPickState","setProps","picking","highlightedObjectIndex","beginRenderPass","resize","getDefaultCanvasContext","getPixelSize","isActive","pickingPass","clearColors","Float32Array","Int32Array","clearDepth","getPickInfo","mousePosition","pickX","pickY","getPickPosition","pixelData","readPixelsToArrayWebGL","sourceX","sourceY","sourceWidth","sourceHeight","sourceAttachment","highlightedBatchIndex","devicePixels","cssToDevicePixels","x","Math","floor","width","y","height"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\modules\\picking\\picking-manager.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device, Framebuffer} from '@luma.gl/core';\nimport {ShaderInputs} from '../../shader-inputs';\nimport {pickingUniforms, INVALID_INDEX} from './picking-uniforms';\n// import {picking} from './color-picking';\n\n/** Information about picked object */\nexport type PickInfo = {\n  batchIndex: number | null;\n  objectIndex: number | null;\n};\n\nexport type PickingManagerProps = {\n  /** Shader Inputs from models to pick */\n  shaderInputs?: ShaderInputs<{picking: typeof pickingUniforms.props}>;\n  /** Callback */\n  onObjectPicked?: (info: PickInfo) => void;\n};\n\n/**\n * Helper class for using the new picking module\n * @todo Port to WebGPU\n * @todo Support multiple models\n * @todo Switching picking module\n */\nexport class PickingManager {\n  device: Device;\n  props: Required<PickingManagerProps>;\n  /** Info from latest pick operation */\n  pickInfo: PickInfo = {batchIndex: null, objectIndex: null};\n  /** Framebuffer used for picking */\n  framebuffer: Framebuffer | null = null;\n\n  static defaultProps: Required<PickingManagerProps> = {\n    shaderInputs: undefined!,\n    onObjectPicked: () => {}\n  };\n\n  constructor(device: Device, props: PickingManagerProps) {\n    this.device = device;\n    this.props = {...PickingManager.defaultProps, ...props};\n  }\n\n  destroy() {\n    this.framebuffer?.destroy();\n  }\n\n  // TODO - Ask for a cached framebuffer? a Framebuffer factory?\n  getFramebuffer() {\n    if (!this.framebuffer) {\n      this.framebuffer = this.device.createFramebuffer({\n        colorAttachments: ['rgba8unorm', 'rg32sint'],\n        depthStencilAttachment: 'depth24plus'\n      });\n    }\n    return this.framebuffer;\n  }\n\n  /** Clear highlighted / picked object */\n  clearPickState() {\n    this.props.shaderInputs.setProps({picking: {highlightedObjectIndex: null}});\n  }\n\n  /** Prepare for rendering picking colors */\n  beginRenderPass() {\n    const framebuffer = this.getFramebuffer();\n    framebuffer.resize(this.device.getDefaultCanvasContext().getPixelSize());\n\n    this.props.shaderInputs?.setProps({picking: {isActive: true}});\n\n    const pickingPass = this.device.beginRenderPass({\n      framebuffer,\n      clearColors: [new Float32Array([0, 0, 0, 0]), new Int32Array([-1, -1, 0, 0])],\n      clearDepth: 1\n    });\n\n    return pickingPass;\n  }\n\n  getPickInfo(mousePosition: [number, number]): PickInfo | null {\n    const framebuffer = this.getFramebuffer();\n\n    // use the center pixel location in device pixel range\n    const [pickX, pickY] = this.getPickPosition(mousePosition);\n\n    // Read back\n    const pixelData = this.device.readPixelsToArrayWebGL(framebuffer, {\n      sourceX: pickX,\n      sourceY: pickY,\n      sourceWidth: 1,\n      sourceHeight: 1,\n      sourceAttachment: 1\n    });\n    if (!pixelData) {\n      return null;\n    }\n\n    const pickInfo: PickInfo = {\n      objectIndex: pixelData[0] === INVALID_INDEX ? null : pixelData[0],\n      batchIndex: pixelData[1] === INVALID_INDEX ? null : pixelData[1]\n    };\n\n    // Call callback if picked object has changed\n    if (\n      pickInfo.objectIndex !== this.pickInfo.objectIndex ||\n      pickInfo.batchIndex !== this.pickInfo.batchIndex\n    ) {\n      this.pickInfo = pickInfo;\n      this.props.onObjectPicked(pickInfo);\n      // console.log(`Object ${pickInfo.objectIndex} in batch ${pickInfo.batchIndex} was picked`)\n    }\n\n    this.props.shaderInputs?.setProps({\n      picking: {\n        isActive: false,\n        highlightedBatchIndex: pickInfo.batchIndex,\n        highlightedObjectIndex: pickInfo.objectIndex\n      }\n    });\n\n    return this.pickInfo;\n  }\n\n  /**\n   * Get pick position in device pixel range\n   * use the center pixel location in device pixel range\n   */\n  getPickPosition(mousePosition: number[]): [number, number] {\n    const devicePixels = this.device.getDefaultCanvasContext().cssToDevicePixels(mousePosition);\n    const pickX = devicePixels.x + Math.floor(devicePixels.width / 2);\n    const pickY = devicePixels.y + Math.floor(devicePixels.height / 2);\n    return [pickX, pickY];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}