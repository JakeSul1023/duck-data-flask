{"ast":null,"code":"import { jsx as _jsx } from \"preact/jsx-runtime\";\nimport { render } from 'preact';\nimport { WidgetImpl } from \"./widget-impl.js\";\nimport { IconButton } from \"./components.js\";\n/**\n * A button widget that resets the view state of deck to an initial state.\n */\nexport class ResetViewWidget extends WidgetImpl {\n  constructor(props = {}) {\n    super({\n      ...ResetViewWidget.defaultProps,\n      ...props\n    });\n    this.className = 'deck-widget-reset-view';\n    this.placement = 'top-left';\n    this.placement = props.placement ?? this.placement;\n  }\n  setProps(props) {\n    this.placement = props.placement ?? this.placement;\n    super.setProps(props);\n  }\n  onRenderHTML() {\n    const element = this.element;\n    if (!element) return;\n    render(_jsx(IconButton, {\n      className: \"deck-widget-reset-focus\",\n      label: this.props.label,\n      onClick: this.handleClick.bind(this)\n    }), element);\n  }\n  handleClick() {\n    const initialViewState = this.props.initialViewState || this.deck?.props.initialViewState;\n    this.setViewState(initialViewState);\n  }\n  setViewState(viewState) {\n    const viewId = this.props.viewId || viewState?.id || 'default-view';\n    const nextViewState = {\n      ...viewState\n      // only works for geospatial?\n      // transitionDuration: this.props.transitionDuration,\n      // transitionInterpolator: new FlyToInterpolator()\n    };\n    // @ts-ignore Using private method temporary until there's a public one\n    this.deck._onViewStateChange({\n      viewId,\n      viewState: nextViewState,\n      interactionState: {}\n    });\n  }\n}\nResetViewWidget.defaultProps = {\n  ...WidgetImpl.defaultProps,\n  id: 'reset-view',\n  placement: 'top-left',\n  label: 'Reset View',\n  initialViewState: undefined,\n  viewId: undefined\n};","map":{"version":3,"names":["render","WidgetImpl","IconButton","ResetViewWidget","constructor","props","defaultProps","className","placement","setProps","onRenderHTML","element","_jsx","label","onClick","handleClick","bind","initialViewState","deck","setViewState","viewState","viewId","id","nextViewState","_onViewStateChange","interactionState","undefined"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\widgets\\src\\reset-view-widget.tsx"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* global document */\nimport type {WidgetPlacement} from '@deck.gl/core';\nimport {render} from 'preact';\nimport {WidgetImpl, WidgetImplProps} from './widget-impl';\nimport {IconButton} from './components';\n\n/** @todo - is the the best we can do? */\ntype ViewState = Record<string, unknown>;\n\n/** Properties for the ResetViewWidget */\nexport type ResetViewWidgetProps = WidgetImplProps & {\n  /** Widget positioning within the view. Default 'top-left'. */\n  placement?: WidgetPlacement;\n  /** Tooltip message */\n  label?: string;\n  /** The initial view state to reset the view to. Defaults to deck.props.initialViewState */\n  initialViewState?: ViewState;\n  /** View to interact with. Required when using multiple views. */\n  viewId?: string | null;\n};\n\n/**\n * A button widget that resets the view state of deck to an initial state.\n */\nexport class ResetViewWidget extends WidgetImpl<ResetViewWidgetProps> {\n  static defaultProps: Required<ResetViewWidgetProps> = {\n    ...WidgetImpl.defaultProps,\n    id: 'reset-view',\n    placement: 'top-left',\n    label: 'Reset View',\n    initialViewState: undefined!,\n    viewId: undefined!\n  };\n\n  className = 'deck-widget-reset-view';\n  placement: WidgetPlacement = 'top-left';\n\n  constructor(props: ResetViewWidgetProps = {}) {\n    super({...ResetViewWidget.defaultProps, ...props});\n    this.placement = props.placement ?? this.placement;\n  }\n\n  setProps(props: Partial<ResetViewWidgetProps>) {\n    this.placement = props.placement ?? this.placement;\n    super.setProps(props);\n  }\n\n  onRenderHTML() {\n    const element = this.element;\n    if (!element) return;\n    render(\n      <IconButton\n        className=\"deck-widget-reset-focus\"\n        label={this.props.label}\n        onClick={this.handleClick.bind(this)}\n      />,\n      element\n    );\n  }\n\n  handleClick() {\n    const initialViewState = this.props.initialViewState || this.deck?.props.initialViewState;\n    this.setViewState(initialViewState);\n  }\n\n  setViewState(viewState: ViewState) {\n    const viewId = this.props.viewId || viewState?.id || 'default-view';\n    const nextViewState = {\n      ...viewState\n      // only works for geospatial?\n      // transitionDuration: this.props.transitionDuration,\n      // transitionInterpolator: new FlyToInterpolator()\n    };\n    // @ts-ignore Using private method temporary until there's a public one\n    this.deck._onViewStateChange({viewId, viewState: nextViewState, interactionState: {}});\n  }\n}\n"],"mappings":";AAMA,SAAQA,MAAM,QAAO,QAAQ;AAC7B,SAAQC,UAAU,QAAkB;AACpC,SAAQC,UAAU,QAAC;AAiBnB;;;AAGA,OAAM,MAAOC,eAAgB,SAAQF,UAAgC;EAanEG,YAAYC,KAAA,GAA8B,EAAE;IAC1C,KAAK,CAAC;MAAC,GAAGF,eAAe,CAACG,YAAY;MAAE,GAAGD;IAAK,CAAC,CAAC;IAJpD,KAAAE,SAAS,GAAG,wBAAwB;IACpC,KAAAC,SAAS,GAAoB,UAAU;IAIrC,IAAI,CAACA,SAAS,GAAGH,KAAK,CAACG,SAAS,IAAI,IAAI,CAACA,SAAS;EACpD;EAEAC,QAAQA,CAACJ,KAAoC;IAC3C,IAAI,CAACG,SAAS,GAAGH,KAAK,CAACG,SAAS,IAAI,IAAI,CAACA,SAAS;IAClD,KAAK,CAACC,QAAQ,CAACJ,KAAK,CAAC;EACvB;EAEAK,YAAYA,CAAA;IACV,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,CAACA,OAAO,EAAE;IACdX,MAAM,CACJY,IAAA,CAACV,UAAU;MACTK,SAAS,EAAC,yBAAyB;MACnCM,KAAK,EAAE,IAAI,CAACR,KAAK,CAACQ,KAAK;MACvBC,OAAO,EAAE,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI;IAAC,EACpC,EACFL,OAAO,CACR;EACH;EAEAI,WAAWA,CAAA;IACT,MAAME,gBAAgB,GAAG,IAAI,CAACZ,KAAK,CAACY,gBAAgB,IAAI,IAAI,CAACC,IAAI,EAAEb,KAAK,CAACY,gBAAgB;IACzF,IAAI,CAACE,YAAY,CAACF,gBAAgB,CAAC;EACrC;EAEAE,YAAYA,CAACC,SAAoB;IAC/B,MAAMC,MAAM,GAAG,IAAI,CAAChB,KAAK,CAACgB,MAAM,IAAID,SAAS,EAAEE,EAAE,IAAI,cAAc;IACnE,MAAMC,aAAa,GAAG;MACpB,GAAGH;MACH;MACA;MACA;KACD;IACD;IACA,IAAI,CAACF,IAAI,CAACM,kBAAkB,CAAC;MAACH,MAAM;MAAED,SAAS,EAAEG,aAAa;MAAEE,gBAAgB,EAAE;IAAE,CAAC,CAAC;EACxF;;AAlDOtB,eAAA,CAAAG,YAAY,GAAmC;EACpD,GAAGL,UAAU,CAACK,YAAY;EAC1BgB,EAAE,EAAE,YAAY;EAChBd,SAAS,EAAE,UAAU;EACrBK,KAAK,EAAE,YAAY;EACnBI,gBAAgB,EAAES,SAAU;EAC5BL,MAAM,EAAEK;CACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}