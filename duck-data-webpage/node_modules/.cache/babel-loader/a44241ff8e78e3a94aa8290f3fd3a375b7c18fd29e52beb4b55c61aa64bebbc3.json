{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { BaseTableBatchAggregator } from \"./base-table-batch-aggregator.js\";\nimport { RowTableBatchAggregator } from \"./row-table-batch-aggregator.js\";\nimport { ColumnarTableBatchAggregator } from \"./columnar-table-batch-aggregator.js\";\nconst DEFAULT_OPTIONS = {\n  shape: undefined,\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\nconst ERR_MESSAGE = 'TableBatchBuilder';\n/** Incrementally builds batches from a stream of rows */\nexport class TableBatchBuilder {\n  schema;\n  options;\n  aggregator = null;\n  batchCount = 0;\n  bytesUsed = 0;\n  isChunkComplete = false;\n  lastBatchEmittedMs = Date.now();\n  totalLength = 0;\n  totalBytes = 0;\n  rowBytes = 0;\n  static ArrowBatch;\n  constructor(schema, options) {\n    this.schema = schema;\n    this.options = {\n      ...DEFAULT_OPTIONS,\n      ...options\n    };\n  }\n  limitReached() {\n    if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n      return true;\n    }\n    if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n      return true;\n    }\n    return false;\n  }\n  /** @deprecated Use addArrayRow or addObjectRow */\n  addRow(row) {\n    if (this.limitReached()) {\n      return;\n    }\n    this.totalLength++;\n    this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n    this.totalBytes += this.rowBytes;\n    if (Array.isArray(row)) {\n      this.addArrayRow(row);\n    } else {\n      this.addObjectRow(row);\n    }\n  }\n  /** Add one row to the batch */\n  addArrayRow(row) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addArrayRow(row);\n  }\n  /** Add one row to the batch */\n  addObjectRow(row) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addObjectRow(row);\n  }\n  /** Mark an incoming raw memory chunk has completed */\n  chunkComplete(chunk) {\n    if (chunk instanceof ArrayBuffer) {\n      this.bytesUsed += chunk.byteLength;\n    }\n    if (typeof chunk === 'string') {\n      this.bytesUsed += chunk.length;\n    }\n    this.isChunkComplete = true;\n  }\n  getFullBatch(options) {\n    return this._isFull() ? this._getBatch(options) : null;\n  }\n  getFinalBatch(options) {\n    return this._getBatch(options);\n  }\n  // INTERNAL\n  _estimateRowMB(row) {\n    return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n  }\n  _isFull() {\n    // No batch, not ready\n    if (!this.aggregator || this.aggregator.rowCount() === 0) {\n      return false;\n    }\n    // if batchSize === 'auto' we wait for chunk to complete\n    // if batchSize === number, ensure we have enough rows\n    if (this.options.batchSize === 'auto') {\n      if (!this.isChunkComplete) {\n        return false;\n      }\n    } else if (this.options.batchSize > this.aggregator.rowCount()) {\n      return false;\n    }\n    // Debounce batches\n    if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n      return false;\n    }\n    // Emit batch\n    this.isChunkComplete = false;\n    this.lastBatchEmittedMs = Date.now();\n    return true;\n  }\n  /**\n   * bytesUsed can be set via chunkComplete or via getBatch*\n   */\n  _getBatch(options) {\n    if (!this.aggregator) {\n      return null;\n    }\n    // TODO - this can overly increment bytes used?\n    if (options?.bytesUsed) {\n      this.bytesUsed = options.bytesUsed;\n    }\n    const normalizedBatch = this.aggregator.getBatch();\n    normalizedBatch.count = this.batchCount;\n    normalizedBatch.bytesUsed = this.bytesUsed;\n    Object.assign(normalizedBatch, options);\n    this.batchCount++;\n    this.aggregator = null;\n    return normalizedBatch;\n  }\n  _getTableBatchType() {\n    switch (this.options.shape) {\n      case 'array-row-table':\n      case 'object-row-table':\n        return RowTableBatchAggregator;\n      case 'columnar-table':\n        return ColumnarTableBatchAggregator;\n      case 'arrow-table':\n        if (!TableBatchBuilder.ArrowBatch) {\n          throw new Error(ERR_MESSAGE);\n        }\n        return TableBatchBuilder.ArrowBatch;\n      default:\n        return BaseTableBatchAggregator;\n    }\n  }\n}","map":{"version":3,"names":["BaseTableBatchAggregator","RowTableBatchAggregator","ColumnarTableBatchAggregator","DEFAULT_OPTIONS","shape","undefined","batchSize","batchDebounceMs","limit","_limitMB","ERR_MESSAGE","TableBatchBuilder","schema","options","aggregator","batchCount","bytesUsed","isChunkComplete","lastBatchEmittedMs","Date","now","totalLength","totalBytes","rowBytes","ArrowBatch","constructor","limitReached","Boolean","addRow","row","_estimateRowMB","Array","isArray","addArrayRow","addObjectRow","TableBatchType","_getTableBatchType","chunkComplete","chunk","ArrayBuffer","byteLength","length","getFullBatch","_isFull","_getBatch","getFinalBatch","Object","keys","rowCount","normalizedBatch","getBatch","count","assign","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/batches/table-batch-builder.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { BaseTableBatchAggregator } from \"./base-table-batch-aggregator.js\";\nimport { RowTableBatchAggregator } from \"./row-table-batch-aggregator.js\";\nimport { ColumnarTableBatchAggregator } from \"./columnar-table-batch-aggregator.js\";\nconst DEFAULT_OPTIONS = {\n    shape: undefined,\n    batchSize: 'auto',\n    batchDebounceMs: 0,\n    limit: 0,\n    _limitMB: 0\n};\nconst ERR_MESSAGE = 'TableBatchBuilder';\n/** Incrementally builds batches from a stream of rows */\nexport class TableBatchBuilder {\n    schema;\n    options;\n    aggregator = null;\n    batchCount = 0;\n    bytesUsed = 0;\n    isChunkComplete = false;\n    lastBatchEmittedMs = Date.now();\n    totalLength = 0;\n    totalBytes = 0;\n    rowBytes = 0;\n    static ArrowBatch;\n    constructor(schema, options) {\n        this.schema = schema;\n        this.options = { ...DEFAULT_OPTIONS, ...options };\n    }\n    limitReached() {\n        if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n            return true;\n        }\n        if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n            return true;\n        }\n        return false;\n    }\n    /** @deprecated Use addArrayRow or addObjectRow */\n    addRow(row) {\n        if (this.limitReached()) {\n            return;\n        }\n        this.totalLength++;\n        this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n        this.totalBytes += this.rowBytes;\n        if (Array.isArray(row)) {\n            this.addArrayRow(row);\n        }\n        else {\n            this.addObjectRow(row);\n        }\n    }\n    /** Add one row to the batch */\n    addArrayRow(row) {\n        if (!this.aggregator) {\n            const TableBatchType = this._getTableBatchType();\n            this.aggregator = new TableBatchType(this.schema, this.options);\n        }\n        this.aggregator.addArrayRow(row);\n    }\n    /** Add one row to the batch */\n    addObjectRow(row) {\n        if (!this.aggregator) {\n            const TableBatchType = this._getTableBatchType();\n            this.aggregator = new TableBatchType(this.schema, this.options);\n        }\n        this.aggregator.addObjectRow(row);\n    }\n    /** Mark an incoming raw memory chunk has completed */\n    chunkComplete(chunk) {\n        if (chunk instanceof ArrayBuffer) {\n            this.bytesUsed += chunk.byteLength;\n        }\n        if (typeof chunk === 'string') {\n            this.bytesUsed += chunk.length;\n        }\n        this.isChunkComplete = true;\n    }\n    getFullBatch(options) {\n        return this._isFull() ? this._getBatch(options) : null;\n    }\n    getFinalBatch(options) {\n        return this._getBatch(options);\n    }\n    // INTERNAL\n    _estimateRowMB(row) {\n        return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n    }\n    _isFull() {\n        // No batch, not ready\n        if (!this.aggregator || this.aggregator.rowCount() === 0) {\n            return false;\n        }\n        // if batchSize === 'auto' we wait for chunk to complete\n        // if batchSize === number, ensure we have enough rows\n        if (this.options.batchSize === 'auto') {\n            if (!this.isChunkComplete) {\n                return false;\n            }\n        }\n        else if (this.options.batchSize > this.aggregator.rowCount()) {\n            return false;\n        }\n        // Debounce batches\n        if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n            return false;\n        }\n        // Emit batch\n        this.isChunkComplete = false;\n        this.lastBatchEmittedMs = Date.now();\n        return true;\n    }\n    /**\n     * bytesUsed can be set via chunkComplete or via getBatch*\n     */\n    _getBatch(options) {\n        if (!this.aggregator) {\n            return null;\n        }\n        // TODO - this can overly increment bytes used?\n        if (options?.bytesUsed) {\n            this.bytesUsed = options.bytesUsed;\n        }\n        const normalizedBatch = this.aggregator.getBatch();\n        normalizedBatch.count = this.batchCount;\n        normalizedBatch.bytesUsed = this.bytesUsed;\n        Object.assign(normalizedBatch, options);\n        this.batchCount++;\n        this.aggregator = null;\n        return normalizedBatch;\n    }\n    _getTableBatchType() {\n        switch (this.options.shape) {\n            case 'array-row-table':\n            case 'object-row-table':\n                return RowTableBatchAggregator;\n            case 'columnar-table':\n                return ColumnarTableBatchAggregator;\n            case 'arrow-table':\n                if (!TableBatchBuilder.ArrowBatch) {\n                    throw new Error(ERR_MESSAGE);\n                }\n                return TableBatchBuilder.ArrowBatch;\n            default:\n                return BaseTableBatchAggregator;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}