{"ast":null,"code":"import { addEventListeners, removeEventListeners } from \"../utils/event-listeners.js\";\nimport { getWindowForElement } from \"../utils/get-window-for-element.js\";\nimport { inputHandler } from \"./input-handler.js\";\n/**\n * create new input type manager\n */\nexport class Input {\n  constructor(manager) {\n    this.evEl = '';\n    this.evWin = '';\n    this.evTarget = '';\n    /** smaller wrapper around the handler, for the scope and the enabled state of the manager,\n     * so when disabled the input events are completely bypassed.\n     */\n    this.domHandler = ev => {\n      if (this.manager.options.enable) {\n        this.handler(ev);\n      }\n    };\n    this.manager = manager;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget || manager.element;\n  }\n  callback(eventType, input) {\n    inputHandler(this.manager, eventType, input);\n  }\n  // eslint-disable @typescript-eslint/unbound-method\n  /**\n   * bind the events\n   */\n  init() {\n    addEventListeners(this.element, this.evEl, this.domHandler);\n    addEventListeners(this.target, this.evTarget, this.domHandler);\n    addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  }\n  /**\n   * unbind the events\n   */\n  destroy() {\n    removeEventListeners(this.element, this.evEl, this.domHandler);\n    removeEventListeners(this.target, this.evTarget, this.domHandler);\n    removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  }\n}\n//# sourceMappingURL=input.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}