{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\n/** Immutable QuerySet object */\nexport class QuerySet extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    type: undefined,\n    count: undefined\n  };\n  get [Symbol.toStringTag]() {\n    return 'QuerySet';\n  }\n  constructor(device, props) {\n    super(device, props, QuerySet.defaultProps);\n  }\n}","map":{"version":3,"names":["Resource","QuerySet","defaultProps","type","undefined","count","Symbol","toStringTag","constructor","device","props"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\query-set.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n\n/**\n * Properties for creating a QuerySet\n * - 'timestamp' - query the GPU timestamp counter at the start and end of render passes\n *   timestamp queries are available if the 'timestamp-query' feature is present.\n * - 'occlusion' - query the number of fragment samples that pass all per-fragment tests for a set of drawing commands\n *   including scissor, sample mask, alpha to coverage, stencil, and depth tests\n */\nexport type QuerySetProps = ResourceProps & {\n  /**\n   * The type of query set\n   * occlusion - query the number of fragment samples that pass all the per-fragment tests for a set of drawing commands, including scissor, sample mask, alpha to coverage, stencil, and depth tests\n   * timestamp - query the GPU timestamp counter at the start and end of render passes\n   */\n  type: 'occlusion' | 'timestamp';\n  /** The number of queries managed by the query set */\n  count: number;\n};\n\n/** Immutable QuerySet object */\nexport abstract class QuerySet extends Resource<QuerySetProps> {\n  static override defaultProps: Required<QuerySetProps> = {\n    ...Resource.defaultProps,\n    type: undefined!,\n    count: undefined!\n  };\n\n  get [Symbol.toStringTag](): string {\n    return 'QuerySet';\n  }\n\n  constructor(device: Device, props: QuerySetProps) {\n    super(device, props, QuerySet.defaultProps);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,QAAQ,QAAgB;AAoBhC;AACA,OAAM,MAAgBC,QAAS,SAAQD,QAAuB;EAC5D,OAAgBE,YAAY,GAA4B;IACtD,GAAGF,QAAQ,CAACE,YAAY;IACxBC,IAAI,EAAEC,SAAU;IAChBC,KAAK,EAAED;GACR;EAED,KAAKE,MAAM,CAACC,WAAW,IAAC;IACtB,OAAO,UAAU;EACnB;EAEAC,YAAYC,MAAc,EAAEC,KAAoB;IAC9C,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAET,QAAQ,CAACC,YAAY,CAAC;EAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}