{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getFetchFunction } from \"./get-fetch-function.js\";\nimport { extractQueryString, stripQueryString } from \"../utils/url-utils.js\";\nimport { path } from '@loaders.gl/loader-utils';\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(context, options, parentContext) {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (parentContext) {\n    return parentContext;\n  }\n  const newContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n  // Parse URLs so that subloaders can easily generate correct strings\n  if (newContext.url) {\n    const baseUrl = stripQueryString(newContext.url);\n    newContext.baseUrl = baseUrl;\n    newContext.queryString = extractQueryString(newContext.url);\n    newContext.filename = path.filename(baseUrl);\n    newContext.baseUrl = path.dirname(baseUrl);\n  }\n  // Recursive loading does not use single loader\n  if (!Array.isArray(newContext.loaders)) {\n    newContext.loaders = null;\n  }\n  return newContext;\n}\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(loaders, context) {\n  // A single loader (non-array) indicates no selection desired. Force select.\n  if (loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : undefined;\n}","map":{"version":3,"names":["getFetchFunction","extractQueryString","stripQueryString","path","getLoaderContext","context","options","parentContext","newContext","fetch","url","baseUrl","queryString","filename","dirname","Array","isArray","loaders","getLoadersFromContext","candidateLoaders","contextLoaders","length","undefined"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/loader-utils/loader-context.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getFetchFunction } from \"./get-fetch-function.js\";\nimport { extractQueryString, stripQueryString } from \"../utils/url-utils.js\";\nimport { path } from '@loaders.gl/loader-utils';\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(context, options, parentContext) {\n    // For recursive calls, we already have a context\n    // TODO - add any additional loaders to context?\n    if (parentContext) {\n        return parentContext;\n    }\n    const newContext = {\n        fetch: getFetchFunction(options, context),\n        ...context\n    };\n    // Parse URLs so that subloaders can easily generate correct strings\n    if (newContext.url) {\n        const baseUrl = stripQueryString(newContext.url);\n        newContext.baseUrl = baseUrl;\n        newContext.queryString = extractQueryString(newContext.url);\n        newContext.filename = path.filename(baseUrl);\n        newContext.baseUrl = path.dirname(baseUrl);\n    }\n    // Recursive loading does not use single loader\n    if (!Array.isArray(newContext.loaders)) {\n        newContext.loaders = null;\n    }\n    return newContext;\n}\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(loaders, context) {\n    // A single loader (non-array) indicates no selection desired. Force select.\n    if (loaders && !Array.isArray(loaders)) {\n        return loaders;\n    }\n    // Create a merged list\n    let candidateLoaders;\n    if (loaders) {\n        candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n    }\n    if (context && context.loaders) {\n        const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n        candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n    }\n    // If no loaders, return null to look in globally registered loaders\n    return candidateLoaders && candidateLoaders.length ? candidateLoaders : undefined;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,uBAAuB;AAC5E,SAASC,IAAI,QAAQ,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,OAAO,EAAEC,OAAO,EAAEC,aAAa,EAAE;EAC9D;EACA;EACA,IAAIA,aAAa,EAAE;IACf,OAAOA,aAAa;EACxB;EACA,MAAMC,UAAU,GAAG;IACfC,KAAK,EAAET,gBAAgB,CAACM,OAAO,EAAED,OAAO,CAAC;IACzC,GAAGA;EACP,CAAC;EACD;EACA,IAAIG,UAAU,CAACE,GAAG,EAAE;IAChB,MAAMC,OAAO,GAAGT,gBAAgB,CAACM,UAAU,CAACE,GAAG,CAAC;IAChDF,UAAU,CAACG,OAAO,GAAGA,OAAO;IAC5BH,UAAU,CAACI,WAAW,GAAGX,kBAAkB,CAACO,UAAU,CAACE,GAAG,CAAC;IAC3DF,UAAU,CAACK,QAAQ,GAAGV,IAAI,CAACU,QAAQ,CAACF,OAAO,CAAC;IAC5CH,UAAU,CAACG,OAAO,GAAGR,IAAI,CAACW,OAAO,CAACH,OAAO,CAAC;EAC9C;EACA;EACA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACR,UAAU,CAACS,OAAO,CAAC,EAAE;IACpCT,UAAU,CAACS,OAAO,GAAG,IAAI;EAC7B;EACA,OAAOT,UAAU;AACrB;AACA;AACA,OAAO,SAASU,qBAAqBA,CAACD,OAAO,EAAEZ,OAAO,EAAE;EACpD;EACA,IAAIY,OAAO,IAAI,CAACF,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,EAAE;IACpC,OAAOA,OAAO;EAClB;EACA;EACA,IAAIE,gBAAgB;EACpB,IAAIF,OAAO,EAAE;IACTE,gBAAgB,GAAGJ,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;EACnE;EACA,IAAIZ,OAAO,IAAIA,OAAO,CAACY,OAAO,EAAE;IAC5B,MAAMG,cAAc,GAAGL,KAAK,CAACC,OAAO,CAACX,OAAO,CAACY,OAAO,CAAC,GAAGZ,OAAO,CAACY,OAAO,GAAG,CAACZ,OAAO,CAACY,OAAO,CAAC;IAC3FE,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC,GAAGA,gBAAgB,EAAE,GAAGC,cAAc,CAAC,GAAGA,cAAc;EACnG;EACA;EACA,OAAOD,gBAAgB,IAAIA,gBAAgB,CAACE,MAAM,GAAGF,gBAAgB,GAAGG,SAAS;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}