{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { TerrainWorkerLoader } from '@loaders.gl/terrain';\nimport TileLayer from \"../tile-layer/tile-layer.js\";\nimport { urlType, getURLFromTemplate } from \"../tileset-2d/index.js\";\nconst DUMMY_DATA = [1];\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {\n    ...urlType,\n    optional: true\n  },\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  // Color to use if texture is unavailable\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: '',\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n  loaders: [TerrainWorkerLoader]\n};\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\n/** Render mesh surfaces from height map images. */\nclass TerrainLayer extends CompositeLayer {\n  updateState({\n    props,\n    oldProps\n  }) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {\n        elevationData\n      } = props;\n      const isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n      this.setState({\n        isTiled\n      });\n    }\n    // Reloading for single terrain mesh\n    const shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n    if (!this.state.isTiled && shouldReload) {\n      // When state.isTiled, elevationData cannot be an array\n      const terrain = this.loadTerrain(props);\n      this.setState({\n        terrain\n      });\n    }\n    // TODO - remove in v9\n    // @ts-ignore\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }) {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {\n      fetch\n    } = this.props;\n    return fetch(elevationData, {\n      propName: 'elevationData',\n      layer: this,\n      loadOptions,\n      signal\n    });\n  }\n  getTiledTerrainData(tile) {\n    const {\n      elevationData,\n      fetch,\n      texture,\n      elevationDecoder,\n      meshMaxError\n    } = this.props;\n    const {\n      viewport\n    } = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n    const {\n      signal\n    } = tile;\n    let bottomLeft = [0, 0];\n    let topRight = [0, 0];\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl ?\n    // If surface image fails to load, the tile should still be displayed\n    fetch(textureUrl, {\n      propName: 'texture',\n      layer: this,\n      loaders: [],\n      signal\n    }).catch(_ => null) : Promise.resolve(null);\n    return Promise.all([terrain, surface]);\n  }\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {\n      color,\n      wireframe,\n      material\n    } = this.props;\n    const {\n      data\n    } = props;\n    if (!data) {\n      return null;\n    }\n    const [mesh, texture] = data;\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n  // Update zRange of viewport\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n    const {\n      zRange\n    } = this.state;\n    const ranges = tiles.map(tile => tile.content).filter(Boolean).map(arr => {\n      // @ts-ignore\n      const bounds = arr[0].header.boundingBox;\n      return bounds.map(bound => bound[2]);\n    });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({\n        zRange: [minZ, maxZ]\n      });\n    }\n  }\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n    if (this.state.isTiled) {\n      return new TileLayer(this.getSubLayerProps({\n        id: 'tiles'\n      }), {\n        getTileData: this.getTiledTerrainData.bind(this),\n        renderSubLayers: this.renderSubLayers.bind(this),\n        updateTriggers: {\n          getTileData: {\n            elevationData: urlTemplateToUpdateTrigger(elevationData),\n            texture: urlTemplateToUpdateTrigger(texture),\n            meshMaxError,\n            elevationDecoder\n          }\n        },\n        onViewportLoad: this.onViewportLoad.bind(this),\n        zRange: this.state.zRange || null,\n        tileSize,\n        maxZoom,\n        minZoom,\n        extent,\n        maxRequests,\n        onTileLoad,\n        onTileUnload,\n        onTileError,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy\n      });\n    }\n    if (!elevationData) {\n      return null;\n    }\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(this.getSubLayerProps({\n      id: 'mesh'\n    }), {\n      data: DUMMY_DATA,\n      mesh: this.state.terrain,\n      texture,\n      _instanced: false,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      material,\n      wireframe\n    });\n  }\n}\nTerrainLayer.defaultProps = defaultProps;\nTerrainLayer.layerName = 'TerrainLayer';\nexport default TerrainLayer;","map":{"version":3,"names":["CompositeLayer","log","SimpleMeshLayer","COORDINATE_SYSTEM","TerrainWorkerLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","updateState","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","removed","signal","loadOptions","getLoadOptions","skirtHeight","fetch","propName","layer","getTiledTerrainData","tile","viewport","context","dataUrl","textureUrl","bottomLeft","topRight","isGeospatial","bbox","projectFlat","west","south","east","north","left","bottom","right","top","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","data","mesh","_instanced","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","length","minZ","Math","min","x","maxZ","max","renderLayers","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","bind","updateTriggers","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\terrain-layer\\terrain-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  DefaultProps,\n  Layer,\n  LayersList,\n  log,\n  Material,\n  TextureSource,\n  UpdateParameters\n} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport type {MeshAttributes} from '@loaders.gl/schema';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer, {TileLayerProps} from '../tile-layer/tile-layer';\nimport type {\n  Bounds,\n  GeoBoundingBox,\n  TileBoundingBox,\n  TileLoadProps,\n  ZRange\n} from '../tileset-2d/index';\nimport {Tile2DHeader, urlType, getURLFromTemplate, URLTemplate} from '../tileset-2d/index';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps: DefaultProps<TerrainLayerProps> = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: '',\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template: URLTemplate): string {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\n\ntype ElevationDecoder = {rScaler: number; gScaler: number; bScaler: number; offset: number};\ntype TerrainLoadProps = {\n  bounds: Bounds;\n  elevationData: string | null;\n  elevationDecoder: ElevationDecoder;\n  meshMaxError: number;\n  signal?: AbortSignal;\n};\n\ntype MeshAndTexture = [MeshAttributes | null, TextureSource | null];\n\n/** All properties supported by TerrainLayer */\nexport type TerrainLayerProps = _TerrainLayerProps &\n  TileLayerProps<MeshAndTexture> &\n  CompositeLayerProps;\n\n/** Props added by the TerrainLayer */\ntype _TerrainLayerProps = {\n  /** Image url that encodes height data. **/\n  elevationData: URLTemplate;\n\n  /** Image url to use as texture. **/\n  texture?: URLTemplate;\n\n  /** Martini error tolerance in meters, smaller number -> more detailed mesh. **/\n  meshMaxError?: number;\n\n  /** Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates. **/\n  bounds?: Bounds | null;\n\n  /** Color to use if texture is unavailable. **/\n  color?: Color;\n\n  /** Object to decode height data, from (r, g, b) to height in meters. **/\n  elevationDecoder?: ElevationDecoder;\n\n  /** Whether to render the mesh in wireframe mode. **/\n  wireframe?: boolean;\n\n  /** Material props for lighting effect. **/\n  material?: Material;\n\n  /**\n   * @deprecated Use `loadOptions.terrain.workerUrl` instead\n   */\n  workerUrl?: string;\n};\n\n/** Render mesh surfaces from height map images. */\nexport default class TerrainLayer<ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TerrainLayerProps & Required<TileLayerProps<MeshAndTexture>>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TerrainLayer';\n\n  state!: {\n    isTiled?: boolean;\n    terrain?: MeshAttributes;\n    zRange?: ZRange | null;\n  };\n\n  updateState({props, oldProps}: UpdateParameters<this>): void {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      // When state.isTiled, elevationData cannot be an array\n      const terrain = this.loadTerrain(props as TerrainLoadProps);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    // @ts-ignore\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }: TerrainLoadProps): Promise<MeshAttributes> | null {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile: TileLoadProps): Promise<MeshAndTexture> {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n\n    const {signal} = tile;\n    let bottomLeft = [0, 0] as [number, number];\n    let topRight = [0, 0] as [number, number];\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox as GeoBoundingBox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox as Exclude<TileBoundingBox, GeoBoundingBox>;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n    const bounds: Bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(\n    props: TileLayerProps<MeshAndTexture> & {\n      id: string;\n      data: MeshAndTexture;\n      tile: Tile2DHeader<MeshAndTexture>;\n    }\n  ) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    const {color, wireframe, material} = this.props;\n    const {data} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles?: Tile2DHeader<MeshAndTexture>[]): void {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        // @ts-ignore\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer<MeshAndTexture>(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    if (!elevationData) {\n      return null;\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}