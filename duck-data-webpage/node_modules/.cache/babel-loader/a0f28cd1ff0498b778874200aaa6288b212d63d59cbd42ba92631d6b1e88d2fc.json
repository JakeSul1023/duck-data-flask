{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Model } from '@luma.gl/engine';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from \"./triangle-layer-vertex.glsl.js\";\nimport fs from \"./triangle-layer-fragment.glsl.js\";\nimport { triangleUniforms } from \"./triangle-layer-uniforms.js\";\nclass TriangleLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, triangleUniforms]\n    });\n  }\n  initializeState({\n    device\n  }) {\n    this.setState({\n      model: this._getModel(device)\n    });\n  }\n  _getModel(device) {\n    const {\n      vertexCount,\n      data\n    } = this.props;\n    return new Model(device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      attributes: data.attributes,\n      bufferLayout: [{\n        name: 'positions',\n        format: 'float32x3'\n      }, {\n        name: 'texCoords',\n        format: 'float32x2'\n      }],\n      topology: 'triangle-strip',\n      vertexCount\n    });\n  }\n  draw() {\n    const {\n      model\n    } = this.state;\n    const {\n      aggregationMode,\n      colorDomain,\n      intensity,\n      threshold,\n      colorTexture,\n      maxTexture,\n      weightsTexture\n    } = this.props;\n    const triangleProps = {\n      aggregationMode,\n      colorDomain,\n      intensity,\n      threshold,\n      colorTexture,\n      maxTexture,\n      weightsTexture\n    };\n    model.shaderInputs.setProps({\n      triangle: triangleProps\n    });\n    model.draw(this.context.renderPass);\n  }\n}\nTriangleLayer.layerName = 'TriangleLayer';\nexport default TriangleLayer;\n//# sourceMappingURL=triangle-layer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}