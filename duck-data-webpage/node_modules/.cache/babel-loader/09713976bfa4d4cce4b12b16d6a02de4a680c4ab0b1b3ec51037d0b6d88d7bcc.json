{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Shader, log } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nimport { parseShaderCompilerLog } from \"../helpers/parse-shader-compiler-log.js\";\n/**\n * An immutable compiled shader program that execute portions of the GPU Pipeline\n */\nexport class WEBGLShader extends Shader {\n  device;\n  handle;\n  constructor(device, props) {\n    super(device, props);\n    this.device = device;\n    switch (this.props.stage) {\n      case 'vertex':\n        this.handle = this.props.handle || this.device.gl.createShader(35633);\n        break;\n      case 'fragment':\n        this.handle = this.props.handle || this.device.gl.createShader(35632);\n        break;\n      default:\n        throw new Error(this.props.stage);\n    }\n    this._compile(this.source);\n  }\n  destroy() {\n    if (this.handle) {\n      this.removeStats();\n      this.device.gl.deleteShader(this.handle);\n      // this.handle = null;\n      this.destroyed = true;\n    }\n  }\n  get asyncCompilationStatus() {\n    return this._waitForCompilationComplete().then(() => this.compilationStatus);\n  }\n  async getCompilationInfo() {\n    await this._waitForCompilationComplete();\n    return this.getCompilationInfoSync();\n  }\n  getCompilationInfoSync() {\n    const shaderLog = this.device.gl.getShaderInfoLog(this.handle);\n    return shaderLog ? parseShaderCompilerLog(shaderLog) : [];\n  }\n  getTranslatedSource() {\n    const extensions = this.device.getExtension('WEBGL_debug_shaders');\n    const ext = extensions.WEBGL_debug_shaders;\n    return ext?.getTranslatedShaderSource(this.handle) || null;\n  }\n  // PRIVATE METHODS\n  /** Compile a shader and get compilation status */\n  async _compile(source) {\n    source = source.startsWith('#version ') ? source : `#version 300 es\\n${source}`;\n    const {\n      gl\n    } = this.device;\n    gl.shaderSource(this.handle, source);\n    gl.compileShader(this.handle);\n    // For performance reasons, avoid checking shader compilation errors on production\n    if (!this.device.props.debug) {\n      this.compilationStatus = 'pending';\n      return;\n    }\n    // Sync case - slower, but advantage is that it throws in the constructor, making break on error more useful\n    if (!this.device.features.has('compilation-status-async-webgl')) {\n      this._getCompilationStatus();\n      // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus\n      this.debugShader();\n      if (this.compilationStatus === 'error') {\n        throw new Error(`GLSL compilation errors in ${this.props.stage} shader ${this.props.id}`);\n      }\n      return;\n    }\n    // async case\n    log.once(1, 'Shader compilation is asynchronous')();\n    await this._waitForCompilationComplete();\n    log.info(2, `Shader ${this.id} - async compilation complete: ${this.compilationStatus}`)();\n    this._getCompilationStatus();\n    // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus\n    this.debugShader();\n  }\n  /** Use KHR_parallel_shader_compile extension if available */\n  async _waitForCompilationComplete() {\n    const waitMs = async ms => await new Promise(resolve => setTimeout(resolve, ms));\n    const DELAY_MS = 10; // Shader compilation is typically quite fast (with some exceptions)\n    // If status polling is not available, we can't wait for completion. Just wait a little to minimize blocking\n    if (!this.device.features.has('compilation-status-async-webgl')) {\n      await waitMs(DELAY_MS);\n      return;\n    }\n    const {\n      gl\n    } = this.device;\n    for (;;) {\n      const complete = gl.getShaderParameter(this.handle, 37297);\n      if (complete) {\n        return;\n      }\n      await waitMs(DELAY_MS);\n    }\n  }\n  /**\n   * Get the shader compilation status\n   * TODO - Load log even when no error reported, to catch warnings?\n   * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n   */\n  _getCompilationStatus() {\n    this.compilationStatus = this.device.gl.getShaderParameter(this.handle, 35713) ? 'success' : 'error';\n  }\n}\n// TODO - Original code from luma.gl v8 - keep until new debug functionality has matured\n// if (!compilationSuccess) {\n//   const parsedLog = shaderLog ? parseShaderCompilerLog(shaderLog) : [];\n//   const messages = parsedLog.filter(message => message.type === 'error');\n//   const formattedLog = formatCompilerLog(messages, source, {showSourceCode: 'all', html: true});\n//   const shaderDescription = `${this.stage} shader ${shaderName}`;\n//   log.error(`GLSL compilation errors in ${shaderDescription}\\n${formattedLog}`)();\n//   displayShaderLog(parsedLog, source, shaderName);\n// }\n//# sourceMappingURL=webgl-shader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}