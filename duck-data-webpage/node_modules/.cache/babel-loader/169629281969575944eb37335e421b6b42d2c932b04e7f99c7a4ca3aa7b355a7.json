{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { CD_HEADER_SIGNATURE, makeHashTableFromZipHeaders, parseHashTable, parseZipCDFileHeader, parseZipLocalFileHeader, searchFromTheEnd } from '@loaders.gl/zip';\nimport { Tiles3DArchive } from \"./3d-tiles-archive-archive.js\";\n/**\n * Creates 3tz file handler from raw file\n * @param fileProvider raw file data\n * @param cb is called with information message during parsing\n * @returns 3tz file handler\n */\nexport const parse3DTilesArchive = async (fileProvider, cb) => {\n  const hashCDOffset = await searchFromTheEnd(fileProvider, CD_HEADER_SIGNATURE);\n  const cdFileHeader = await parseZipCDFileHeader(hashCDOffset, fileProvider);\n  let hashTable;\n  if (cdFileHeader?.fileName !== '@3dtilesIndex1@') {\n    hashTable = await makeHashTableFromZipHeaders(fileProvider);\n    cb?.('3tz doesnt contain hash file, hash info has been composed according to zip archive headers');\n  } else {\n    // cb?.('3tz contains hash file');\n    const localFileHeader = await parseZipLocalFileHeader(cdFileHeader.localHeaderOffset, fileProvider);\n    if (!localFileHeader) {\n      throw new Error('corrupted 3tz zip archive');\n    }\n    const fileDataOffset = localFileHeader.fileDataOffset;\n    const hashFile = await fileProvider.slice(fileDataOffset, fileDataOffset + localFileHeader.compressedSize);\n    hashTable = parseHashTable(hashFile);\n  }\n  return new Tiles3DArchive(fileProvider, hashTable);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}