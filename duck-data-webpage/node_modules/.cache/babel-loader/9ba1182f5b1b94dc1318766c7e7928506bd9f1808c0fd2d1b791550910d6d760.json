{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { DeviceLimits } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\n// prettier-ignore\nexport class WebGLDeviceLimits extends DeviceLimits {\n  get maxTextureDimension1D() {\n    return 0;\n  } // WebGL does not support 1D textures\n  get maxTextureDimension2D() {\n    return this.getParameter(3379);\n  }\n  get maxTextureDimension3D() {\n    return this.getParameter(32883);\n  }\n  get maxTextureArrayLayers() {\n    return this.getParameter(35071);\n  }\n  get maxBindGroups() {\n    return 0;\n  }\n  get maxDynamicUniformBuffersPerPipelineLayout() {\n    return 0;\n  } // TBD\n  get maxDynamicStorageBuffersPerPipelineLayout() {\n    return 0;\n  } // TBD\n  get maxSampledTexturesPerShaderStage() {\n    return this.getParameter(35660);\n  } // ) TBD\n  get maxSamplersPerShaderStage() {\n    return this.getParameter(35661);\n  }\n  get maxStorageBuffersPerShaderStage() {\n    return 0;\n  } // TBD\n  get maxStorageTexturesPerShaderStage() {\n    return 0;\n  } // TBD\n  get maxUniformBuffersPerShaderStage() {\n    return this.getParameter(35375);\n  }\n  get maxUniformBufferBindingSize() {\n    return this.getParameter(35376);\n  }\n  get maxStorageBufferBindingSize() {\n    return 0;\n  }\n  get minUniformBufferOffsetAlignment() {\n    return this.getParameter(35380);\n  }\n  get minStorageBufferOffsetAlignment() {\n    return 0;\n  }\n  get maxVertexBuffers() {\n    return 16;\n  } // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284\n  get maxVertexAttributes() {\n    return this.getParameter(34921);\n  }\n  get maxVertexBufferArrayStride() {\n    return 2048;\n  } // TBD, this is just the default value from WebGPU\n  get maxInterStageShaderComponents() {\n    return this.getParameter(35659);\n  }\n  get maxComputeWorkgroupStorageSize() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeInvocationsPerWorkgroup() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeX() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeY() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeZ() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupsPerDimension() {\n    return 0;\n  } // WebGL does not support compute shaders\n  // PRIVATE\n  gl;\n  limits = {};\n  constructor(gl) {\n    super();\n    this.gl = gl;\n  }\n  getParameter(parameter) {\n    if (this.limits[parameter] === undefined) {\n      this.limits[parameter] = this.gl.getParameter(parameter);\n    }\n    return this.limits[parameter] || 0;\n  }\n}","map":{"version":3,"names":["DeviceLimits","GL","WebGLDeviceLimits","maxTextureDimension1D","maxTextureDimension2D","getParameter","maxTextureDimension3D","maxTextureArrayLayers","maxBindGroups","maxDynamicUniformBuffersPerPipelineLayout","maxDynamicStorageBuffersPerPipelineLayout","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxUniformBufferBindingSize","maxStorageBufferBindingSize","minUniformBufferOffsetAlignment","minStorageBufferOffsetAlignment","maxVertexBuffers","maxVertexAttributes","maxVertexBufferArrayStride","maxInterStageShaderComponents","maxComputeWorkgroupStorageSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeWorkgroupsPerDimension","gl","limits","constructor","parameter","undefined"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\device-helpers\\webgl-device-limits.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DeviceLimits} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\n\n// prettier-ignore\nexport class WebGLDeviceLimits extends DeviceLimits {\n  get maxTextureDimension1D() { return 0; } // WebGL does not support 1D textures\n  get maxTextureDimension2D() { return this.getParameter(GL.MAX_TEXTURE_SIZE); }\n  get maxTextureDimension3D() { return this.getParameter(GL.MAX_3D_TEXTURE_SIZE); }\n  get maxTextureArrayLayers() { return this.getParameter(GL.MAX_ARRAY_TEXTURE_LAYERS); }\n  get maxBindGroups() { return 0; }\n  get maxDynamicUniformBuffersPerPipelineLayout() { return 0; } // TBD\n  get maxDynamicStorageBuffersPerPipelineLayout() { return 0; } // TBD\n  get maxSampledTexturesPerShaderStage() { return this.getParameter(GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS); } // ) TBD\n  get maxSamplersPerShaderStage() { return this.getParameter(GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS); }\n  get maxStorageBuffersPerShaderStage() { return 0; } // TBD\n  get maxStorageTexturesPerShaderStage() { return 0; } // TBD\n  get maxUniformBuffersPerShaderStage() { return this.getParameter(GL.MAX_UNIFORM_BUFFER_BINDINGS); }\n  get maxUniformBufferBindingSize() { return this.getParameter(GL.MAX_UNIFORM_BLOCK_SIZE); }\n  get maxStorageBufferBindingSize() { return 0; }\n  get minUniformBufferOffsetAlignment() { return this.getParameter(GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT); }\n  get minStorageBufferOffsetAlignment() { return 0; } \n  get maxVertexBuffers() { return 16; } // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284\n  get maxVertexAttributes() { return this.getParameter(GL.MAX_VERTEX_ATTRIBS); }\n  get maxVertexBufferArrayStride() { return 2048; } // TBD, this is just the default value from WebGPU\n  get maxInterStageShaderComponents() { return this.getParameter(GL.MAX_VARYING_COMPONENTS); }\n  get maxComputeWorkgroupStorageSize() { return 0; } // WebGL does not support compute shaders\n  get maxComputeInvocationsPerWorkgroup() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeX() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeY() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeZ() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupsPerDimension() { return 0;} // WebGL does not support compute shaders\n\n  // PRIVATE\n\n  protected gl: WebGL2RenderingContext;\n  protected limits: Partial<Record<GL, number>> = {};\n\n  constructor(gl: WebGL2RenderingContext) {\n    super();\n    this.gl = gl;\n  }\n\n  protected getParameter(parameter: GL): number {\n    if (this.limits[parameter] === undefined) {\n      this.limits[parameter] = this.gl.getParameter(parameter);\n    }\n    return this.limits[parameter] || 0;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,YAAY,QAAO,eAAe;AAC1C,SAAQC,EAAE,QAAO,oBAAoB;AAErC;AACA,OAAM,MAAOC,iBAAkB,SAAQF,YAAY;EACjD,IAAIG,qBAAqBA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EAC1C,IAAIC,qBAAqBA,CAAA;IAAK,OAAO,IAAI,CAACC,YAAY,MAAqB;EAAE;EAC7E,IAAIC,qBAAqBA,CAAA;IAAK,OAAO,IAAI,CAACD,YAAY,OAAwB;EAAE;EAChF,IAAIE,qBAAqBA,CAAA;IAAK,OAAO,IAAI,CAACF,YAAY,OAA6B;EAAE;EACrF,IAAIG,aAAaA,CAAA;IAAK,OAAO,CAAC;EAAE;EAChC,IAAIC,yCAAyCA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EAC9D,IAAIC,yCAAyCA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EAC9D,IAAIC,gCAAgCA,CAAA;IAAK,OAAO,IAAI,CAACN,YAAY,OAAmC;EAAE,CAAC,CAAC;EACxG,IAAIO,yBAAyBA,CAAA;IAAK,OAAO,IAAI,CAACP,YAAY,OAAqC;EAAE;EACjG,IAAIQ,+BAA+BA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EACpD,IAAIC,gCAAgCA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EACrD,IAAIC,+BAA+BA,CAAA;IAAK,OAAO,IAAI,CAACV,YAAY,OAAgC;EAAE;EAClG,IAAIW,2BAA2BA,CAAA;IAAK,OAAO,IAAI,CAACX,YAAY,OAA2B;EAAE;EACzF,IAAIY,2BAA2BA,CAAA;IAAK,OAAO,CAAC;EAAE;EAC9C,IAAIC,+BAA+BA,CAAA;IAAK,OAAO,IAAI,CAACb,YAAY,OAAoC;EAAE;EACtG,IAAIc,+BAA+BA,CAAA;IAAK,OAAO,CAAC;EAAE;EAClD,IAAIC,gBAAgBA,CAAA;IAAK,OAAO,EAAE;EAAE,CAAC,CAAC;EACtC,IAAIC,mBAAmBA,CAAA;IAAK,OAAO,IAAI,CAAChB,YAAY,OAAuB;EAAE;EAC7E,IAAIiB,0BAA0BA,CAAA;IAAK,OAAO,IAAI;EAAE,CAAC,CAAC;EAClD,IAAIC,6BAA6BA,CAAA;IAAK,OAAO,IAAI,CAAClB,YAAY,OAA2B;EAAE;EAC3F,IAAImB,8BAA8BA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EACnD,IAAIC,iCAAiCA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EACtD,IAAIC,wBAAwBA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EAC7C,IAAIC,wBAAwBA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EAC7C,IAAIC,wBAAwBA,CAAA;IAAK,OAAO,CAAC;EAAE,CAAC,CAAC;EAC7C,IAAIC,gCAAgCA,CAAA;IAAK,OAAO,CAAC;EAAC,CAAC,CAAC;EAEpD;EAEUC,EAAE;EACFC,MAAM,GAAgC,EAAE;EAElDC,YAAYF,EAA0B;IACpC,KAAK,EAAE;IACP,IAAI,CAACA,EAAE,GAAGA,EAAE;EACd;EAEUzB,YAAYA,CAAC4B,SAAa;IAClC,IAAI,IAAI,CAACF,MAAM,CAACE,SAAS,CAAC,KAAKC,SAAS,EAAE;MACxC,IAAI,CAACH,MAAM,CAACE,SAAS,CAAC,GAAG,IAAI,CAACH,EAAE,CAACzB,YAAY,CAAC4B,SAAS,CAAC;IAC1D;IACA,OAAO,IAAI,CAACF,MAAM,CAACE,SAAS,CAAC,IAAI,CAAC;EACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}