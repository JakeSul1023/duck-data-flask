{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/engine';\nimport { scatterplotUniforms } from \"./scatterplot-layer-uniforms.js\";\nimport vs from \"./scatterplot-layer-vertex.glsl.js\";\nimport fs from \"./scatterplot-layer-fragment.glsl.js\";\nimport source from \"./scatterplot-layer.wgsl.js\";\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  //  min point radius in pixels\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  // max point radius in pixels\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  // deprecated\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n/** Render circles at given coordinates. */\nclass ScatterplotLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      source,\n      modules: [project32, picking, scatterplotUniforms]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    if (params.changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n    const scatterplotProps = {\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      radiusUnits: UNIT[radiusUnits],\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      lineWidthUnits: UNIT[lineWidthUnits],\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    };\n    const model = this.state.model;\n    model.shaderInputs.setProps({\n      scatterplot: scatterplotProps\n    });\n    model.draw(this.context.renderPass);\n  }\n  _getModel() {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          positions: {\n            size: 3,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\nScatterplotLayer.defaultProps = defaultProps;\nScatterplotLayer.layerName = 'ScatterplotLayer';\nexport default ScatterplotLayer;","map":{"version":3,"names":["Layer","project32","picking","UNIT","Model","Geometry","scatterplotUniforms","vs","fs","source","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","state","model","destroy","_getModel","invalidateAll","draw","uniforms","scatterplotProps","shaderInputs","setProps","scatterplot","context","renderPass","positions","device","id","bufferLayout","getBufferLayouts","geometry","topology","attributes","Float32Array","isInstanced","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\scatterplot-layer\\scatterplot-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\n\nimport {scatterplotUniforms, ScatterplotProps} from './scatterplot-layer-uniforms';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nimport source from './scatterplot-layer.wgsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = unknown> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  state!: {\n    model?: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      source,\n      modules: [project32, picking, scatterplotUniforms]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n    const scatterplotProps: ScatterplotProps = {\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      radiusUnits: UNIT[radiusUnits],\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      lineWidthUnits: UNIT[lineWidthUnits],\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    };\n    const model = this.state.model!;\n    model.shaderInputs.setProps({scatterplot: scatterplotProps});\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel() {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}