{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ClipSpace } from '@luma.gl/engine';\nimport Pass from \"./pass.js\";\nimport { screenUniforms } from \"./screen-pass-uniforms.js\";\n/** A base render pass. */\nexport default class ScreenPass extends Pass {\n  constructor(device, props) {\n    super(device, props);\n    const {\n      module,\n      fs,\n      id\n    } = props;\n    const parameters = {\n      depthWriteEnabled: false,\n      depthCompare: 'always'\n    };\n    this.model = new ClipSpace(device, {\n      id,\n      fs,\n      modules: [module, screenUniforms],\n      parameters\n    });\n  }\n  render(params) {\n    this._renderPass(this.device, params);\n  }\n  delete() {\n    this.model.destroy();\n    this.model = null;\n  }\n  // Private methods\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass(device, options) {\n    const {\n      clearCanvas,\n      inputBuffer,\n      outputBuffer\n    } = options;\n    const texSize = [inputBuffer.width, inputBuffer.height];\n    const screenProps = {\n      texSrc: inputBuffer.colorAttachments[0],\n      texSize\n    };\n    this.model.shaderInputs.setProps({\n      screen: screenProps,\n      ...options.moduleProps\n    });\n    const renderPass = this.device.beginRenderPass({\n      framebuffer: outputBuffer,\n      parameters: {\n        viewport: [0, 0, ...texSize]\n      },\n      clearColor: clearCanvas ? [0, 0, 0, 0] : false,\n      clearDepth: 1\n    });\n    this.model.draw(renderPass);\n    renderPass.end();\n  }\n}\n//# sourceMappingURL=screen-pass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}