{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst IFDEF_REGEXP = /^\\s*\\#\\s*ifdef\\s*([a-zA-Z_]+)\\s*$/;\nconst ENDIF_REGEXP = /^\\s*\\#\\s*endif\\s*$/;\nexport function preprocess(source, options) {\n  const lines = source.split('\\n');\n  const output = [];\n  let conditional = true;\n  let currentDefine = null;\n  for (const line of lines) {\n    const matchIf = line.match(IFDEF_REGEXP);\n    const matchEnd = line.match(ENDIF_REGEXP);\n    if (matchIf) {\n      currentDefine = matchIf[1];\n      conditional = Boolean(options?.defines?.[currentDefine]);\n    } else if (matchEnd) {\n      conditional = true;\n    } else if (conditional) {\n      output.push(line);\n    }\n  }\n  return output.join('\\n');\n}","map":{"version":3,"names":["IFDEF_REGEXP","ENDIF_REGEXP","preprocess","source","options","lines","split","output","conditional","currentDefine","line","matchIf","match","matchEnd","Boolean","defines","push","join"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\lib\\preprocessor\\preprocessor.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst IFDEF_REGEXP = /^\\s*\\#\\s*ifdef\\s*([a-zA-Z_]+)\\s*$/;\nconst ENDIF_REGEXP = /^\\s*\\#\\s*endif\\s*$/;\n\nexport type PreprocessorOptions = {\n  defines?: Record<string, boolean>;\n};\n\nexport function preprocess(source: string, options?: PreprocessorOptions): string {\n  const lines = source.split('\\n');\n  const output: string[] = [];\n\n  let conditional = true;\n  let currentDefine: string | null = null;\n  for (const line of lines) {\n    const matchIf = line.match(IFDEF_REGEXP);\n    const matchEnd = line.match(ENDIF_REGEXP);\n    if (matchIf) {\n      currentDefine = matchIf[1];\n      conditional = Boolean(options?.defines?.[currentDefine]);\n    } else if (matchEnd) {\n      conditional = true;\n    } else if (conditional) {\n      output.push(line);\n    }\n  }\n  return output.join('\\n');\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,YAAY,GAAG,mCAAmC;AACxD,MAAMC,YAAY,GAAG,oBAAoB;AAMzC,OAAM,SAAUC,UAAUA,CAACC,MAAc,EAAEC,OAA6B;EACtE,MAAMC,KAAK,GAAGF,MAAM,CAACG,KAAK,CAAC,IAAI,CAAC;EAChC,MAAMC,MAAM,GAAa,EAAE;EAE3B,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,aAAa,GAAkB,IAAI;EACvC,KAAK,MAAMC,IAAI,IAAIL,KAAK,EAAE;IACxB,MAAMM,OAAO,GAAGD,IAAI,CAACE,KAAK,CAACZ,YAAY,CAAC;IACxC,MAAMa,QAAQ,GAAGH,IAAI,CAACE,KAAK,CAACX,YAAY,CAAC;IACzC,IAAIU,OAAO,EAAE;MACXF,aAAa,GAAGE,OAAO,CAAC,CAAC,CAAC;MAC1BH,WAAW,GAAGM,OAAO,CAACV,OAAO,EAAEW,OAAO,GAAGN,aAAa,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAII,QAAQ,EAAE;MACnBL,WAAW,GAAG,IAAI;IACpB,CAAC,MAAM,IAAIA,WAAW,EAAE;MACtBD,MAAM,CAACS,IAAI,CAACN,IAAI,CAAC;IACnB;EACF;EACA,OAAOH,MAAM,CAACU,IAAI,CAAC,IAAI,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}