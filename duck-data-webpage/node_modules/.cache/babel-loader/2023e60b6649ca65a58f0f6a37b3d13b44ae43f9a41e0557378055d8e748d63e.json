{"ast":null,"code":"// https://github.com/nodejs/node/commit/c1d82ac2ff15594840e2a1b9531b506ae067ed27;\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/** @todo replace this ridiculous choice of deepStrictEqual */\n// eslint-disable-next-line complexity\nexport function deepStrictEqual(actual, expected, strict) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n    // } else if (actual instanceof Buffer && expected instanceof Buffer) {\n    //   return compare(actual, expected) === 0;\n    // // 7.2. If the expected value is a Date object, the actual value is\n    // // equivalent if it is also a Date object that refers to the same time.\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n    // 7.3 If the expected value is a RegExp object, the actual value is\n    // equivalent if it is also a RegExp object with the same source and\n    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (actual instanceof RegExp && expected instanceof RegExp) {\n    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;\n    // 7.4. Other pairs that do not both pass typeof value == 'object',\n    // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {\n    // eslint-disable-next-line eqeqeq\n    return strict ? actual === expected : actual == expected;\n    // 7.5 For all other Object pairs, including Array objects, equivalence is\n    // determined by having the same number of owned properties (as verified\n    // with Object.prototype.hasOwnProperty.call), the same set of keys\n    // (although not necessarily the same order), equivalent values for every\n    // corresponding key, and an identical 'prototype' property. Note: this\n    // accounts for both named and indexed properties on Arrays.\n  }\n  return objEquiv(actual, expected, strict);\n}\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst pSlice = Array.prototype.slice;\nfunction isPrimitive(arg) {\n  return arg === null || typeof arg !== 'object' && typeof arg !== 'function';\n}\nfunction isArguments(object) {\n  // eslint-disable-next-line eqeqeq\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n// eslint-disable-next-line complexity\nfunction objEquiv(a, b, strict) {\n  if (a === null || a === undefined || b === null || b === undefined) return false;\n  // if one is a primitive, the other must be same\n  if (isPrimitive(a) || isPrimitive(b)) return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;\n  const aIsArgs = isArguments(a);\n  const bIsArgs = isArguments(b);\n  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepStrictEqual(a, b, strict);\n  }\n  const ka = Object.keys(a);\n  const kb = Object.keys(b);\n  let key;\n  let i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length) return false;\n  // the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  // ~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i]) return false;\n  }\n  // equivalent values for every corresponding key, and\n  // ~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    // @ts-ignore\n    if (!deepStrictEqual(a[key], b[key], strict)) return false;\n  }\n  return true;\n}","map":{"version":3,"names":["deepStrictEqual","actual","expected","strict","Date","getTime","RegExp","source","global","multiline","lastIndex","ignoreCase","objEquiv","pSlice","Array","prototype","slice","isPrimitive","arg","isArguments","object","Object","toString","call","a","b","undefined","getPrototypeOf","aIsArgs","bIsArgs","ka","keys","kb","key","i","length","sort"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/wms/dist/lib/parsers/gml/deep-strict-equal.js"],"sourcesContent":["// https://github.com/nodejs/node/commit/c1d82ac2ff15594840e2a1b9531b506ae067ed27;\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/** @todo replace this ridiculous choice of deepStrictEqual */\n// eslint-disable-next-line complexity\nexport function deepStrictEqual(actual, expected, strict) {\n    // 7.1. All identical values are equivalent, as determined by ===.\n    if (actual === expected) {\n        return true;\n        // } else if (actual instanceof Buffer && expected instanceof Buffer) {\n        //   return compare(actual, expected) === 0;\n        // // 7.2. If the expected value is a Date object, the actual value is\n        // // equivalent if it is also a Date object that refers to the same time.\n    }\n    else if (actual instanceof Date && expected instanceof Date) {\n        return actual.getTime() === expected.getTime();\n        // 7.3 If the expected value is a RegExp object, the actual value is\n        // equivalent if it is also a RegExp object with the same source and\n        // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n    }\n    else if (actual instanceof RegExp && expected instanceof RegExp) {\n        return (actual.source === expected.source &&\n            actual.global === expected.global &&\n            actual.multiline === expected.multiline &&\n            actual.lastIndex === expected.lastIndex &&\n            actual.ignoreCase === expected.ignoreCase);\n        // 7.4. Other pairs that do not both pass typeof value == 'object',\n        // equivalence is determined by ==.\n    }\n    else if ((actual === null || typeof actual !== 'object') &&\n        (expected === null || typeof expected !== 'object')) {\n        // eslint-disable-next-line eqeqeq\n        return strict ? actual === expected : actual == expected;\n        // 7.5 For all other Object pairs, including Array objects, equivalence is\n        // determined by having the same number of owned properties (as verified\n        // with Object.prototype.hasOwnProperty.call), the same set of keys\n        // (although not necessarily the same order), equivalent values for every\n        // corresponding key, and an identical 'prototype' property. Note: this\n        // accounts for both named and indexed properties on Arrays.\n    }\n    return objEquiv(actual, expected, strict);\n}\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst pSlice = Array.prototype.slice;\nfunction isPrimitive(arg) {\n    return arg === null || (typeof arg !== 'object' && typeof arg !== 'function');\n}\nfunction isArguments(object) {\n    // eslint-disable-next-line eqeqeq\n    return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n// eslint-disable-next-line complexity\nfunction objEquiv(a, b, strict) {\n    if (a === null || a === undefined || b === null || b === undefined)\n        return false;\n    // if one is a primitive, the other must be same\n    if (isPrimitive(a) || isPrimitive(b))\n        return a === b;\n    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n        return false;\n    const aIsArgs = isArguments(a);\n    const bIsArgs = isArguments(b);\n    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n        return false;\n    if (aIsArgs) {\n        a = pSlice.call(a);\n        b = pSlice.call(b);\n        return deepStrictEqual(a, b, strict);\n    }\n    const ka = Object.keys(a);\n    const kb = Object.keys(b);\n    let key;\n    let i;\n    // having the same number of owned properties (keys incorporates\n    // hasOwnProperty)\n    if (ka.length !== kb.length)\n        return false;\n    // the same set of keys (although not necessarily the same order),\n    ka.sort();\n    kb.sort();\n    // ~~~cheap key test\n    for (i = ka.length - 1; i >= 0; i--) {\n        if (ka[i] !== kb[i])\n            return false;\n    }\n    // equivalent values for every corresponding key, and\n    // ~~~possibly expensive deep test\n    for (i = ka.length - 1; i >= 0; i--) {\n        key = ka[i];\n        // @ts-ignore\n        if (!deepStrictEqual(a[key], b[key], strict))\n            return false;\n    }\n    return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}