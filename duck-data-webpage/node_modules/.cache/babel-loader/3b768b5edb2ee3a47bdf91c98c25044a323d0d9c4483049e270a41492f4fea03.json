{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport { modifyPolygonWindingDirection, WINDING } from '@math.gl/polygon';\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n/** A scratch object for sending winding options */\nconst windingOptions = {\n  isClosed: true\n};\n/**\n * Ensure a polygon is valid format\n */\nfunction validate(polygon) {\n  polygon = polygon && polygon.positions || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n/** Get the positions from a normalized polygon */\nexport function getPositions(polygon) {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\n/** Get the hole indices from a normalized polygon */\nexport function getHoleIndices(polygon) {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n/**\n * Check if a polygon is nested or flat\n * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)\n */\nfunction isNested(polygon) {\n  return Array.isArray(polygon[0]);\n}\n/**\n * Check if a polygon is simple or complex\n * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(polygon) {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n/**\n * Check if a simple polygon is a closed ring\n * Returns true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon) {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n/**\n * Check if a simple flat array is a closed ring\n * Returns true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(positions, /** size of a position, 2 (xy) or 3 (xyz) */\nsize, /** start index of the path in the positions array */\nstartIndex, /** end index of the path in the positions array */\nendIndex) {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyNestedRing(/** destination */\ntarget, /** index in the destination to start copying into */\ntargetStartIndex, /** the source polygon */\nsimplePolygon, /** size of a position, 2 (xy) or 3 (xyz) */\nsize, /** modify polygon to be of the specified winding direction */\nwindingDirection) {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n  return targetIndex;\n}\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyFlatRing(/** destination */\ntarget, /** index in the destination to start copying into */\ntargetStartIndex, /** the source polygon */\npositions, /** size of a position, 2 (xy) or 3 (xyz) */\nsize, /** start index of the path in the positions array */\nsrcStartIndex = 0, /** end index of the path in the positions array */\nsrcEndIndex, windingDirection) {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n  return targetIndex;\n}\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n */\n/* eslint-disable max-statements */\nexport function normalize(polygon, positionSize) {\n  validate(polygon);\n  const positions = [];\n  const holeIndices = [];\n  if ('positions' in polygon) {\n    // complex flat\n    const {\n      positions: srcPositions,\n      holeIndices: srcHoleIndices\n    } = polygon;\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(positions, targetIndex, srcPositions, positionSize, srcHoleIndices[i - 1], srcHoleIndices[i], i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n      return {\n        positions,\n        holeIndices\n      };\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(positions, targetIndex, simplePolygon, positionSize, polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {\n      positions,\n      holeIndices\n    };\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n/*\n * Calculate the area of a single plane of the polygon\n */\nfunction getPlaneArea(positions, xIndex, yIndex) {\n  const numVerts = positions.length / 3;\n  let area = 0;\n  for (let i = 0; i < numVerts; i++) {\n    const j = (i + 1) % numVerts;\n    area += positions[i * 3 + xIndex] * positions[j * 3 + yIndex];\n    area -= positions[j * 3 + xIndex] * positions[i * 3 + yIndex];\n  }\n  return Math.abs(area / 2);\n}\nfunction permutePositions(positions, xIndex, yIndex, zIndex) {\n  const numVerts = positions.length / 3;\n  for (let i = 0; i < numVerts; i++) {\n    const o = i * 3;\n    const x = positions[o + 0];\n    const y = positions[o + 1];\n    const z = positions[o + 2];\n    positions[o + xIndex] = x;\n    positions[o + yIndex] = y;\n    positions[o + zIndex] = z;\n  }\n}\n/**\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\n// eslint-disable-next-line complexity, max-statements\nexport function getSurfaceIndices(polygon, positionSize, preproject, full3d) {\n  let holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n  let positions = getPositions(polygon);\n  const is3d = full3d && positionSize === 3;\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n    // Clone the array\n    positions = positions.slice();\n    const p = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      if (is3d) {\n        p[2] = positions[i + 2];\n      }\n      const xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n      if (is3d) {\n        positions[i + 2] = xy[2];\n      }\n    }\n  }\n  if (is3d) {\n    // calculate plane with largest area\n    const xyArea = getPlaneArea(positions, 0, 1);\n    const xzArea = getPlaneArea(positions, 0, 2);\n    const yzArea = getPlaneArea(positions, 1, 2);\n    if (!xyArea && !xzArea && !yzArea) {\n      return []; // no planes have area, nothing we can do\n    }\n    // permute positions to make the largest plane xy for earcut\n    if (xyArea > xzArea && xyArea > yzArea) {\n      // xy plane largest, nothing to do\n    } else if (xzArea > yzArea) {\n      // xz plane largest, permute to make xyz -> xzy\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 0, 2, 1);\n    } else {\n      // yz plane largest, permute to make xyz -> yzx\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 2, 0, 1);\n    }\n  }\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}","map":{"version":3,"names":["earcut","modifyPolygonWindingDirection","WINDING","OUTER_POLYGON_WINDING","CLOCKWISE","HOLE_POLYGON_WINDING","COUNTER_CLOCKWISE","windingOptions","isClosed","validate","polygon","positions","Array","isArray","ArrayBuffer","isView","Error","getPositions","getHoleIndices","holeIndices","isNested","isSimple","length","Number","isFinite","isNestedRingClosed","simplePolygon","p0","p1","isFlatRingClosed","size","startIndex","endIndex","i","copyNestedRing","target","targetStartIndex","windingDirection","targetIndex","len","j","start","end","copyFlatRing","srcStartIndex","srcEndIndex","srcLength","normalize","positionSize","srcPositions","srcHoleIndices","push","pop","polygonIndex","entries","getPlaneArea","xIndex","yIndex","numVerts","area","Math","abs","permutePositions","zIndex","o","x","y","z","getSurfaceIndices","preproject","full3d","map","positionIndex","is3d","n","slice","p","xy","xyArea","xzArea","yzArea"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\solid-polygon-layer\\polygon.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nimport type {Position} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n\ntype WindingOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\n/** A scratch object for sending winding options */\nconst windingOptions: WindingOptions = {\n  isClosed: true\n};\n\n// 4 data formats are supported:\n\n/** Simple Polygon: an array of points */\nexport type NestedSimplePolygonGeometry = Position[];\n/** Complex Polygon: an array of array of points (array of rings)\n * with the first ring representing the outer hull and other rings representing holes\n */\nexport type NestedComplexPolygonGeometry = Position[][];\n/** An array of numbers (flattened \"simple polygon\") */\nexport type FlatSimplePolygonGeometry = NumericArray;\n/** Flattened \"complex polygon\" */\nexport type FlatComplexPolygonGeometry = {positions: NumericArray; holeIndices: NumericArray};\n\nexport type PolygonGeometry =\n  | NestedSimplePolygonGeometry\n  | NestedComplexPolygonGeometry\n  | FlatSimplePolygonGeometry\n  | FlatComplexPolygonGeometry;\n\nexport type NormalizedPolygonGeometry = FlatSimplePolygonGeometry | FlatComplexPolygonGeometry;\n\n/**\n * Ensure a polygon is valid format\n */\nfunction validate(polygon: PolygonGeometry): void {\n  polygon = (polygon && (polygon as FlatComplexPolygonGeometry).positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/** Get the positions from a normalized polygon */\nexport function getPositions(polygon: NormalizedPolygonGeometry): NumericArray {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\n\n/** Get the hole indices from a normalized polygon */\nexport function getHoleIndices(polygon: NormalizedPolygonGeometry): NumericArray | null {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n\n/**\n * Check if a polygon is nested or flat\n * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)\n */\nfunction isNested(\n  polygon: PolygonGeometry\n): polygon is NestedSimplePolygonGeometry | NestedComplexPolygonGeometry {\n  return Array.isArray(polygon[0]);\n}\n\n/**\n * Check if a polygon is simple or complex\n * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(\n  polygon: NestedSimplePolygonGeometry | NestedComplexPolygonGeometry\n): polygon is NestedSimplePolygonGeometry {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * Returns true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon: NestedSimplePolygonGeometry): boolean {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * Returns true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  startIndex: number,\n  /** end index of the path in the positions array */\n  endIndex: number\n): boolean {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyNestedRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  simplePolygon: NestedSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** modify polygon to be of the specified winding direction */\n  windingDirection: number\n): number {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyFlatRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  srcStartIndex: number = 0,\n  /** end index of the path in the positions array */\n  srcEndIndex: number,\n  windingDirection: number\n): number {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n */\n/* eslint-disable max-statements */\nexport function normalize(\n  polygon: PolygonGeometry,\n  positionSize: number\n): NormalizedPolygonGeometry {\n  validate(polygon);\n\n  const positions: number[] = [];\n  const holeIndices: number[] = [];\n\n  if ('positions' in polygon) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i],\n          i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(\n        positions,\n        targetIndex,\n        simplePolygon,\n        positionSize,\n        polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n      );\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Calculate the area of a single plane of the polygon\n */\nfunction getPlaneArea(positions: NumericArray, xIndex: number, yIndex: number): number {\n  const numVerts = positions.length / 3;\n  let area = 0;\n  for (let i = 0; i < numVerts; i++) {\n    const j = (i + 1) % numVerts;\n    area += positions[i * 3 + xIndex] * positions[j * 3 + yIndex];\n    area -= positions[j * 3 + xIndex] * positions[i * 3 + yIndex];\n  }\n  return Math.abs(area / 2);\n}\n\nfunction permutePositions(positions: NumericArray, xIndex: number, yIndex: number, zIndex: number) {\n  const numVerts = positions.length / 3;\n  for (let i = 0; i < numVerts; i++) {\n    const o = i * 3;\n\n    const x = positions[o + 0];\n    const y = positions[o + 1];\n    const z = positions[o + 2];\n\n    positions[o + xIndex] = x;\n    positions[o + yIndex] = y;\n    positions[o + zIndex] = z;\n  }\n}\n\n/**\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\n// eslint-disable-next-line complexity, max-statements\nexport function getSurfaceIndices(\n  polygon: NormalizedPolygonGeometry,\n  positionSize: number,\n  preproject?: (xy: number[]) => number[],\n  full3d?: boolean\n): number[] {\n  let holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n\n  let positions = getPositions(polygon);\n\n  const is3d = full3d && positionSize === 3;\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n\n    // Clone the array\n    positions = positions.slice();\n\n    const p: number[] = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n\n      if (is3d) {\n        p[2] = positions[i + 2];\n      }\n\n      const xy = preproject(p);\n\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n\n      if (is3d) {\n        positions[i + 2] = xy[2];\n      }\n    }\n  }\n\n  if (is3d) {\n    // calculate plane with largest area\n    const xyArea = getPlaneArea(positions, 0, 1);\n    const xzArea = getPlaneArea(positions, 0, 2);\n    const yzArea = getPlaneArea(positions, 1, 2);\n\n    if (!xyArea && !xzArea && !yzArea) {\n      return []; // no planes have area, nothing we can do\n    }\n\n    // permute positions to make the largest plane xy for earcut\n    if (xyArea > xzArea && xyArea > yzArea) {\n      // xy plane largest, nothing to do\n    } else if (xzArea > yzArea) {\n      // xz plane largest, permute to make xyz -> xzy\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 0, 2, 1);\n    } else {\n      // yz plane largest, permute to make xyz -> yzx\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 2, 0, 1);\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}