{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport JSZip from 'jszip';\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\n/**\n * Zip exporter\n */\nexport const ZipWriter = {\n  name: 'Zip Archive',\n  id: 'zip',\n  module: 'zip',\n  version: VERSION,\n  extensions: ['zip'],\n  category: 'archive',\n  mimeTypes: ['application/zip'],\n  options: {\n    zip: {\n      onUpdate: () => {}\n    },\n    jszip: {}\n  },\n  encode: encodeZipAsync\n};\nasync function encodeZipAsync(fileMap) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const jsZip = new JSZip();\n  // add files to the zip\n  for (const subFileName in fileMap) {\n    const subFileData = fileMap[subFileName];\n    // jszip supports both arraybuffer and string data (the main loaders.gl types)\n    // https://stuk.github.io/jszip/documentation/api_zipobject/async.html\n    jsZip.file(subFileName, subFileData, options?.jszip || {});\n  }\n  const zipOptions = {\n    ...ZipWriter.options.zip,\n    ...options?.zip\n  };\n  const jszipOptions = {\n    ...ZipWriter.options?.jszip,\n    ...options.jszip\n  };\n  try {\n    return await jsZip.generateAsync({\n      ...jszipOptions,\n      type: 'arraybuffer'\n    },\n    // generate an arraybuffer\n    zipOptions.onUpdate);\n  } catch (error) {\n    options.log.error(`Unable to encode zip archive: ${error}`);\n    throw error;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}