{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { config, formatValue, equals, isArray } from \"../../lib/common.js\";\n/** Base class for vectors and matrices */\nexport class MathArray extends Array {\n  // Common methods\n  /**\n   * Clone the current object\n   * @returns a new copy of this object\n   */\n  clone() {\n    // @ts-expect-error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return new this.constructor().copy(this); // eslint-disable-line\n  }\n  fromArray(array, offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n  toArray(targetArray = [], offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      targetArray[offset + i] = this[i];\n    }\n    return targetArray;\n  }\n  toObject(targetObject) {\n    return targetObject;\n  }\n  from(arrayOrObject) {\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) :\n    // @ts-ignore\n    this.fromObject(arrayOrObject);\n  }\n  to(arrayOrObject) {\n    // @ts-ignore\n    if (arrayOrObject === this) {\n      return this;\n    }\n    // @ts-expect-error TS2339: Property 'toObject' does not exist on type 'MathArray'.\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n  toTarget(target) {\n    return target ? this.to(target) : this;\n  }\n  /** @deprecated */\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n  toString() {\n    return this.formatString(config);\n  }\n  /** Formats string according to options */\n  formatString(opts) {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;\n  }\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // Modifiers\n  /** Negates all values in this object */\n  negate() {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n  lerp(a, b, t) {\n    if (t === undefined) {\n      return this.lerp(this, a, b);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      const endValue = typeof b === 'number' ? b : b[i];\n      this[i] = ai + t * (endValue - ai);\n    }\n    return this.check();\n  }\n  /** Minimal */\n  min(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n  /** Maximal */\n  max(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n  clamp(minVector, maxVector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n  add(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n  scale(scale) {\n    if (typeof scale === 'number') {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scale;\n      }\n    } else {\n      for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {\n        this[i] *= scale[i];\n      }\n    }\n    return this.check();\n  }\n  /**\n   * Multiplies all elements by `scale`\n   * Note: `Matrix4.multiplyByScalar` only scales its 3x3 \"minor\"\n   */\n  multiplyByScalar(scalar) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n  // Debug checks\n  /** Throws an error if array length is incorrect or contains illegal values */\n  check() {\n    if (config.debug && !this.validate()) {\n      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);\n    }\n    return this;\n  }\n  /** Returns false if the array length is incorrect or contains illegal values */\n  validate() {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n  // three.js compatibility\n  /** @deprecated */\n  sub(a) {\n    return this.subtract(a);\n  }\n  /** @deprecated */\n  setScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n  /** @deprecated */\n  addScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n  /** @deprecated */\n  subScalar(a) {\n    return this.addScalar(-a);\n  }\n  /** @deprecated */\n  multiplyScalar(scalar) {\n    // Multiplies all elements\n    // `Matrix4.scale` only scales its 3x3 \"minor\"\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n  /** @deprecated */\n  divideScalar(a) {\n    return this.multiplyByScalar(1 / a);\n  }\n  /** @deprecated */\n  clampScalar(min, max) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n  /** @deprecated */\n  get elements() {\n    return this;\n  }\n}","map":{"version":3,"names":["config","formatValue","equals","isArray","MathArray","Array","clone","constructor","copy","fromArray","array","offset","i","ELEMENTS","check","toArray","targetArray","toObject","targetObject","from","arrayOrObject","fromObject","to","toTarget","target","toFloat32Array","Float32Array","toString","formatString","opts","string","printTypes","name","length","exactEquals","negate","lerp","a","b","t","undefined","ai","endValue","min","vector","Math","max","clamp","minVector","maxVector","add","vectors","subtract","scale","multiplyByScalar","scalar","debug","validate","Error","valid","Number","isFinite","sub","setScalar","addScalar","subScalar","multiplyScalar","divideScalar","clampScalar","elements"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\classes\\base\\math-array.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {NumericArray} from '@math.gl/types';\nimport {ConfigurationOptions, config, formatValue, equals, isArray} from '../../lib/common';\n\n/** Base class for vectors and matrices */\nexport abstract class MathArray extends Array<number> {\n  /** Number of elements (values) in this array */\n  abstract get ELEMENTS(): number;\n\n  abstract copy(vector: Readonly<NumericArray>): this;\n\n  abstract fromObject(object: Record<string, unknown>): this;\n\n  // Common methods\n\n  /**\n   * Clone the current object\n   * @returns a new copy of this object\n   */\n  clone(): this {\n    // @ts-expect-error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return new this.constructor().copy(this); // eslint-disable-line\n  }\n\n  fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n\n  toArray<TypedArray>(targetArray: TypedArray, offset?: number): TypedArray;\n  toArray(targetArray?: number[], offset?: number): NumericArray;\n\n  toArray(targetArray: NumericArray = [], offset: number = 0): NumericArray {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      targetArray[offset + i] = this[i];\n    }\n    return targetArray;\n  }\n\n  toObject(targetObject: Record<string, unknown>): Record<string, unknown> {\n    return targetObject;\n  }\n\n  from(arrayOrObject: Readonly<NumericArray> | Record<string, unknown>): this {\n    return Array.isArray(arrayOrObject)\n      ? this.copy(arrayOrObject)\n      : // @ts-ignore\n        this.fromObject(arrayOrObject);\n  }\n\n  to<T extends NumericArray | Record<string, unknown>>(arrayOrObject: T): T {\n    // @ts-ignore\n    if (arrayOrObject === this) {\n      return this as T;\n    }\n    // @ts-expect-error TS2339: Property 'toObject' does not exist on type 'MathArray'.\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target: this): this {\n    return target ? this.to(target) : this;\n  }\n\n  /** @deprecated */\n  toFloat32Array(): Float32Array {\n    return new Float32Array(this);\n  }\n\n  override toString(): string {\n    return this.formatString(config);\n  }\n\n  /** Formats string according to options */\n  formatString(opts: ConfigurationOptions): string {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;\n  }\n\n  equals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exactEquals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Modifiers\n\n  /** Negates all values in this object */\n  negate(): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n\n  /** Linearly interpolates between two values */\n  lerp(a: Readonly<NumericArray>, t: number): this;\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray>, t: number): this;\n\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      const endValue = typeof b === 'number' ? b : b[i];\n      this[i] = ai + t * (endValue - ai);\n    }\n    return this.check();\n  }\n\n  /** Minimal */\n  min(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  /** Maximal */\n  max(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  clamp(minVector: Readonly<NumericArray>, maxVector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n\n  add(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  subtract(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  scale(scale: number | Readonly<NumericArray>): this {\n    if (typeof scale === 'number') {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scale;\n      }\n    } else {\n      for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {\n        this[i] *= scale[i];\n      }\n    }\n    return this.check();\n  }\n\n  /**\n   * Multiplies all elements by `scale`\n   * Note: `Matrix4.multiplyByScalar` only scales its 3x3 \"minor\"\n   */\n  multiplyByScalar(scalar: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  // Debug checks\n\n  /** Throws an error if array length is incorrect or contains illegal values */\n  check(): this {\n    if (config.debug && !this.validate()) {\n      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);\n    }\n    return this;\n  }\n\n  /** Returns false if the array length is incorrect or contains illegal values */\n  validate(): boolean {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n\n  // three.js compatibility\n\n  /** @deprecated */\n  sub(a: Readonly<NumericArray>): this {\n    return this.subtract(a);\n  }\n\n  /** @deprecated */\n  setScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  addScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  subScalar(a: number): this {\n    return this.addScalar(-a);\n  }\n\n  /** @deprecated */\n  multiplyScalar(scalar: number): this {\n    // Multiplies all elements\n    // `Matrix4.scale` only scales its 3x3 \"minor\"\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  divideScalar(a: number): this {\n    return this.multiplyByScalar(1 / a);\n  }\n\n  /** @deprecated */\n  clampScalar(min: number, max: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  get elements(): NumericArray {\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}