{"ast":null,"code":"import { Recognizer } from \"../recognizer/recognizer.js\";\nimport { RecognizerState } from \"../recognizer/recognizer-state.js\";\nimport { InputEvent } from \"../input/input-consts.js\";\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n */\nexport class AttrRecognizer extends Recognizer {\n  /**\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\n   */\n  attrTest(input) {\n    const optionPointers = this.options.pointers;\n    return optionPointers === 0 || input.pointers.length === optionPointers;\n  }\n  /**\n   * Process the input and return the state for the recognizer\n   */\n  process(input) {\n    const {\n      state\n    } = this;\n    const {\n      eventType\n    } = input;\n    const isRecognized = state & (RecognizerState.Began | RecognizerState.Changed);\n    const isValid = this.attrTest(input);\n    // on cancel input and we've recognized before, return STATE_CANCELLED\n    if (isRecognized && (eventType & InputEvent.Cancel || !isValid)) {\n      return state | RecognizerState.Cancelled;\n    } else if (isRecognized || isValid) {\n      if (eventType & InputEvent.End) {\n        return state | RecognizerState.Ended;\n      } else if (!(state & RecognizerState.Began)) {\n        return RecognizerState.Began;\n      }\n      return state | RecognizerState.Changed;\n    }\n    return RecognizerState.Failed;\n  }\n}","map":{"version":3,"names":["Recognizer","RecognizerState","InputEvent","AttrRecognizer","attrTest","input","optionPointers","options","pointers","length","process","state","eventType","isRecognized","Began","Changed","isValid","Cancel","Cancelled","End","Ended","Failed"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\recognizers\\attribute.ts"],"sourcesContent":["import {Recognizer, RecognizerOptions} from '../recognizer/recognizer';\nimport {RecognizerState} from '../recognizer/recognizer-state';\nimport {InputEvent} from '../input/input-consts';\nimport type {HammerInput} from '../input/types';\n\ntype AttrRecognizerOptions = RecognizerOptions & {\n  pointers: number;\n};\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n */\nexport abstract class AttrRecognizer<\n  OptionsT extends AttrRecognizerOptions\n> extends Recognizer<OptionsT> {\n  /**\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\n   */\n  attrTest(input: HammerInput): boolean {\n    const optionPointers = this.options.pointers;\n    return optionPointers === 0 || input.pointers.length === optionPointers;\n  }\n\n  /**\n   * Process the input and return the state for the recognizer\n   */\n  process(input: HammerInput) {\n    const {state} = this;\n    const {eventType} = input;\n\n    const isRecognized = state & (RecognizerState.Began | RecognizerState.Changed);\n    const isValid = this.attrTest(input);\n\n    // on cancel input and we've recognized before, return STATE_CANCELLED\n    if (isRecognized && (eventType & InputEvent.Cancel || !isValid)) {\n      return state | RecognizerState.Cancelled;\n    } else if (isRecognized || isValid) {\n      if (eventType & InputEvent.End) {\n        return state | RecognizerState.Ended;\n      } else if (!(state & RecognizerState.Began)) {\n        return RecognizerState.Began;\n      }\n      return state | RecognizerState.Changed;\n    }\n    return RecognizerState.Failed;\n  }\n}\n"],"mappings":"AAAA,SAAQA,UAAU,QAAoB;AACtC,SAAQC,eAAe,QAAC;AACxB,SAAQC,UAAU,QAAC;AAOnB;;;AAGA,OAAM,MAAgBC,cAEpB,SAAQH,UAAoB;EAC5B;;;EAGAI,QAAQA,CAACC,KAAkB;IACzB,MAAMC,cAAc,GAAG,IAAI,CAACC,OAAO,CAACC,QAAQ;IAC5C,OAAOF,cAAc,KAAK,CAAC,IAAID,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAKH,cAAc;EACzE;EAEA;;;EAGAI,OAAOA,CAACL,KAAkB;IACxB,MAAM;MAACM;IAAK,CAAC,GAAG,IAAI;IACpB,MAAM;MAACC;IAAS,CAAC,GAAGP,KAAK;IAEzB,MAAMQ,YAAY,GAAGF,KAAK,IAAIV,eAAe,CAACa,KAAK,GAAGb,eAAe,CAACc,OAAO,CAAC;IAC9E,MAAMC,OAAO,GAAG,IAAI,CAACZ,QAAQ,CAACC,KAAK,CAAC;IAEpC;IACA,IAAIQ,YAAY,KAAKD,SAAS,GAAGV,UAAU,CAACe,MAAM,IAAI,CAACD,OAAO,CAAC,EAAE;MAC/D,OAAOL,KAAK,GAAGV,eAAe,CAACiB,SAAS;IAC1C,CAAC,MAAM,IAAIL,YAAY,IAAIG,OAAO,EAAE;MAClC,IAAIJ,SAAS,GAAGV,UAAU,CAACiB,GAAG,EAAE;QAC9B,OAAOR,KAAK,GAAGV,eAAe,CAACmB,KAAK;MACtC,CAAC,MAAM,IAAI,EAAET,KAAK,GAAGV,eAAe,CAACa,KAAK,CAAC,EAAE;QAC3C,OAAOb,eAAe,CAACa,KAAK;MAC9B;MACA,OAAOH,KAAK,GAAGV,eAAe,CAACc,OAAO;IACxC;IACA,OAAOd,eAAe,CAACoB,MAAM;EAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}