{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Model, Geometry } from '@luma.gl/engine';\nimport { Layer, picking } from '@deck.gl/core';\nimport { createColorRangeTexture, updateColorRangeTexture } from \"../common/utils/color-utils.js\";\nimport vs from \"./screen-grid-layer-vertex.glsl.js\";\nimport fs from \"./screen-grid-layer-fragment.glsl.js\";\nimport { screenGridUniforms } from \"./screen-grid-layer-uniforms.js\";\nclass ScreenGridCellLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [picking, screenGridUniforms]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 2,\n        type: 'float32',\n        accessor: 'getBin'\n      },\n      instanceWeights: {\n        size: 1,\n        type: 'float32',\n        accessor: 'getWeight'\n      }\n    });\n    this.state.model = this._getModel();\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const model = this.state.model;\n    if (oldProps.colorRange !== props.colorRange) {\n      this.state.colorTexture?.destroy();\n      this.state.colorTexture = createColorRangeTexture(this.context.device, props.colorRange, props.colorScaleType);\n      const screenGridProps = {\n        colorRange: this.state.colorTexture\n      };\n      model.shaderInputs.setProps({\n        screenGrid: screenGridProps\n      });\n    } else if (oldProps.colorScaleType !== props.colorScaleType) {\n      updateColorRangeTexture(this.state.colorTexture, props.colorScaleType);\n    }\n    if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {\n      const {\n        width,\n        height\n      } = this.context.viewport;\n      const {\n        cellSizePixels: gridSize,\n        cellMarginPixels\n      } = this.props;\n      const cellSize = Math.max(gridSize - cellMarginPixels, 0);\n      const screenGridProps = {\n        gridSizeClipspace: [gridSize / width * 2, gridSize / height * 2],\n        cellSizeClipspace: [cellSize / width * 2, cellSize / height * 2]\n      };\n      model.shaderInputs.setProps({\n        screenGrid: screenGridProps\n      });\n    }\n  }\n  finalizeState(context) {\n    super.finalizeState(context);\n    this.state.colorTexture?.destroy();\n  }\n  draw({\n    uniforms\n  }) {\n    const colorDomain = this.props.colorDomain();\n    const model = this.state.model;\n    const screenGridProps = {\n      colorDomain\n    };\n    model.shaderInputs.setProps({\n      screenGrid: screenGridProps\n    });\n    model.draw(this.context.renderPass);\n  }\n  // Private Methods\n  _getModel() {\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          positions: {\n            value: new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]),\n            size: 2\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\nScreenGridCellLayer.layerName = 'ScreenGridCellLayer';\nexport default ScreenGridCellLayer;\n//# sourceMappingURL=screen-grid-cell-layer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}