{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTableLength, getTableRowAsObject } from '@loaders.gl/schema';\nimport { getGeoMetadata } from \"../geo/geoparquet-metadata.js\";\n/** TODO - move to loaders.gl/gis? */\nexport function convertWKBTableToGeoJSON(table, schema, loaders) {\n  const geoMetadata = getGeoMetadata(schema);\n  const primaryColumn = geoMetadata?.primary_column;\n  if (!primaryColumn) {\n    throw new Error('no geometry column');\n  }\n  const columnMetadata = geoMetadata.columns[primaryColumn];\n  const features = [];\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    const row = getTableRowAsObject(table, rowIndex);\n    const geometry = parseGeometry(row[primaryColumn], columnMetadata, loaders);\n    delete row[primaryColumn];\n    const feature = {\n      type: 'Feature',\n      geometry: geometry,\n      properties: row\n    };\n    features.push(feature);\n  }\n  return {\n    shape: 'geojson-table',\n    schema,\n    type: 'FeatureCollection',\n    features\n  };\n}\nfunction parseGeometry(geometry, columnMetadata, loaders) {\n  switch (columnMetadata.encoding) {\n    case 'wkt':\n      const wktLoader = loaders.find(loader => loader.id === 'wkt');\n      return wktLoader?.parseTextSync?.(geometry) || null;\n    case 'wkb':\n    default:\n      const wkbLoader = loaders.find(loader => loader.id === 'wkb');\n      const arrayBuffer = ArrayBuffer.isView(geometry) ? geometry.buffer.slice(geometry.byteOffset, geometry.byteOffset + geometry.byteLength) : geometry;\n      const geojson = wkbLoader?.parseSync?.(arrayBuffer, {\n        wkb: {\n          shape: 'geojson-geometry'\n        }\n      });\n      return geojson;\n    // binaryGeometry ? binaryToGeometry(binaryGeometry) : null;\n    // const binaryGeometry = WKBLoader.parseSync?.(geometry);\n    // ts-ignore\n    // return binaryGeometry ? binaryToGeometry(binaryGeometry) : null;\n  }\n}","map":{"version":3,"names":["getTableLength","getTableRowAsObject","getGeoMetadata","convertWKBTableToGeoJSON","table","schema","loaders","geoMetadata","primaryColumn","primary_column","Error","columnMetadata","columns","features","length","rowIndex","row","geometry","parseGeometry","feature","type","properties","push","shape","encoding","wktLoader","find","loader","id","parseTextSync","wkbLoader","arrayBuffer","ArrayBuffer","isView","buffer","slice","byteOffset","byteLength","geojson","parseSync","wkb"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gis/dist/lib/tables/convert-table-to-geojson.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTableLength, getTableRowAsObject } from '@loaders.gl/schema';\nimport { getGeoMetadata } from \"../geo/geoparquet-metadata.js\";\n/** TODO - move to loaders.gl/gis? */\nexport function convertWKBTableToGeoJSON(table, schema, loaders) {\n    const geoMetadata = getGeoMetadata(schema);\n    const primaryColumn = geoMetadata?.primary_column;\n    if (!primaryColumn) {\n        throw new Error('no geometry column');\n    }\n    const columnMetadata = geoMetadata.columns[primaryColumn];\n    const features = [];\n    const length = getTableLength(table);\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n        const row = getTableRowAsObject(table, rowIndex);\n        const geometry = parseGeometry(row[primaryColumn], columnMetadata, loaders);\n        delete row[primaryColumn];\n        const feature = { type: 'Feature', geometry: geometry, properties: row };\n        features.push(feature);\n    }\n    return { shape: 'geojson-table', schema, type: 'FeatureCollection', features };\n}\nfunction parseGeometry(geometry, columnMetadata, loaders) {\n    switch (columnMetadata.encoding) {\n        case 'wkt':\n            const wktLoader = loaders.find((loader) => loader.id === 'wkt');\n            return wktLoader?.parseTextSync?.(geometry) || null;\n        case 'wkb':\n        default:\n            const wkbLoader = loaders.find((loader) => loader.id === 'wkb');\n            const arrayBuffer = ArrayBuffer.isView(geometry)\n                ? geometry.buffer.slice(geometry.byteOffset, geometry.byteOffset + geometry.byteLength)\n                : geometry;\n            const geojson = wkbLoader?.parseSync?.(arrayBuffer, {\n                wkb: { shape: 'geojson-geometry' }\n            });\n            return geojson; // binaryGeometry ? binaryToGeometry(binaryGeometry) : null;\n        // const binaryGeometry = WKBLoader.parseSync?.(geometry);\n        // ts-ignore\n        // return binaryGeometry ? binaryToGeometry(binaryGeometry) : null;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,oBAAoB;AACxE,SAASC,cAAc,QAAQ,+BAA+B;AAC9D;AACA,OAAO,SAASC,wBAAwBA,CAACC,KAAK,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC7D,MAAMC,WAAW,GAAGL,cAAc,CAACG,MAAM,CAAC;EAC1C,MAAMG,aAAa,GAAGD,WAAW,EAAEE,cAAc;EACjD,IAAI,CAACD,aAAa,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;EACzC;EACA,MAAMC,cAAc,GAAGJ,WAAW,CAACK,OAAO,CAACJ,aAAa,CAAC;EACzD,MAAMK,QAAQ,GAAG,EAAE;EACnB,MAAMC,MAAM,GAAGd,cAAc,CAACI,KAAK,CAAC;EACpC,KAAK,IAAIW,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGD,MAAM,EAAEC,QAAQ,EAAE,EAAE;IAClD,MAAMC,GAAG,GAAGf,mBAAmB,CAACG,KAAK,EAAEW,QAAQ,CAAC;IAChD,MAAME,QAAQ,GAAGC,aAAa,CAACF,GAAG,CAACR,aAAa,CAAC,EAAEG,cAAc,EAAEL,OAAO,CAAC;IAC3E,OAAOU,GAAG,CAACR,aAAa,CAAC;IACzB,MAAMW,OAAO,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEH,QAAQ,EAAEA,QAAQ;MAAEI,UAAU,EAAEL;IAAI,CAAC;IACxEH,QAAQ,CAACS,IAAI,CAACH,OAAO,CAAC;EAC1B;EACA,OAAO;IAAEI,KAAK,EAAE,eAAe;IAAElB,MAAM;IAAEe,IAAI,EAAE,mBAAmB;IAAEP;EAAS,CAAC;AAClF;AACA,SAASK,aAAaA,CAACD,QAAQ,EAAEN,cAAc,EAAEL,OAAO,EAAE;EACtD,QAAQK,cAAc,CAACa,QAAQ;IAC3B,KAAK,KAAK;MACN,MAAMC,SAAS,GAAGnB,OAAO,CAACoB,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,EAAE,KAAK,KAAK,CAAC;MAC/D,OAAOH,SAAS,EAAEI,aAAa,GAAGZ,QAAQ,CAAC,IAAI,IAAI;IACvD,KAAK,KAAK;IACV;MACI,MAAMa,SAAS,GAAGxB,OAAO,CAACoB,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,EAAE,KAAK,KAAK,CAAC;MAC/D,MAAMG,WAAW,GAAGC,WAAW,CAACC,MAAM,CAAChB,QAAQ,CAAC,GAC1CA,QAAQ,CAACiB,MAAM,CAACC,KAAK,CAAClB,QAAQ,CAACmB,UAAU,EAAEnB,QAAQ,CAACmB,UAAU,GAAGnB,QAAQ,CAACoB,UAAU,CAAC,GACrFpB,QAAQ;MACd,MAAMqB,OAAO,GAAGR,SAAS,EAAES,SAAS,GAAGR,WAAW,EAAE;QAChDS,GAAG,EAAE;UAAEjB,KAAK,EAAE;QAAmB;MACrC,CAAC,CAAC;MACF,OAAOe,OAAO;IAAE;IACpB;IACA;IACA;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}