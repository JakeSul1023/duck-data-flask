{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { XMLLoader } from '@loaders.gl/xml';\nimport { parseExceptionReport } from \"./parse-exception-report.js\";\n/**\n * Parses a typed data structure from raw XML for `GetDomain` response\n * @note Error handlings is fairly weak\n */\nexport function parseCSWDomain(text, options) {\n  const parsedXML = XMLLoader.parseTextSync?.(text, {\n    ...options,\n    xml: {\n      ...options?.xml,\n      removeNSPrefix: true,\n      uncapitalizeKeys: true,\n      arrayPaths: ['GetDomainResponse.DomainValues', 'GetDomainResponse.DomainValues.ListOfValues.value']\n    }\n  });\n  parseExceptionReport(parsedXML);\n  const xmlDomain = parsedXML.getDomainResponse;\n  for (const domainValue of xmlDomain.domainValues) {\n    // Drop the nested <listOfValues><value><value><listOfValues>  => values[]\n    domainValue.values = domainValue.listOfValues?.value;\n    delete domainValue.listOfValues;\n  }\n  return xmlDomain;\n}","map":{"version":3,"names":["XMLLoader","parseExceptionReport","parseCSWDomain","text","options","parsedXML","parseTextSync","xml","removeNSPrefix","uncapitalizeKeys","arrayPaths","xmlDomain","getDomainResponse","domainValue","domainValues","values","listOfValues","value"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/wms/dist/lib/parsers/csw/parse-csw-domain.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { XMLLoader } from '@loaders.gl/xml';\nimport { parseExceptionReport } from \"./parse-exception-report.js\";\n/**\n * Parses a typed data structure from raw XML for `GetDomain` response\n * @note Error handlings is fairly weak\n */\nexport function parseCSWDomain(text, options) {\n    const parsedXML = XMLLoader.parseTextSync?.(text, {\n        ...options,\n        xml: {\n            ...options?.xml,\n            removeNSPrefix: true,\n            uncapitalizeKeys: true,\n            arrayPaths: [\n                'GetDomainResponse.DomainValues',\n                'GetDomainResponse.DomainValues.ListOfValues.value'\n            ]\n        }\n    });\n    parseExceptionReport(parsedXML);\n    const xmlDomain = parsedXML.getDomainResponse;\n    for (const domainValue of xmlDomain.domainValues) {\n        // Drop the nested <listOfValues><value><value><listOfValues>  => values[]\n        domainValue.values = domainValue.listOfValues?.value;\n        delete domainValue.listOfValues;\n    }\n    return xmlDomain;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC1C,MAAMC,SAAS,GAAGL,SAAS,CAACM,aAAa,GAAGH,IAAI,EAAE;IAC9C,GAAGC,OAAO;IACVG,GAAG,EAAE;MACD,GAAGH,OAAO,EAAEG,GAAG;MACfC,cAAc,EAAE,IAAI;MACpBC,gBAAgB,EAAE,IAAI;MACtBC,UAAU,EAAE,CACR,gCAAgC,EAChC,mDAAmD;IAE3D;EACJ,CAAC,CAAC;EACFT,oBAAoB,CAACI,SAAS,CAAC;EAC/B,MAAMM,SAAS,GAAGN,SAAS,CAACO,iBAAiB;EAC7C,KAAK,MAAMC,WAAW,IAAIF,SAAS,CAACG,YAAY,EAAE;IAC9C;IACAD,WAAW,CAACE,MAAM,GAAGF,WAAW,CAACG,YAAY,EAAEC,KAAK;IACpD,OAAOJ,WAAW,CAACG,YAAY;EACnC;EACA,OAAOL,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}