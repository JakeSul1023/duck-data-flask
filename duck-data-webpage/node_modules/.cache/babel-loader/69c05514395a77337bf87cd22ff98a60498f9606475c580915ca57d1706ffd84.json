{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { equals } from '@math.gl/core';\nimport assert from \"../utils/assert.js\";\nexport default class TransitionInterpolator {\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts) {\n    const {\n      compare,\n      extract,\n      required\n    } = opts;\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps, nextProps) {\n    for (const key of this._propsToCompare) {\n      if (!(key in currentProps) || !(key in nextProps) || !equals(currentProps[key], nextProps[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(startProps, endProps) {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n    this._checkRequiredProps(startViewStateProps);\n    this._checkRequiredProps(endViewStateProps);\n    return {\n      start: startViewStateProps,\n      end: endViewStateProps\n    };\n  }\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps, endProps) {\n    return endProps.transitionDuration;\n  }\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(Number.isFinite(value) || Array.isArray(value), `${propName} is required for transition`);\n    });\n  }\n}","map":{"version":3,"names":["equals","assert","TransitionInterpolator","constructor","opts","compare","extract","required","_propsToCompare","_propsToExtract","_requiredProps","arePropsEqual","currentProps","nextProps","key","initializeProps","startProps","endProps","startViewStateProps","endViewStateProps","_checkRequiredProps","start","end","getDuration","transitionDuration","props","forEach","propName","value","Number","isFinite","Array","isArray"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\transitions\\transition-interpolator.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {equals} from '@math.gl/core';\nimport assert from '../utils/assert';\n\nexport default abstract class TransitionInterpolator {\n  protected _propsToCompare: string[];\n  protected _propsToExtract: string[];\n  protected _requiredProps?: string[];\n\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts: {compare: string[]; extract?: string[]; required?: string[]}) {\n    const {compare, extract, required} = opts;\n\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps: Record<string, any>, nextProps: Record<string, any>): boolean {\n    for (const key of this._propsToCompare) {\n      if (\n        !(key in currentProps) ||\n        !(key in nextProps) ||\n        !equals(currentProps[key], nextProps[key])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>\n  ): {\n    start: Record<string, any>;\n    end: Record<string, any>;\n  } {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n\n    this._checkRequiredProps(startViewStateProps);\n    this._checkRequiredProps(endViewStateProps);\n\n    return {start: startViewStateProps, end: endViewStateProps};\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  abstract interpolateProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>,\n    t: number\n  ): Record<string, any>;\n\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps: Record<string, any>, endProps: Record<string, any>): number {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(\n        Number.isFinite(value) || Array.isArray(value),\n        `${propName} is required for transition`\n      );\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,MAAM,QAAO,eAAe;AACpC,OAAOC,MAAM;AAEb,eAAc,MAAgBC,sBAAsB;EAKlD;;;;;;;EAOAC,YAAYC,IAAkE;IAC5E,MAAM;MAACC,OAAO;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAGH,IAAI;IAEzC,IAAI,CAACI,eAAe,GAAGH,OAAO;IAC9B,IAAI,CAACI,eAAe,GAAGH,OAAO,IAAID,OAAO;IACzC,IAAI,CAACK,cAAc,GAAGH,QAAQ;EAChC;EAEA;;;;;;EAMAI,aAAaA,CAACC,YAAiC,EAAEC,SAA8B;IAC7E,KAAK,MAAMC,GAAG,IAAI,IAAI,CAACN,eAAe,EAAE;MACtC,IACE,EAAEM,GAAG,IAAIF,YAAY,CAAC,IACtB,EAAEE,GAAG,IAAID,SAAS,CAAC,IACnB,CAACb,MAAM,CAACY,YAAY,CAACE,GAAG,CAAC,EAAED,SAAS,CAACC,GAAG,CAAC,CAAC,EAC1C;QACA,OAAO,KAAK;MACd;IACF;IACA,OAAO,IAAI;EACb;EAEA;;;;;;;EAOAC,eAAeA,CACbC,UAA+B,EAC/BC,QAA6B;IAK7B,MAAMC,mBAAmB,GAAG,EAAE;IAC9B,MAAMC,iBAAiB,GAAG,EAAE;IAE5B,KAAK,MAAML,GAAG,IAAI,IAAI,CAACL,eAAe,EAAE;MACtC,IAAIK,GAAG,IAAIE,UAAU,IAAIF,GAAG,IAAIG,QAAQ,EAAE;QACxCC,mBAAmB,CAACJ,GAAG,CAAC,GAAGE,UAAU,CAACF,GAAG,CAAC;QAC1CK,iBAAiB,CAACL,GAAG,CAAC,GAAGG,QAAQ,CAACH,GAAG,CAAC;MACxC;IACF;IAEA,IAAI,CAACM,mBAAmB,CAACF,mBAAmB,CAAC;IAC7C,IAAI,CAACE,mBAAmB,CAACD,iBAAiB,CAAC;IAE3C,OAAO;MAACE,KAAK,EAAEH,mBAAmB;MAAEI,GAAG,EAAEH;IAAiB,CAAC;EAC7D;EAeA;;;;;;EAMAI,WAAWA,CAACP,UAA+B,EAAEC,QAA6B;IACxE,OAAOA,QAAQ,CAACO,kBAAkB;EACpC;EAEAJ,mBAAmBA,CAACK,KAAK;IACvB,IAAI,CAAC,IAAI,CAACf,cAAc,EAAE;MACxB;IACF;IAEA,IAAI,CAACA,cAAc,CAACgB,OAAO,CAACC,QAAQ,IAAG;MACrC,MAAMC,KAAK,GAAGH,KAAK,CAACE,QAAQ,CAAC;MAC7B1B,MAAM,CACJ4B,MAAM,CAACC,QAAQ,CAACF,KAAK,CAAC,IAAIG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAC9C,GAAGD,QAAQ,6BAA6B,CACzC;IACH,CAAC,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}