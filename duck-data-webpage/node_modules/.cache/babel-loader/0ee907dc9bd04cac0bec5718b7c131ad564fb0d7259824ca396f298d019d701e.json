{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { VERSION } from \"./lib/utils/version.js\";\nimport { parse3DTile } from \"./lib/parsers/parse-3d-tile.js\";\nimport { normalizeTileHeaders } from \"./lib/parsers/parse-3d-tile-header.js\";\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader = {\n  dataType: null,\n  batchType: null,\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n/** Parses a tileset or tile */\nasync function parse(data, options = {}, context) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context?.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n  return isTileset ? parseTileset(data, options, context) : parseTile(data, options, context);\n}\n/** Parse a tileset */\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  const tilesetUrl = context?.url || '';\n  const basePath = getBaseUri(tilesetUrl);\n  const normalizedRoot = await normalizeTileHeaders(tilesetJson, basePath, options || {});\n  const tilesetJsonPostprocessed = {\n    ...tilesetJson,\n    shape: 'tileset3d',\n    loader: Tiles3DLoader,\n    url: tilesetUrl,\n    queryString: context?.queryString || '',\n    basePath,\n    root: normalizedRoot || tilesetJson.root,\n    type: TILESET_TYPE.TILES3D,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    lodMetricValue: tilesetJson.root?.geometricError || 0\n  };\n  return tilesetJsonPostprocessed;\n}\n/** Parse a tile */\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {\n    content: {\n      shape: 'tile3d',\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  // @ts-expect-error\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  // @ts-expect-error\n  return tile.content;\n}\n/** Get base name */\nfunction getBaseUri(tilesetUrl) {\n  return path.dirname(tilesetUrl);\n}","map":{"version":3,"names":["path","TILESET_TYPE","LOD_METRIC_TYPE","VERSION","parse3DTile","normalizeTileHeaders","Tiles3DLoader","dataType","batchType","id","name","module","version","extensions","mimeTypes","tests","parse","options","loadGLTF","decodeQuantizedPositions","isTileset","assetGltfUpAxis","data","context","loaderOptions","url","indexOf","parseTileset","parseTile","tilesetJson","JSON","TextDecoder","decode","tilesetUrl","basePath","getBaseUri","normalizedRoot","tilesetJsonPostprocessed","shape","loader","queryString","root","type","TILES3D","lodMetricType","GEOMETRIC_ERROR","lodMetricValue","geometricError","arrayBuffer","tile","content","featureIds","byteOffset","dirname"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/tiles-3d-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { VERSION } from \"./lib/utils/version.js\";\nimport { parse3DTile } from \"./lib/parsers/parse-3d-tile.js\";\nimport { normalizeTileHeaders } from \"./lib/parsers/parse-3d-tile-header.js\";\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader = {\n    dataType: null,\n    batchType: null,\n    id: '3d-tiles',\n    name: '3D Tiles',\n    module: '3d-tiles',\n    version: VERSION,\n    extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n    mimeTypes: ['application/octet-stream'],\n    tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n    parse,\n    options: {\n        '3d-tiles': {\n            loadGLTF: true,\n            decodeQuantizedPositions: false,\n            isTileset: 'auto',\n            assetGltfUpAxis: null\n        }\n    }\n};\n/** Parses a tileset or tile */\nasync function parse(data, options = {}, context) {\n    // auto detect file type\n    const loaderOptions = options['3d-tiles'] || {};\n    let isTileset;\n    if (loaderOptions.isTileset === 'auto') {\n        isTileset = context?.url && context.url.indexOf('.json') !== -1;\n    }\n    else {\n        isTileset = loaderOptions.isTileset;\n    }\n    return isTileset ? parseTileset(data, options, context) : parseTile(data, options, context);\n}\n/** Parse a tileset */\nasync function parseTileset(data, options, context) {\n    const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n    const tilesetUrl = context?.url || '';\n    const basePath = getBaseUri(tilesetUrl);\n    const normalizedRoot = await normalizeTileHeaders(tilesetJson, basePath, options || {});\n    const tilesetJsonPostprocessed = {\n        ...tilesetJson,\n        shape: 'tileset3d',\n        loader: Tiles3DLoader,\n        url: tilesetUrl,\n        queryString: context?.queryString || '',\n        basePath,\n        root: normalizedRoot || tilesetJson.root,\n        type: TILESET_TYPE.TILES3D,\n        lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n        lodMetricValue: tilesetJson.root?.geometricError || 0\n    };\n    return tilesetJsonPostprocessed;\n}\n/** Parse a tile */\nasync function parseTile(arrayBuffer, options, context) {\n    const tile = {\n        content: {\n            shape: 'tile3d',\n            featureIds: null\n        }\n    };\n    const byteOffset = 0;\n    // @ts-expect-error\n    await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n    // @ts-expect-error\n    return tile.content;\n}\n/** Get base name */\nfunction getBaseUri(tilesetUrl) {\n    return path.dirname(tilesetUrl);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}