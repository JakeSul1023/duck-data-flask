{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { Vector } from \"./base/vector.js\";\nimport { config, isArray } from \"../lib/common.js\";\nimport { checkNumber } from \"../lib/validators.js\";\nimport { transformMat4 as vec2_transformMat4, transformMat3 as vec2_transformMat3, transformMat2d as vec2_transformMat2d, transformMat2 as vec2_transformMat2 } from \"../gl-matrix/vec2.js\";\nimport { vec2_transformMat4AsVector } from \"../lib/gl-matrix-extras.js\";\n/**\n * Two-element vector class with common linear algebra operations.\n * Subclass of Array<number> meaning that it is highly compatible with other libraries\n */\nexport class Vector2 extends Vector {\n  // Creates a new, empty vec2\n  constructor(x = 0, y = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(2); // -0, -0);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n      this[0] = x;\n      this[1] = y;\n    }\n  }\n  set(x, y) {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n  fromObject(object) {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n  toObject(object) {\n    object.x = this[0];\n    object.y = this[1];\n    return object;\n  }\n  // Getters/setters\n  get ELEMENTS() {\n    return 2;\n  }\n  /**\n   * Returns angle from x axis\n   * @returns\n   */\n  horizontalAngle() {\n    return Math.atan2(this.y, this.x);\n  }\n  /**\n   * Returns angle from y axis\n   * @returns\n   */\n  verticalAngle() {\n    return Math.atan2(this.x, this.y);\n  }\n  // Transforms\n  /**\n   * Transforms as point\n   * @param matrix4\n   * @returns\n   */\n  transform(matrix4) {\n    return this.transformAsPoint(matrix4);\n  }\n  /**\n   * transforms as point (4th component is implicitly 1)\n   * @param matrix4\n   * @returns\n   */\n  transformAsPoint(matrix4) {\n    vec2_transformMat4(this, this, matrix4);\n    return this.check();\n  }\n  /**\n   * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)\n   * @param matrix4\n   * @returns\n   */\n  transformAsVector(matrix4) {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n  transformByMatrix3(matrix3) {\n    vec2_transformMat3(this, this, matrix3);\n    return this.check();\n  }\n  transformByMatrix2x3(matrix2x3) {\n    vec2_transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n  transformByMatrix2(matrix2) {\n    vec2_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n}\n//# sourceMappingURL=vector2.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}