{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { VERSION } from \"./lib/utils/version.js\";\nimport { parse3DTile } from \"./lib/parsers/parse-3d-tile.js\";\nimport { normalizeTileHeaders } from \"./lib/parsers/parse-3d-tile-header.js\";\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader = {\n  dataType: null,\n  batchType: null,\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n/** Parses a tileset or tile */\nasync function parse(data, options = {}, context) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context?.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n  return isTileset ? parseTileset(data, options, context) : parseTile(data, options, context);\n}\n/** Parse a tileset */\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  const tilesetUrl = context?.url || '';\n  const basePath = getBaseUri(tilesetUrl);\n  const normalizedRoot = await normalizeTileHeaders(tilesetJson, basePath, options || {});\n  const tilesetJsonPostprocessed = {\n    ...tilesetJson,\n    shape: 'tileset3d',\n    loader: Tiles3DLoader,\n    url: tilesetUrl,\n    queryString: context?.queryString || '',\n    basePath,\n    root: normalizedRoot || tilesetJson.root,\n    type: TILESET_TYPE.TILES3D,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    lodMetricValue: tilesetJson.root?.geometricError || 0\n  };\n  return tilesetJsonPostprocessed;\n}\n/** Parse a tile */\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {\n    content: {\n      shape: 'tile3d',\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  // @ts-expect-error\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  // @ts-expect-error\n  return tile.content;\n}\n/** Get base name */\nfunction getBaseUri(tilesetUrl) {\n  return path.dirname(tilesetUrl);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}