{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Fork of https://github.com/briantbutton/md5-wasm under MIT license\nimport { Hash } from \"./hash.js\";\nimport md5WASM from \"./algorithms/md5-wasm.js\";\nimport { encodeHex } from \"./utils/digest-utils.js\";\n/**\n * A transform that calculates MD5 hashes, passing data through\n */\nexport class MD5Hash extends Hash {\n  name = 'md5';\n  options;\n  constructor(options = {}) {\n    super();\n    this.options = options;\n  }\n  /**\n   * Atomic hash calculation\n   * @returns base64 encoded hash\n   */\n  async hash(input, encoding) {\n    const md5Promise = new Promise((resolve, reject) =>\n    // @ts-expect-error\n    md5WASM(input).then(resolve).catch(reject));\n    const hex = await md5Promise;\n    return encodeHex(hex, encoding);\n  }\n}","map":{"version":3,"names":["Hash","md5WASM","encodeHex","MD5Hash","name","options","constructor","hash","input","encoding","md5Promise","Promise","resolve","reject","then","catch","hex"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/crypto/dist/lib/md5-hash.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Fork of https://github.com/briantbutton/md5-wasm under MIT license\nimport { Hash } from \"./hash.js\";\nimport md5WASM from \"./algorithms/md5-wasm.js\";\nimport { encodeHex } from \"./utils/digest-utils.js\";\n/**\n * A transform that calculates MD5 hashes, passing data through\n */\nexport class MD5Hash extends Hash {\n    name = 'md5';\n    options;\n    constructor(options = {}) {\n        super();\n        this.options = options;\n    }\n    /**\n     * Atomic hash calculation\n     * @returns base64 encoded hash\n     */\n    async hash(input, encoding) {\n        const md5Promise = new Promise((resolve, reject) => \n        // @ts-expect-error\n        md5WASM(input).then(resolve).catch(reject));\n        const hex = await md5Promise;\n        return encodeHex(hex, encoding);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,WAAW;AAChC,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,SAASC,SAAS,QAAQ,yBAAyB;AACnD;AACA;AACA;AACA,OAAO,MAAMC,OAAO,SAASH,IAAI,CAAC;EAC9BI,IAAI,GAAG,KAAK;EACZC,OAAO;EACPC,WAAWA,CAACD,OAAO,GAAG,CAAC,CAAC,EAAE;IACtB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;EACI,MAAME,IAAIA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACxB,MAAMC,UAAU,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM;IAC/C;IACAZ,OAAO,CAACO,KAAK,CAAC,CAACM,IAAI,CAACF,OAAO,CAAC,CAACG,KAAK,CAACF,MAAM,CAAC,CAAC;IAC3C,MAAMG,GAAG,GAAG,MAAMN,UAAU;IAC5B,OAAOR,SAAS,CAACc,GAAG,EAAEP,QAAQ,CAAC;EACnC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}