{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Sampler } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nimport { convertSamplerParametersToWebGL } from \"../converters/sampler-parameters.js\";\n/**\n * Sampler object -\n * so that they can be set directly on the texture\n * https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/sampler_object.html\n */\nexport class WEBGLSampler extends Sampler {\n  device;\n  handle;\n  parameters;\n  constructor(device, props) {\n    super(device, props);\n    this.device = device;\n    this.parameters = convertSamplerParametersToWebGL(props);\n    this.handle = this.handle || this.device.gl.createSampler();\n    this._setSamplerParameters(this.parameters);\n  }\n  destroy() {\n    if (this.handle) {\n      this.device.gl.deleteSampler(this.handle);\n      // @ts-expect-error read-only/undefined\n      this.handle = undefined;\n    }\n  }\n  toString() {\n    return `Sampler(${this.id},${JSON.stringify(this.props)})`;\n  }\n  /** Set sampler parameters on the sampler */\n  _setSamplerParameters(parameters) {\n    for (const [pname, value] of Object.entries(parameters)) {\n      // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      const param = Number(pname);\n      switch (param) {\n        case 33082:\n        case 33083:\n          this.device.gl.samplerParameterf(this.handle, param, value);\n          break;\n        default:\n          this.device.gl.samplerParameteri(this.handle, param, value);\n          break;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Sampler","GL","convertSamplerParametersToWebGL","WEBGLSampler","device","handle","parameters","constructor","props","gl","createSampler","_setSamplerParameters","destroy","deleteSampler","undefined","toString","id","JSON","stringify","pname","value","Object","entries","param","Number","samplerParameterf","samplerParameteri"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\resources\\webgl-sampler.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Sampler, SamplerProps} from '@luma.gl/core';\nimport {GL, GLSamplerParameters} from '@luma.gl/constants';\nimport {convertSamplerParametersToWebGL} from '../converters/sampler-parameters';\nimport type {WebGLDevice} from '../webgl-device';\n\n/**\n * Sampler object -\n * so that they can be set directly on the texture\n * https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/sampler_object.html\n */\nexport class WEBGLSampler extends Sampler {\n  readonly device: WebGLDevice;\n  readonly handle: WebGLSampler;\n  readonly parameters: GLSamplerParameters;\n\n  constructor(device: WebGLDevice, props: SamplerProps) {\n    super(device, props);\n    this.device = device;\n    this.parameters = convertSamplerParametersToWebGL(props);\n    this.handle = this.handle || this.device.gl.createSampler();\n    this._setSamplerParameters(this.parameters);\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      this.device.gl.deleteSampler(this.handle);\n      // @ts-expect-error read-only/undefined\n      this.handle = undefined;\n    }\n  }\n\n  override toString(): string {\n    return `Sampler(${this.id},${JSON.stringify(this.props)})`;\n  }\n\n  /** Set sampler parameters on the sampler */\n  private _setSamplerParameters(parameters: GLSamplerParameters): void {\n    for (const [pname, value] of Object.entries(parameters)) {\n      // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      const param = Number(pname) as GL.TEXTURE_MIN_LOD | GL.TEXTURE_MAX_LOD;\n      switch (param) {\n        case GL.TEXTURE_MIN_LOD:\n        case GL.TEXTURE_MAX_LOD:\n          this.device.gl.samplerParameterf(this.handle, param, value);\n          break;\n        default:\n          this.device.gl.samplerParameteri(this.handle, param, value);\n          break;\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,OAAO,QAAqB,eAAe;AACnD,SAAQC,EAAE,QAA4B,oBAAoB;AAC1D,SAAQC,+BAA+B,QAAC;AAGxC;;;;;AAKA,OAAM,MAAOC,YAAa,SAAQH,OAAO;EAC9BI,MAAM;EACNC,MAAM;EACNC,UAAU;EAEnBC,YAAYH,MAAmB,EAAEI,KAAmB;IAClD,KAAK,CAACJ,MAAM,EAAEI,KAAK,CAAC;IACpB,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,UAAU,GAAGJ,+BAA+B,CAACM,KAAK,CAAC;IACxD,IAAI,CAACH,MAAM,GAAG,IAAI,CAACA,MAAM,IAAI,IAAI,CAACD,MAAM,CAACK,EAAE,CAACC,aAAa,EAAE;IAC3D,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACL,UAAU,CAAC;EAC7C;EAESM,OAAOA,CAAA;IACd,IAAI,IAAI,CAACP,MAAM,EAAE;MACf,IAAI,CAACD,MAAM,CAACK,EAAE,CAACI,aAAa,CAAC,IAAI,CAACR,MAAM,CAAC;MACzC;MACA,IAAI,CAACA,MAAM,GAAGS,SAAS;IACzB;EACF;EAESC,QAAQA,CAAA;IACf,OAAO,WAAW,IAAI,CAACC,EAAE,IAAIC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACV,KAAK,CAAC,GAAG;EAC5D;EAEA;EACQG,qBAAqBA,CAACL,UAA+B;IAC3D,KAAK,MAAM,CAACa,KAAK,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAChB,UAAU,CAAC,EAAE;MACvD;MACA;MACA,MAAMiB,KAAK,GAAGC,MAAM,CAACL,KAAK,CAA4C;MACtE,QAAQI,KAAK;QACX;QACA;UACE,IAAI,CAACnB,MAAM,CAACK,EAAE,CAACgB,iBAAiB,CAAC,IAAI,CAACpB,MAAM,EAAEkB,KAAK,EAAEH,KAAK,CAAC;UAC3D;QACF;UACE,IAAI,CAAChB,MAAM,CAACK,EAAE,CAACiB,iBAAiB,CAAC,IAAI,CAACrB,MAAM,EAAEkB,KAAK,EAAEH,KAAK,CAAC;UAC3D;MACJ;IACF;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}