{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Evaluate a VertexAccessor with a set of attributes */\nexport function evaluateVertexAccessor(accessor, attributes, options) {\n  const vertexReaders = {};\n  for (const id of accessor.sources || []) {\n    const attribute = attributes[id];\n    if (attribute) {\n      vertexReaders[id] = getVertexReader(attribute);\n    } else {\n      throw new Error(`Cannot find attribute ${id}`);\n    }\n  }\n  const data = {};\n  return vertexIndex => {\n    for (const id in vertexReaders) {\n      data[id] = vertexReaders[id](vertexIndex);\n    }\n    return accessor.getValue(data, vertexIndex, options);\n  };\n}\n/** Read value out of a deck.gl Attribute by vertex */\nfunction getVertexReader(attribute) {\n  const value = attribute.value;\n  const {\n    offset = 0,\n    stride,\n    size\n  } = attribute.getAccessor();\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementOffset = offset / bytesPerElement;\n  const elementStride = stride ? stride / bytesPerElement : size;\n  if (size === 1) {\n    // Size 1, returns (i: number) => number\n    if (attribute.isConstant) {\n      return () => value[0];\n    }\n    return vertexIndex => {\n      const i = elementOffset + elementStride * vertexIndex;\n      return value[i];\n    };\n  }\n  // Size >1, returns (i: number) => number[]\n  let result;\n  if (attribute.isConstant) {\n    result = Array.from(value);\n    return () => result;\n  }\n  result = new Array(size);\n  return vertexIndex => {\n    const i = elementOffset + elementStride * vertexIndex;\n    for (let j = 0; j < size; j++) {\n      result[j] = value[i + j];\n    }\n    return result;\n  };\n}\n//# sourceMappingURL=vertex-accessor.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}