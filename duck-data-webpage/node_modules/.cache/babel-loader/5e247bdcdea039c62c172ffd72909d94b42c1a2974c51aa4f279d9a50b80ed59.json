{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { compareArrayBuffers, concatenateArrayBuffers } from '@loaders.gl/loader-utils';\nimport { searchFromTheEnd } from \"./search-from-the-end.js\";\nimport { setFieldToNumber } from \"./zip64-info-generation.js\";\nconst eoCDSignature = new Uint8Array([0x50, 0x4b, 0x05, 0x06]);\nconst zip64EoCDLocatorSignature = new Uint8Array([0x50, 0x4b, 0x06, 0x07]);\nconst zip64EoCDSignature = new Uint8Array([0x50, 0x4b, 0x06, 0x06]);\n// offsets accroding to https://en.wikipedia.org/wiki/ZIP_(file_format)\nconst CD_RECORDS_NUMBER_OFFSET = 8n;\nconst CD_RECORDS_NUMBER_ON_DISC_OFFSET = 10n;\nconst CD_CD_BYTE_SIZE_OFFSET = 12n;\nconst CD_START_OFFSET_OFFSET = 16n;\nconst CD_COMMENT_OFFSET = 22n;\nconst ZIP64_EOCD_START_OFFSET_OFFSET = 8n;\nconst ZIP64_CD_RECORDS_NUMBER_OFFSET = 24n;\nconst ZIP64_CD_RECORDS_NUMBER_ON_DISC_OFFSET = 32n;\nconst ZIP64_CD_CD_BYTE_SIZE_OFFSET = 40n;\nconst ZIP64_CD_START_OFFSET_OFFSET = 48n;\nconst ZIP64_COMMENT_OFFSET = 56n;\n/**\n * Parses end of central directory record of zip file\n * @param file - FileProvider instance\n * @returns Info from the header\n */\nexport const parseEoCDRecord = async file => {\n  const zipEoCDOffset = await searchFromTheEnd(file, eoCDSignature);\n  let cdRecordsNumber = BigInt(await file.getUint16(zipEoCDOffset + CD_RECORDS_NUMBER_OFFSET));\n  let cdByteSize = BigInt(await file.getUint32(zipEoCDOffset + CD_CD_BYTE_SIZE_OFFSET));\n  let cdStartOffset = BigInt(await file.getUint32(zipEoCDOffset + CD_START_OFFSET_OFFSET));\n  let zip64EoCDLocatorOffset = zipEoCDOffset - 20n;\n  let zip64EoCDOffset = 0n;\n  const magicBytes = await file.slice(zip64EoCDLocatorOffset, zip64EoCDLocatorOffset + 4n);\n  if (compareArrayBuffers(magicBytes, zip64EoCDLocatorSignature)) {\n    zip64EoCDOffset = await file.getBigUint64(zip64EoCDLocatorOffset + ZIP64_EOCD_START_OFFSET_OFFSET);\n    const endOfCDMagicBytes = await file.slice(zip64EoCDOffset, zip64EoCDOffset + 4n);\n    if (!compareArrayBuffers(endOfCDMagicBytes, zip64EoCDSignature.buffer)) {\n      throw new Error('zip64 EoCD not found');\n    }\n    cdRecordsNumber = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_RECORDS_NUMBER_OFFSET);\n    cdByteSize = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_CD_BYTE_SIZE_OFFSET);\n    cdStartOffset = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_START_OFFSET_OFFSET);\n  } else {\n    zip64EoCDLocatorOffset = 0n;\n  }\n  return {\n    cdRecordsNumber,\n    cdStartOffset,\n    cdByteSize,\n    offsets: {\n      zip64EoCDOffset,\n      zip64EoCDLocatorOffset,\n      zipEoCDOffset\n    }\n  };\n};\n/**\n * updates EoCD record to add more files to the archieve\n * @param eocdBody buffer containing header\n * @param oldEoCDOffsets info read from EoCD record befor updating\n * @param newCDStartOffset CD start offset to be updated\n * @param eocdStartOffset EoCD start offset to be updated\n * @returns new EoCD header\n */\nexport function updateEoCD(eocdBody, oldEoCDOffsets, newCDStartOffset, eocdStartOffset, newCDRecordsNumber) {\n  const eocd = new DataView(eocdBody);\n  const classicEoCDOffset = oldEoCDOffsets.zip64EoCDOffset ? oldEoCDOffsets.zipEoCDOffset - oldEoCDOffsets.zip64EoCDOffset : 0n;\n  // updating classic EoCD record with new CD records number in general and on disc\n  if (Number(newCDRecordsNumber) <= 0xffff) {\n    setFieldToNumber(eocd, 2, classicEoCDOffset + CD_RECORDS_NUMBER_OFFSET, newCDRecordsNumber);\n    setFieldToNumber(eocd, 2, classicEoCDOffset + CD_RECORDS_NUMBER_ON_DISC_OFFSET, newCDRecordsNumber);\n  }\n  // updating zip64 EoCD record with new size of CD\n  if (eocdStartOffset - newCDStartOffset <= 0xffffffff) {\n    setFieldToNumber(eocd, 4, classicEoCDOffset + CD_CD_BYTE_SIZE_OFFSET, eocdStartOffset - newCDStartOffset);\n  }\n  // updating classic EoCD record with new CD start offset\n  if (newCDStartOffset < 0xffffffff) {\n    setFieldToNumber(eocd, 4, classicEoCDOffset + CD_START_OFFSET_OFFSET, newCDStartOffset);\n  }\n  // updating zip64 EoCD locator and record with new EoCD record start offset and cd records number\n  if (oldEoCDOffsets.zip64EoCDLocatorOffset && oldEoCDOffsets.zip64EoCDOffset) {\n    // updating zip64 EoCD locator with new EoCD record start offset\n    const locatorOffset = oldEoCDOffsets.zip64EoCDLocatorOffset - oldEoCDOffsets.zip64EoCDOffset;\n    setFieldToNumber(eocd, 8, locatorOffset + ZIP64_EOCD_START_OFFSET_OFFSET, eocdStartOffset);\n    // updating zip64 EoCD record with new cd start offset\n    setFieldToNumber(eocd, 8, ZIP64_CD_START_OFFSET_OFFSET, newCDStartOffset);\n    // updating zip64 EoCD record with new cd records number\n    setFieldToNumber(eocd, 8, ZIP64_CD_RECORDS_NUMBER_OFFSET, newCDRecordsNumber);\n    setFieldToNumber(eocd, 8, ZIP64_CD_RECORDS_NUMBER_ON_DISC_OFFSET, newCDRecordsNumber);\n    // updating zip64 EoCD record with new size of CD\n    setFieldToNumber(eocd, 8, ZIP64_CD_CD_BYTE_SIZE_OFFSET, eocdStartOffset - newCDStartOffset);\n  }\n  return new Uint8Array(eocd.buffer);\n}\n/**\n * generates EoCD record\n * @param options data to generate EoCD record\n * @returns ArrayBuffer with EoCD record\n */\nexport function generateEoCD(options) {\n  const header = new DataView(new ArrayBuffer(Number(CD_COMMENT_OFFSET)));\n  for (const field of EOCD_FIELDS) {\n    setFieldToNumber(header, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n  }\n  const locator = generateZip64InfoLocator(options);\n  const zip64Record = generateZip64Info(options);\n  return concatenateArrayBuffers(zip64Record, locator, header.buffer);\n}\n/** standart EoCD fields */\nconst EOCD_FIELDS = [\n// End of central directory signature = 0x06054b50\n{\n  offset: 0,\n  size: 4,\n  default: new DataView(eoCDSignature.buffer).getUint32(0, true)\n},\n// Number of this disk (or 0xffff for ZIP64)\n{\n  offset: 4,\n  size: 2,\n  default: 0\n},\n// Disk where central directory starts (or 0xffff for ZIP64)\n{\n  offset: 6,\n  size: 2,\n  default: 0\n},\n// Number of central directory records on this disk (or 0xffff for ZIP64)\n{\n  offset: 8,\n  size: 2,\n  name: 'recordsNumber'\n},\n// Total number of central directory records (or 0xffff for ZIP64)\n{\n  offset: 10,\n  size: 2,\n  name: 'recordsNumber'\n},\n// Size of central directory (bytes) (or 0xffffffff for ZIP64)\n{\n  offset: 12,\n  size: 4,\n  name: 'cdSize'\n},\n// Offset of start of central directory, relative to start of archive (or 0xffffffff for ZIP64)\n{\n  offset: 16,\n  size: 4,\n  name: 'cdOffset'\n},\n// Comment length (n)\n{\n  offset: 20,\n  size: 2,\n  default: 0\n}];\n/**\n * generates eocd zip64 record\n * @param options data to generate eocd zip64 record\n * @returns buffer with eocd zip64 record\n */\nfunction generateZip64Info(options) {\n  const record = new DataView(new ArrayBuffer(Number(ZIP64_COMMENT_OFFSET)));\n  for (const field of ZIP64_EOCD_FIELDS) {\n    setFieldToNumber(record, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n  }\n  return record.buffer;\n}\n/**\n * generates eocd zip64 record locator\n * @param options data to generate eocd zip64 record\n * @returns buffer with eocd zip64 record\n */\nfunction generateZip64InfoLocator(options) {\n  const locator = new DataView(new ArrayBuffer(Number(20)));\n  for (const field of ZIP64_EOCD_LOCATOR_FIELDS) {\n    setFieldToNumber(locator, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n  }\n  return locator.buffer;\n}\n/** zip64 EoCD record locater fields */\nconst ZIP64_EOCD_LOCATOR_FIELDS = [\n// zip64 end of central dir locator signature\n{\n  offset: 0,\n  size: 4,\n  default: new DataView(zip64EoCDLocatorSignature.buffer).getUint32(0, true)\n},\n// number of the disk with the start of the zip64 end of\n{\n  offset: 4,\n  size: 4,\n  default: 0\n},\n// start of the zip64 end of central directory\n{\n  offset: 8,\n  size: 8,\n  name: 'eoCDStart'\n},\n// total number of disks\n{\n  offset: 16,\n  size: 4,\n  default: 1\n}];\n/** zip64 EoCD recodrd fields */\nconst ZIP64_EOCD_FIELDS = [\n// End of central directory signature = 0x06064b50\n{\n  offset: 0,\n  size: 4,\n  default: new DataView(zip64EoCDSignature.buffer).getUint32(0, true)\n},\n// Size of the EOCD64 minus 12\n{\n  offset: 4,\n  size: 8,\n  default: 44\n},\n// Version made by\n{\n  offset: 12,\n  size: 2,\n  default: 45\n},\n// Version needed to extract (minimum)\n{\n  offset: 14,\n  size: 2,\n  default: 45\n},\n// Number of this disk\n{\n  offset: 16,\n  size: 4,\n  default: 0\n},\n// Disk where central directory starts\n{\n  offset: 20,\n  size: 4,\n  default: 0\n},\n// Number of central directory records on this disk\n{\n  offset: 24,\n  size: 8,\n  name: 'recordsNumber'\n},\n// Total number of central directory records\n{\n  offset: 32,\n  size: 8,\n  name: 'recordsNumber'\n},\n// Size of central directory (bytes)\n{\n  offset: 40,\n  size: 8,\n  name: 'cdSize'\n},\n// Offset of start of central directory, relative to start of archive\n{\n  offset: 48,\n  size: 8,\n  name: 'cdOffset'\n}];","map":{"version":3,"names":["compareArrayBuffers","concatenateArrayBuffers","searchFromTheEnd","setFieldToNumber","eoCDSignature","Uint8Array","zip64EoCDLocatorSignature","zip64EoCDSignature","CD_RECORDS_NUMBER_OFFSET","CD_RECORDS_NUMBER_ON_DISC_OFFSET","CD_CD_BYTE_SIZE_OFFSET","CD_START_OFFSET_OFFSET","CD_COMMENT_OFFSET","ZIP64_EOCD_START_OFFSET_OFFSET","ZIP64_CD_RECORDS_NUMBER_OFFSET","ZIP64_CD_RECORDS_NUMBER_ON_DISC_OFFSET","ZIP64_CD_CD_BYTE_SIZE_OFFSET","ZIP64_CD_START_OFFSET_OFFSET","ZIP64_COMMENT_OFFSET","parseEoCDRecord","file","zipEoCDOffset","cdRecordsNumber","BigInt","getUint16","cdByteSize","getUint32","cdStartOffset","zip64EoCDLocatorOffset","zip64EoCDOffset","magicBytes","slice","getBigUint64","endOfCDMagicBytes","buffer","Error","offsets","updateEoCD","eocdBody","oldEoCDOffsets","newCDStartOffset","eocdStartOffset","newCDRecordsNumber","eocd","DataView","classicEoCDOffset","Number","locatorOffset","generateEoCD","options","header","ArrayBuffer","field","EOCD_FIELDS","size","offset","name","default","locator","generateZip64InfoLocator","zip64Record","generateZip64Info","record","ZIP64_EOCD_FIELDS","ZIP64_EOCD_LOCATOR_FIELDS"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/zip/dist/parse-zip/end-of-central-directory.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { compareArrayBuffers, concatenateArrayBuffers } from '@loaders.gl/loader-utils';\nimport { searchFromTheEnd } from \"./search-from-the-end.js\";\nimport { setFieldToNumber } from \"./zip64-info-generation.js\";\nconst eoCDSignature = new Uint8Array([0x50, 0x4b, 0x05, 0x06]);\nconst zip64EoCDLocatorSignature = new Uint8Array([0x50, 0x4b, 0x06, 0x07]);\nconst zip64EoCDSignature = new Uint8Array([0x50, 0x4b, 0x06, 0x06]);\n// offsets accroding to https://en.wikipedia.org/wiki/ZIP_(file_format)\nconst CD_RECORDS_NUMBER_OFFSET = 8n;\nconst CD_RECORDS_NUMBER_ON_DISC_OFFSET = 10n;\nconst CD_CD_BYTE_SIZE_OFFSET = 12n;\nconst CD_START_OFFSET_OFFSET = 16n;\nconst CD_COMMENT_OFFSET = 22n;\nconst ZIP64_EOCD_START_OFFSET_OFFSET = 8n;\nconst ZIP64_CD_RECORDS_NUMBER_OFFSET = 24n;\nconst ZIP64_CD_RECORDS_NUMBER_ON_DISC_OFFSET = 32n;\nconst ZIP64_CD_CD_BYTE_SIZE_OFFSET = 40n;\nconst ZIP64_CD_START_OFFSET_OFFSET = 48n;\nconst ZIP64_COMMENT_OFFSET = 56n;\n/**\n * Parses end of central directory record of zip file\n * @param file - FileProvider instance\n * @returns Info from the header\n */\nexport const parseEoCDRecord = async (file) => {\n    const zipEoCDOffset = await searchFromTheEnd(file, eoCDSignature);\n    let cdRecordsNumber = BigInt(await file.getUint16(zipEoCDOffset + CD_RECORDS_NUMBER_OFFSET));\n    let cdByteSize = BigInt(await file.getUint32(zipEoCDOffset + CD_CD_BYTE_SIZE_OFFSET));\n    let cdStartOffset = BigInt(await file.getUint32(zipEoCDOffset + CD_START_OFFSET_OFFSET));\n    let zip64EoCDLocatorOffset = zipEoCDOffset - 20n;\n    let zip64EoCDOffset = 0n;\n    const magicBytes = await file.slice(zip64EoCDLocatorOffset, zip64EoCDLocatorOffset + 4n);\n    if (compareArrayBuffers(magicBytes, zip64EoCDLocatorSignature)) {\n        zip64EoCDOffset = await file.getBigUint64(zip64EoCDLocatorOffset + ZIP64_EOCD_START_OFFSET_OFFSET);\n        const endOfCDMagicBytes = await file.slice(zip64EoCDOffset, zip64EoCDOffset + 4n);\n        if (!compareArrayBuffers(endOfCDMagicBytes, zip64EoCDSignature.buffer)) {\n            throw new Error('zip64 EoCD not found');\n        }\n        cdRecordsNumber = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_RECORDS_NUMBER_OFFSET);\n        cdByteSize = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_CD_BYTE_SIZE_OFFSET);\n        cdStartOffset = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_START_OFFSET_OFFSET);\n    }\n    else {\n        zip64EoCDLocatorOffset = 0n;\n    }\n    return {\n        cdRecordsNumber,\n        cdStartOffset,\n        cdByteSize,\n        offsets: {\n            zip64EoCDOffset,\n            zip64EoCDLocatorOffset,\n            zipEoCDOffset\n        }\n    };\n};\n/**\n * updates EoCD record to add more files to the archieve\n * @param eocdBody buffer containing header\n * @param oldEoCDOffsets info read from EoCD record befor updating\n * @param newCDStartOffset CD start offset to be updated\n * @param eocdStartOffset EoCD start offset to be updated\n * @returns new EoCD header\n */\nexport function updateEoCD(eocdBody, oldEoCDOffsets, newCDStartOffset, eocdStartOffset, newCDRecordsNumber) {\n    const eocd = new DataView(eocdBody);\n    const classicEoCDOffset = oldEoCDOffsets.zip64EoCDOffset\n        ? oldEoCDOffsets.zipEoCDOffset - oldEoCDOffsets.zip64EoCDOffset\n        : 0n;\n    // updating classic EoCD record with new CD records number in general and on disc\n    if (Number(newCDRecordsNumber) <= 0xffff) {\n        setFieldToNumber(eocd, 2, classicEoCDOffset + CD_RECORDS_NUMBER_OFFSET, newCDRecordsNumber);\n        setFieldToNumber(eocd, 2, classicEoCDOffset + CD_RECORDS_NUMBER_ON_DISC_OFFSET, newCDRecordsNumber);\n    }\n    // updating zip64 EoCD record with new size of CD\n    if (eocdStartOffset - newCDStartOffset <= 0xffffffff) {\n        setFieldToNumber(eocd, 4, classicEoCDOffset + CD_CD_BYTE_SIZE_OFFSET, eocdStartOffset - newCDStartOffset);\n    }\n    // updating classic EoCD record with new CD start offset\n    if (newCDStartOffset < 0xffffffff) {\n        setFieldToNumber(eocd, 4, classicEoCDOffset + CD_START_OFFSET_OFFSET, newCDStartOffset);\n    }\n    // updating zip64 EoCD locator and record with new EoCD record start offset and cd records number\n    if (oldEoCDOffsets.zip64EoCDLocatorOffset && oldEoCDOffsets.zip64EoCDOffset) {\n        // updating zip64 EoCD locator with new EoCD record start offset\n        const locatorOffset = oldEoCDOffsets.zip64EoCDLocatorOffset - oldEoCDOffsets.zip64EoCDOffset;\n        setFieldToNumber(eocd, 8, locatorOffset + ZIP64_EOCD_START_OFFSET_OFFSET, eocdStartOffset);\n        // updating zip64 EoCD record with new cd start offset\n        setFieldToNumber(eocd, 8, ZIP64_CD_START_OFFSET_OFFSET, newCDStartOffset);\n        // updating zip64 EoCD record with new cd records number\n        setFieldToNumber(eocd, 8, ZIP64_CD_RECORDS_NUMBER_OFFSET, newCDRecordsNumber);\n        setFieldToNumber(eocd, 8, ZIP64_CD_RECORDS_NUMBER_ON_DISC_OFFSET, newCDRecordsNumber);\n        // updating zip64 EoCD record with new size of CD\n        setFieldToNumber(eocd, 8, ZIP64_CD_CD_BYTE_SIZE_OFFSET, eocdStartOffset - newCDStartOffset);\n    }\n    return new Uint8Array(eocd.buffer);\n}\n/**\n * generates EoCD record\n * @param options data to generate EoCD record\n * @returns ArrayBuffer with EoCD record\n */\nexport function generateEoCD(options) {\n    const header = new DataView(new ArrayBuffer(Number(CD_COMMENT_OFFSET)));\n    for (const field of EOCD_FIELDS) {\n        setFieldToNumber(header, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n    }\n    const locator = generateZip64InfoLocator(options);\n    const zip64Record = generateZip64Info(options);\n    return concatenateArrayBuffers(zip64Record, locator, header.buffer);\n}\n/** standart EoCD fields */\nconst EOCD_FIELDS = [\n    // End of central directory signature = 0x06054b50\n    {\n        offset: 0,\n        size: 4,\n        default: new DataView(eoCDSignature.buffer).getUint32(0, true)\n    },\n    // Number of this disk (or 0xffff for ZIP64)\n    {\n        offset: 4,\n        size: 2,\n        default: 0\n    },\n    // Disk where central directory starts (or 0xffff for ZIP64)\n    {\n        offset: 6,\n        size: 2,\n        default: 0\n    },\n    // Number of central directory records on this disk (or 0xffff for ZIP64)\n    {\n        offset: 8,\n        size: 2,\n        name: 'recordsNumber'\n    },\n    // Total number of central directory records (or 0xffff for ZIP64)\n    {\n        offset: 10,\n        size: 2,\n        name: 'recordsNumber'\n    },\n    // Size of central directory (bytes) (or 0xffffffff for ZIP64)\n    {\n        offset: 12,\n        size: 4,\n        name: 'cdSize'\n    },\n    // Offset of start of central directory, relative to start of archive (or 0xffffffff for ZIP64)\n    {\n        offset: 16,\n        size: 4,\n        name: 'cdOffset'\n    },\n    // Comment length (n)\n    {\n        offset: 20,\n        size: 2,\n        default: 0\n    }\n];\n/**\n * generates eocd zip64 record\n * @param options data to generate eocd zip64 record\n * @returns buffer with eocd zip64 record\n */\nfunction generateZip64Info(options) {\n    const record = new DataView(new ArrayBuffer(Number(ZIP64_COMMENT_OFFSET)));\n    for (const field of ZIP64_EOCD_FIELDS) {\n        setFieldToNumber(record, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n    }\n    return record.buffer;\n}\n/**\n * generates eocd zip64 record locator\n * @param options data to generate eocd zip64 record\n * @returns buffer with eocd zip64 record\n */\nfunction generateZip64InfoLocator(options) {\n    const locator = new DataView(new ArrayBuffer(Number(20)));\n    for (const field of ZIP64_EOCD_LOCATOR_FIELDS) {\n        setFieldToNumber(locator, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n    }\n    return locator.buffer;\n}\n/** zip64 EoCD record locater fields */\nconst ZIP64_EOCD_LOCATOR_FIELDS = [\n    // zip64 end of central dir locator signature\n    {\n        offset: 0,\n        size: 4,\n        default: new DataView(zip64EoCDLocatorSignature.buffer).getUint32(0, true)\n    },\n    // number of the disk with the start of the zip64 end of\n    {\n        offset: 4,\n        size: 4,\n        default: 0\n    },\n    // start of the zip64 end of central directory\n    {\n        offset: 8,\n        size: 8,\n        name: 'eoCDStart'\n    },\n    // total number of disks\n    {\n        offset: 16,\n        size: 4,\n        default: 1\n    }\n];\n/** zip64 EoCD recodrd fields */\nconst ZIP64_EOCD_FIELDS = [\n    // End of central directory signature = 0x06064b50\n    {\n        offset: 0,\n        size: 4,\n        default: new DataView(zip64EoCDSignature.buffer).getUint32(0, true)\n    },\n    // Size of the EOCD64 minus 12\n    {\n        offset: 4,\n        size: 8,\n        default: 44\n    },\n    // Version made by\n    {\n        offset: 12,\n        size: 2,\n        default: 45\n    },\n    // Version needed to extract (minimum)\n    {\n        offset: 14,\n        size: 2,\n        default: 45\n    },\n    // Number of this disk\n    {\n        offset: 16,\n        size: 4,\n        default: 0\n    },\n    // Disk where central directory starts\n    {\n        offset: 20,\n        size: 4,\n        default: 0\n    },\n    // Number of central directory records on this disk\n    {\n        offset: 24,\n        size: 8,\n        name: 'recordsNumber'\n    },\n    // Total number of central directory records\n    {\n        offset: 32,\n        size: 8,\n        name: 'recordsNumber'\n    },\n    // Size of central directory (bytes)\n    {\n        offset: 40,\n        size: 8,\n        name: 'cdSize'\n    },\n    // Offset of start of central directory, relative to start of archive\n    {\n        offset: 48,\n        size: 8,\n        name: 'cdOffset'\n    }\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}