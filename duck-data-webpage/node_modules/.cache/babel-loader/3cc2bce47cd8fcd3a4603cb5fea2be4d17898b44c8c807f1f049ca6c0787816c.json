{"ast":null,"code":"import { jsx as _jsx } from \"preact/jsx-runtime\";\n// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* global document */\nimport { _deepEqual as deepEqual, _applyStyles as applyStyles, _removeStyles as removeStyles } from '@deck.gl/core';\nimport { render } from 'preact';\nimport { IconButton } from \"./components.js\";\nexport class FullscreenWidget {\n  constructor(props) {\n    this.id = 'fullscreen';\n    this.placement = 'top-left';\n    this.fullscreen = false;\n    this.id = props.id ?? this.id;\n    this.placement = props.placement ?? this.placement;\n    this.props = {\n      ...props,\n      enterLabel: props.enterLabel ?? 'Enter Fullscreen',\n      exitLabel: props.exitLabel ?? 'Exit Fullscreen',\n      style: props.style ?? {}\n    };\n  }\n  onAdd({\n    deck\n  }) {\n    const {\n      style,\n      className\n    } = this.props;\n    const el = document.createElement('div');\n    el.classList.add('deck-widget', 'deck-widget-fullscreen');\n    if (className) el.classList.add(className);\n    applyStyles(el, style);\n    this.deck = deck;\n    this.element = el;\n    this.update();\n    document.addEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n    return el;\n  }\n  onRemove() {\n    this.deck = undefined;\n    this.element = undefined;\n    document.removeEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n  }\n  update() {\n    const {\n      enterLabel,\n      exitLabel\n    } = this.props;\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n    const ui = _jsx(IconButton, {\n      onClick: this.handleClick.bind(this),\n      label: this.fullscreen ? exitLabel : enterLabel,\n      className: this.fullscreen ? 'deck-widget-fullscreen-exit' : 'deck-widget-fullscreen-enter'\n    });\n    render(ui, element);\n  }\n  setProps(props) {\n    this.placement = props.placement ?? this.placement;\n    const oldProps = this.props;\n    const el = this.element;\n    if (el) {\n      if (oldProps.className !== props.className) {\n        if (oldProps.className) el.classList.remove(oldProps.className);\n        if (props.className) el.classList.add(props.className);\n      }\n      if (!deepEqual(oldProps.style, props.style, 1)) {\n        removeStyles(el, oldProps.style);\n        applyStyles(el, props.style);\n      }\n    }\n    Object.assign(this.props, props);\n    this.update();\n  }\n  getContainer() {\n    return this.props.container || this.deck?.getCanvas()?.parentElement;\n  }\n  onFullscreenChange() {\n    const prevFullscreen = this.fullscreen;\n    const fullscreen = document.fullscreenElement === this.getContainer();\n    if (prevFullscreen !== fullscreen) {\n      this.fullscreen = !this.fullscreen;\n    }\n    this.update();\n  }\n  async handleClick() {\n    if (this.fullscreen) {\n      await this.exitFullscreen();\n    } else {\n      await this.requestFullscreen();\n    }\n    this.update();\n  }\n  async requestFullscreen() {\n    const container = this.getContainer();\n    if (container?.requestFullscreen) {\n      await container.requestFullscreen({\n        navigationUI: 'hide'\n      });\n    } else {\n      this.togglePseudoFullscreen();\n    }\n  }\n  async exitFullscreen() {\n    if (document.exitFullscreen) {\n      await document.exitFullscreen();\n    } else {\n      this.togglePseudoFullscreen();\n    }\n  }\n  togglePseudoFullscreen() {\n    this.getContainer()?.classList.toggle('deck-pseudo-fullscreen');\n  }\n}","map":{"version":3,"names":["_deepEqual","deepEqual","_applyStyles","applyStyles","_removeStyles","removeStyles","render","IconButton","FullscreenWidget","constructor","props","id","placement","fullscreen","enterLabel","exitLabel","style","onAdd","deck","className","el","document","createElement","classList","add","element","update","addEventListener","onFullscreenChange","bind","onRemove","undefined","removeEventListener","ui","_jsx","onClick","handleClick","label","setProps","oldProps","remove","Object","assign","getContainer","container","getCanvas","parentElement","prevFullscreen","fullscreenElement","exitFullscreen","requestFullscreen","navigationUI","togglePseudoFullscreen","toggle"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\widgets\\src\\fullscreen-widget.tsx"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* global document */\nimport {\n  _deepEqual as deepEqual,\n  _applyStyles as applyStyles,\n  _removeStyles as removeStyles\n} from '@deck.gl/core';\nimport type {Deck, Widget, WidgetPlacement} from '@deck.gl/core';\nimport {render} from 'preact';\nimport {IconButton} from './components';\n\nexport type FullscreenWidgetProps = {\n  id?: string;\n  /**\n   * Widget positioning within the view. Default 'top-left'.\n   */\n  placement?: WidgetPlacement;\n  /**\n   * A [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements) which should be made full screen.\n   * By default, the map container element will be made full screen.\n   */\n  /* eslint-enable max-len */\n  container?: HTMLElement;\n  /**\n   * Tooltip message when out of fullscreen.\n   */\n  enterLabel?: string;\n  /**\n   * Tooltip message when fullscreen.\n   */\n  exitLabel?: string;\n  /**\n   * CSS inline style overrides.\n   */\n  style?: Partial<CSSStyleDeclaration>;\n  /**\n   * Additional CSS class.\n   */\n  className?: string;\n};\n\nexport class FullscreenWidget implements Widget<FullscreenWidgetProps> {\n  id = 'fullscreen';\n  props: FullscreenWidgetProps;\n  placement: WidgetPlacement = 'top-left';\n\n  deck?: Deck<any>;\n  element?: HTMLDivElement;\n\n  fullscreen: boolean = false;\n\n  constructor(props: FullscreenWidgetProps) {\n    this.id = props.id ?? this.id;\n    this.placement = props.placement ?? this.placement;\n\n    this.props = {\n      ...props,\n      enterLabel: props.enterLabel ?? 'Enter Fullscreen',\n      exitLabel: props.exitLabel ?? 'Exit Fullscreen',\n      style: props.style ?? {}\n    };\n  }\n\n  onAdd({deck}: {deck: Deck<any>}): HTMLDivElement {\n    const {style, className} = this.props;\n    const el = document.createElement('div');\n    el.classList.add('deck-widget', 'deck-widget-fullscreen');\n    if (className) el.classList.add(className);\n    applyStyles(el, style);\n    this.deck = deck;\n    this.element = el;\n    this.update();\n    document.addEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n    return el;\n  }\n\n  onRemove() {\n    this.deck = undefined;\n    this.element = undefined;\n    document.removeEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n  }\n\n  private update() {\n    const {enterLabel, exitLabel} = this.props;\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n\n    const ui = (\n      <IconButton\n        onClick={this.handleClick.bind(this)}\n        label={this.fullscreen ? exitLabel : enterLabel}\n        className={this.fullscreen ? 'deck-widget-fullscreen-exit' : 'deck-widget-fullscreen-enter'}\n      />\n    );\n    render(ui, element);\n  }\n\n  setProps(props: Partial<FullscreenWidgetProps>) {\n    this.placement = props.placement ?? this.placement;\n    const oldProps = this.props;\n    const el = this.element;\n    if (el) {\n      if (oldProps.className !== props.className) {\n        if (oldProps.className) el.classList.remove(oldProps.className);\n        if (props.className) el.classList.add(props.className);\n      }\n\n      if (!deepEqual(oldProps.style, props.style, 1)) {\n        removeStyles(el, oldProps.style);\n        applyStyles(el, props.style);\n      }\n    }\n\n    Object.assign(this.props, props);\n    this.update();\n  }\n\n  getContainer() {\n    return this.props.container || this.deck?.getCanvas()?.parentElement;\n  }\n\n  onFullscreenChange() {\n    const prevFullscreen = this.fullscreen;\n    const fullscreen = document.fullscreenElement === this.getContainer();\n    if (prevFullscreen !== fullscreen) {\n      this.fullscreen = !this.fullscreen;\n    }\n    this.update();\n  }\n\n  async handleClick() {\n    if (this.fullscreen) {\n      await this.exitFullscreen();\n    } else {\n      await this.requestFullscreen();\n    }\n    this.update();\n  }\n\n  async requestFullscreen() {\n    const container = this.getContainer();\n    if (container?.requestFullscreen) {\n      await container.requestFullscreen({navigationUI: 'hide'});\n    } else {\n      this.togglePseudoFullscreen();\n    }\n  }\n\n  async exitFullscreen() {\n    if (document.exitFullscreen) {\n      await document.exitFullscreen();\n    } else {\n      this.togglePseudoFullscreen();\n    }\n  }\n\n  togglePseudoFullscreen() {\n    this.getContainer()?.classList.toggle('deck-pseudo-fullscreen');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}