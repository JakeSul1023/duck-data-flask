{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Vector3 } from '@math.gl/core';\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_LIGHT_DIRECTION = [0.0, 0.0, -1.0];\nlet idCount = 0;\nexport class DirectionalLight {\n  constructor(props = {}) {\n    this.type = 'directional';\n    const {\n      color = DEFAULT_LIGHT_COLOR\n    } = props;\n    const {\n      intensity = DEFAULT_LIGHT_INTENSITY\n    } = props;\n    const {\n      direction = DEFAULT_LIGHT_DIRECTION\n    } = props;\n    const {\n      _shadow = false\n    } = props;\n    this.id = props.id || `directional-${idCount++}`;\n    this.color = color;\n    this.intensity = intensity;\n    this.type = 'directional';\n    this.direction = new Vector3(direction).normalize().toArray();\n    this.shadow = _shadow;\n  }\n  getProjectedLight(opts) {\n    return this;\n  }\n}","map":{"version":3,"names":["Vector3","DEFAULT_LIGHT_COLOR","DEFAULT_LIGHT_INTENSITY","DEFAULT_LIGHT_DIRECTION","idCount","DirectionalLight","constructor","props","type","color","intensity","direction","_shadow","id","normalize","toArray","shadow","getProjectedLight","opts"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\effects\\lighting\\directional-light.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Vector3} from '@math.gl/core';\nimport type Layer from '../../lib/layer';\n\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255] as [number, number, number];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_LIGHT_DIRECTION = [0.0, 0.0, -1.0] as [number, number, number];\n\nlet idCount = 0;\n\nexport type DirectionalLightOptions = {\n  id?: string;\n  /** Light color, [r, g, b] in the 0-255 range\n   * @default [255, 255, 255]\n   */\n  color?: [number, number, number];\n  /** Light intensity, higher number is brighter\n   * @default 1.0\n   */\n  intensity?: number;\n  /** Light direction in the common space\n   * @default [0.0, 0.0, -1.0]\n   */\n  direction?: [number, number, number];\n  /** (Experimental) render shadows cast by this light\n   * @default false\n   */\n  _shadow?: boolean;\n};\n\nexport class DirectionalLight {\n  id: string;\n  color: [number, number, number];\n  intensity: number;\n  type = 'directional' as const;\n  direction: [number, number, number];\n  shadow: boolean;\n\n  constructor(props: DirectionalLightOptions = {}) {\n    const {color = DEFAULT_LIGHT_COLOR} = props;\n    const {intensity = DEFAULT_LIGHT_INTENSITY} = props;\n    const {direction = DEFAULT_LIGHT_DIRECTION} = props;\n    const {_shadow = false} = props;\n\n    this.id = props.id || `directional-${idCount++}`;\n    this.color = color;\n    this.intensity = intensity;\n    this.type = 'directional';\n    this.direction = new Vector3(direction).normalize().toArray() as [number, number, number];\n    this.shadow = _shadow;\n  }\n\n  getProjectedLight(opts: {layer: Layer}): DirectionalLight {\n    return this;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,OAAO,QAAO,eAAe;AAGrC,MAAMC,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAA6B;AACvE,MAAMC,uBAAuB,GAAG,GAAG;AACnC,MAAMC,uBAAuB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAA6B;AAE5E,IAAIC,OAAO,GAAG,CAAC;AAsBf,OAAM,MAAOC,gBAAgB;EAQ3BC,YAAYC,KAAA,GAAiC,EAAE;IAJ/C,KAAAC,IAAI,GAAG,aAAsB;IAK3B,MAAM;MAACC,KAAK,GAAGR;IAAmB,CAAC,GAAGM,KAAK;IAC3C,MAAM;MAACG,SAAS,GAAGR;IAAuB,CAAC,GAAGK,KAAK;IACnD,MAAM;MAACI,SAAS,GAAGR;IAAuB,CAAC,GAAGI,KAAK;IACnD,MAAM;MAACK,OAAO,GAAG;IAAK,CAAC,GAAGL,KAAK;IAE/B,IAAI,CAACM,EAAE,GAAGN,KAAK,CAACM,EAAE,IAAI,eAAeT,OAAO,EAAE,EAAE;IAChD,IAAI,CAACK,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACF,IAAI,GAAG,aAAa;IACzB,IAAI,CAACG,SAAS,GAAG,IAAIX,OAAO,CAACW,SAAS,CAAC,CAACG,SAAS,EAAE,CAACC,OAAO,EAA8B;IACzF,IAAI,CAACC,MAAM,GAAGJ,OAAO;EACvB;EAEAK,iBAAiBA,CAACC,IAAoB;IACpC,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}