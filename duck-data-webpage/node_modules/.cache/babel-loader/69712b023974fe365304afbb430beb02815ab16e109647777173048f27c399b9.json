{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { decodeRGB565, GL } from '@loaders.gl/math';\n/* eslint-disable complexity*/\nexport function normalize3DTileColorAttribute(tile, colors, batchTable) {\n  // no colors defined\n  if (!colors && (!tile || !tile.batchIds || !batchTable)) {\n    return null;\n  }\n  const {\n    batchIds,\n    isRGB565,\n    pointCount = 0\n  } = tile;\n  // Batch table, look up colors in table\n  if (batchIds && batchTable) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const batchId = batchIds[i];\n      // TODO figure out what is `dimensions` used for\n      const dimensions = batchTable.getProperty(batchId, 'dimensions');\n      const color = dimensions.map(d => d * 255);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n  // RGB565 case, convert to RGB\n  if (colors && isRGB565) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const color = decodeRGB565(colors[i]);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n  // RGB case (tile.isTranslucent)\n  if (colors && colors.length === pointCount * 3) {\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colors,\n      size: 3,\n      normalized: true\n    };\n  }\n  // DEFAULT: RGBA case\n  return {\n    type: GL.UNSIGNED_BYTE,\n    value: colors || new Uint8ClampedArray(),\n    size: 4,\n    normalized: true\n  };\n}\n/* eslint-enable complexity*/","map":{"version":3,"names":["decodeRGB565","GL","normalize3DTileColorAttribute","tile","colors","batchTable","batchIds","isRGB565","pointCount","colorArray","Uint8ClampedArray","i","batchId","dimensions","getProperty","color","map","d","type","UNSIGNED_BYTE","value","size","normalized","length"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/normalize-3d-tile-colors.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { decodeRGB565, GL } from '@loaders.gl/math';\n/* eslint-disable complexity*/\nexport function normalize3DTileColorAttribute(tile, colors, batchTable) {\n    // no colors defined\n    if (!colors && (!tile || !tile.batchIds || !batchTable)) {\n        return null;\n    }\n    const { batchIds, isRGB565, pointCount = 0 } = tile;\n    // Batch table, look up colors in table\n    if (batchIds && batchTable) {\n        const colorArray = new Uint8ClampedArray(pointCount * 3);\n        for (let i = 0; i < pointCount; i++) {\n            const batchId = batchIds[i];\n            // TODO figure out what is `dimensions` used for\n            const dimensions = batchTable.getProperty(batchId, 'dimensions');\n            const color = dimensions.map((d) => d * 255);\n            colorArray[i * 3] = color[0];\n            colorArray[i * 3 + 1] = color[1];\n            colorArray[i * 3 + 2] = color[2];\n        }\n        return {\n            type: GL.UNSIGNED_BYTE,\n            value: colorArray,\n            size: 3,\n            normalized: true\n        };\n    }\n    // RGB565 case, convert to RGB\n    if (colors && isRGB565) {\n        const colorArray = new Uint8ClampedArray(pointCount * 3);\n        for (let i = 0; i < pointCount; i++) {\n            const color = decodeRGB565(colors[i]);\n            colorArray[i * 3] = color[0];\n            colorArray[i * 3 + 1] = color[1];\n            colorArray[i * 3 + 2] = color[2];\n        }\n        return {\n            type: GL.UNSIGNED_BYTE,\n            value: colorArray,\n            size: 3,\n            normalized: true\n        };\n    }\n    // RGB case (tile.isTranslucent)\n    if (colors && colors.length === pointCount * 3) {\n        return {\n            type: GL.UNSIGNED_BYTE,\n            value: colors,\n            size: 3,\n            normalized: true\n        };\n    }\n    // DEFAULT: RGBA case\n    return {\n        type: GL.UNSIGNED_BYTE,\n        value: colors || new Uint8ClampedArray(),\n        size: 4,\n        normalized: true\n    };\n}\n/* eslint-enable complexity*/\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,EAAEC,EAAE,QAAQ,kBAAkB;AACnD;AACA,OAAO,SAASC,6BAA6BA,CAACC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAE;EACpE;EACA,IAAI,CAACD,MAAM,KAAK,CAACD,IAAI,IAAI,CAACA,IAAI,CAACG,QAAQ,IAAI,CAACD,UAAU,CAAC,EAAE;IACrD,OAAO,IAAI;EACf;EACA,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,UAAU,GAAG;EAAE,CAAC,GAAGL,IAAI;EACnD;EACA,IAAIG,QAAQ,IAAID,UAAU,EAAE;IACxB,MAAMI,UAAU,GAAG,IAAIC,iBAAiB,CAACF,UAAU,GAAG,CAAC,CAAC;IACxD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,EAAEG,CAAC,EAAE,EAAE;MACjC,MAAMC,OAAO,GAAGN,QAAQ,CAACK,CAAC,CAAC;MAC3B;MACA,MAAME,UAAU,GAAGR,UAAU,CAACS,WAAW,CAACF,OAAO,EAAE,YAAY,CAAC;MAChE,MAAMG,KAAK,GAAGF,UAAU,CAACG,GAAG,CAAEC,CAAC,IAAKA,CAAC,GAAG,GAAG,CAAC;MAC5CR,UAAU,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;MAC5BN,UAAU,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;MAChCN,UAAU,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;IACpC;IACA,OAAO;MACHG,IAAI,EAAEjB,EAAE,CAACkB,aAAa;MACtBC,KAAK,EAAEX,UAAU;MACjBY,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE;IAChB,CAAC;EACL;EACA;EACA,IAAIlB,MAAM,IAAIG,QAAQ,EAAE;IACpB,MAAME,UAAU,GAAG,IAAIC,iBAAiB,CAACF,UAAU,GAAG,CAAC,CAAC;IACxD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,EAAEG,CAAC,EAAE,EAAE;MACjC,MAAMI,KAAK,GAAGf,YAAY,CAACI,MAAM,CAACO,CAAC,CAAC,CAAC;MACrCF,UAAU,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;MAC5BN,UAAU,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;MAChCN,UAAU,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;IACpC;IACA,OAAO;MACHG,IAAI,EAAEjB,EAAE,CAACkB,aAAa;MACtBC,KAAK,EAAEX,UAAU;MACjBY,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE;IAChB,CAAC;EACL;EACA;EACA,IAAIlB,MAAM,IAAIA,MAAM,CAACmB,MAAM,KAAKf,UAAU,GAAG,CAAC,EAAE;IAC5C,OAAO;MACHU,IAAI,EAAEjB,EAAE,CAACkB,aAAa;MACtBC,KAAK,EAAEhB,MAAM;MACbiB,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE;IAChB,CAAC;EACL;EACA;EACA,OAAO;IACHJ,IAAI,EAAEjB,EAAE,CAACkB,aAAa;IACtBC,KAAK,EAAEhB,MAAM,IAAI,IAAIM,iBAAiB,CAAC,CAAC;IACxCW,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE;EAChB,CAAC;AACL;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}