{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst DEFAULT_ROW_COUNT = 100;\nexport class BaseTableBatchAggregator {\n  schema;\n  options;\n  shape;\n  length = 0;\n  rows = null;\n  cursor = 0;\n  _headers = [];\n  constructor(schema, options) {\n    this.options = options;\n    this.schema = schema;\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n  rowCount() {\n    return this.length;\n  }\n  addArrayRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n    this.shape = 'array-row-table';\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n  addObjectRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n    this.shape = 'object-row-table';\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n  getBatch() {\n    let rows = this.rows;\n    if (!rows) {\n      return null;\n    }\n    rows = rows.slice(0, this.length);\n    this.rows = null;\n    const batch = {\n      shape: this.shape || 'array-row-table',\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n    return batch;\n  }\n}","map":{"version":3,"names":["DEFAULT_ROW_COUNT","BaseTableBatchAggregator","schema","options","shape","length","rows","cursor","_headers","constructor","Array","isArray","key","index","name","rowCount","addArrayRow","row","Number","isFinite","addObjectRow","getBatch","slice","batch","batchType","data"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/batches/base-table-batch-aggregator.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst DEFAULT_ROW_COUNT = 100;\nexport class BaseTableBatchAggregator {\n    schema;\n    options;\n    shape;\n    length = 0;\n    rows = null;\n    cursor = 0;\n    _headers = [];\n    constructor(schema, options) {\n        this.options = options;\n        this.schema = schema;\n        // schema is an array if there're no headers\n        // object if there are headers\n        if (!Array.isArray(schema)) {\n            this._headers = [];\n            for (const key in schema) {\n                this._headers[schema[key].index] = schema[key].name;\n            }\n        }\n    }\n    rowCount() {\n        return this.length;\n    }\n    addArrayRow(row, cursor) {\n        if (Number.isFinite(cursor)) {\n            this.cursor = cursor;\n        }\n        this.shape = 'array-row-table';\n        this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n        this.rows[this.length] = row;\n        this.length++;\n    }\n    addObjectRow(row, cursor) {\n        if (Number.isFinite(cursor)) {\n            this.cursor = cursor;\n        }\n        this.shape = 'object-row-table';\n        this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n        this.rows[this.length] = row;\n        this.length++;\n    }\n    getBatch() {\n        let rows = this.rows;\n        if (!rows) {\n            return null;\n        }\n        rows = rows.slice(0, this.length);\n        this.rows = null;\n        const batch = {\n            shape: this.shape || 'array-row-table',\n            batchType: 'data',\n            data: rows,\n            length: this.length,\n            schema: this.schema,\n            cursor: this.cursor\n        };\n        return batch;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAG,GAAG;AAC7B,OAAO,MAAMC,wBAAwB,CAAC;EAClCC,MAAM;EACNC,OAAO;EACPC,KAAK;EACLC,MAAM,GAAG,CAAC;EACVC,IAAI,GAAG,IAAI;EACXC,MAAM,GAAG,CAAC;EACVC,QAAQ,GAAG,EAAE;EACbC,WAAWA,CAACP,MAAM,EAAEC,OAAO,EAAE;IACzB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB;IACA;IACA,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,EAAE;MACxB,IAAI,CAACM,QAAQ,GAAG,EAAE;MAClB,KAAK,MAAMI,GAAG,IAAIV,MAAM,EAAE;QACtB,IAAI,CAACM,QAAQ,CAACN,MAAM,CAACU,GAAG,CAAC,CAACC,KAAK,CAAC,GAAGX,MAAM,CAACU,GAAG,CAAC,CAACE,IAAI;MACvD;IACJ;EACJ;EACAC,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACV,MAAM;EACtB;EACAW,WAAWA,CAACC,GAAG,EAAEV,MAAM,EAAE;IACrB,IAAIW,MAAM,CAACC,QAAQ,CAACZ,MAAM,CAAC,EAAE;MACzB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACxB;IACA,IAAI,CAACH,KAAK,GAAG,iBAAiB;IAC9B,IAAI,CAACE,IAAI,GAAG,IAAI,CAACA,IAAI,IAAI,IAAII,KAAK,CAACV,iBAAiB,CAAC;IACrD,IAAI,CAACM,IAAI,CAAC,IAAI,CAACD,MAAM,CAAC,GAAGY,GAAG;IAC5B,IAAI,CAACZ,MAAM,EAAE;EACjB;EACAe,YAAYA,CAACH,GAAG,EAAEV,MAAM,EAAE;IACtB,IAAIW,MAAM,CAACC,QAAQ,CAACZ,MAAM,CAAC,EAAE;MACzB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACxB;IACA,IAAI,CAACH,KAAK,GAAG,kBAAkB;IAC/B,IAAI,CAACE,IAAI,GAAG,IAAI,CAACA,IAAI,IAAI,IAAII,KAAK,CAACV,iBAAiB,CAAC;IACrD,IAAI,CAACM,IAAI,CAAC,IAAI,CAACD,MAAM,CAAC,GAAGY,GAAG;IAC5B,IAAI,CAACZ,MAAM,EAAE;EACjB;EACAgB,QAAQA,CAAA,EAAG;IACP,IAAIf,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAI,CAACA,IAAI,EAAE;MACP,OAAO,IAAI;IACf;IACAA,IAAI,GAAGA,IAAI,CAACgB,KAAK,CAAC,CAAC,EAAE,IAAI,CAACjB,MAAM,CAAC;IACjC,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,MAAMiB,KAAK,GAAG;MACVnB,KAAK,EAAE,IAAI,CAACA,KAAK,IAAI,iBAAiB;MACtCoB,SAAS,EAAE,MAAM;MACjBC,IAAI,EAAEnB,IAAI;MACVD,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBH,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBK,MAAM,EAAE,IAAI,CAACA;IACjB,CAAC;IACD,OAAOgB,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}