{"ast":null,"code":"import * as glMatrix from './common.js';\n/**\n * 3x3 Matrix\n * @module mat3\n */\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const b01 = a22 * a11 - a12 * a21;\n  const b11 = -a22 * a10 + a12 * a20;\n  const b21 = a21 * a10 - a11 * a20;\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[3];\n  const b11 = b[4];\n  const b12 = b[5];\n  const b20 = b[6];\n  const b21 = b[7];\n  const b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const x = v[0];\n  const y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat3(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]})`;\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + a[6] * a[6] + a[7] * a[7] + a[8] * a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","fromMat4","a","clone","copy","fromValues","m00","m01","m02","m10","m11","m12","m20","m21","m22","set","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b","b00","b02","b10","b12","b20","b22","translate","v","x","y","rotate","rad","s","Math","sin","c","cos","scale","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","str","frob","sqrt","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","abs","EPSILON","max","mul","sub"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\gl-matrix\\mat3.ts"],"sourcesContent":["import * as glMatrix from './common.js';\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  const b01 = a22 * a11 - a12 * a21;\n  const b11 = -a22 * a10 + a12 * a20;\n  const b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  return (\n    a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20)\n  );\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[3];\n  const b11 = b[4];\n  const b12 = b[5];\n  const b20 = b[6];\n  const b21 = b[7];\n  const b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const x = v[0];\n  const y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat3(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(\n    a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8]\n  );\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7] &&\n    a[8] === b[8]\n  );\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8))\n  );\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,aAAa;AAEvC;;;;AAKA;;;;;AAKA,OAAM,SAAUC,MAAMA,CAAA;EACpB,MAAMC,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EACtC,IAAIH,QAAQ,CAACG,UAAU,IAAIC,YAAY,EAAE;IACvCF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACZ;EACAA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUG,QAAQA,CAACH,GAAG,EAAEI,CAAC;EAC7BJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,EAAE,CAAC;EACd,OAAOJ,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUK,KAAKA,CAACD,CAAC;EACrB,MAAMJ,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EACtCD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACb,OAAOJ,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUM,IAAIA,CAACN,GAAG,EAAEI,CAAC;EACzBJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACb,OAAOJ,GAAG;AACZ;AAEA;;;;;;;;;;;;;;AAcA,OAAM,SAAUO,UAAUA,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG;EACpE,MAAMhB,GAAG,GAAG,IAAIF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;EACtCD,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG;EACZR,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;EACZT,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG;EACZV,GAAG,CAAC,CAAC,CAAC,GAAGW,GAAG;EACZX,GAAG,CAAC,CAAC,CAAC,GAAGY,GAAG;EACZZ,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG;EACZb,GAAG,CAAC,CAAC,CAAC,GAAGc,GAAG;EACZd,GAAG,CAAC,CAAC,CAAC,GAAGe,GAAG;EACZf,GAAG,CAAC,CAAC,CAAC,GAAGgB,GAAG;EACZ,OAAOhB,GAAG;AACZ;AAEA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUiB,GAAGA,CAACjB,GAAG,EAAEQ,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG;EAClEhB,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG;EACZR,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;EACZT,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG;EACZV,GAAG,CAAC,CAAC,CAAC,GAAGW,GAAG;EACZX,GAAG,CAAC,CAAC,CAAC,GAAGY,GAAG;EACZZ,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG;EACZb,GAAG,CAAC,CAAC,CAAC,GAAGc,GAAG;EACZd,GAAG,CAAC,CAAC,CAAC,GAAGe,GAAG;EACZf,GAAG,CAAC,CAAC,CAAC,GAAGgB,GAAG;EACZ,OAAOhB,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUkB,QAAQA,CAAClB,GAAG;EAC1BA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUmB,SAASA,CAACnB,GAAG,EAAEI,CAAC;EAC9B;EACA,IAAIJ,GAAG,KAAKI,CAAC,EAAE;IACb,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;IAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;IAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;IAChBJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGoB,GAAG;IACZpB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGqB,GAAG;IACZrB,GAAG,CAAC,CAAC,CAAC,GAAGsB,GAAG;EACd,CAAC,MAAM;IACLtB,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;IACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACf;EAEA,OAAOJ,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUuB,MAAMA,CAACvB,GAAG,EAAEI,CAAC;EAC3B,MAAMoB,GAAG,GAAGpB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqB,GAAG,GAAGrB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAEhB,MAAM0B,GAAG,GAAGD,GAAG,GAAGH,GAAG,GAAGJ,GAAG,GAAGM,GAAG;EACjC,MAAMG,GAAG,GAAG,CAACF,GAAG,GAAGJ,GAAG,GAAGH,GAAG,GAAGK,GAAG;EAClC,MAAMK,GAAG,GAAGJ,GAAG,GAAGH,GAAG,GAAGC,GAAG,GAAGC,GAAG;EAEjC;EACA,IAAIM,GAAG,GAAGT,GAAG,GAAGM,GAAG,GAAGV,GAAG,GAAGW,GAAG,GAAGV,GAAG,GAAGW,GAAG;EAE3C,IAAI,CAACC,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACAA,GAAG,GAAG,GAAG,GAAGA,GAAG;EAEfjC,GAAG,CAAC,CAAC,CAAC,GAAG8B,GAAG,GAAGG,GAAG;EAClBjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC6B,GAAG,GAAGT,GAAG,GAAGC,GAAG,GAAGO,GAAG,IAAIK,GAAG;EACvCjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACsB,GAAG,GAAGF,GAAG,GAAGC,GAAG,GAAGK,GAAG,IAAIO,GAAG;EACtCjC,GAAG,CAAC,CAAC,CAAC,GAAG+B,GAAG,GAAGE,GAAG;EAClBjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6B,GAAG,GAAGL,GAAG,GAAGH,GAAG,GAAGM,GAAG,IAAIM,GAAG;EACtCjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAACsB,GAAG,GAAGE,GAAG,GAAGH,GAAG,GAAGI,GAAG,IAAIQ,GAAG;EACvCjC,GAAG,CAAC,CAAC,CAAC,GAAGgC,GAAG,GAAGC,GAAG;EAClBjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC4B,GAAG,GAAGJ,GAAG,GAAGJ,GAAG,GAAGO,GAAG,IAAIM,GAAG;EACvCjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC0B,GAAG,GAAGF,GAAG,GAAGJ,GAAG,GAAGK,GAAG,IAAIQ,GAAG;EACtC,OAAOjC,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUkC,OAAOA,CAAClC,GAAG,EAAEI,CAAC;EAC5B,MAAMoB,GAAG,GAAGpB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqB,GAAG,GAAGrB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAEhBJ,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG,GAAGG,GAAG,GAAGP,GAAG,GAAGM,GAAG;EAC9B5B,GAAG,CAAC,CAAC,CAAC,GAAGqB,GAAG,GAAGO,GAAG,GAAGR,GAAG,GAAGS,GAAG;EAC9B7B,GAAG,CAAC,CAAC,CAAC,GAAGoB,GAAG,GAAGE,GAAG,GAAGD,GAAG,GAAGK,GAAG;EAC9B1B,GAAG,CAAC,CAAC,CAAC,GAAGsB,GAAG,GAAGK,GAAG,GAAGF,GAAG,GAAGI,GAAG;EAC9B7B,GAAG,CAAC,CAAC,CAAC,GAAGwB,GAAG,GAAGK,GAAG,GAAGR,GAAG,GAAGM,GAAG;EAC9B3B,GAAG,CAAC,CAAC,CAAC,GAAGqB,GAAG,GAAGI,GAAG,GAAGD,GAAG,GAAGF,GAAG;EAC9BtB,GAAG,CAAC,CAAC,CAAC,GAAGyB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;EAC9B3B,GAAG,CAAC,CAAC,CAAC,GAAGoB,GAAG,GAAGO,GAAG,GAAGH,GAAG,GAAGI,GAAG;EAC9B5B,GAAG,CAAC,CAAC,CAAC,GAAGwB,GAAG,GAAGE,GAAG,GAAGN,GAAG,GAAGK,GAAG;EAC9B,OAAOzB,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUmC,WAAWA,CAAC/B,CAAC;EAC3B,MAAMoB,GAAG,GAAGpB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqB,GAAG,GAAGrB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAEhB,OACEoB,GAAG,IAAIK,GAAG,GAAGH,GAAG,GAAGJ,GAAG,GAAGM,GAAG,CAAC,GAAGR,GAAG,IAAI,CAACS,GAAG,GAAGJ,GAAG,GAAGH,GAAG,GAAGK,GAAG,CAAC,GAAGN,GAAG,IAAIO,GAAG,GAAGH,GAAG,GAAGC,GAAG,GAAGC,GAAG,CAAC;AAElG;AAEA;;;;;;;;AAQA,OAAM,SAAUS,QAAQA,CAACpC,GAAG,EAAEI,CAAC,EAAEiC,CAAC;EAChC,MAAMb,GAAG,GAAGpB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqB,GAAG,GAAGrB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAEhB,MAAMkC,GAAG,GAAGD,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMP,GAAG,GAAGO,CAAC,CAAC,CAAC,CAAC;EAChB,MAAME,GAAG,GAAGF,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMG,GAAG,GAAGH,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMN,GAAG,GAAGM,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;EAChB,MAAML,GAAG,GAAGK,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;EAEhBrC,GAAG,CAAC,CAAC,CAAC,GAAGsC,GAAG,GAAGd,GAAG,GAAGM,GAAG,GAAGL,GAAG,GAAGc,GAAG,GAAGZ,GAAG;EAC1C3B,GAAG,CAAC,CAAC,CAAC,GAAGsC,GAAG,GAAGlB,GAAG,GAAGU,GAAG,GAAGJ,GAAG,GAAGa,GAAG,GAAGX,GAAG;EAC1C5B,GAAG,CAAC,CAAC,CAAC,GAAGsC,GAAG,GAAGjB,GAAG,GAAGS,GAAG,GAAGR,GAAG,GAAGiB,GAAG,GAAGV,GAAG;EAE1C7B,GAAG,CAAC,CAAC,CAAC,GAAGwC,GAAG,GAAGhB,GAAG,GAAGO,GAAG,GAAGN,GAAG,GAAGgB,GAAG,GAAGd,GAAG;EAC1C3B,GAAG,CAAC,CAAC,CAAC,GAAGwC,GAAG,GAAGpB,GAAG,GAAGW,GAAG,GAAGL,GAAG,GAAGe,GAAG,GAAGb,GAAG;EAC1C5B,GAAG,CAAC,CAAC,CAAC,GAAGwC,GAAG,GAAGnB,GAAG,GAAGU,GAAG,GAAGT,GAAG,GAAGmB,GAAG,GAAGZ,GAAG;EAE1C7B,GAAG,CAAC,CAAC,CAAC,GAAG0C,GAAG,GAAGlB,GAAG,GAAGQ,GAAG,GAAGP,GAAG,GAAGkB,GAAG,GAAGhB,GAAG;EAC1C3B,GAAG,CAAC,CAAC,CAAC,GAAG0C,GAAG,GAAGtB,GAAG,GAAGY,GAAG,GAAGN,GAAG,GAAGiB,GAAG,GAAGf,GAAG;EAC1C5B,GAAG,CAAC,CAAC,CAAC,GAAG0C,GAAG,GAAGrB,GAAG,GAAGW,GAAG,GAAGV,GAAG,GAAGqB,GAAG,GAAGd,GAAG;EAC1C,OAAO7B,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU4C,SAASA,CAAC5C,GAAG,EAAEI,CAAC,EAAEyC,CAAC;EACjC,MAAMrB,GAAG,GAAGpB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqB,GAAG,GAAGrB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0C,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EAEd7C,GAAG,CAAC,CAAC,CAAC,GAAGwB,GAAG;EACZxB,GAAG,CAAC,CAAC,CAAC,GAAGoB,GAAG;EACZpB,GAAG,CAAC,CAAC,CAAC,GAAGqB,GAAG;EAEZrB,GAAG,CAAC,CAAC,CAAC,GAAGyB,GAAG;EACZzB,GAAG,CAAC,CAAC,CAAC,GAAG0B,GAAG;EACZ1B,GAAG,CAAC,CAAC,CAAC,GAAGsB,GAAG;EAEZtB,GAAG,CAAC,CAAC,CAAC,GAAG8C,CAAC,GAAGtB,GAAG,GAAGuB,CAAC,GAAGtB,GAAG,GAAGE,GAAG;EAChC3B,GAAG,CAAC,CAAC,CAAC,GAAG8C,CAAC,GAAG1B,GAAG,GAAG2B,CAAC,GAAGrB,GAAG,GAAGE,GAAG;EAChC5B,GAAG,CAAC,CAAC,CAAC,GAAG8C,CAAC,GAAGzB,GAAG,GAAG0B,CAAC,GAAGzB,GAAG,GAAGO,GAAG;EAChC,OAAO7B,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUgD,MAAMA,CAAChD,GAAG,EAAEI,CAAC,EAAE6C,GAAG;EAChC,MAAMzB,GAAG,GAAGpB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqB,GAAG,GAAGrB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM8C,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,GAAG,CAAC;EACvB,MAAMI,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACL,GAAG,CAAC;EAEvBjD,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC,GAAG7B,GAAG,GAAG0B,CAAC,GAAGzB,GAAG;EAC1BzB,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC,GAAGjC,GAAG,GAAG8B,CAAC,GAAGxB,GAAG;EAC1B1B,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC,GAAGhC,GAAG,GAAG6B,CAAC,GAAG5B,GAAG;EAE1BtB,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC,GAAG5B,GAAG,GAAGyB,CAAC,GAAG1B,GAAG;EAC1BxB,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC,GAAG3B,GAAG,GAAGwB,CAAC,GAAG9B,GAAG;EAC1BpB,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC,GAAG/B,GAAG,GAAG4B,CAAC,GAAG7B,GAAG;EAE1BrB,GAAG,CAAC,CAAC,CAAC,GAAG2B,GAAG;EACZ3B,GAAG,CAAC,CAAC,CAAC,GAAG4B,GAAG;EACZ5B,GAAG,CAAC,CAAC,CAAC,GAAG6B,GAAG;EACZ,OAAO7B,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUuD,KAAKA,CAACvD,GAAG,EAAEI,CAAC,EAAEyC,CAAC;EAC7B,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EAEd7C,GAAG,CAAC,CAAC,CAAC,GAAG8C,CAAC,GAAG1C,CAAC,CAAC,CAAC,CAAC;EACjBJ,GAAG,CAAC,CAAC,CAAC,GAAG8C,CAAC,GAAG1C,CAAC,CAAC,CAAC,CAAC;EACjBJ,GAAG,CAAC,CAAC,CAAC,GAAG8C,CAAC,GAAG1C,CAAC,CAAC,CAAC,CAAC;EAEjBJ,GAAG,CAAC,CAAC,CAAC,GAAG+C,CAAC,GAAG3C,CAAC,CAAC,CAAC,CAAC;EACjBJ,GAAG,CAAC,CAAC,CAAC,GAAG+C,CAAC,GAAG3C,CAAC,CAAC,CAAC,CAAC;EACjBJ,GAAG,CAAC,CAAC,CAAC,GAAG+C,CAAC,GAAG3C,CAAC,CAAC,CAAC,CAAC;EAEjBJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACb,OAAOJ,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUwD,eAAeA,CAACxD,GAAG,EAAE6C,CAAC;EACpC7C,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG6C,CAAC,CAAC,CAAC,CAAC;EACb7C,GAAG,CAAC,CAAC,CAAC,GAAG6C,CAAC,CAAC,CAAC,CAAC;EACb7C,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUyD,YAAYA,CAACzD,GAAG,EAAEiD,GAAG;EACnC,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,GAAG,CAAC;EACvB,MAAMI,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACL,GAAG,CAAC;EAEvBjD,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC;EACVrD,GAAG,CAAC,CAAC,CAAC,GAAGkD,CAAC;EACVlD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAACkD,CAAC;EACXlD,GAAG,CAAC,CAAC,CAAC,GAAGqD,CAAC;EACVrD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AAEA;;;;;;;;;;;AAWA,OAAM,SAAU0D,WAAWA,CAAC1D,GAAG,EAAE6C,CAAC;EAChC7C,GAAG,CAAC,CAAC,CAAC,GAAG6C,CAAC,CAAC,CAAC,CAAC;EACb7C,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG6C,CAAC,CAAC,CAAC,CAAC;EACb7C,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAU2D,SAASA,CAAC3D,GAAG,EAAEI,CAAC;EAC9BJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC;EACbJ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU4D,QAAQA,CAAC5D,GAAG,EAAE6D,CAAC;EAC7B,MAAMf,CAAC,GAAGe,CAAC,CAAC,CAAC,CAAC;EACd,MAAMd,CAAC,GAAGc,CAAC,CAAC,CAAC,CAAC;EACd,MAAMC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EACd,MAAME,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;EACd,MAAMG,EAAE,GAAGlB,CAAC,GAAGA,CAAC;EAChB,MAAMmB,EAAE,GAAGlB,CAAC,GAAGA,CAAC;EAChB,MAAMmB,EAAE,GAAGJ,CAAC,GAAGA,CAAC;EAEhB,MAAMK,EAAE,GAAGrB,CAAC,GAAGkB,EAAE;EACjB,MAAMI,EAAE,GAAGrB,CAAC,GAAGiB,EAAE;EACjB,MAAMK,EAAE,GAAGtB,CAAC,GAAGkB,EAAE;EACjB,MAAMK,EAAE,GAAGR,CAAC,GAAGE,EAAE;EACjB,MAAMO,EAAE,GAAGT,CAAC,GAAGG,EAAE;EACjB,MAAMO,EAAE,GAAGV,CAAC,GAAGI,EAAE;EACjB,MAAMO,EAAE,GAAGV,CAAC,GAAGC,EAAE;EACjB,MAAMU,EAAE,GAAGX,CAAC,GAAGE,EAAE;EACjB,MAAMU,EAAE,GAAGZ,CAAC,GAAGG,EAAE;EAEjBlE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGqE,EAAE,GAAGG,EAAE;EACpBxE,GAAG,CAAC,CAAC,CAAC,GAAGoE,EAAE,GAAGO,EAAE;EAChB3E,GAAG,CAAC,CAAC,CAAC,GAAGsE,EAAE,GAAGI,EAAE;EAEhB1E,GAAG,CAAC,CAAC,CAAC,GAAGoE,EAAE,GAAGO,EAAE;EAChB3E,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGmE,EAAE,GAAGK,EAAE;EACpBxE,GAAG,CAAC,CAAC,CAAC,GAAGuE,EAAE,GAAGE,EAAE;EAEhBzE,GAAG,CAAC,CAAC,CAAC,GAAGsE,EAAE,GAAGI,EAAE;EAChB1E,GAAG,CAAC,CAAC,CAAC,GAAGuE,EAAE,GAAGE,EAAE;EAChBzE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGmE,EAAE,GAAGE,EAAE;EAEpB,OAAOrE,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU4E,cAAcA,CAAC5E,GAAG,EAAEI,CAAC;EACnC,MAAMoB,GAAG,GAAGpB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMgB,GAAG,GAAGhB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyE,GAAG,GAAGzE,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMqB,GAAG,GAAGrB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMsB,GAAG,GAAGtB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMkB,GAAG,GAAGlB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM0E,GAAG,GAAG1E,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMuB,GAAG,GAAGvB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMwB,GAAG,GAAGxB,CAAC,CAAC,CAAC,CAAC;EAChB,MAAMyB,GAAG,GAAGzB,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM2E,GAAG,GAAG3E,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM4E,GAAG,GAAG5E,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM6E,GAAG,GAAG7E,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM8E,GAAG,GAAG9E,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM+E,GAAG,GAAG/E,CAAC,CAAC,EAAE,CAAC;EAEjB,MAAMkC,GAAG,GAAGd,GAAG,GAAGE,GAAG,GAAGN,GAAG,GAAGK,GAAG;EACjC,MAAMK,GAAG,GAAGN,GAAG,GAAGF,GAAG,GAAGD,GAAG,GAAGI,GAAG;EACjC,MAAMc,GAAG,GAAGf,GAAG,GAAGsD,GAAG,GAAGD,GAAG,GAAGpD,GAAG;EACjC,MAAM2D,GAAG,GAAGhE,GAAG,GAAGE,GAAG,GAAGD,GAAG,GAAGK,GAAG;EACjC,MAAM2D,GAAG,GAAGjE,GAAG,GAAG0D,GAAG,GAAGD,GAAG,GAAGnD,GAAG;EACjC,MAAM4D,GAAG,GAAGjE,GAAG,GAAGyD,GAAG,GAAGD,GAAG,GAAGvD,GAAG;EACjC,MAAMiE,GAAG,GAAG5D,GAAG,GAAGsD,GAAG,GAAGrD,GAAG,GAAGoD,GAAG;EACjC,MAAMQ,GAAG,GAAG7D,GAAG,GAAGuD,GAAG,GAAGrD,GAAG,GAAGmD,GAAG;EACjC,MAAMS,GAAG,GAAG9D,GAAG,GAAGwD,GAAG,GAAGJ,GAAG,GAAGC,GAAG;EACjC,MAAMU,GAAG,GAAG9D,GAAG,GAAGsD,GAAG,GAAGrD,GAAG,GAAGoD,GAAG;EACjC,MAAMzC,GAAG,GAAGZ,GAAG,GAAGuD,GAAG,GAAGJ,GAAG,GAAGE,GAAG;EACjC,MAAMlD,GAAG,GAAGF,GAAG,GAAGsD,GAAG,GAAGJ,GAAG,GAAGG,GAAG;EAEjC;EACA,IAAIjD,GAAG,GAAGK,GAAG,GAAGP,GAAG,GAAGD,GAAG,GAAGU,GAAG,GAAGD,GAAG,GAAGmD,GAAG,GAAGN,GAAG,GAAGK,GAAG,GAAGJ,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;EAE/E,IAAI,CAACtD,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACAA,GAAG,GAAG,GAAG,GAAGA,GAAG;EAEfjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC0B,GAAG,GAAGK,GAAG,GAAGT,GAAG,GAAGkB,GAAG,GAAGsC,GAAG,GAAGY,GAAG,IAAIzD,GAAG;EAClDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACsB,GAAG,GAAGmE,GAAG,GAAGhE,GAAG,GAAGM,GAAG,GAAG+C,GAAG,GAAGU,GAAG,IAAIvD,GAAG;EAClDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACyB,GAAG,GAAGe,GAAG,GAAGd,GAAG,GAAG+D,GAAG,GAAGX,GAAG,GAAGS,GAAG,IAAItD,GAAG;EAElDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACqB,GAAG,GAAGmB,GAAG,GAAGpB,GAAG,GAAGW,GAAG,GAAG8C,GAAG,GAAGa,GAAG,IAAIzD,GAAG;EAClDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACwB,GAAG,GAAGO,GAAG,GAAGV,GAAG,GAAGoE,GAAG,GAAGZ,GAAG,GAAGW,GAAG,IAAIvD,GAAG;EAClDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACoB,GAAG,GAAGqE,GAAG,GAAGjE,GAAG,GAAGgB,GAAG,GAAGqC,GAAG,GAAGU,GAAG,IAAItD,GAAG;EAElDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACiF,GAAG,GAAGK,GAAG,GAAGJ,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG,IAAInD,GAAG;EAClDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACkF,GAAG,GAAG3C,GAAG,GAAGyC,GAAG,GAAGM,GAAG,GAAGH,GAAG,GAAGrD,GAAG,IAAIG,GAAG;EAClDjC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACgF,GAAG,GAAGK,GAAG,GAAGJ,GAAG,GAAG1C,GAAG,GAAG4C,GAAG,GAAG7C,GAAG,IAAIL,GAAG;EAElD,OAAOjC,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAU2F,UAAUA,CAAC3F,GAAG,EAAE4F,KAAK,EAAEC,MAAM;EAC3C7F,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG4F,KAAK;EAClB5F,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG6F,MAAM;EACpB7F,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACXA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,OAAOA,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAU8F,GAAGA,CAAC1F,CAAC;EACnB,OAAO,QAAQA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAG;AAChG;AAEA;;;;;;AAMA,OAAM,SAAU2F,IAAIA,CAAC3F,CAAC;EACpB,OAAO+C,IAAI,CAAC6C,IAAI,CACd5F,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACTA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GACXA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CACd;AACH;AAEA;;;;;;;;AAQA,OAAM,SAAU6F,GAAGA,CAACjG,GAAG,EAAEI,CAAC,EAAEiC,CAAC;EAC3BrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOrC,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUkG,QAAQA,CAAClG,GAAG,EAAEI,CAAC,EAAEiC,CAAC;EAChCrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC;EACpB,OAAOrC,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUmG,cAAcA,CAACnG,GAAG,EAAEI,CAAC,EAAEiC,CAAC;EACtCrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjBrC,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC;EACjB,OAAOrC,GAAG;AACZ;AAEA;;;;;;;;;AASA,OAAM,SAAUoG,oBAAoBA,CAACpG,GAAG,EAAEI,CAAC,EAAEiC,CAAC,EAAEkB,KAAK;EACnDvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5BvD,GAAG,CAAC,CAAC,CAAC,GAAGI,CAAC,CAAC,CAAC,CAAC,GAAGiC,CAAC,CAAC,CAAC,CAAC,GAAGkB,KAAK;EAC5B,OAAOvD,GAAG;AACZ;AAEA;;;;;;;AAOA,OAAM,SAAUqG,WAAWA,CAACjG,CAAC,EAAEiC,CAAC;EAC9B,OACEjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC,IACbjC,CAAC,CAAC,CAAC,CAAC,KAAKiC,CAAC,CAAC,CAAC,CAAC;AAEjB;AAEA;;;;;;;AAOA,OAAM,SAAUiE,MAAMA,CAAClG,CAAC,EAAEiC,CAAC;EACzB,MAAMkE,EAAE,GAAGnG,CAAC,CAAC,CAAC,CAAC;EACf,MAAMoG,EAAE,GAAGpG,CAAC,CAAC,CAAC,CAAC;EACf,MAAMqG,EAAE,GAAGrG,CAAC,CAAC,CAAC,CAAC;EACf,MAAMsG,EAAE,GAAGtG,CAAC,CAAC,CAAC,CAAC;EACf,MAAMuG,EAAE,GAAGvG,CAAC,CAAC,CAAC,CAAC;EACf,MAAMwG,EAAE,GAAGxG,CAAC,CAAC,CAAC,CAAC;EACf,MAAMyG,EAAE,GAAGzG,CAAC,CAAC,CAAC,CAAC;EACf,MAAM0G,EAAE,GAAG1G,CAAC,CAAC,CAAC,CAAC;EACf,MAAM2G,EAAE,GAAG3G,CAAC,CAAC,CAAC,CAAC;EACf,MAAM4G,EAAE,GAAG3E,CAAC,CAAC,CAAC,CAAC;EACf,MAAM4E,EAAE,GAAG5E,CAAC,CAAC,CAAC,CAAC;EACf,MAAM6E,EAAE,GAAG7E,CAAC,CAAC,CAAC,CAAC;EACf,MAAM8E,EAAE,GAAG9E,CAAC,CAAC,CAAC,CAAC;EACf,MAAM+E,EAAE,GAAG/E,CAAC,CAAC,CAAC,CAAC;EACf,MAAMgF,EAAE,GAAGhF,CAAC,CAAC,CAAC,CAAC;EACf,MAAMiF,EAAE,GAAGjF,CAAC,CAAC,CAAC,CAAC;EACf,MAAMkF,EAAE,GAAGlF,CAAC,CAAC,CAAC,CAAC;EACf,MAAMmF,EAAE,GAAGnF,CAAC,CAAC,CAAC,CAAC;EACf,OACEc,IAAI,CAACsE,GAAG,CAAClB,EAAE,GAAGS,EAAE,CAAC,IAAIlH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAAClB,EAAE,CAAC,EAAEpD,IAAI,CAACsE,GAAG,CAACT,EAAE,CAAC,CAAC,IACjF7D,IAAI,CAACsE,GAAG,CAACjB,EAAE,GAAGS,EAAE,CAAC,IAAInH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAACjB,EAAE,CAAC,EAAErD,IAAI,CAACsE,GAAG,CAACR,EAAE,CAAC,CAAC,IACjF9D,IAAI,CAACsE,GAAG,CAAChB,EAAE,GAAGS,EAAE,CAAC,IAAIpH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAAChB,EAAE,CAAC,EAAEtD,IAAI,CAACsE,GAAG,CAACP,EAAE,CAAC,CAAC,IACjF/D,IAAI,CAACsE,GAAG,CAACf,EAAE,GAAGS,EAAE,CAAC,IAAIrH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAACf,EAAE,CAAC,EAAEvD,IAAI,CAACsE,GAAG,CAACN,EAAE,CAAC,CAAC,IACjFhE,IAAI,CAACsE,GAAG,CAACd,EAAE,GAAGS,EAAE,CAAC,IAAItH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAACd,EAAE,CAAC,EAAExD,IAAI,CAACsE,GAAG,CAACL,EAAE,CAAC,CAAC,IACjFjE,IAAI,CAACsE,GAAG,CAACb,EAAE,GAAGS,EAAE,CAAC,IAAIvH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAACb,EAAE,CAAC,EAAEzD,IAAI,CAACsE,GAAG,CAACJ,EAAE,CAAC,CAAC,IACjFlE,IAAI,CAACsE,GAAG,CAACZ,EAAE,GAAGS,EAAE,CAAC,IAAIxH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAACZ,EAAE,CAAC,EAAE1D,IAAI,CAACsE,GAAG,CAACH,EAAE,CAAC,CAAC,IACjFnE,IAAI,CAACsE,GAAG,CAACX,EAAE,GAAGS,EAAE,CAAC,IAAIzH,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAACX,EAAE,CAAC,EAAE3D,IAAI,CAACsE,GAAG,CAACF,EAAE,CAAC,CAAC,IACjFpE,IAAI,CAACsE,GAAG,CAACV,EAAE,GAAGS,EAAE,CAAC,IAAI1H,QAAQ,CAAC4H,OAAO,GAAGvE,IAAI,CAACwE,GAAG,CAAC,GAAG,EAAExE,IAAI,CAACsE,GAAG,CAACV,EAAE,CAAC,EAAE5D,IAAI,CAACsE,GAAG,CAACD,EAAE,CAAC,CAAC;AAErF;AAEA;;;;AAIA,OAAO,MAAMI,GAAG,GAAGxF,QAAQ;AAE3B;;;;AAIA,OAAO,MAAMyF,GAAG,GAAG3B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}