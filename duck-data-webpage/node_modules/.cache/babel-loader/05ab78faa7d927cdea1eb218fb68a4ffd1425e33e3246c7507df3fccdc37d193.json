{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  name;\n  workerThread;\n  isRunning = true;\n  /** Promise that resolves when Job is done */\n  result;\n  _resolve = () => {};\n  _reject = () => {};\n  constructor(jobName, workerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type, payload) {\n    this.workerThread.postMessage({\n      source: 'loaders.gl',\n      // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value) {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error) {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}","map":{"version":3,"names":["assert","WorkerJob","name","workerThread","isRunning","result","_resolve","_reject","constructor","jobName","Promise","resolve","reject","postMessage","type","payload","source","done","value","error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-job.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n    name;\n    workerThread;\n    isRunning = true;\n    /** Promise that resolves when Job is done */\n    result;\n    _resolve = () => { };\n    _reject = () => { };\n    constructor(jobName, workerThread) {\n        this.name = jobName;\n        this.workerThread = workerThread;\n        this.result = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n    /**\n     * Send a message to the job's worker thread\n     * @param data any data structure, ideally consisting mostly of transferrable objects\n     */\n    postMessage(type, payload) {\n        this.workerThread.postMessage({\n            source: 'loaders.gl', // Lets worker ignore unrelated messages\n            type,\n            payload\n        });\n    }\n    /**\n     * Call to resolve the `result` Promise with the supplied value\n     */\n    done(value) {\n        assert(this.isRunning);\n        this.isRunning = false;\n        this._resolve(value);\n    }\n    /**\n     * Call to reject the `result` Promise with the supplied error\n     */\n    error(error) {\n        assert(this.isRunning);\n        this.isRunning = false;\n        this._reject(error);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C;AACA;AACA;AACA,eAAe,MAAMC,SAAS,CAAC;EAC3BC,IAAI;EACJC,YAAY;EACZC,SAAS,GAAG,IAAI;EAChB;EACAC,MAAM;EACNC,QAAQ,GAAGA,CAAA,KAAM,CAAE,CAAC;EACpBC,OAAO,GAAGA,CAAA,KAAM,CAAE,CAAC;EACnBC,WAAWA,CAACC,OAAO,EAAEN,YAAY,EAAE;IAC/B,IAAI,CAACD,IAAI,GAAGO,OAAO;IACnB,IAAI,CAACN,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,MAAM,GAAG,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAC3C,IAAI,CAACN,QAAQ,GAAGK,OAAO;MACvB,IAAI,CAACJ,OAAO,GAAGK,MAAM;IACzB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;IACvB,IAAI,CAACZ,YAAY,CAACU,WAAW,CAAC;MAC1BG,MAAM,EAAE,YAAY;MAAE;MACtBF,IAAI;MACJC;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIE,IAAIA,CAACC,KAAK,EAAE;IACRlB,MAAM,CAAC,IAAI,CAACI,SAAS,CAAC;IACtB,IAAI,CAACA,SAAS,GAAG,KAAK;IACtB,IAAI,CAACE,QAAQ,CAACY,KAAK,CAAC;EACxB;EACA;AACJ;AACA;EACIC,KAAKA,CAACA,KAAK,EAAE;IACTnB,MAAM,CAAC,IAAI,CAACI,SAAS,CAAC;IACtB,IAAI,CAACA,SAAS,GAAG,KAAK;IACtB,IAAI,CAACG,OAAO,CAACY,KAAK,CAAC;EACvB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}