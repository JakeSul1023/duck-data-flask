{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// import {copyTextureToImage} from '../debug/copy-texture-to-image';\n/** Only works with 1st device? */\nlet canvas = null;\nlet ctx = null;\n// let targetImage: HTMLImageElement | null = null;\n/** Debug utility to draw FBO contents onto screen */\n// eslint-disable-next-line\nexport function debugFramebuffer(fbo, {\n  id,\n  minimap,\n  opaque,\n  top = '0',\n  left = '0',\n  rgbaScale = 1\n}) {\n  if (!canvas) {\n    canvas = document.createElement('canvas');\n    canvas.id = id;\n    canvas.title = id;\n    canvas.style.zIndex = '100';\n    canvas.style.position = 'absolute';\n    canvas.style.top = top; // ⚠️\n    canvas.style.left = left; // ⚠️\n    canvas.style.border = 'blue 5px solid';\n    canvas.style.transform = 'scaleY(-1)';\n    document.body.appendChild(canvas);\n    ctx = canvas.getContext('2d');\n    // targetImage = new Image();\n  }\n  // const canvasHeight = (minimap ? 2 : 1) * fbo.height;\n  if (canvas.width !== fbo.width || canvas.height !== fbo.height) {\n    canvas.width = fbo.width / 2;\n    canvas.height = fbo.height / 2;\n    canvas.style.width = '400px';\n    canvas.style.height = '400px';\n  }\n  // const image = copyTextureToImage(fbo, {targetMaxHeight: 100, targetImage});\n  // ctx.drawImage(image, 0, 0);\n  const color = fbo.device.readPixelsToArrayWebGL(fbo);\n  const imageData = ctx?.createImageData(fbo.width, fbo.height);\n  if (imageData) {\n    // Full map\n    const offset = 0;\n    // if (color.some((v) => v > 0)) {\n    //   console.error('THERE IS NON-ZERO DATA IN THE FBO!');\n    // }\n    for (let i = 0; i < color.length; i += 4) {\n      imageData.data[offset + i + 0] = color[i + 0] * rgbaScale;\n      imageData.data[offset + i + 1] = color[i + 1] * rgbaScale;\n      imageData.data[offset + i + 2] = color[i + 2] * rgbaScale;\n      imageData.data[offset + i + 3] = opaque ? 255 : color[i + 3] * rgbaScale;\n    }\n    ctx?.putImageData(imageData, 0, 0);\n  }\n}","map":{"version":3,"names":["canvas","ctx","debugFramebuffer","fbo","id","minimap","opaque","top","left","rgbaScale","document","createElement","title","style","zIndex","position","border","transform","body","appendChild","getContext","width","height","color","device","readPixelsToArrayWebGL","imageData","createImageData","offset","i","length","data","putImageData"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\debug\\debug-framebuffer.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Framebuffer, Texture} from '@luma.gl/core';\n// import {copyTextureToImage} from '../debug/copy-texture-to-image';\n\n/** Only works with 1st device? */\nlet canvas: HTMLCanvasElement | null = null;\nlet ctx: CanvasRenderingContext2D | null = null;\n// let targetImage: HTMLImageElement | null = null;\n\n/** Debug utility to draw FBO contents onto screen */\n// eslint-disable-next-line\nexport function debugFramebuffer(\n  fbo: Framebuffer | Texture,\n  {\n    id,\n    minimap,\n    opaque,\n    top = '0',\n    left = '0',\n    rgbaScale = 1\n  }: {\n    id: string;\n    minimap?: boolean;\n    opaque?: boolean;\n    top?: string;\n    left?: string;\n    rgbaScale?: number;\n  }\n) {\n  if (!canvas) {\n    canvas = document.createElement('canvas');\n    canvas.id = id;\n    canvas.title = id;\n    canvas.style.zIndex = '100';\n    canvas.style.position = 'absolute';\n    canvas.style.top = top; // ⚠️\n    canvas.style.left = left; // ⚠️\n    canvas.style.border = 'blue 5px solid';\n    canvas.style.transform = 'scaleY(-1)';\n    document.body.appendChild(canvas);\n\n    ctx = canvas.getContext('2d');\n    // targetImage = new Image();\n  }\n\n  // const canvasHeight = (minimap ? 2 : 1) * fbo.height;\n  if (canvas.width !== fbo.width || canvas.height !== fbo.height) {\n    canvas.width = fbo.width / 2;\n    canvas.height = fbo.height / 2;\n    canvas.style.width = '400px';\n    canvas.style.height = '400px';\n  }\n\n  // const image = copyTextureToImage(fbo, {targetMaxHeight: 100, targetImage});\n  // ctx.drawImage(image, 0, 0);\n\n  const color = fbo.device.readPixelsToArrayWebGL(fbo);\n  const imageData = ctx?.createImageData(fbo.width, fbo.height);\n  if (imageData) {\n    // Full map\n    const offset = 0;\n    // if (color.some((v) => v > 0)) {\n    //   console.error('THERE IS NON-ZERO DATA IN THE FBO!');\n    // }\n    for (let i = 0; i < color.length; i += 4) {\n      imageData.data[offset + i + 0] = color[i + 0] * rgbaScale;\n      imageData.data[offset + i + 1] = color[i + 1] * rgbaScale;\n      imageData.data[offset + i + 2] = color[i + 2] * rgbaScale;\n      imageData.data[offset + i + 3] = opaque ? 255 : color[i + 3] * rgbaScale;\n    }\n    ctx?.putImageData(imageData, 0, 0);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA;AAEA;AACA,IAAIA,MAAM,GAA6B,IAAI;AAC3C,IAAIC,GAAG,GAAoC,IAAI;AAC/C;AAEA;AACA;AACA,OAAM,SAAUC,gBAAgBA,CAC9BC,GAA0B,EAC1B;EACEC,EAAE;EACFC,OAAO;EACPC,MAAM;EACNC,GAAG,GAAG,GAAG;EACTC,IAAI,GAAG,GAAG;EACVC,SAAS,GAAG;AAAC,CAQd;EAED,IAAI,CAACT,MAAM,EAAE;IACXA,MAAM,GAAGU,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACzCX,MAAM,CAACI,EAAE,GAAGA,EAAE;IACdJ,MAAM,CAACY,KAAK,GAAGR,EAAE;IACjBJ,MAAM,CAACa,KAAK,CAACC,MAAM,GAAG,KAAK;IAC3Bd,MAAM,CAACa,KAAK,CAACE,QAAQ,GAAG,UAAU;IAClCf,MAAM,CAACa,KAAK,CAACN,GAAG,GAAGA,GAAG,CAAC,CAAC;IACxBP,MAAM,CAACa,KAAK,CAACL,IAAI,GAAGA,IAAI,CAAC,CAAC;IAC1BR,MAAM,CAACa,KAAK,CAACG,MAAM,GAAG,gBAAgB;IACtChB,MAAM,CAACa,KAAK,CAACI,SAAS,GAAG,YAAY;IACrCP,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACnB,MAAM,CAAC;IAEjCC,GAAG,GAAGD,MAAM,CAACoB,UAAU,CAAC,IAAI,CAAC;IAC7B;EACF;EAEA;EACA,IAAIpB,MAAM,CAACqB,KAAK,KAAKlB,GAAG,CAACkB,KAAK,IAAIrB,MAAM,CAACsB,MAAM,KAAKnB,GAAG,CAACmB,MAAM,EAAE;IAC9DtB,MAAM,CAACqB,KAAK,GAAGlB,GAAG,CAACkB,KAAK,GAAG,CAAC;IAC5BrB,MAAM,CAACsB,MAAM,GAAGnB,GAAG,CAACmB,MAAM,GAAG,CAAC;IAC9BtB,MAAM,CAACa,KAAK,CAACQ,KAAK,GAAG,OAAO;IAC5BrB,MAAM,CAACa,KAAK,CAACS,MAAM,GAAG,OAAO;EAC/B;EAEA;EACA;EAEA,MAAMC,KAAK,GAAGpB,GAAG,CAACqB,MAAM,CAACC,sBAAsB,CAACtB,GAAG,CAAC;EACpD,MAAMuB,SAAS,GAAGzB,GAAG,EAAE0B,eAAe,CAACxB,GAAG,CAACkB,KAAK,EAAElB,GAAG,CAACmB,MAAM,CAAC;EAC7D,IAAII,SAAS,EAAE;IACb;IACA,MAAME,MAAM,GAAG,CAAC;IAChB;IACA;IACA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACO,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACxCH,SAAS,CAACK,IAAI,CAACH,MAAM,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAGN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,GAAGpB,SAAS;MACzDiB,SAAS,CAACK,IAAI,CAACH,MAAM,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAGN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,GAAGpB,SAAS;MACzDiB,SAAS,CAACK,IAAI,CAACH,MAAM,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAGN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,GAAGpB,SAAS;MACzDiB,SAAS,CAACK,IAAI,CAACH,MAAM,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAGvB,MAAM,GAAG,GAAG,GAAGiB,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,GAAGpB,SAAS;IAC1E;IACAR,GAAG,EAAE+B,YAAY,CAACN,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;EACpC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}