{"ast":null,"code":"// SVG parsing has limitations, e.g:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=606319\nconst SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nconst SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\nexport function isSVG(url) {\n  return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));\n}\nexport function getBlobOrSVGDataUrl(arrayBuffer, url) {\n  if (isSVG(url)) {\n    // Prepare a properly tagged data URL, and load using normal mechanism\n    const textDecoder = new TextDecoder();\n    let xmlText = textDecoder.decode(arrayBuffer);\n    // TODO Escape in browser to support e.g. Chinese characters\n    try {\n      if (typeof unescape === 'function' && typeof encodeURIComponent === 'function') {\n        xmlText = unescape(encodeURIComponent(xmlText));\n      }\n    } catch (error) {\n      throw new Error(error.message);\n    }\n    // base64 encoding is safer. utf-8 fails in some browsers\n    const src = `data:image/svg+xml;base64,${btoa(xmlText)}`;\n    return src;\n  }\n  return getBlob(arrayBuffer, url);\n}\nexport function getBlob(arrayBuffer, url) {\n  if (isSVG(url)) {\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=606319\n    // return new Blob([new Uint8Array(arrayBuffer)], {type: 'image/svg+xml'});\n    throw new Error('SVG cannot be parsed directly to imagebitmap');\n  }\n  // TODO - how to determine mime type? Param? Sniff here?\n  return new Blob([new Uint8Array(arrayBuffer)]); // MIME type not needed?\n}","map":{"version":3,"names":["SVG_DATA_URL_PATTERN","SVG_URL_PATTERN","isSVG","url","test","getBlobOrSVGDataUrl","arrayBuffer","textDecoder","TextDecoder","xmlText","decode","unescape","encodeURIComponent","error","Error","message","src","btoa","getBlob","Blob","Uint8Array"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/images/dist/lib/parsers/svg-utils.js"],"sourcesContent":["// SVG parsing has limitations, e.g:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=606319\nconst SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nconst SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\nexport function isSVG(url) {\n    return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));\n}\nexport function getBlobOrSVGDataUrl(arrayBuffer, url) {\n    if (isSVG(url)) {\n        // Prepare a properly tagged data URL, and load using normal mechanism\n        const textDecoder = new TextDecoder();\n        let xmlText = textDecoder.decode(arrayBuffer);\n        // TODO Escape in browser to support e.g. Chinese characters\n        try {\n            if (typeof unescape === 'function' && typeof encodeURIComponent === 'function') {\n                xmlText = unescape(encodeURIComponent(xmlText));\n            }\n        }\n        catch (error) {\n            throw new Error(error.message);\n        }\n        // base64 encoding is safer. utf-8 fails in some browsers\n        const src = `data:image/svg+xml;base64,${btoa(xmlText)}`;\n        return src;\n    }\n    return getBlob(arrayBuffer, url);\n}\nexport function getBlob(arrayBuffer, url) {\n    if (isSVG(url)) {\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=606319\n        // return new Blob([new Uint8Array(arrayBuffer)], {type: 'image/svg+xml'});\n        throw new Error('SVG cannot be parsed directly to imagebitmap');\n    }\n    // TODO - how to determine mime type? Param? Sniff here?\n    return new Blob([new Uint8Array(arrayBuffer)]); // MIME type not needed?\n}\n"],"mappings":"AAAA;AACA;AACA,MAAMA,oBAAoB,GAAG,uBAAuB;AACpD,MAAMC,eAAe,GAAG,mBAAmB;AAC3C,OAAO,SAASC,KAAKA,CAACC,GAAG,EAAE;EACvB,OAAOA,GAAG,KAAKH,oBAAoB,CAACI,IAAI,CAACD,GAAG,CAAC,IAAIF,eAAe,CAACG,IAAI,CAACD,GAAG,CAAC,CAAC;AAC/E;AACA,OAAO,SAASE,mBAAmBA,CAACC,WAAW,EAAEH,GAAG,EAAE;EAClD,IAAID,KAAK,CAACC,GAAG,CAAC,EAAE;IACZ;IACA,MAAMI,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC;IACrC,IAAIC,OAAO,GAAGF,WAAW,CAACG,MAAM,CAACJ,WAAW,CAAC;IAC7C;IACA,IAAI;MACA,IAAI,OAAOK,QAAQ,KAAK,UAAU,IAAI,OAAOC,kBAAkB,KAAK,UAAU,EAAE;QAC5EH,OAAO,GAAGE,QAAQ,CAACC,kBAAkB,CAACH,OAAO,CAAC,CAAC;MACnD;IACJ,CAAC,CACD,OAAOI,KAAK,EAAE;MACV,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;IAClC;IACA;IACA,MAAMC,GAAG,GAAG,6BAA6BC,IAAI,CAACR,OAAO,CAAC,EAAE;IACxD,OAAOO,GAAG;EACd;EACA,OAAOE,OAAO,CAACZ,WAAW,EAAEH,GAAG,CAAC;AACpC;AACA,OAAO,SAASe,OAAOA,CAACZ,WAAW,EAAEH,GAAG,EAAE;EACtC,IAAID,KAAK,CAACC,GAAG,CAAC,EAAE;IACZ;IACA;IACA,MAAM,IAAIW,KAAK,CAAC,8CAA8C,CAAC;EACnE;EACA;EACA,OAAO,IAAIK,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACd,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}