{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray(options) {\n  const {\n    target,\n    source,\n    start = 0,\n    count = 1\n  } = options;\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n  return options.target;\n}","map":{"version":3,"names":["fillArray","options","target","source","start","count","length","total","copied","i","copyWithin"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\utils\\fill-array.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumericArray} from '@math.gl/types';\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray(options: {\n  target: NumericArray;\n  source: NumericArray;\n  start?: number;\n  count?: number;\n}): NumericArray {\n  const {target, source, start = 0, count = 1} = options;\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return options.target;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;AACA,OAAM,SAAUA,SAASA,CAACC,OAKzB;EACC,MAAM;IAACC,MAAM;IAAEC,MAAM;IAAEC,KAAK,GAAG,CAAC;IAAEC,KAAK,GAAG;EAAC,CAAC,GAAGJ,OAAO;EACtD,MAAMK,MAAM,GAAGH,MAAM,CAACG,MAAM;EAC5B,MAAMC,KAAK,GAAGF,KAAK,GAAGC,MAAM;EAC5B,IAAIE,MAAM,GAAG,CAAC;EACd,KAAK,IAAIC,CAAC,GAAGL,KAAK,EAAEI,MAAM,GAAGF,MAAM,EAAEE,MAAM,EAAE,EAAE;IAC7CN,MAAM,CAACO,CAAC,EAAE,CAAC,GAAGN,MAAM,CAACK,MAAM,CAAC;EAC9B;EAEA,OAAOA,MAAM,GAAGD,KAAK,EAAE;IACrB;IACA;IACA,IAAIC,MAAM,GAAGD,KAAK,GAAGC,MAAM,EAAE;MAC3BN,MAAM,CAACQ,UAAU,CAACN,KAAK,GAAGI,MAAM,EAAEJ,KAAK,EAAEA,KAAK,GAAGI,MAAM,CAAC;MACxDA,MAAM,IAAI,CAAC;IACb,CAAC,MAAM;MACLN,MAAM,CAACQ,UAAU,CAACN,KAAK,GAAGI,MAAM,EAAEJ,KAAK,EAAEA,KAAK,GAAGG,KAAK,GAAGC,MAAM,CAAC;MAChEA,MAAM,GAAGD,KAAK;IAChB;EACF;EAEA,OAAON,OAAO,CAACC,MAAM;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}