{"ast":null,"code":"// probe.gl, MIT license\nimport Stat from \"./stat.js\";\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  constructor(options) {\n    this.stats = {};\n    this.id = options.id;\n    this.stats = {};\n    this._initializeStats(options.stats);\n    Object.seal(this);\n  }\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name, type = 'count') {\n    return this._getOrCreate({\n      name,\n      type\n    });\n  }\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n  /** Reset all stats */\n  reset() {\n    for (const stat of Object.values(this.stats)) {\n      stat.reset();\n    }\n    return this;\n  }\n  forEach(fn) {\n    for (const stat of Object.values(this.stats)) {\n      fn(stat);\n    }\n  }\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n    return table;\n  }\n  _initializeStats(stats = []) {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n  _getOrCreate(stat) {\n    const {\n      name,\n      type\n    } = stat;\n    let result = this.stats[name];\n    if (!result) {\n      if (stat instanceof Stat) {\n        result = stat;\n      } else {\n        result = new Stat(name, type);\n      }\n      this.stats[name] = result;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["Stat","Stats","constructor","options","stats","id","_initializeStats","Object","seal","get","name","type","_getOrCreate","size","keys","length","reset","stat","values","forEach","fn","getTable","table","time","count","average","getAverageTime","hz","getHz","result"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@probe.gl\\stats\\src\\lib\\stats.ts"],"sourcesContent":["// probe.gl, MIT license\n\nimport Stat from './stat';\n\ntype TableEntry = {\n  time: number;\n  count: number;\n  average: number;\n  hz: number;\n};\n\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  readonly id: string;\n  readonly stats: Record<string, Stat> = {};\n\n  constructor(options: {id: string; stats?: Stats | Stat[] | {name: string; type?: string}[]}) {\n    this.id = options.id;\n    this.stats = {};\n\n    this._initializeStats(options.stats);\n\n    Object.seal(this);\n  }\n\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name: string, type: string = 'count'): Stat {\n    return this._getOrCreate({name, type});\n  }\n\n  get size(): number {\n    return Object.keys(this.stats).length;\n  }\n\n  /** Reset all stats */\n  reset(): this {\n    for (const stat of Object.values(this.stats)) {\n      stat.reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn: (stat: Stat) => void): void {\n    for (const stat of Object.values(this.stats)) {\n      fn(stat);\n    }\n  }\n\n  getTable(): Record<string, TableEntry> {\n    const table: Record<string, TableEntry> = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats: Stats | Stat[] | {name: string; type?: string}[] = []): void {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat: Stat | {name: string, type?: string}): Stat {\n    const {name, type} = stat;\n    let result = this.stats[name];\n    if (!result) {\n      if (stat instanceof Stat) {\n        result = stat;\n      } else {\n        result = new Stat(name, type);\n      }\n      this.stats[name] = result;\n    }\n    return result;\n  }\n}\n"],"mappings":"AAAA;AAEA,OAAOA,IAAI;AASX;AACA,eAAc,MAAOC,KAAK;EAIxBC,YAAYC,OAA+E;IAFlF,KAAAC,KAAK,GAAyB,EAAE;IAGvC,IAAI,CAACC,EAAE,GAAGF,OAAO,CAACE,EAAE;IACpB,IAAI,CAACD,KAAK,GAAG,EAAE;IAEf,IAAI,CAACE,gBAAgB,CAACH,OAAO,CAACC,KAAK,CAAC;IAEpCG,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;EACnB;EAEA;EACAC,GAAGA,CAACC,IAAY,EAAEC,IAAA,GAAe,OAAO;IACtC,OAAO,IAAI,CAACC,YAAY,CAAC;MAACF,IAAI;MAAEC;IAAI,CAAC,CAAC;EACxC;EAEA,IAAIE,IAAIA,CAAA;IACN,OAAON,MAAM,CAACO,IAAI,CAAC,IAAI,CAACV,KAAK,CAAC,CAACW,MAAM;EACvC;EAEA;EACAC,KAAKA,CAAA;IACH,KAAK,MAAMC,IAAI,IAAIV,MAAM,CAACW,MAAM,CAAC,IAAI,CAACd,KAAK,CAAC,EAAE;MAC5Ca,IAAI,CAACD,KAAK,EAAE;IACd;IAEA,OAAO,IAAI;EACb;EAEAG,OAAOA,CAACC,EAAwB;IAC9B,KAAK,MAAMH,IAAI,IAAIV,MAAM,CAACW,MAAM,CAAC,IAAI,CAACd,KAAK,CAAC,EAAE;MAC5CgB,EAAE,CAACH,IAAI,CAAC;IACV;EACF;EAEAI,QAAQA,CAAA;IACN,MAAMC,KAAK,GAA+B,EAAE;IAC5C,IAAI,CAACH,OAAO,CAACF,IAAI,IAAG;MAClBK,KAAK,CAACL,IAAI,CAACP,IAAI,CAAC,GAAG;QACjBa,IAAI,EAAEN,IAAI,CAACM,IAAI,IAAI,CAAC;QACpBC,KAAK,EAAEP,IAAI,CAACO,KAAK,IAAI,CAAC;QACtBC,OAAO,EAAER,IAAI,CAACS,cAAc,EAAE,IAAI,CAAC;QACnCC,EAAE,EAAEV,IAAI,CAACW,KAAK,EAAE,IAAI;OACrB;IACH,CAAC,CAAC;IAEF,OAAON,KAAK;EACd;EAEAhB,gBAAgBA,CAACF,KAAA,GAA0D,EAAE;IAC3EA,KAAK,CAACe,OAAO,CAACF,IAAI,IAAI,IAAI,CAACL,YAAY,CAACK,IAAI,CAAC,CAAC;EAChD;EAEAL,YAAYA,CAACK,IAA0C;IACrD,MAAM;MAACP,IAAI;MAAEC;IAAI,CAAC,GAAGM,IAAI;IACzB,IAAIY,MAAM,GAAG,IAAI,CAACzB,KAAK,CAACM,IAAI,CAAC;IAC7B,IAAI,CAACmB,MAAM,EAAE;MACX,IAAIZ,IAAI,YAAYjB,IAAI,EAAE;QACxB6B,MAAM,GAAGZ,IAAI;MACf,CAAC,MAAM;QACLY,MAAM,GAAG,IAAI7B,IAAI,CAACU,IAAI,EAAEC,IAAI,CAAC;MAC/B;MACA,IAAI,CAACP,KAAK,CAACM,IAAI,CAAC,GAAGmB,MAAM;IAC3B;IACA,OAAOA,MAAM;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}