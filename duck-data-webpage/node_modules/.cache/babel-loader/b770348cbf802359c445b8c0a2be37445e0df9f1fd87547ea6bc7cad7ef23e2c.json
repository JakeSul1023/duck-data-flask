{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport const defaultColorRange = [[255, 255, 178], [254, 217, 118], [254, 178, 76], [253, 141, 60], [240, 59, 32], [189, 0, 38]];\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n  if (Number.isFinite(colorRange[0])) {\n    // its already a flat array.\n    flatArray = new ArrayType(colorRange);\n  } else {\n    // flatten it\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n  return flatArray;\n}\nexport const COLOR_RANGE_FILTER = {\n  linear: 'linear',\n  quantile: 'nearest',\n  quantize: 'nearest',\n  ordinal: 'nearest'\n};\nexport function updateColorRangeTexture(texture, type) {\n  texture.setSampler({\n    minFilter: COLOR_RANGE_FILTER[type],\n    magFilter: COLOR_RANGE_FILTER[type]\n  });\n}\nexport function createColorRangeTexture(device, colorRange, type = 'linear') {\n  const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n  return device.createTexture({\n    format: 'rgba8unorm',\n    mipmaps: false,\n    sampler: {\n      minFilter: COLOR_RANGE_FILTER[type],\n      magFilter: COLOR_RANGE_FILTER[type],\n      addressModeU: 'clamp-to-edge',\n      addressModeV: 'clamp-to-edge'\n    },\n    data: colors,\n    width: colors.length / 4,\n    height: 1\n  });\n}\n//# sourceMappingURL=color-utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}