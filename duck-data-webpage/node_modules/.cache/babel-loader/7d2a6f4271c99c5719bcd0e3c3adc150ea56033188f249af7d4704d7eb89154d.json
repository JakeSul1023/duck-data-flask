{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Creates a source from a service\n * If type is not supplied, will try to automatically detect the the\n * @param url URL to the data source\n * @param type type of source. if not known, set to 'auto'\n * @returns an DataSource instance\n */\nexport function createDataSource(data, sources, props) {\n  const {\n    type = 'auto'\n  } = props;\n  const source = type === 'auto' ? selectSource(data, sources) : getSourceOfType(type, sources);\n  if (!source) {\n    throw new Error('Not a valid image source type');\n  }\n  return source.createDataSource(data, props);\n}\n// TODO - use selectSource...\n/** Guess service type from URL */\nfunction selectSource(url, sources) {\n  for (const service of sources) {\n    // @ts-expect-error\n    if (service.testURL && service.testURL(url)) {\n      return service;\n    }\n  }\n  return null;\n}\n/** Guess service type from URL */\nfunction getSourceOfType(type, sources) {\n  for (const service of sources) {\n    if (service.type === type) {\n      return service;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["createDataSource","data","sources","props","type","source","selectSource","getSourceOfType","Error","url","service","testURL"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/api/create-data-source.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Creates a source from a service\n * If type is not supplied, will try to automatically detect the the\n * @param url URL to the data source\n * @param type type of source. if not known, set to 'auto'\n * @returns an DataSource instance\n */\nexport function createDataSource(data, sources, props) {\n    const { type = 'auto' } = props;\n    const source = type === 'auto' ? selectSource(data, sources) : getSourceOfType(type, sources);\n    if (!source) {\n        throw new Error('Not a valid image source type');\n    }\n    return source.createDataSource(data, props);\n}\n// TODO - use selectSource...\n/** Guess service type from URL */\nfunction selectSource(url, sources) {\n    for (const service of sources) {\n        // @ts-expect-error\n        if (service.testURL && service.testURL(url)) {\n            return service;\n        }\n    }\n    return null;\n}\n/** Guess service type from URL */\nfunction getSourceOfType(type, sources) {\n    for (const service of sources) {\n        if (service.type === type) {\n            return service;\n        }\n    }\n    return null;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAgBA,CAACC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAE;EACnD,MAAM;IAAEC,IAAI,GAAG;EAAO,CAAC,GAAGD,KAAK;EAC/B,MAAME,MAAM,GAAGD,IAAI,KAAK,MAAM,GAAGE,YAAY,CAACL,IAAI,EAAEC,OAAO,CAAC,GAAGK,eAAe,CAACH,IAAI,EAAEF,OAAO,CAAC;EAC7F,IAAI,CAACG,MAAM,EAAE;IACT,MAAM,IAAIG,KAAK,CAAC,+BAA+B,CAAC;EACpD;EACA,OAAOH,MAAM,CAACL,gBAAgB,CAACC,IAAI,EAAEE,KAAK,CAAC;AAC/C;AACA;AACA;AACA,SAASG,YAAYA,CAACG,GAAG,EAAEP,OAAO,EAAE;EAChC,KAAK,MAAMQ,OAAO,IAAIR,OAAO,EAAE;IAC3B;IACA,IAAIQ,OAAO,CAACC,OAAO,IAAID,OAAO,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;MACzC,OAAOC,OAAO;IAClB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA,SAASH,eAAeA,CAACH,IAAI,EAAEF,OAAO,EAAE;EACpC,KAAK,MAAMQ,OAAO,IAAIR,OAAO,EAAE;IAC3B,IAAIQ,OAAO,CAACN,IAAI,KAAKA,IAAI,EAAE;MACvB,OAAOM,OAAO;IAClB;EACJ;EACA,OAAO,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}