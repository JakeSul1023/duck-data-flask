{"ast":null,"code":"import { AttrRecognizer } from \"./attribute.js\";\nimport { TOUCH_ACTION_NONE } from \"../touchaction/touchaction-Consts.js\";\nimport { RecognizerState } from \"../recognizer/recognizer-state.js\";\nconst EVENT_NAMES = ['', 'start', 'move', 'end', 'cancel'];\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n */\nexport class RotateRecognizer extends AttrRecognizer {\n  constructor(options = {}) {\n    super({\n      enable: true,\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2,\n      ...options\n    });\n  }\n  getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  }\n  getEventNames() {\n    return EVENT_NAMES.map(suffix => this.options.event + suffix);\n  }\n  attrTest(input) {\n    return super.attrTest(input) && (Math.abs(input.rotation) > this.options.threshold || Boolean(this.state & RecognizerState.Began));\n  }\n}","map":{"version":3,"names":["AttrRecognizer","TOUCH_ACTION_NONE","RecognizerState","EVENT_NAMES","RotateRecognizer","constructor","options","enable","event","threshold","pointers","getTouchAction","getEventNames","map","suffix","attrTest","input","Math","abs","rotation","Boolean","state","Began"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\recognizers\\rotate.ts"],"sourcesContent":["import {AttrRecognizer} from './attribute';\nimport {TOUCH_ACTION_NONE} from '../touchaction/touchaction-Consts';\nimport {RecognizerState} from '../recognizer/recognizer-state';\nimport type {HammerInput} from '../input/types';\n\nexport type RotateRecognizerOptions = {\n  /** Name of the event.\n   * @default 'rotate'\n   */\n  event?: string;\n  /** Enable this event.\n   * @default true\n   */\n  enable?: boolean;\n  /** Required number of pointers, with a minimum of 2.\n   * @default 2\n   */\n  pointers?: number;\n  /** Minimal rotation before recognizing.\n   * @default 0\n   */\n  threshold?: number;\n};\n\nconst EVENT_NAMES = ['', 'start', 'move', 'end', 'cancel'] as const;\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n */\nexport class RotateRecognizer extends AttrRecognizer<Required<RotateRecognizerOptions>> {\n  constructor(options: RotateRecognizerOptions = {}) {\n    super({\n      enable: true,\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2,\n      ...options\n    });\n  }\n\n  getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  }\n\n  getEventNames(): string[] {\n    return EVENT_NAMES.map((suffix) => this.options.event + suffix);\n  }\n\n  attrTest(input: HammerInput): boolean {\n    return (\n      super.attrTest(input) &&\n      (Math.abs(input.rotation) > this.options.threshold ||\n        Boolean(this.state & RecognizerState.Began))\n    );\n  }\n}\n"],"mappings":"AAAA,SAAQA,cAAc,QAAC;AACvB,SAAQC,iBAAiB,QAAC;AAC1B,SAAQC,eAAe,QAAC;AAsBxB,MAAMC,WAAW,GAAG,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAU;AAEnE;;;;AAIA,OAAM,MAAOC,gBAAiB,SAAQJ,cAAiD;EACrFK,YAAYC,OAAA,GAAmC,EAAE;IAC/C,KAAK,CAAC;MACJC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,QAAQ;MACfC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE,CAAC;MACX,GAAGJ;KACJ,CAAC;EACJ;EAEAK,cAAcA,CAAA;IACZ,OAAO,CAACV,iBAAiB,CAAC;EAC5B;EAEAW,aAAaA,CAAA;IACX,OAAOT,WAAW,CAACU,GAAG,CAAEC,MAAM,IAAK,IAAI,CAACR,OAAO,CAACE,KAAK,GAAGM,MAAM,CAAC;EACjE;EAEAC,QAAQA,CAACC,KAAkB;IACzB,OACE,KAAK,CAACD,QAAQ,CAACC,KAAK,CAAC,KACpBC,IAAI,CAACC,GAAG,CAACF,KAAK,CAACG,QAAQ,CAAC,GAAG,IAAI,CAACb,OAAO,CAACG,SAAS,IAChDW,OAAO,CAAC,IAAI,CAACC,KAAK,GAAGnB,eAAe,CAACoB,KAAK,CAAC,CAAC;EAElD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}