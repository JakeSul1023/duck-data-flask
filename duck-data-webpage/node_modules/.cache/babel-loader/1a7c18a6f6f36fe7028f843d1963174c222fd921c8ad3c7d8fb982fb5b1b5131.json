{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBrowser } from \"../env-utils/globals.js\";\nconst NOT_IMPLEMENTED = new Error('Not implemented');\n/**\n * FileSystem pass-through for Node.js\n * Compatible with BrowserFileSystem.\n * @note Dummy implementation, not used (constructor returns a real NodeFileSystem instance)\n * @param options\n */\nexport class NodeFileSystemFacade {\n  // implements FileSystem\n  constructor(options) {\n    if (globalThis.loaders?.NodeFileSystem) {\n      return new globalThis.loaders.NodeFileSystem(options);\n    }\n    if (isBrowser) {\n      throw new Error('Can\\'t instantiate NodeFileSystem in browser.');\n    }\n    throw new Error('Can\\'t instantiate NodeFileSystem. Make sure to import @loaders.gl/polyfills first.');\n  }\n  // DUMMY IMPLEMENTATION, not used (constructor returns a real NodeFileSystem instance)\n  // implements RandomAccessReadFileSystem\n  readable = true;\n  writable = true;\n  async openReadableFile(path, flags) {\n    throw NOT_IMPLEMENTED;\n  }\n  // implements RandomAccessWriteFileSystem\n  async openWritableFile(path, flags, mode) {\n    throw NOT_IMPLEMENTED;\n  }\n  // Implements file system\n  async readdir() {\n    let dirname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.';\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    throw NOT_IMPLEMENTED;\n  }\n  async stat(path, options) {\n    throw NOT_IMPLEMENTED;\n  }\n  async unlink(path) {\n    throw NOT_IMPLEMENTED;\n  }\n  async fetch(path, options) {\n    throw NOT_IMPLEMENTED;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}