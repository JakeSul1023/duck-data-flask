{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { filterProps } from \"../common/utils/prop-utils.js\";\n/** Legacy AggregationLayer, to be removed in v9.1 */\nclass AggregationLayer extends CompositeLayer {\n  initializeAggregationLayer(dimensions) {\n    super.initializeState(this.context);\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n  updateState(opts) {\n    super.updateState(opts);\n    const {\n      changeFlags\n    } = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({\n      changedAttributes\n    });\n  }\n  getAttributes() {\n    return this.getAttributeManager().getAttributes();\n  }\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getShaderModuleProps() but doesn't inlcude `effects` it is not needed for aggregation\n    const {\n      viewport,\n      mousePosition,\n      device\n    } = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      picking: {\n        isActive: 0\n      },\n      // @ts-expect-error TODO - assuming WebGL context\n      devicePixelRatio: device.canvasContext.cssToDeviceRatio()\n    });\n    return moduleSettings;\n  }\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(updateOpts, params = {}) {\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateOpts;\n    const {\n      compareAll = false,\n      dimension\n    } = params;\n    const {\n      ignoreProps\n    } = this.state;\n    const {\n      props: dataProps,\n      accessors = []\n    } = dimension;\n    const {\n      updateTriggersChanged\n    } = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name) {\n    const {\n      changedAttributes\n    } = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n  // Private\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.device, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\nAggregationLayer.layerName = 'AggregationLayer';\nexport default AggregationLayer;\n// Helper methods\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}","map":{"version":3,"names":["CompositeLayer","AttributeManager","_compareProps","compareProps","filterProps","AggregationLayer","initializeAggregationLayer","dimensions","initializeState","context","setState","ignoreProps","constructor","_propTypes","data","props","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getModuleSettings","viewport","mousePosition","device","moduleSettings","Object","assign","create","picking","isActive","devicePixelRatio","canvasContext","cssToDeviceRatio","isAggregationDirty","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","dataChanged","all","accessor","newProps","propTypes","name","isAttributeChanged","isObjectEmpty","undefined","_getAttributeManager","id","stats","layerName","obj","isEmpty","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\heatmap-layer\\aggregation-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  CompositeLayer,\n  AttributeManager,\n  LayerDataSource,\n  _compareProps as compareProps,\n  UpdateParameters,\n  CompositeLayerProps,\n  Attribute\n} from '@deck.gl/core';\nimport {filterProps} from '../common/utils/prop-utils';\n\nexport type AggregationLayerProps<DataT> = CompositeLayerProps & {\n  data: LayerDataSource<DataT>;\n};\n\n/** Legacy AggregationLayer, to be removed in v9.1 */\nexport default abstract class AggregationLayer<\n  DataT,\n  ExtraPropsT extends {} = {}\n> extends CompositeLayer<Required<AggregationLayer<DataT>> & ExtraPropsT> {\n  static layerName = 'AggregationLayer';\n\n  state!: {\n    ignoreProps?: Record<string, any>;\n    dimensions?: any;\n    changedAttributes?: Record<string, any>;\n  };\n\n  initializeAggregationLayer(dimensions: any) {\n    super.initializeState(this.context);\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps((this.constructor as any)._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes(): {[id: string]: Attribute} {\n    return this.getAttributeManager()!.getAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getShaderModuleProps() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, device} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      picking: {\n        isActive: 0\n      },\n      // @ts-expect-error TODO - assuming WebGL context\n      devicePixelRatio: device.canvasContext.cssToDeviceRatio()\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(\n    updateOpts,\n    params: {compareAll?: boolean; dimension?: any} = {}\n  ): string | boolean {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: (this.constructor as any)._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name?: string) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.device, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}