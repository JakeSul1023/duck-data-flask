{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { NodeFileFacade as NodeFile } from \"../files/node-file-facade.js\";\n/**\n * Provides file data using node fs library\n * @deprecated - will be replaced with ReadableFile\n */\nexport class FileHandleFile {\n  /** The FileHandle from which data is provided */\n  file;\n  /** Create a new FileHandleFile */\n  constructor(path, append = false) {\n    this.file = new NodeFile(path, append ? 'a+' : 'r');\n  }\n  /**\n   * Truncates the file descriptor.\n   * @param length desired file lenght\n   */\n  async truncate(length) {\n    await this.file.truncate(length);\n  }\n  /**\n   * Append data to a file.\n   * @param buffer data to append\n   */\n  async append(buffer) {\n    await this.file.append(buffer);\n  }\n  /** Close file */\n  async destroy() {\n    await this.file.close();\n  }\n  /**\n   * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint8(offset) {\n    const arrayBuffer = await this.file.read(offset, 1);\n    const val = new Uint8Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 16-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint16(offset) {\n    const arrayBuffer = await this.file.read(offset, 2);\n    const val = new Uint16Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint32(offset) {\n    const arrayBuffer = await this.file.read(offset, 4);\n    const val = new Uint32Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getBigUint64(offset) {\n    const arrayBuffer = await this.file.read(offset, 8);\n    const val = new BigInt64Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in byte, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  async slice(startOffset, endOffset) {\n    const bigLength = endOffset - startOffset;\n    if (bigLength > Number.MAX_SAFE_INTEGER) {\n      throw new Error('too big slice');\n    }\n    const length = Number(bigLength);\n    return await this.file.read(startOffset, length);\n  }\n  /**\n   * the length (in bytes) of the data.\n   */\n  get length() {\n    return this.file.bigsize;\n  }\n}","map":{"version":3,"names":["NodeFileFacade","NodeFile","FileHandleFile","file","constructor","path","append","truncate","length","buffer","destroy","close","getUint8","offset","arrayBuffer","read","val","Uint8Array","at","undefined","Error","getUint16","Uint16Array","getUint32","Uint32Array","getBigUint64","BigInt64Array","slice","startOffset","endOffset","bigLength","Number","MAX_SAFE_INTEGER","bigsize"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/loader-utils/dist/lib/file-provider/file-handle-file.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { NodeFileFacade as NodeFile } from \"../files/node-file-facade.js\";\n/**\n * Provides file data using node fs library\n * @deprecated - will be replaced with ReadableFile\n */\nexport class FileHandleFile {\n    /** The FileHandle from which data is provided */\n    file;\n    /** Create a new FileHandleFile */\n    constructor(path, append = false) {\n        this.file = new NodeFile(path, append ? 'a+' : 'r');\n    }\n    /**\n     * Truncates the file descriptor.\n     * @param length desired file lenght\n     */\n    async truncate(length) {\n        await this.file.truncate(length);\n    }\n    /**\n     * Append data to a file.\n     * @param buffer data to append\n     */\n    async append(buffer) {\n        await this.file.append(buffer);\n    }\n    /** Close file */\n    async destroy() {\n        await this.file.close();\n    }\n    /**\n     * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint8(offset) {\n        const arrayBuffer = await this.file.read(offset, 1);\n        const val = new Uint8Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * Gets an unsigned 16-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint16(offset) {\n        const arrayBuffer = await this.file.read(offset, 2);\n        const val = new Uint16Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint32(offset) {\n        const arrayBuffer = await this.file.read(offset, 4);\n        const val = new Uint32Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getBigUint64(offset) {\n        const arrayBuffer = await this.file.read(offset, 8);\n        const val = new BigInt64Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n     * @param startOffset The offset, in byte, from the start of the file where to start reading the data.\n     * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n     */\n    async slice(startOffset, endOffset) {\n        const bigLength = endOffset - startOffset;\n        if (bigLength > Number.MAX_SAFE_INTEGER) {\n            throw new Error('too big slice');\n        }\n        const length = Number(bigLength);\n        return await this.file.read(startOffset, length);\n    }\n    /**\n     * the length (in bytes) of the data.\n     */\n    get length() {\n        return this.file.bigsize;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}