{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { arrayEqual, arrayCopy } from \"../utils/array-equal.js\";\n/**\n * A uniform block holds values of the of uniform values for one uniform block / buffer.\n * It also does some book keeping on what has changed, to minimize unnecessary writes to uniform buffers.\n */\nexport class UniformBlock {\n  name;\n  uniforms = {};\n  modifiedUniforms = {};\n  modified = true;\n  bindingLayout = {};\n  needsRedraw = 'initialized';\n  constructor(props) {\n    this.name = props?.name || 'unnamed';\n    // TODO - Extract uniform layout from the shaderLayout object\n    if (props?.name && props?.shaderLayout) {\n      const binding = props?.shaderLayout.bindings?.find(binding_ => binding_.type === 'uniform' && binding_.name === props?.name);\n      if (!binding) {\n        throw new Error(props?.name);\n      }\n      const uniformBlock = binding;\n      for (const uniform of uniformBlock.uniforms || []) {\n        this.bindingLayout[uniform.name] = uniform;\n      }\n    }\n  }\n  /** Set a map of uniforms */\n  setUniforms(uniforms) {\n    for (const [key, value] of Object.entries(uniforms)) {\n      this._setUniform(key, value);\n      if (!this.needsRedraw) {\n        this.setNeedsRedraw(`${this.name}.${key}=${value}`);\n      }\n    }\n  }\n  setNeedsRedraw(reason) {\n    this.needsRedraw = this.needsRedraw || reason;\n  }\n  /** Returns all uniforms */\n  getAllUniforms() {\n    // @ts-expect-error\n    this.modifiedUniforms = {};\n    this.needsRedraw = false;\n    return this.uniforms || {};\n  }\n  /** Set a single uniform */\n  _setUniform(key, value) {\n    if (arrayEqual(this.uniforms[key], value)) {\n      return;\n    }\n    this.uniforms[key] = arrayCopy(value);\n    this.modifiedUniforms[key] = true;\n    this.modified = true;\n  }\n}\n//# sourceMappingURL=uniform-block.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}