{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nconst defaultProps = {\n  ...PolygonLayer.defaultProps\n};\nclass GeoCellLayer extends CompositeLayer {\n  /** Implement to generate props to create geometry. */\n  indexToBounds() {\n    return null;\n  }\n  renderLayers() {\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n    // Accessor props for underlying layers\n    const {\n      updateTriggers,\n      material,\n      transitions\n    } = this.props;\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    const {\n      updateTriggers: boundsUpdateTriggers,\n      ...boundsProps\n    } = this.indexToBounds() || {};\n    return new CellLayer({\n      filled,\n      wireframe,\n      extruded,\n      elevationScale,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n      transitions,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    }, this.getSubLayerProps({\n      id: 'cell',\n      updateTriggers: updateTriggers && {\n        ...boundsUpdateTriggers,\n        getElevation: updateTriggers.getElevation,\n        getFillColor: updateTriggers.getFillColor,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    }), boundsProps);\n  }\n}\nGeoCellLayer.layerName = 'GeoCellLayer';\nGeoCellLayer.defaultProps = defaultProps;\nexport default GeoCellLayer;","map":{"version":3,"names":["CompositeLayer","PolygonLayer","defaultProps","GeoCellLayer","indexToBounds","renderLayers","elevationScale","extruded","wireframe","filled","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","props","updateTriggers","material","transitions","CellLayer","getSubLayerClass","boundsUpdateTriggers","boundsProps","getSubLayerProps","id","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\geo-cell-layer\\GeoCellLayer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {CompositeLayer, Layer, LayersList, DefaultProps} from '@deck.gl/core';\nimport {PolygonLayer, PolygonLayerProps} from '@deck.gl/layers';\n\nconst defaultProps: DefaultProps<GeoCellLayerProps> = {\n  ...PolygonLayer.defaultProps\n};\n\n/** All properties supported by GeoCellLayer. */\nexport type GeoCellLayerProps<DataT = unknown> = PolygonLayerProps<DataT>;\n\nexport default class GeoCellLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<GeoCellLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'GeoCellLayer';\n  static defaultProps: DefaultProps = defaultProps;\n\n  /** Implement to generate props to create geometry. */\n  indexToBounds(): Partial<GeoCellLayer['props']> | null {\n    return null;\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material, transitions} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    const {updateTriggers: boundsUpdateTriggers, ...boundsProps} = this.indexToBounds() || {};\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: updateTriggers && {\n          ...boundsUpdateTriggers,\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }),\n      boundsProps\n    );\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,cAAc,QAAwC,eAAe;AAC7E,SAAQC,YAAY,QAA0B,iBAAiB;AAE/D,MAAMC,YAAY,GAAoC;EACpD,GAAGD,YAAY,CAACC;CACjB;AAKD,MAAqBC,YAAsD,SAAQH,cAElF;EAIC;EACAI,aAAaA,CAAA;IACX,OAAO,IAAI;EACb;EAEAC,YAAYA,CAAA;IACV;IACA,MAAM;MACJC,cAAc;MACdC,QAAQ;MACRC,SAAS;MACTC,MAAM;MACNC,OAAO;MACPC,cAAc;MACdC,cAAc;MACdC,kBAAkB;MAClBC,kBAAkB;MAClBC,gBAAgB;MAChBC,cAAc;MACdC,iBAAiB;MACjBC,YAAY;MACZC,YAAY;MACZC,YAAY;MACZC;IAAY,CACb,GAAG,IAAI,CAACC,KAAK;IAEd;IACA,MAAM;MAACC,cAAc;MAAEC,QAAQ;MAAEC;IAAW,CAAC,GAAG,IAAI,CAACH,KAAK;IAE1D;IACA,MAAMI,SAAS,GAAG,IAAI,CAACC,gBAAgB,CAAC,MAAM,EAAE1B,YAAY,CAAC;IAC7D,MAAM;MAACsB,cAAc,EAAEK,oBAAoB;MAAE,GAAGC;IAAW,CAAC,GAAG,IAAI,CAACzB,aAAa,EAAE,IAAI,EAAE;IACzF,OAAO,IAAIsB,SAAS,CAClB;MACEjB,MAAM;MACND,SAAS;MAETD,QAAQ;MACRD,cAAc;MAEdI,OAAO;MACPC,cAAc;MACdC,cAAc;MACdC,kBAAkB;MAClBC,kBAAkB;MAClBC,gBAAgB;MAChBC,cAAc;MACdC,iBAAiB;MAEjBO,QAAQ;MACRC,WAAW;MAEXP,YAAY;MACZC,YAAY;MACZC,YAAY;MACZC;KACD,EACD,IAAI,CAACS,gBAAgB,CAAC;MACpBC,EAAE,EAAE,MAAM;MACVR,cAAc,EAAEA,cAAc,IAAI;QAChC,GAAGK,oBAAoB;QACvBV,YAAY,EAAEK,cAAc,CAACL,YAAY;QACzCC,YAAY,EAAEI,cAAc,CAACJ,YAAY;QACzCC,YAAY,EAAEG,cAAc,CAACH,YAAY;QACzCC,YAAY,EAAEE,cAAc,CAACF;;KAEhC,CAAC,EACFQ,WAAW,CACZ;EACH;;AAxEO1B,YAAA,CAAA6B,SAAS,GAAG,cAAc;AAC1B7B,YAAA,CAAAD,YAAY,GAAiBA,YAAY;eAJ7BC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}