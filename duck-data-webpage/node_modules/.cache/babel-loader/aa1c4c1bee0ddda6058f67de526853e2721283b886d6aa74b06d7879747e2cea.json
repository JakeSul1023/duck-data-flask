{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { MathArray } from \"./math-array.js\";\nimport { checkNumber } from \"../../lib/validators.js\";\nimport { config } from \"../../lib/common.js\";\n/** Base class for matrices */\nexport class Matrix extends MathArray {\n  // fromObject(object) {\n  //   const array = object.elements;\n  //   return this.fromRowMajor(array);\n  // }\n  // toObject(object) {\n  //   const array = object.elements;\n  //   this.toRowMajor(array);\n  //   return object;\n  // }\n  // TODO better override formatString?\n  toString() {\n    let string = '[';\n    if (config.printRowMajor) {\n      string += 'row-major:';\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += ` ${this[col * this.RANK + row]}`;\n        }\n      }\n    } else {\n      string += 'column-major:';\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += ` ${this[i]}`;\n      }\n    }\n    string += ']';\n    return string;\n  }\n  getElementIndex(row, col) {\n    return col * this.RANK + row;\n  }\n  // By default assumes row major indices\n  getElement(row, col) {\n    return this[col * this.RANK + row];\n  }\n  // By default assumes row major indices\n  setElement(row, col, value) {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n  getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n  setColumn(columnIndex, columnVector) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["MathArray","checkNumber","config","Matrix","toString","string","printRowMajor","row","RANK","col","i","ELEMENTS","getElementIndex","getElement","setElement","value","getColumn","columnIndex","result","Array","fill","firstIndex","setColumn","columnVector"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\classes\\base\\matrix.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {NumericArray} from '@math.gl/types';\nimport {MathArray} from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {config} from '../../lib/common';\n\n/** Base class for matrices */\nexport abstract class Matrix extends MathArray {\n  abstract get RANK(): number;\n\n  // fromObject(object) {\n  //   const array = object.elements;\n  //   return this.fromRowMajor(array);\n  // }\n  // toObject(object) {\n  //   const array = object.elements;\n  //   this.toRowMajor(array);\n  //   return object;\n  // }\n\n  // TODO better override formatString?\n  override toString(): string {\n    let string = '[';\n    if (config.printRowMajor) {\n      string += 'row-major:';\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += ` ${this[col * this.RANK + row]}`;\n        }\n      }\n    } else {\n      string += 'column-major:';\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += ` ${this[i]}`;\n      }\n    }\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row: number, col: number): number {\n    return col * this.RANK + row;\n  }\n\n  // By default assumes row major indices\n  getElement(row: number, col: number): number {\n    return this[col * this.RANK + row];\n  }\n\n  // By default assumes row major indices\n  setElement(row: number, col: number, value: number): this {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n  getColumn<NumArrayT>(columnIndex: number, result: NumArrayT): NumArrayT;\n  getColumn(columnIndex: number): number[];\n\n  getColumn(\n    columnIndex: number,\n    result: number[] = new Array<number>(this.RANK).fill(-0)\n  ): number[] {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n\n  setColumn(columnIndex: number, columnVector: Readonly<NumericArray>): this {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAGA,SAAQA,SAAS,QAAC;AAClB,SAAQC,WAAW,QAAC;AACpB,SAAQC,MAAM,QAAC;AAEf;AACA,OAAM,MAAgBC,MAAO,SAAQH,SAAS;EAG5C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACSI,QAAQA,CAAA;IACf,IAAIC,MAAM,GAAG,GAAG;IAChB,IAAIH,MAAM,CAACI,aAAa,EAAE;MACxBD,MAAM,IAAI,YAAY;MACtB,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACC,IAAI,EAAE,EAAED,GAAG,EAAE;QACxC,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACD,IAAI,EAAE,EAAEC,GAAG,EAAE;UACxCJ,MAAM,IAAI,IAAI,IAAI,CAACI,GAAG,GAAG,IAAI,CAACD,IAAI,GAAGD,GAAG,CAAC,EAAE;QAC7C;MACF;IACF,CAAC,MAAM;MACLF,MAAM,IAAI,eAAe;MACzB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,QAAQ,EAAE,EAAED,CAAC,EAAE;QACtCL,MAAM,IAAI,IAAI,IAAI,CAACK,CAAC,CAAC,EAAE;MACzB;IACF;IACAL,MAAM,IAAI,GAAG;IACb,OAAOA,MAAM;EACf;EAEAO,eAAeA,CAACL,GAAW,EAAEE,GAAW;IACtC,OAAOA,GAAG,GAAG,IAAI,CAACD,IAAI,GAAGD,GAAG;EAC9B;EAEA;EACAM,UAAUA,CAACN,GAAW,EAAEE,GAAW;IACjC,OAAO,IAAI,CAACA,GAAG,GAAG,IAAI,CAACD,IAAI,GAAGD,GAAG,CAAC;EACpC;EAEA;EACAO,UAAUA,CAACP,GAAW,EAAEE,GAAW,EAAEM,KAAa;IAChD,IAAI,CAACN,GAAG,GAAG,IAAI,CAACD,IAAI,GAAGD,GAAG,CAAC,GAAGN,WAAW,CAACc,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;EAIAC,SAASA,CACPC,WAAmB,EACnBC,MAAA,GAAmB,IAAIC,KAAK,CAAS,IAAI,CAACX,IAAI,CAAC,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC;IAExD,MAAMC,UAAU,GAAGJ,WAAW,GAAG,IAAI,CAACT,IAAI;IAC1C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACF,IAAI,EAAE,EAAEE,CAAC,EAAE;MAClCQ,MAAM,CAACR,CAAC,CAAC,GAAG,IAAI,CAACW,UAAU,GAAGX,CAAC,CAAC;IAClC;IACA,OAAOQ,MAAM;EACf;EAEAI,SAASA,CAACL,WAAmB,EAAEM,YAAoC;IACjE,MAAMF,UAAU,GAAGJ,WAAW,GAAG,IAAI,CAACT,IAAI;IAC1C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACF,IAAI,EAAE,EAAEE,CAAC,EAAE;MAClC,IAAI,CAACW,UAAU,GAAGX,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,CAAC;IACxC;IACA,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}