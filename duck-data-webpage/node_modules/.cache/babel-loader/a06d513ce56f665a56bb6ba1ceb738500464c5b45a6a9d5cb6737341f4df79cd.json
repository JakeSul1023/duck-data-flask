{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CommandEncoder } from '@luma.gl/core';\nimport { WEBGLCommandBuffer } from \"./webgl-command-buffer.js\";\nexport class WEBGLCommandEncoder extends CommandEncoder {\n  device;\n  commandBuffer;\n  constructor(device, props) {\n    super(device, props);\n    this.device = device;\n    this.commandBuffer = new WEBGLCommandBuffer(device);\n  }\n  destroy() {}\n  finish() {\n    this.commandBuffer.submitCommands();\n  }\n  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;\n  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;\n  // finish(options?: {id?: string}): GPUCommandBuffer;\n  copyBufferToBuffer(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-buffer-to-buffer',\n      options\n    });\n  }\n  copyBufferToTexture(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-buffer-to-texture',\n      options\n    });\n  }\n  copyTextureToBuffer(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-texture-to-buffer',\n      options\n    });\n  }\n  copyTextureToTexture(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-texture-to-texture',\n      options\n    });\n  }\n  // clearTexture(options: ClearTextureOptions): void {\n  //   this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});\n  // }\n  pushDebugGroup(groupLabel) {}\n  popDebugGroup() {}\n  insertDebugMarker(markerLabel) {}\n  resolveQuerySet(querySet, destination, options) {}\n}","map":{"version":3,"names":["CommandEncoder","WEBGLCommandBuffer","WEBGLCommandEncoder","device","commandBuffer","constructor","props","destroy","finish","submitCommands","copyBufferToBuffer","options","commands","push","name","copyBufferToTexture","copyTextureToBuffer","copyTextureToTexture","pushDebugGroup","groupLabel","popDebugGroup","insertDebugMarker","markerLabel","resolveQuerySet","querySet","destination"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\resources\\webgl-command-encoder.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {CommandEncoder, CommandEncoderProps} from '@luma.gl/core';\nimport type {\n  CopyBufferToBufferOptions,\n  CopyBufferToTextureOptions,\n  CopyTextureToBufferOptions,\n  CopyTextureToTextureOptions,\n  // ClearTextureOptions,\n  // ReadTextureOptions,\n  QuerySet,\n  Buffer\n} from '@luma.gl/core';\n\nimport {WEBGLCommandBuffer} from './webgl-command-buffer';\nimport {WebGLDevice} from '../webgl-device';\n\nexport class WEBGLCommandEncoder extends CommandEncoder {\n  readonly device: WebGLDevice;\n\n  readonly commandBuffer: WEBGLCommandBuffer;\n\n  constructor(device: WebGLDevice, props: CommandEncoderProps) {\n    super(device, props);\n    this.device = device;\n    this.commandBuffer = new WEBGLCommandBuffer(device);\n  }\n\n  override destroy(): void {}\n\n  override finish(): void {\n    this.commandBuffer.submitCommands();\n  }\n\n  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;\n  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;\n  // finish(options?: {id?: string}): GPUCommandBuffer;\n\n  copyBufferToBuffer(options: CopyBufferToBufferOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-buffer-to-buffer', options});\n  }\n\n  copyBufferToTexture(options: CopyBufferToTextureOptions) {\n    this.commandBuffer.commands.push({name: 'copy-buffer-to-texture', options});\n  }\n\n  copyTextureToBuffer(options: CopyTextureToBufferOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-texture-to-buffer', options});\n  }\n\n  copyTextureToTexture(options: CopyTextureToTextureOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});\n  }\n\n  // clearTexture(options: ClearTextureOptions): void {\n  //   this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});\n  // }\n\n  override pushDebugGroup(groupLabel: string): void {}\n  override popDebugGroup() {}\n\n  override insertDebugMarker(markerLabel: string): void {}\n\n  override resolveQuerySet(\n    querySet: QuerySet,\n    destination: Buffer,\n    options?: {\n      firstQuery?: number;\n      queryCount?: number;\n      destinationOffset?: number;\n    }\n  ): void {}\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,cAAc,QAA4B,eAAe;AAYjE,SAAQC,kBAAkB,QAAC;AAG3B,OAAM,MAAOC,mBAAoB,SAAQF,cAAc;EAC5CG,MAAM;EAENC,aAAa;EAEtBC,YAAYF,MAAmB,EAAEG,KAA0B;IACzD,KAAK,CAACH,MAAM,EAAEG,KAAK,CAAC;IACpB,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,aAAa,GAAG,IAAIH,kBAAkB,CAACE,MAAM,CAAC;EACrD;EAESI,OAAOA,CAAA,GAAU;EAEjBC,MAAMA,CAAA;IACb,IAAI,CAACJ,aAAa,CAACK,cAAc,EAAE;EACrC;EAEA;EACA;EACA;EAEAC,kBAAkBA,CAACC,OAAkC;IACnD,IAAI,CAACP,aAAa,CAACQ,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,uBAAuB;MAAEH;IAAO,CAAC,CAAC;EAC5E;EAEAI,mBAAmBA,CAACJ,OAAmC;IACrD,IAAI,CAACP,aAAa,CAACQ,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,wBAAwB;MAAEH;IAAO,CAAC,CAAC;EAC7E;EAEAK,mBAAmBA,CAACL,OAAmC;IACrD,IAAI,CAACP,aAAa,CAACQ,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,wBAAwB;MAAEH;IAAO,CAAC,CAAC;EAC7E;EAEAM,oBAAoBA,CAACN,OAAoC;IACvD,IAAI,CAACP,aAAa,CAACQ,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,yBAAyB;MAAEH;IAAO,CAAC,CAAC;EAC9E;EAEA;EACA;EACA;EAESO,cAAcA,CAACC,UAAkB,GAAS;EAC1CC,aAAaA,CAAA,GAAI;EAEjBC,iBAAiBA,CAACC,WAAmB,GAAS;EAE9CC,eAAeA,CACtBC,QAAkB,EAClBC,WAAmB,EACnBd,OAIC,GACM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}