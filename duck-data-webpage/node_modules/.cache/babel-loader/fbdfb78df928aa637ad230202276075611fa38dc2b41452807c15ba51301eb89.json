{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Feature detection for WebGL\n// Provides a function that enables simple checking of which WebGL features are\nimport { DeviceFeatures } from '@luma.gl/core';\nimport { getWebGLExtension } from \"../../context/helpers/webgl-extensions.js\";\nimport { isTextureFeature, checkTextureFeature, TEXTURE_FEATURES } from \"../converters/webgl-texture-table.js\";\n/**\n * Defines luma.gl \"feature\" names and semantics\n * when value is 'string' it is the name of the extension that enables this feature\n */\nconst WEBGL_FEATURES = {\n  // optional WebGPU features\n  'depth-clip-control': 'EXT_depth_clamp',\n  // TODO these seem subtly different\n  // 'timestamp-query' // GPUQueryType \"timestamp-query\"\n  // \"indirect-first-instance\"\n  // Textures are handled by getTextureFeatures()\n  // 'depth32float-stencil8' // GPUTextureFormat 'depth32float-stencil8'\n  // optional WebGL features\n  'timer-query-webgl': 'EXT_disjoint_timer_query_webgl2',\n  'compilation-status-async-webgl': 'KHR_parallel_shader_compile',\n  'polygon-mode-webgl': 'WEBGL_polygon_mode',\n  'provoking-vertex-webgl': 'WEBGL_provoking_vertex',\n  'shader-clip-cull-distance-webgl': 'WEBGL_clip_cull_distance',\n  'shader-noperspective-interpolation-webgl': 'NV_shader_noperspective_interpolation',\n  'shader-conservative-depth-webgl': 'EXT_conservative_depth'\n  // Textures are handled by getTextureFeatures()\n};\n/**\n * WebGL extensions exposed as luma.gl features\n * To minimize GL log noise and improve performance, this class ensures that\n * - WebGL extensions are not queried until the corresponding feature is checked.\n * - WebGL extensions are only queried once.\n */\nexport class WebGLDeviceFeatures extends DeviceFeatures {\n  gl;\n  extensions;\n  testedFeatures = new Set();\n  constructor(gl, extensions, disabledFeatures) {\n    super([], disabledFeatures);\n    this.gl = gl;\n    this.extensions = extensions;\n    // TODO - is this really needed?\n    // Enable EXT_float_blend first: https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend\n    getWebGLExtension(gl, 'EXT_color_buffer_float', extensions);\n  }\n  *[Symbol.iterator]() {\n    const features = this.getFeatures();\n    for (const feature of features) {\n      if (this.has(feature)) {\n        yield feature;\n      }\n    }\n    return [];\n  }\n  has(feature) {\n    if (this.disabledFeatures?.[feature]) {\n      return false;\n    }\n    // We have already tested this feature\n    if (!this.testedFeatures.has(feature)) {\n      this.testedFeatures.add(feature);\n      // Check the feature once\n      if (isTextureFeature(feature) && checkTextureFeature(this.gl, feature, this.extensions)) {\n        this.features.add(feature);\n      }\n      if (this.getWebGLFeature(feature)) {\n        this.features.add(feature);\n      }\n    }\n    return this.features.has(feature);\n  }\n  // FOR DEVICE\n  initializeFeatures() {\n    // Initialize all features by checking them.\n    // Except WEBGL_polygon_mode since Chrome logs ugly console warnings\n    const features = this.getFeatures().filter(feature => feature !== 'polygon-mode-webgl');\n    for (const feature of features) {\n      this.has(feature);\n    }\n  }\n  // IMPLEMENTATION\n  getFeatures() {\n    return [...Object.keys(WEBGL_FEATURES), ...Object.keys(TEXTURE_FEATURES)];\n  }\n  /** Extract all WebGL features */\n  getWebGLFeature(feature) {\n    const featureInfo = WEBGL_FEATURES[feature];\n    // string value requires checking the corresponding WebGL extension\n    const isSupported = typeof featureInfo === 'string' ? Boolean(getWebGLExtension(this.gl, featureInfo, this.extensions)) : Boolean(featureInfo);\n    return isSupported;\n  }\n}","map":{"version":3,"names":["DeviceFeatures","getWebGLExtension","isTextureFeature","checkTextureFeature","TEXTURE_FEATURES","WEBGL_FEATURES","WebGLDeviceFeatures","gl","extensions","testedFeatures","Set","constructor","disabledFeatures","Symbol","iterator","features","getFeatures","feature","has","add","getWebGLFeature","initializeFeatures","filter","Object","keys","featureInfo","isSupported","Boolean"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\device-helpers\\webgl-device-features.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Feature detection for WebGL\n// Provides a function that enables simple checking of which WebGL features are\n\nimport {DeviceFeature, DeviceFeatures} from '@luma.gl/core';\nimport {GLExtensions} from '@luma.gl/constants';\nimport {getWebGLExtension} from '../../context/helpers/webgl-extensions';\nimport {\n  isTextureFeature,\n  checkTextureFeature,\n  TEXTURE_FEATURES\n} from '../converters/webgl-texture-table';\n\n/**\n * Defines luma.gl \"feature\" names and semantics\n * when value is 'string' it is the name of the extension that enables this feature\n */\nconst WEBGL_FEATURES: Partial<Record<DeviceFeature, boolean | string>> = {\n  // optional WebGPU features\n  'depth-clip-control': 'EXT_depth_clamp', // TODO these seem subtly different\n  // 'timestamp-query' // GPUQueryType \"timestamp-query\"\n  // \"indirect-first-instance\"\n  // Textures are handled by getTextureFeatures()\n  // 'depth32float-stencil8' // GPUTextureFormat 'depth32float-stencil8'\n\n  // optional WebGL features\n  'timer-query-webgl': 'EXT_disjoint_timer_query_webgl2',\n  'compilation-status-async-webgl': 'KHR_parallel_shader_compile',\n  'polygon-mode-webgl': 'WEBGL_polygon_mode',\n  'provoking-vertex-webgl': 'WEBGL_provoking_vertex',\n  'shader-clip-cull-distance-webgl': 'WEBGL_clip_cull_distance',\n  'shader-noperspective-interpolation-webgl': 'NV_shader_noperspective_interpolation',\n  'shader-conservative-depth-webgl': 'EXT_conservative_depth'\n\n  // Textures are handled by getTextureFeatures()\n};\n\n/**\n * WebGL extensions exposed as luma.gl features\n * To minimize GL log noise and improve performance, this class ensures that\n * - WebGL extensions are not queried until the corresponding feature is checked.\n * - WebGL extensions are only queried once.\n */\nexport class WebGLDeviceFeatures extends DeviceFeatures {\n  protected gl: WebGL2RenderingContext;\n  protected extensions: GLExtensions;\n  protected testedFeatures = new Set<DeviceFeature>();\n\n  constructor(\n    gl: WebGL2RenderingContext,\n    extensions: GLExtensions,\n    disabledFeatures: Partial<Record<DeviceFeature, boolean>>\n  ) {\n    super([], disabledFeatures);\n    this.gl = gl;\n    this.extensions = extensions;\n    // TODO - is this really needed?\n    // Enable EXT_float_blend first: https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend\n    getWebGLExtension(gl, 'EXT_color_buffer_float', extensions);\n  }\n\n  *[Symbol.iterator](): IterableIterator<DeviceFeature> {\n    const features = this.getFeatures();\n    for (const feature of features) {\n      if (this.has(feature)) {\n        yield feature;\n      }\n    }\n    return [];\n  }\n\n  override has(feature: DeviceFeature): boolean {\n    if (this.disabledFeatures?.[feature]) {\n      return false;\n    }\n\n    // We have already tested this feature\n    if (!this.testedFeatures.has(feature)) {\n      this.testedFeatures.add(feature);\n\n      // Check the feature once\n      if (isTextureFeature(feature) && checkTextureFeature(this.gl, feature, this.extensions)) {\n        this.features.add(feature);\n      }\n\n      if (this.getWebGLFeature(feature)) {\n        this.features.add(feature);\n      }\n    }\n    return this.features.has(feature);\n  }\n\n  // FOR DEVICE\n\n  initializeFeatures() {\n    // Initialize all features by checking them.\n    // Except WEBGL_polygon_mode since Chrome logs ugly console warnings\n    const features = this.getFeatures().filter(feature => feature !== 'polygon-mode-webgl');\n    for (const feature of features) {\n      this.has(feature);\n    }\n  }\n\n  // IMPLEMENTATION\n\n  getFeatures() {\n    return [...Object.keys(WEBGL_FEATURES), ...Object.keys(TEXTURE_FEATURES)] as DeviceFeature[];\n  }\n\n  /** Extract all WebGL features */\n  protected getWebGLFeature(feature: DeviceFeature): boolean {\n    const featureInfo = WEBGL_FEATURES[feature];\n    // string value requires checking the corresponding WebGL extension\n    const isSupported =\n      typeof featureInfo === 'string'\n        ? Boolean(getWebGLExtension(this.gl, featureInfo, this.extensions))\n        : Boolean(featureInfo);\n\n    return isSupported;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}