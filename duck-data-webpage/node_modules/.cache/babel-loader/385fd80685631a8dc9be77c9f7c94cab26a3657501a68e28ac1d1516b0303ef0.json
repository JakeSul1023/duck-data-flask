{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ShaderAssembler } from '@luma.gl/shadertools';\nimport { gouraudLighting, phongLighting } from '@luma.gl/shadertools';\nimport { layerUniforms } from \"./misc/layer-uniforms.js\";\nimport geometry from \"./misc/geometry.js\";\nimport project from \"./project/project.js\";\nimport project32 from \"./project32/project32.js\";\nimport shadow from \"./shadow/shadow.js\";\nimport picking from \"./picking/picking.js\";\nconst DEFAULT_MODULES = [geometry];\nconst SHADER_HOOKS_GLSL = ['vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)', 'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)', 'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)', 'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'];\nconst SHADER_HOOKS_WGSL = [\n  // Not yet supported\n];\nexport function getShaderAssembler(language) {\n  const shaderAssembler = ShaderAssembler.getDefaultShaderAssembler();\n  for (const shaderModule of DEFAULT_MODULES) {\n    shaderAssembler.addDefaultModule(shaderModule);\n  }\n  // Add shader hooks based on language\n  // TODO(ibgreen) - should the luma shader assembler support both sets of hooks?\n  const shaderHooks = language === 'glsl' ? SHADER_HOOKS_GLSL : SHADER_HOOKS_WGSL;\n  for (const shaderHook of shaderHooks) {\n    shaderAssembler.addShaderHook(shaderHook);\n  }\n  return shaderAssembler;\n}\nexport { layerUniforms, picking, project, project32, gouraudLighting, phongLighting, shadow };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}