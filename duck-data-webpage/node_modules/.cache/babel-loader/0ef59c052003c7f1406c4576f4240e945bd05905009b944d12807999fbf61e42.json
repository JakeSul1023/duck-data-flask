{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { lighting } from \"../lights/lighting.js\";\nimport { vs } from \"./pbr-vertex-glsl.js\";\nimport { fs } from \"./pbr-fragment-glsl.js\";\nimport { pbrProjection } from \"./pbr-projection.js\";\n/**\n * An implementation of PBR (Physically-Based Rendering).\n * Physically Based Shading of a microfacet surface defined by a glTF material.\n */\nexport const pbrMaterial = {\n  props: {},\n  uniforms: {},\n  name: 'pbrMaterial',\n  dependencies: [lighting, pbrProjection],\n  vs,\n  fs,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n    // TODO defining these as 0 breaks shader\n    // HAS_NORMALMAP: 0\n    // HAS_EMISSIVEMAP: 0,\n    // HAS_OCCLUSIONMAP: 0,\n    // HAS_BASECOLORMAP: 0,\n    // HAS_METALROUGHNESSMAP: 0,\n    // ALPHA_CUTOFF: 0\n    // USE_IBL: 0\n    // PBR_DEBUG: 0\n  },\n  getUniforms: props => props,\n  uniformTypes: {\n    // Material is unlit\n    unlit: 'i32',\n    // Base color map\n    baseColorMapEnabled: 'i32',\n    baseColorFactor: 'vec4<f32>',\n    normalMapEnabled: 'i32',\n    normalScale: 'f32',\n    // #ifdef HAS_NORMALMAP\n    emissiveMapEnabled: 'i32',\n    emissiveFactor: 'vec3<f32>',\n    // #ifdef HAS_EMISSIVEMAP\n    metallicRoughnessValues: 'vec2<f32>',\n    metallicRoughnessMapEnabled: 'i32',\n    occlusionMapEnabled: 'i32',\n    occlusionStrength: 'f32',\n    // #ifdef HAS_OCCLUSIONMAP\n    alphaCutoffEnabled: 'i32',\n    alphaCutoff: 'f32',\n    // #ifdef ALPHA_CUTOFF\n    // IBL\n    IBLenabled: 'i32',\n    scaleIBLAmbient: 'vec2<f32>',\n    // #ifdef USE_IBL\n    // debugging flags used for shader output of intermediate PBR variables\n    // #ifdef PBR_DEBUG\n    scaleDiffBaseMR: 'vec4<f32>',\n    scaleFGDSpec: 'vec4<f32>'\n  }\n};","map":{"version":3,"names":["lighting","vs","fs","pbrProjection","pbrMaterial","props","uniforms","name","dependencies","defines","LIGHTING_FRAGMENT","getUniforms","uniformTypes","unlit","baseColorMapEnabled","baseColorFactor","normalMapEnabled","normalScale","emissiveMapEnabled","emissiveFactor","metallicRoughnessValues","metallicRoughnessMapEnabled","occlusionMapEnabled","occlusionStrength","alphaCutoffEnabled","alphaCutoff","IBLenabled","scaleIBLAmbient","scaleDiffBaseMR","scaleFGDSpec"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules\\lighting\\pbr-material\\pbr-material.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\n\nimport type {Texture} from '@luma.gl/core';\nimport type {\n  Vector2,\n  Vector3,\n  Vector4,\n  NumberArray2,\n  NumberArray3,\n  NumberArray4\n} from '@math.gl/core';\n\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {lighting} from '../lights/lighting';\n\nimport {vs} from './pbr-vertex-glsl';\nimport {fs} from './pbr-fragment-glsl';\nimport {pbrProjection} from './pbr-projection';\n\n/** Non-uniform block bindings for pbr module */\nexport type PBRMaterialBindings = {\n  // Samplers\n  pbr_baseColorSampler?: Texture | null; // #ifdef HAS_BASECOLORMAP\n  pbr_normalSampler?: Texture | null; // #ifdef HAS_NORMALMAP\n  pbr_emissiveSampler?: Texture | null; // #ifdef HAS_EMISSIVEMAP\n  pbr_metallicRoughnessSampler?: Texture | null; // #ifdef HAS_METALROUGHNESSMAP\n  pbr_occlusionSampler?: Texture | null; // #ifdef HAS_OCCLUSIONMAP\n\n  // IBL Samplers\n  pbr_diffuseEnvSampler?: Texture | null; // #ifdef USE_IBL (samplerCube)\n  pbr_specularEnvSampler?: Texture | null; // #ifdef USE_IBL (samplerCube)\n  pbr_BrdfLUT?: Texture | null; // #ifdef USE_IBL\n};\n\nexport type PBRMaterialUniforms = {\n  unlit?: boolean;\n\n  // Base color map\n  baseColorMapEnabled?: boolean;\n  baseColorFactor?: Readonly<Vector4 | NumberArray4>;\n\n  normalMapEnabled?: boolean;\n  normalScale?: number; // #ifdef HAS_NORMALMAP\n\n  emissiveMapEnabled?: boolean;\n  emissiveFactor?: Readonly<Vector3 | NumberArray3>; // #ifdef HAS_EMISSIVEMAP\n\n  metallicRoughnessValues?: Readonly<Vector2 | NumberArray2>;\n  metallicRoughnessMapEnabled?: boolean;\n\n  occlusionMapEnabled?: boolean;\n  occlusionStrength?: number; // #ifdef HAS_OCCLUSIONMAP\n\n  alphaCutoffEnabled?: boolean;\n  alphaCutoff?: number; // #ifdef ALPHA_CUTOFF\n\n  // IBL\n  IBLenabled?: boolean;\n  scaleIBLAmbient?: Readonly<Vector2 | NumberArray2>; // #ifdef USE_IBL\n\n  // debugging flags used for shader output of intermediate PBR variables\n  // #ifdef PBR_DEBUG\n  scaleDiffBaseMR?: Readonly<Vector4 | NumberArray4>;\n  scaleFGDSpec?: Readonly<Vector4 | NumberArray4>;\n};\n\nexport type PBRMaterialProps = PBRMaterialBindings & PBRMaterialUniforms;\n\n/**\n * An implementation of PBR (Physically-Based Rendering).\n * Physically Based Shading of a microfacet surface defined by a glTF material.\n */\nexport const pbrMaterial = {\n  props: {} as PBRMaterialProps,\n  uniforms: {} as PBRMaterialUniforms,\n\n  name: 'pbrMaterial',\n  dependencies: [lighting, pbrProjection],\n  vs,\n  fs,\n\n  defines: {\n    LIGHTING_FRAGMENT: 1\n    // TODO defining these as 0 breaks shader\n    // HAS_NORMALMAP: 0\n    // HAS_EMISSIVEMAP: 0,\n    // HAS_OCCLUSIONMAP: 0,\n    // HAS_BASECOLORMAP: 0,\n    // HAS_METALROUGHNESSMAP: 0,\n    // ALPHA_CUTOFF: 0\n    // USE_IBL: 0\n    // PBR_DEBUG: 0\n  },\n  getUniforms: props => props,\n  uniformTypes: {\n    // Material is unlit\n    unlit: 'i32',\n\n    // Base color map\n    baseColorMapEnabled: 'i32',\n    baseColorFactor: 'vec4<f32>',\n\n    normalMapEnabled: 'i32',\n    normalScale: 'f32', // #ifdef HAS_NORMALMAP\n\n    emissiveMapEnabled: 'i32',\n    emissiveFactor: 'vec3<f32>', // #ifdef HAS_EMISSIVEMAP\n\n    metallicRoughnessValues: 'vec2<f32>',\n    metallicRoughnessMapEnabled: 'i32',\n\n    occlusionMapEnabled: 'i32',\n    occlusionStrength: 'f32', // #ifdef HAS_OCCLUSIONMAP\n\n    alphaCutoffEnabled: 'i32',\n    alphaCutoff: 'f32', // #ifdef ALPHA_CUTOFF\n\n    // IBL\n    IBLenabled: 'i32',\n    scaleIBLAmbient: 'vec2<f32>', // #ifdef USE_IBL\n\n    // debugging flags used for shader output of intermediate PBR variables\n    // #ifdef PBR_DEBUG\n    scaleDiffBaseMR: 'vec4<f32>',\n    scaleFGDSpec: 'vec4<f32>'\n  }\n} as const satisfies ShaderModule<PBRMaterialProps, PBRMaterialUniforms, PBRMaterialBindings>;\n"],"mappings":"AAAA;AACA;AACA;AAeA,SAAQA,QAAQ,QAAC;AAEjB,SAAQC,EAAE,QAAC;AACX,SAAQC,EAAE,QAAC;AACX,SAAQC,aAAa,QAAC;AAmDtB;;;;AAIA,OAAO,MAAMC,WAAW,GAAG;EACzBC,KAAK,EAAE,EAAsB;EAC7BC,QAAQ,EAAE,EAAyB;EAEnCC,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE,CAACR,QAAQ,EAAEG,aAAa,CAAC;EACvCF,EAAE;EACFC,EAAE;EAEFO,OAAO,EAAE;IACPC,iBAAiB,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;GACD;EACDC,WAAW,EAAEN,KAAK,IAAIA,KAAK;EAC3BO,YAAY,EAAE;IACZ;IACAC,KAAK,EAAE,KAAK;IAEZ;IACAC,mBAAmB,EAAE,KAAK;IAC1BC,eAAe,EAAE,WAAW;IAE5BC,gBAAgB,EAAE,KAAK;IACvBC,WAAW,EAAE,KAAK;IAAE;IAEpBC,kBAAkB,EAAE,KAAK;IACzBC,cAAc,EAAE,WAAW;IAAE;IAE7BC,uBAAuB,EAAE,WAAW;IACpCC,2BAA2B,EAAE,KAAK;IAElCC,mBAAmB,EAAE,KAAK;IAC1BC,iBAAiB,EAAE,KAAK;IAAE;IAE1BC,kBAAkB,EAAE,KAAK;IACzBC,WAAW,EAAE,KAAK;IAAE;IAEpB;IACAC,UAAU,EAAE,KAAK;IACjBC,eAAe,EAAE,WAAW;IAAE;IAE9B;IACA;IACAC,eAAe,EAAE,WAAW;IAC5BC,YAAY,EAAE;;CAE2E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}