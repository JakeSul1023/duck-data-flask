{"ast":null,"code":"// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, log } from '@deck.gl/core';\nimport { Texture } from '@luma.gl/core';\nimport { Model, Geometry } from '@luma.gl/engine';\nimport { phongMaterial } from '@luma.gl/shadertools';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from \"../utils/matrix.js\";\nimport { simpleMeshUniforms } from \"./simple-mesh-layer-uniforms.js\";\nimport vs from \"./simple-mesh-layer-vertex.glsl.js\";\nimport fs from \"./simple-mesh-layer-fragment.glsl.js\";\nimport { getMeshBoundingBox } from '@loaders.gl/schema';\nfunction normalizeGeometryAttributes(attributes) {\n  const positionAttribute = attributes.positions || attributes.POSITION;\n  log.assert(positionAttribute, 'no \"postions\" or \"POSITION\" attribute in mesh');\n  const vertexCount = positionAttribute.value.length / positionAttribute.size;\n  let colorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!colorAttribute) {\n    colorAttribute = {\n      size: 3,\n      value: new Float32Array(vertexCount * 3).fill(1)\n    };\n  }\n  let normalAttribute = attributes.NORMAL || attributes.normals;\n  if (!normalAttribute) {\n    normalAttribute = {\n      size: 3,\n      value: new Float32Array(vertexCount * 3).fill(0)\n    };\n  }\n  let texCoordAttribute = attributes.TEXCOORD_0 || attributes.texCoords;\n  if (!texCoordAttribute) {\n    texCoordAttribute = {\n      size: 2,\n      value: new Float32Array(vertexCount * 2).fill(0)\n    };\n  }\n  return {\n    positions: positionAttribute,\n    colors: colorAttribute,\n    normals: normalAttribute,\n    texCoords: texCoordAttribute\n  };\n}\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data instanceof Geometry) {\n    // @ts-expect-error data.attributes is readonly\n    data.attributes = normalizeGeometryAttributes(data.attributes);\n    return data;\n  } else if (data.attributes) {\n    return new Geometry({\n      ...data,\n      topology: 'triangle-list',\n      attributes: normalizeGeometryAttributes(data.attributes)\n    });\n  } else {\n    return new Geometry({\n      topology: 'triangle-list',\n      attributes: normalizeGeometryAttributes(data)\n    });\n  }\n}\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  texture: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  // 4x4 matrix\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  },\n  textureParameters: {\n    type: 'object',\n    ignore: true,\n    value: null\n  }\n};\n/** Render a number of instances of an arbitrary 3D geometry. */\nclass SimpleMeshLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongMaterial, picking, simpleMeshUniforms]\n    });\n  }\n  getBounds() {\n    if (this.props._instanced) {\n      return super.getBounds();\n    }\n    let result = this.state.positionBounds;\n    if (result) {\n      return result;\n    }\n    const {\n      mesh\n    } = this.props;\n    if (!mesh) {\n      return null;\n    }\n    // @ts-ignore Detect if mesh is generated by loaders.gl\n    result = mesh.header?.boundingBox;\n    if (!result) {\n      // Otherwise, calculate bounding box from positions\n      const {\n        attributes\n      } = getGeometry(mesh);\n      attributes.POSITION = attributes.POSITION || attributes.positions;\n      //@ts-expect-error\n      result = getMeshBoundingBox(attributes);\n    }\n    this.state.positionBounds = result;\n    return result;\n  }\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined in a primitive layer\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: 'unorm8',\n        transition: true,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: this.context.device.createTexture({\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.positionBounds = null;\n      this.state.model?.destroy();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      // attributeManager is always defined in a primitive layer\n      this.getAttributeManager().invalidateAll();\n    }\n    if (props.texture !== oldProps.texture && props.texture instanceof Texture) {\n      this.setTexture(props.texture);\n    }\n    if (this.state.model) {\n      this.state.model.setTopology(this.props.wireframe ? 'line-strip' : 'triangle-list');\n    }\n  }\n  finalizeState(context) {\n    super.finalizeState(context);\n    this.state.emptyTexture.delete();\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      model\n    } = this.state;\n    if (!model) {\n      return;\n    }\n    const {\n      viewport,\n      renderPass\n    } = this.context;\n    const {\n      sizeScale,\n      coordinateSystem,\n      _instanced\n    } = this.props;\n    const simpleMeshProps = {\n      sizeScale,\n      composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n      flatShading: !this.state.hasNormals\n    };\n    model.shaderInputs.setProps({\n      simpleMesh: simpleMeshProps\n    });\n    model.draw(renderPass);\n  }\n  get isLoaded() {\n    return Boolean(this.state?.model && super.isLoaded);\n  }\n  getModel(mesh) {\n    const model = new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      geometry: getGeometry(mesh),\n      isInstanced: true\n    });\n    const {\n      texture\n    } = this.props;\n    const {\n      emptyTexture\n    } = this.state;\n    const simpleMeshProps = {\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    };\n    model.shaderInputs.setProps({\n      simpleMesh: simpleMeshProps\n    });\n    return model;\n  }\n  setTexture(texture) {\n    const {\n      emptyTexture,\n      model\n    } = this.state;\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      const simpleMeshProps = {\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      };\n      model.shaderInputs.setProps({\n        simpleMesh: simpleMeshProps\n      });\n    }\n  }\n}\nSimpleMeshLayer.defaultProps = defaultProps;\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nexport default SimpleMeshLayer;","map":{"version":3,"names":["Layer","project32","picking","log","Texture","Model","Geometry","phongMaterial","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","simpleMeshUniforms","vs","fs","getMeshBoundingBox","normalizeGeometryAttributes","attributes","positionAttribute","positions","POSITION","assert","vertexCount","value","length","size","colorAttribute","COLOR_0","colors","Float32Array","fill","normalAttribute","NORMAL","normals","texCoordAttribute","TEXCOORD_0","texCoords","getGeometry","data","topology","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","textureParameters","ignore","SimpleMeshLayer","getShaders","modules","getBounds","props","result","state","positionBounds","header","boundingBox","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","accessor","instanceColors","colorFormat","defaultValue","instanceModelMatrix","setState","emptyTexture","context","device","createTexture","Uint8Array","width","height","updateState","params","oldProps","changeFlags","extensionsChanged","model","destroy","getModel","hasNormals","Boolean","invalidateAll","setTexture","setTopology","finalizeState","delete","draw","uniforms","viewport","renderPass","coordinateSystem","simpleMeshProps","composeModelMatrix","flatShading","shaderInputs","setProps","simpleMesh","isLoaded","id","bufferLayout","getBufferLayouts","geometry","isInstanced","sampler","hasTexture","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\mesh-layers\\src\\simple-mesh-layer\\simple-mesh-layer.ts"],"sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, DefaultProps, log, LayerContext, Material} from '@deck.gl/core';\nimport {SamplerProps, Texture} from '@luma.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\nimport {ParsedPBRMaterial} from '@luma.gl/gltf';\nimport {phongMaterial} from '@luma.gl/shadertools';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport {simpleMeshUniforms, SimpleMeshProps} from './simple-mesh-layer-uniforms';\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Position,\n  Color,\n  TextureSource\n} from '@deck.gl/core';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {Geometry as GeometryType} from '@luma.gl/engine';\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\n\nfunction normalizeGeometryAttributes(attributes: MeshAttributes): MeshAttributes {\n  const positionAttribute = attributes.positions || attributes.POSITION;\n  log.assert(positionAttribute, 'no \"postions\" or \"POSITION\" attribute in mesh');\n\n  const vertexCount = positionAttribute.value.length / positionAttribute.size;\n  let colorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!colorAttribute) {\n    colorAttribute = {size: 3, value: new Float32Array(vertexCount * 3).fill(1)};\n  }\n  let normalAttribute = attributes.NORMAL || attributes.normals;\n  if (!normalAttribute) {\n    normalAttribute = {size: 3, value: new Float32Array(vertexCount * 3).fill(0)};\n  }\n  let texCoordAttribute = attributes.TEXCOORD_0 || attributes.texCoords;\n  if (!texCoordAttribute) {\n    texCoordAttribute = {size: 2, value: new Float32Array(vertexCount * 2).fill(0)};\n  }\n\n  return {\n    positions: positionAttribute,\n    colors: colorAttribute,\n    normals: normalAttribute,\n    texCoords: texCoordAttribute\n  };\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data: Mesh): Geometry {\n  if (data instanceof Geometry) {\n    // @ts-expect-error data.attributes is readonly\n    data.attributes = normalizeGeometryAttributes(data.attributes);\n    return data;\n  } else if ((data as any).attributes) {\n    return new Geometry({\n      ...data,\n      topology: 'triangle-list',\n      attributes: normalizeGeometryAttributes((data as any).attributes)\n    });\n  } else {\n    return new Geometry({\n      topology: 'triangle-list',\n      attributes: normalizeGeometryAttributes(data as MeshAttributes)\n    });\n  }\n}\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\ntype Mesh =\n  | GeometryType\n  | {\n      attributes: MeshAttributes;\n      indices?: MeshAttribute;\n    }\n  | MeshAttributes;\n\ntype _SimpleMeshLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  mesh: string | Mesh | Promise<Mesh> | null;\n  texture?: string | TextureSource | Promise<TextureSource>;\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: SamplerProps | null;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * If `mesh` does not contain vertex colors, use this color to render each object.\n   * If `mesh` contains vertex colors, then the two colors are mixed together.\n   * Use `[255, 255, 255]` to use the original mesh colors.\n   * If `texture` is assigned, then both colors will be ignored.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n\n  /**\n   * (Experimental) If rendering only one instance of the mesh, set this to false to treat mesh positions\n   * as deltas of the world coordinates of the anchor.\n   * E.g. in LNGLAT coordinates, mesh positions are interpreted as meter offsets by default.\n   * setting _instanced to false interpreted mesh positions as lnglat deltas.\n   * @default true\n   */\n  _instanced?: boolean; // TODO - formalize API\n  /**\n   * Whether to render the mesh in wireframe mode.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * Material props for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting#constructing-a-material-instance\n   */\n  material?: Material;\n};\n\nexport type SimpleMeshLayerProps<DataT = unknown> = _SimpleMeshLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<SimpleMeshLayerProps> = {\n  mesh: {type: 'object', value: null, async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []},\n\n  textureParameters: {type: 'object', ignore: true, value: null}\n};\n\n/** Render a number of instances of an arbitrary 3D geometry. */\nexport default class SimpleMeshLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_SimpleMeshLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SimpleMeshLayer';\n\n  state!: {\n    parsedPBRMaterial?: ParsedPBRMaterial;\n    model?: Model;\n    emptyTexture: Texture;\n    hasNormals?: boolean;\n    positionBounds?: [number[], number[]] | null;\n  };\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongMaterial, picking, simpleMeshUniforms]\n    });\n  }\n\n  getBounds(): [number[], number[]] | null {\n    if (this.props._instanced) {\n      return super.getBounds();\n    }\n    let result = this.state.positionBounds;\n    if (result) {\n      return result;\n    }\n    const {mesh} = this.props;\n    if (!mesh) {\n      return null;\n    }\n    // @ts-ignore Detect if mesh is generated by loaders.gl\n    result = mesh.header?.boundingBox;\n\n    if (!result) {\n      // Otherwise, calculate bounding box from positions\n      const {attributes} = getGeometry(mesh as Mesh);\n      attributes.POSITION = attributes.POSITION || attributes.positions;\n\n      //@ts-expect-error\n      result = getMeshBoundingBox(attributes);\n    }\n\n    this.state.positionBounds = result;\n    return result;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined in a primitive layer\n    attributeManager!.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: 'unorm8',\n        transition: true,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: this.context.device.createTexture({\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.positionBounds = null;\n      this.state.model?.destroy();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh as Mesh);\n\n        const attributes = (props.mesh as any).attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      // attributeManager is always defined in a primitive layer\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture && props.texture instanceof Texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setTopology(this.props.wireframe ? 'line-strip' : 'triangle-list');\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n    if (!model) {\n      return;\n    }\n\n    const {viewport, renderPass} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    const simpleMeshProps: SimpleMeshProps = {\n      sizeScale,\n      composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n      flatShading: !this.state.hasNormals\n    };\n    model.shaderInputs.setProps({simpleMesh: simpleMeshProps});\n    model.draw(renderPass);\n  }\n\n  get isLoaded(): boolean {\n    return Boolean(this.state?.model && super.isLoaded);\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const model = new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: getGeometry(mesh),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    const simpleMeshProps: SimpleMeshProps = {\n      sampler: (texture as Texture) || emptyTexture,\n      hasTexture: Boolean(texture)\n    };\n    model.shaderInputs.setProps({simpleMesh: simpleMeshProps});\n    return model;\n  }\n\n  private setTexture(texture: Texture): void {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      const simpleMeshProps: SimpleMeshProps = {\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      };\n      model.shaderInputs.setProps({simpleMesh: simpleMeshProps});\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}