{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { deepEqual } from \"../utils/deep-equal.js\";\nclass LayerExtension {\n  static get componentName() {\n    return Object.prototype.hasOwnProperty.call(this, 'extensionName') ? this.extensionName : '';\n  }\n  constructor(opts) {\n    if (opts) {\n      this.opts = opts;\n    }\n  }\n  /** Returns true if two extensions are equivalent */\n  equals(extension) {\n    if (this === extension) {\n      return true;\n    }\n    // Compare extensions shallowly\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts, 1);\n  }\n  /** Only called if attached to a primitive layer */\n  getShaders(extension) {\n    return null;\n  }\n  /** Only called if attached to a CompositeLayer */\n  getSubLayerProps(extension) {\n    const {\n      defaultProps\n    } = extension.constructor;\n    const newProps = {\n      updateTriggers: {}\n    };\n    /* eslint-disable max-depth */\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n          if (typeof propValue === 'function') {\n            newProps[key] = this.getSubLayerAccessor(propValue);\n          }\n        }\n      }\n    }\n    /* eslint-enable max-depth */\n    return newProps;\n  }\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  initializeState(context, extension) {}\n  updateState(params, extension) {}\n  onNeedsRedraw(extension) {}\n  getNeedsPickingBuffer(extension) {\n    return false;\n  }\n  draw(params, extension) {}\n  finalizeState(context, extension) {}\n}\nLayerExtension.defaultProps = {};\nLayerExtension.extensionName = 'LayerExtension';\nexport default LayerExtension;\n//# sourceMappingURL=layer-extension.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}