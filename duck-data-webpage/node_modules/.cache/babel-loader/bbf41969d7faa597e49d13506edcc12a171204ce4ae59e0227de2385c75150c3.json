{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ImageLoader } from '@loaders.gl/images';\nimport { mergeLoaderOptions, ImageSource } from '@loaders.gl/loader-utils';\nimport { WMSCapabilitiesLoader } from \"../../wms-capabilities-loader.js\";\nimport { WMSFeatureInfoLoader } from \"../../wip/wms-feature-info-loader.js\";\nimport { WMSLayerDescriptionLoader } from \"../../wip/wms-layer-description-loader.js\";\nimport { WMSErrorLoader } from \"../../wms-error-loader.js\";\nexport const WMSSource = {\n  name: 'Web Map Service (OGC WMS)',\n  id: 'wms',\n  module: 'wms',\n  version: '0.0.0',\n  extensions: [],\n  mimeTypes: [],\n  options: {\n    wms: {\n      // TODO - add options here\n    }\n  },\n  type: 'wms',\n  fromUrl: true,\n  fromBlob: false,\n  testURL: url => url.toLowerCase().includes('wms'),\n  createDataSource: (url, props) => new WMSImageSource(url, props)\n};\n//\n/**\n * The WMSImageSource class provides\n * - provides type safe methods to form URLs to a WMS service\n * - provides type safe methods to query and parse results (and errors) from a WMS service\n * - implements the ImageSource interface\n * @note Only the URL parameter conversion is supported. XML posts are not supported.\n */\nexport class WMSImageSource extends ImageSource {\n  /** Base URL to the service */\n  url;\n  data;\n  /** In WMS 1.3.0, replaces references to EPSG:4326 with CRS:84. But not always supported. Default: false */\n  substituteCRS84;\n  /** In WMS 1.3.0, flips x,y (lng, lat) coordinates for the supplied coordinate systems. Default: ['ESPG:4326'] */\n  flipCRS;\n  /** Default static WMS parameters */\n  wmsParameters;\n  /** Default static vendor parameters */\n  vendorParameters;\n  capabilities = null;\n  /** Create a WMSImageSource */\n  constructor(url, props) {\n    super(props);\n    // TODO - defaults such as version, layers etc could be extracted from a base URL with parameters\n    // This would make pasting in any WMS URL more likely to make this class just work.\n    // const {baseUrl, parameters} = this._parseWMSUrl(props.url);\n    this.url = url;\n    this.data = url;\n    this.substituteCRS84 = props.wms?.substituteCRS84 ?? props.substituteCRS84 ?? false;\n    this.flipCRS = ['EPSG:4326'];\n    this.wmsParameters = {\n      layers: undefined,\n      query_layers: undefined,\n      styles: undefined,\n      version: '1.3.0',\n      crs: 'EPSG:4326',\n      format: 'image/png',\n      info_format: 'text/plain',\n      transparent: undefined,\n      time: undefined,\n      elevation: undefined,\n      ...props.wmsParameters,\n      // deprecated\n      ...props.wms?.wmsParameters\n    };\n    this.vendorParameters = props.wms?.vendorParameters || props.vendorParameters || {};\n  }\n  // ImageSource implementation\n  async getMetadata() {\n    const capabilities = await this.getCapabilities();\n    return this.normalizeMetadata(capabilities);\n  }\n  async getImage(parameters) {\n    // Replace the GetImage `boundingBox` parameter with the WMS flat `bbox` parameter.\n    const {\n      boundingBox,\n      bbox,\n      ...rest\n    } = parameters;\n    const wmsParameters = {\n      bbox: boundingBox ? [...boundingBox[0], ...boundingBox[1]] : bbox,\n      ...rest\n    };\n    return await this.getMap(wmsParameters);\n  }\n  normalizeMetadata(capabilities) {\n    return capabilities;\n  }\n  // WMS Service API Stubs\n  /** Get Capabilities */\n  async getCapabilities(wmsParameters, vendorParameters) {\n    const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    const capabilities = await WMSCapabilitiesLoader.parse(arrayBuffer, this.loadOptions);\n    this.capabilities = capabilities;\n    return capabilities;\n  }\n  /** Get a map image */\n  async getMap(wmsParameters, vendorParameters) {\n    const url = this.getMapURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfo(wmsParameters, vendorParameters) {\n    const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSFeatureInfoLoader.parse(arrayBuffer, this.loadOptions);\n  }\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfoText(wmsParameters, vendorParameters) {\n    const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n  /** Get more information about a layer */\n  async describeLayer(wmsParameters, vendorParameters) {\n    const url = this.describeLayerURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSLayerDescriptionLoader.parse(arrayBuffer, this.loadOptions);\n  }\n  /** Get an image with a semantic legend */\n  async getLegendGraphic(wmsParameters, vendorParameters) {\n    const url = this.getLegendGraphicURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n  // Typed URL creators\n  // For applications that want full control of fetching and parsing\n  /** Generate a URL for the GetCapabilities request */\n  getCapabilitiesURL(wmsParameters, vendorParameters) {\n    const options = {\n      version: this.wmsParameters.version,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetCapabilities', options, vendorParameters);\n  }\n  /** Generate a URL for the GetMap request */\n  getMapURL(wmsParameters, vendorParameters) {\n    wmsParameters = this._getWMS130Parameters(wmsParameters);\n    const options = {\n      version: this.wmsParameters.version,\n      format: this.wmsParameters.format,\n      transparent: this.wmsParameters.transparent,\n      time: this.wmsParameters.time,\n      elevation: this.wmsParameters.elevation,\n      layers: this.wmsParameters.layers,\n      styles: this.wmsParameters.styles,\n      crs: this.wmsParameters.crs,\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetMap', options, vendorParameters);\n  }\n  /** Generate a URL for the GetFeatureInfo request */\n  getFeatureInfoURL(wmsParameters, vendorParameters) {\n    wmsParameters = this._getWMS130Parameters(wmsParameters);\n    // Replace the GetImage `boundingBox` parameter with the WMS flat `bbox` parameter.\n    const {\n      boundingBox,\n      bbox\n    } = wmsParameters;\n    wmsParameters.bbox = boundingBox ? [...boundingBox[0], ...boundingBox[1]] : bbox;\n    const options = {\n      version: this.wmsParameters.version,\n      // query_layers: [],\n      // format: this.wmsParameters.format,\n      info_format: this.wmsParameters.info_format,\n      layers: this.wmsParameters.layers,\n      query_layers: this.wmsParameters.query_layers,\n      styles: this.wmsParameters.styles,\n      crs: this.wmsParameters.crs,\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      // x: undefined!,\n      // y: undefined!,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetFeatureInfo', options, vendorParameters);\n  }\n  /** Generate a URL for the GetFeatureInfo request */\n  describeLayerURL(wmsParameters, vendorParameters) {\n    const options = {\n      version: this.wmsParameters.version,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('DescribeLayer', options, vendorParameters);\n  }\n  getLegendGraphicURL(wmsParameters, vendorParameters) {\n    const options = {\n      version: this.wmsParameters.version,\n      // format?\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetLegendGraphic', options, vendorParameters);\n  }\n  // INTERNAL METHODS\n  _parseWMSUrl(url) {\n    const [baseUrl, search] = url.split('?');\n    const searchParams = search.split('&');\n    const parameters = {};\n    for (const parameter of searchParams) {\n      const [key, value] = parameter.split('=');\n      parameters[key] = value;\n    }\n    return {\n      url: baseUrl,\n      parameters\n    };\n  }\n  /**\n   * Generate a URL with parameters\n   * @note case _getWMSUrl may need to be overridden to handle certain backends?\n   * @note at the moment, only URLs with parameters are supported (no XML payloads)\n   * */\n  _getWMSUrl(request, wmsParameters, vendorParameters) {\n    let url = this.url;\n    let first = true;\n    // Add any vendor searchParams\n    const allParameters = {\n      service: 'WMS',\n      version: wmsParameters.version,\n      request,\n      ...wmsParameters,\n      ...this.vendorParameters,\n      ...vendorParameters\n    };\n    // Encode the keys\n    const IGNORE_EMPTY_KEYS = ['transparent', 'time', 'elevation'];\n    for (const [key, value] of Object.entries(allParameters)) {\n      // hack to preserve test cases. Not super clear if keys should be included when values are undefined\n      if (!IGNORE_EMPTY_KEYS.includes(key) || value) {\n        url += first ? '?' : '&';\n        first = false;\n        url += this._getURLParameter(key, value, wmsParameters);\n      }\n    }\n    return encodeURI(url);\n  }\n  _getWMS130Parameters(wmsParameters) {\n    const newParameters = {\n      ...wmsParameters\n    };\n    if (newParameters.srs) {\n      newParameters.crs = newParameters.crs || newParameters.srs;\n      delete newParameters.srs;\n    }\n    return newParameters;\n  }\n  // eslint-disable-next-line complexity\n  _getURLParameter(key, value, wmsParameters) {\n    // Substitute by key\n    switch (key) {\n      case 'crs':\n        // CRS was called SRS before WMS 1.3.0\n        if (wmsParameters.version !== '1.3.0') {\n          key = 'srs';\n        } else if (this.substituteCRS84 && value === 'EPSG:4326') {\n          /** In 1.3.0, replaces references to 'EPSG:4326' with the new backwards compatible CRS:84 */\n          // Substitute by value\n          value = 'CRS:84';\n        }\n        break;\n      case 'srs':\n        // CRS was called SRS before WMS 1.3.0\n        if (wmsParameters.version === '1.3.0') {\n          key = 'crs';\n        }\n        break;\n      case 'bbox':\n        // Coordinate order is flipped for certain CRS in WMS 1.3.0\n        const bbox = this._flipBoundingBox(value, wmsParameters);\n        if (bbox) {\n          value = bbox;\n        }\n        break;\n      case 'x':\n        // i is the parameter used in WMS 1.3\n        // TODO - change parameter to `i` and convert to `x` if not 1.3\n        if (wmsParameters.version === '1.3.0') {\n          key = 'i';\n        }\n        break;\n      case 'y':\n        // j is the parameter used in WMS 1.3\n        // TODO - change parameter to `j` and convert to `y` if not 1.3\n        if (wmsParameters.version === '1.3.0') {\n          key = 'j';\n        }\n        break;\n      default:\n      // do nothing\n    }\n    key = key.toUpperCase();\n    return Array.isArray(value) ? `${key}=${value.join(',')}` : `${key}=${value ? String(value) : ''}`;\n  }\n  /** Coordinate order is flipped for certain CRS in WMS 1.3.0 */\n  _flipBoundingBox(bboxValue, wmsParameters) {\n    // Sanity checks\n    if (!Array.isArray(bboxValue) || bboxValue.length !== 4) {\n      return null;\n    }\n    const flipCoordinates =\n    // Only affects WMS 1.3.0\n    wmsParameters.version === '1.3.0' &&\n    // Flip if we are dealing with a CRS that was flipped in 1.3.0\n    this.flipCRS.includes(wmsParameters.crs || '') &&\n    // Don't flip if we are substituting EPSG:4326 with CRS:84\n    !(this.substituteCRS84 && wmsParameters.crs === 'EPSG:4326');\n    const bbox = bboxValue;\n    return flipCoordinates ? [bbox[1], bbox[0], bbox[3], bbox[2]] : bbox;\n  }\n  /** Fetches an array buffer and checks the response (boilerplate reduction) */\n  async _fetchArrayBuffer(url) {\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return arrayBuffer;\n  }\n  /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n  _checkResponse(response, arrayBuffer) {\n    const contentType = response.headers['content-type'];\n    if (!response.ok || WMSErrorLoader.mimeTypes.includes(contentType)) {\n      // We want error responses to throw exceptions, the WMSErrorLoader can do this\n      const loadOptions = mergeLoaderOptions(this.loadOptions, {\n        wms: {\n          throwOnError: true\n        }\n      });\n      const error = WMSErrorLoader.parseSync?.(arrayBuffer, loadOptions);\n      throw new Error(error);\n    }\n  }\n  /** Error situation detected */\n  _parseError(arrayBuffer) {\n    const error = WMSErrorLoader.parseSync?.(arrayBuffer, this.loadOptions);\n    return new Error(error);\n  }\n}","map":{"version":3,"names":["ImageLoader","mergeLoaderOptions","ImageSource","WMSCapabilitiesLoader","WMSFeatureInfoLoader","WMSLayerDescriptionLoader","WMSErrorLoader","WMSSource","name","id","module","version","extensions","mimeTypes","options","wms","type","fromUrl","fromBlob","testURL","url","toLowerCase","includes","createDataSource","props","WMSImageSource","data","substituteCRS84","flipCRS","wmsParameters","vendorParameters","capabilities","constructor","layers","undefined","query_layers","styles","crs","format","info_format","transparent","time","elevation","getMetadata","getCapabilities","normalizeMetadata","getImage","parameters","boundingBox","bbox","rest","getMap","getCapabilitiesURL","response","fetch","arrayBuffer","_checkResponse","parse","loadOptions","getMapURL","_parseError","getFeatureInfo","getFeatureInfoURL","getFeatureInfoText","TextDecoder","decode","describeLayer","describeLayerURL","getLegendGraphic","getLegendGraphicURL","_getWMSUrl","_getWMS130Parameters","_parseWMSUrl","baseUrl","search","split","searchParams","parameter","key","value","request","first","allParameters","service","IGNORE_EMPTY_KEYS","Object","entries","_getURLParameter","encodeURI","newParameters","srs","_flipBoundingBox","toUpperCase","Array","isArray","join","String","bboxValue","length","flipCoordinates","_fetchArrayBuffer","contentType","headers","ok","throwOnError","error","parseSync","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/wms/dist/services/ogc/wms-service.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ImageLoader } from '@loaders.gl/images';\nimport { mergeLoaderOptions, ImageSource } from '@loaders.gl/loader-utils';\nimport { WMSCapabilitiesLoader } from \"../../wms-capabilities-loader.js\";\nimport { WMSFeatureInfoLoader } from \"../../wip/wms-feature-info-loader.js\";\nimport { WMSLayerDescriptionLoader } from \"../../wip/wms-layer-description-loader.js\";\nimport { WMSErrorLoader } from \"../../wms-error-loader.js\";\nexport const WMSSource = {\n    name: 'Web Map Service (OGC WMS)',\n    id: 'wms',\n    module: 'wms',\n    version: '0.0.0',\n    extensions: [],\n    mimeTypes: [],\n    options: {\n        wms: {\n        // TODO - add options here\n        }\n    },\n    type: 'wms',\n    fromUrl: true,\n    fromBlob: false,\n    testURL: (url) => url.toLowerCase().includes('wms'),\n    createDataSource: (url, props) => new WMSImageSource(url, props)\n};\n//\n/**\n * The WMSImageSource class provides\n * - provides type safe methods to form URLs to a WMS service\n * - provides type safe methods to query and parse results (and errors) from a WMS service\n * - implements the ImageSource interface\n * @note Only the URL parameter conversion is supported. XML posts are not supported.\n */\nexport class WMSImageSource extends ImageSource {\n    /** Base URL to the service */\n    url;\n    data;\n    /** In WMS 1.3.0, replaces references to EPSG:4326 with CRS:84. But not always supported. Default: false */\n    substituteCRS84;\n    /** In WMS 1.3.0, flips x,y (lng, lat) coordinates for the supplied coordinate systems. Default: ['ESPG:4326'] */\n    flipCRS;\n    /** Default static WMS parameters */\n    wmsParameters;\n    /** Default static vendor parameters */\n    vendorParameters;\n    capabilities = null;\n    /** Create a WMSImageSource */\n    constructor(url, props) {\n        super(props);\n        // TODO - defaults such as version, layers etc could be extracted from a base URL with parameters\n        // This would make pasting in any WMS URL more likely to make this class just work.\n        // const {baseUrl, parameters} = this._parseWMSUrl(props.url);\n        this.url = url;\n        this.data = url;\n        this.substituteCRS84 = props.wms?.substituteCRS84 ?? props.substituteCRS84 ?? false;\n        this.flipCRS = ['EPSG:4326'];\n        this.wmsParameters = {\n            layers: undefined,\n            query_layers: undefined,\n            styles: undefined,\n            version: '1.3.0',\n            crs: 'EPSG:4326',\n            format: 'image/png',\n            info_format: 'text/plain',\n            transparent: undefined,\n            time: undefined,\n            elevation: undefined,\n            ...props.wmsParameters, // deprecated\n            ...props.wms?.wmsParameters\n        };\n        this.vendorParameters = props.wms?.vendorParameters || props.vendorParameters || {};\n    }\n    // ImageSource implementation\n    async getMetadata() {\n        const capabilities = await this.getCapabilities();\n        return this.normalizeMetadata(capabilities);\n    }\n    async getImage(parameters) {\n        // Replace the GetImage `boundingBox` parameter with the WMS flat `bbox` parameter.\n        const { boundingBox, bbox, ...rest } = parameters;\n        const wmsParameters = {\n            bbox: boundingBox ? [...boundingBox[0], ...boundingBox[1]] : bbox,\n            ...rest\n        };\n        return await this.getMap(wmsParameters);\n    }\n    normalizeMetadata(capabilities) {\n        return capabilities;\n    }\n    // WMS Service API Stubs\n    /** Get Capabilities */\n    async getCapabilities(wmsParameters, vendorParameters) {\n        const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        this._checkResponse(response, arrayBuffer);\n        const capabilities = await WMSCapabilitiesLoader.parse(arrayBuffer, this.loadOptions);\n        this.capabilities = capabilities;\n        return capabilities;\n    }\n    /** Get a map image */\n    async getMap(wmsParameters, vendorParameters) {\n        const url = this.getMapURL(wmsParameters, vendorParameters);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        this._checkResponse(response, arrayBuffer);\n        try {\n            return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n        }\n        catch {\n            throw this._parseError(arrayBuffer);\n        }\n    }\n    /** Get Feature Info for a coordinate */\n    async getFeatureInfo(wmsParameters, vendorParameters) {\n        const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        this._checkResponse(response, arrayBuffer);\n        return await WMSFeatureInfoLoader.parse(arrayBuffer, this.loadOptions);\n    }\n    /** Get Feature Info for a coordinate */\n    async getFeatureInfoText(wmsParameters, vendorParameters) {\n        const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        this._checkResponse(response, arrayBuffer);\n        return new TextDecoder().decode(arrayBuffer);\n    }\n    /** Get more information about a layer */\n    async describeLayer(wmsParameters, vendorParameters) {\n        const url = this.describeLayerURL(wmsParameters, vendorParameters);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        this._checkResponse(response, arrayBuffer);\n        return await WMSLayerDescriptionLoader.parse(arrayBuffer, this.loadOptions);\n    }\n    /** Get an image with a semantic legend */\n    async getLegendGraphic(wmsParameters, vendorParameters) {\n        const url = this.getLegendGraphicURL(wmsParameters, vendorParameters);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        this._checkResponse(response, arrayBuffer);\n        try {\n            return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n        }\n        catch {\n            throw this._parseError(arrayBuffer);\n        }\n    }\n    // Typed URL creators\n    // For applications that want full control of fetching and parsing\n    /** Generate a URL for the GetCapabilities request */\n    getCapabilitiesURL(wmsParameters, vendorParameters) {\n        const options = {\n            version: this.wmsParameters.version,\n            ...wmsParameters\n        };\n        return this._getWMSUrl('GetCapabilities', options, vendorParameters);\n    }\n    /** Generate a URL for the GetMap request */\n    getMapURL(wmsParameters, vendorParameters) {\n        wmsParameters = this._getWMS130Parameters(wmsParameters);\n        const options = {\n            version: this.wmsParameters.version,\n            format: this.wmsParameters.format,\n            transparent: this.wmsParameters.transparent,\n            time: this.wmsParameters.time,\n            elevation: this.wmsParameters.elevation,\n            layers: this.wmsParameters.layers,\n            styles: this.wmsParameters.styles,\n            crs: this.wmsParameters.crs,\n            // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n            // width: 1200,\n            // height: 900,\n            ...wmsParameters\n        };\n        return this._getWMSUrl('GetMap', options, vendorParameters);\n    }\n    /** Generate a URL for the GetFeatureInfo request */\n    getFeatureInfoURL(wmsParameters, vendorParameters) {\n        wmsParameters = this._getWMS130Parameters(wmsParameters);\n        // Replace the GetImage `boundingBox` parameter with the WMS flat `bbox` parameter.\n        const { boundingBox, bbox } = wmsParameters;\n        wmsParameters.bbox = boundingBox ? [...boundingBox[0], ...boundingBox[1]] : bbox;\n        const options = {\n            version: this.wmsParameters.version,\n            // query_layers: [],\n            // format: this.wmsParameters.format,\n            info_format: this.wmsParameters.info_format,\n            layers: this.wmsParameters.layers,\n            query_layers: this.wmsParameters.query_layers,\n            styles: this.wmsParameters.styles,\n            crs: this.wmsParameters.crs,\n            // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n            // width: 1200,\n            // height: 900,\n            // x: undefined!,\n            // y: undefined!,\n            ...wmsParameters\n        };\n        return this._getWMSUrl('GetFeatureInfo', options, vendorParameters);\n    }\n    /** Generate a URL for the GetFeatureInfo request */\n    describeLayerURL(wmsParameters, vendorParameters) {\n        const options = {\n            version: this.wmsParameters.version,\n            ...wmsParameters\n        };\n        return this._getWMSUrl('DescribeLayer', options, vendorParameters);\n    }\n    getLegendGraphicURL(wmsParameters, vendorParameters) {\n        const options = {\n            version: this.wmsParameters.version,\n            // format?\n            ...wmsParameters\n        };\n        return this._getWMSUrl('GetLegendGraphic', options, vendorParameters);\n    }\n    // INTERNAL METHODS\n    _parseWMSUrl(url) {\n        const [baseUrl, search] = url.split('?');\n        const searchParams = search.split('&');\n        const parameters = {};\n        for (const parameter of searchParams) {\n            const [key, value] = parameter.split('=');\n            parameters[key] = value;\n        }\n        return { url: baseUrl, parameters };\n    }\n    /**\n     * Generate a URL with parameters\n     * @note case _getWMSUrl may need to be overridden to handle certain backends?\n     * @note at the moment, only URLs with parameters are supported (no XML payloads)\n     * */\n    _getWMSUrl(request, wmsParameters, vendorParameters) {\n        let url = this.url;\n        let first = true;\n        // Add any vendor searchParams\n        const allParameters = {\n            service: 'WMS',\n            version: wmsParameters.version,\n            request,\n            ...wmsParameters,\n            ...this.vendorParameters,\n            ...vendorParameters\n        };\n        // Encode the keys\n        const IGNORE_EMPTY_KEYS = ['transparent', 'time', 'elevation'];\n        for (const [key, value] of Object.entries(allParameters)) {\n            // hack to preserve test cases. Not super clear if keys should be included when values are undefined\n            if (!IGNORE_EMPTY_KEYS.includes(key) || value) {\n                url += first ? '?' : '&';\n                first = false;\n                url += this._getURLParameter(key, value, wmsParameters);\n            }\n        }\n        return encodeURI(url);\n    }\n    _getWMS130Parameters(wmsParameters) {\n        const newParameters = { ...wmsParameters };\n        if (newParameters.srs) {\n            newParameters.crs = newParameters.crs || newParameters.srs;\n            delete newParameters.srs;\n        }\n        return newParameters;\n    }\n    // eslint-disable-next-line complexity\n    _getURLParameter(key, value, wmsParameters) {\n        // Substitute by key\n        switch (key) {\n            case 'crs':\n                // CRS was called SRS before WMS 1.3.0\n                if (wmsParameters.version !== '1.3.0') {\n                    key = 'srs';\n                }\n                else if (this.substituteCRS84 && value === 'EPSG:4326') {\n                    /** In 1.3.0, replaces references to 'EPSG:4326' with the new backwards compatible CRS:84 */\n                    // Substitute by value\n                    value = 'CRS:84';\n                }\n                break;\n            case 'srs':\n                // CRS was called SRS before WMS 1.3.0\n                if (wmsParameters.version === '1.3.0') {\n                    key = 'crs';\n                }\n                break;\n            case 'bbox':\n                // Coordinate order is flipped for certain CRS in WMS 1.3.0\n                const bbox = this._flipBoundingBox(value, wmsParameters);\n                if (bbox) {\n                    value = bbox;\n                }\n                break;\n            case 'x':\n                // i is the parameter used in WMS 1.3\n                // TODO - change parameter to `i` and convert to `x` if not 1.3\n                if (wmsParameters.version === '1.3.0') {\n                    key = 'i';\n                }\n                break;\n            case 'y':\n                // j is the parameter used in WMS 1.3\n                // TODO - change parameter to `j` and convert to `y` if not 1.3\n                if (wmsParameters.version === '1.3.0') {\n                    key = 'j';\n                }\n                break;\n            default:\n            // do nothing\n        }\n        key = key.toUpperCase();\n        return Array.isArray(value)\n            ? `${key}=${value.join(',')}`\n            : `${key}=${value ? String(value) : ''}`;\n    }\n    /** Coordinate order is flipped for certain CRS in WMS 1.3.0 */\n    _flipBoundingBox(bboxValue, wmsParameters) {\n        // Sanity checks\n        if (!Array.isArray(bboxValue) || bboxValue.length !== 4) {\n            return null;\n        }\n        const flipCoordinates = \n        // Only affects WMS 1.3.0\n        wmsParameters.version === '1.3.0' &&\n            // Flip if we are dealing with a CRS that was flipped in 1.3.0\n            this.flipCRS.includes(wmsParameters.crs || '') &&\n            // Don't flip if we are substituting EPSG:4326 with CRS:84\n            !(this.substituteCRS84 && wmsParameters.crs === 'EPSG:4326');\n        const bbox = bboxValue;\n        return flipCoordinates ? [bbox[1], bbox[0], bbox[3], bbox[2]] : bbox;\n    }\n    /** Fetches an array buffer and checks the response (boilerplate reduction) */\n    async _fetchArrayBuffer(url) {\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        this._checkResponse(response, arrayBuffer);\n        return arrayBuffer;\n    }\n    /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n    _checkResponse(response, arrayBuffer) {\n        const contentType = response.headers['content-type'];\n        if (!response.ok || WMSErrorLoader.mimeTypes.includes(contentType)) {\n            // We want error responses to throw exceptions, the WMSErrorLoader can do this\n            const loadOptions = mergeLoaderOptions(this.loadOptions, {\n                wms: { throwOnError: true }\n            });\n            const error = WMSErrorLoader.parseSync?.(arrayBuffer, loadOptions);\n            throw new Error(error);\n        }\n    }\n    /** Error situation detected */\n    _parseError(arrayBuffer) {\n        const error = WMSErrorLoader.parseSync?.(arrayBuffer, this.loadOptions);\n        return new Error(error);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,0BAA0B;AAC1E,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,yBAAyB,QAAQ,2CAA2C;AACrF,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,OAAO,MAAMC,SAAS,GAAG;EACrBC,IAAI,EAAE,2BAA2B;EACjCC,EAAE,EAAE,KAAK;EACTC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE,OAAO;EAChBC,UAAU,EAAE,EAAE;EACdC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE;IACLC,GAAG,EAAE;MACL;IAAA;EAEJ,CAAC;EACDC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE,KAAK;EACfC,OAAO,EAAGC,GAAG,IAAKA,GAAG,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;EACnDC,gBAAgB,EAAEA,CAACH,GAAG,EAAEI,KAAK,KAAK,IAAIC,cAAc,CAACL,GAAG,EAAEI,KAAK;AACnE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,SAASvB,WAAW,CAAC;EAC5C;EACAkB,GAAG;EACHM,IAAI;EACJ;EACAC,eAAe;EACf;EACAC,OAAO;EACP;EACAC,aAAa;EACb;EACAC,gBAAgB;EAChBC,YAAY,GAAG,IAAI;EACnB;EACAC,WAAWA,CAACZ,GAAG,EAAEI,KAAK,EAAE;IACpB,KAAK,CAACA,KAAK,CAAC;IACZ;IACA;IACA;IACA,IAAI,CAACJ,GAAG,GAAGA,GAAG;IACd,IAAI,CAACM,IAAI,GAAGN,GAAG;IACf,IAAI,CAACO,eAAe,GAAGH,KAAK,CAACT,GAAG,EAAEY,eAAe,IAAIH,KAAK,CAACG,eAAe,IAAI,KAAK;IACnF,IAAI,CAACC,OAAO,GAAG,CAAC,WAAW,CAAC;IAC5B,IAAI,CAACC,aAAa,GAAG;MACjBI,MAAM,EAAEC,SAAS;MACjBC,YAAY,EAAED,SAAS;MACvBE,MAAM,EAAEF,SAAS;MACjBvB,OAAO,EAAE,OAAO;MAChB0B,GAAG,EAAE,WAAW;MAChBC,MAAM,EAAE,WAAW;MACnBC,WAAW,EAAE,YAAY;MACzBC,WAAW,EAAEN,SAAS;MACtBO,IAAI,EAAEP,SAAS;MACfQ,SAAS,EAAER,SAAS;MACpB,GAAGV,KAAK,CAACK,aAAa;MAAE;MACxB,GAAGL,KAAK,CAACT,GAAG,EAAEc;IAClB,CAAC;IACD,IAAI,CAACC,gBAAgB,GAAGN,KAAK,CAACT,GAAG,EAAEe,gBAAgB,IAAIN,KAAK,CAACM,gBAAgB,IAAI,CAAC,CAAC;EACvF;EACA;EACA,MAAMa,WAAWA,CAAA,EAAG;IAChB,MAAMZ,YAAY,GAAG,MAAM,IAAI,CAACa,eAAe,CAAC,CAAC;IACjD,OAAO,IAAI,CAACC,iBAAiB,CAACd,YAAY,CAAC;EAC/C;EACA,MAAMe,QAAQA,CAACC,UAAU,EAAE;IACvB;IACA,MAAM;MAAEC,WAAW;MAAEC,IAAI;MAAE,GAAGC;IAAK,CAAC,GAAGH,UAAU;IACjD,MAAMlB,aAAa,GAAG;MAClBoB,IAAI,EAAED,WAAW,GAAG,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,EAAE,GAAGA,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGC,IAAI;MACjE,GAAGC;IACP,CAAC;IACD,OAAO,MAAM,IAAI,CAACC,MAAM,CAACtB,aAAa,CAAC;EAC3C;EACAgB,iBAAiBA,CAACd,YAAY,EAAE;IAC5B,OAAOA,YAAY;EACvB;EACA;EACA;EACA,MAAMa,eAAeA,CAACf,aAAa,EAAEC,gBAAgB,EAAE;IACnD,MAAMV,GAAG,GAAG,IAAI,CAACgC,kBAAkB,CAACvB,aAAa,EAAEC,gBAAgB,CAAC;IACpE,MAAMuB,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,CAAClC,GAAG,CAAC;IACtC,MAAMmC,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEE,WAAW,CAAC;IAC1C,MAAMxB,YAAY,GAAG,MAAM5B,qBAAqB,CAACsD,KAAK,CAACF,WAAW,EAAE,IAAI,CAACG,WAAW,CAAC;IACrF,IAAI,CAAC3B,YAAY,GAAGA,YAAY;IAChC,OAAOA,YAAY;EACvB;EACA;EACA,MAAMoB,MAAMA,CAACtB,aAAa,EAAEC,gBAAgB,EAAE;IAC1C,MAAMV,GAAG,GAAG,IAAI,CAACuC,SAAS,CAAC9B,aAAa,EAAEC,gBAAgB,CAAC;IAC3D,MAAMuB,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,CAAClC,GAAG,CAAC;IACtC,MAAMmC,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEE,WAAW,CAAC;IAC1C,IAAI;MACA,OAAO,MAAMvD,WAAW,CAACyD,KAAK,CAACF,WAAW,EAAE,IAAI,CAACG,WAAW,CAAC;IACjE,CAAC,CACD,MAAM;MACF,MAAM,IAAI,CAACE,WAAW,CAACL,WAAW,CAAC;IACvC;EACJ;EACA;EACA,MAAMM,cAAcA,CAAChC,aAAa,EAAEC,gBAAgB,EAAE;IAClD,MAAMV,GAAG,GAAG,IAAI,CAAC0C,iBAAiB,CAACjC,aAAa,EAAEC,gBAAgB,CAAC;IACnE,MAAMuB,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,CAAClC,GAAG,CAAC;IACtC,MAAMmC,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEE,WAAW,CAAC;IAC1C,OAAO,MAAMnD,oBAAoB,CAACqD,KAAK,CAACF,WAAW,EAAE,IAAI,CAACG,WAAW,CAAC;EAC1E;EACA;EACA,MAAMK,kBAAkBA,CAAClC,aAAa,EAAEC,gBAAgB,EAAE;IACtD,MAAMV,GAAG,GAAG,IAAI,CAAC0C,iBAAiB,CAACjC,aAAa,EAAEC,gBAAgB,CAAC;IACnE,MAAMuB,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,CAAClC,GAAG,CAAC;IACtC,MAAMmC,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEE,WAAW,CAAC;IAC1C,OAAO,IAAIS,WAAW,CAAC,CAAC,CAACC,MAAM,CAACV,WAAW,CAAC;EAChD;EACA;EACA,MAAMW,aAAaA,CAACrC,aAAa,EAAEC,gBAAgB,EAAE;IACjD,MAAMV,GAAG,GAAG,IAAI,CAAC+C,gBAAgB,CAACtC,aAAa,EAAEC,gBAAgB,CAAC;IAClE,MAAMuB,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,CAAClC,GAAG,CAAC;IACtC,MAAMmC,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEE,WAAW,CAAC;IAC1C,OAAO,MAAMlD,yBAAyB,CAACoD,KAAK,CAACF,WAAW,EAAE,IAAI,CAACG,WAAW,CAAC;EAC/E;EACA;EACA,MAAMU,gBAAgBA,CAACvC,aAAa,EAAEC,gBAAgB,EAAE;IACpD,MAAMV,GAAG,GAAG,IAAI,CAACiD,mBAAmB,CAACxC,aAAa,EAAEC,gBAAgB,CAAC;IACrE,MAAMuB,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,CAAClC,GAAG,CAAC;IACtC,MAAMmC,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEE,WAAW,CAAC;IAC1C,IAAI;MACA,OAAO,MAAMvD,WAAW,CAACyD,KAAK,CAACF,WAAW,EAAE,IAAI,CAACG,WAAW,CAAC;IACjE,CAAC,CACD,MAAM;MACF,MAAM,IAAI,CAACE,WAAW,CAACL,WAAW,CAAC;IACvC;EACJ;EACA;EACA;EACA;EACAH,kBAAkBA,CAACvB,aAAa,EAAEC,gBAAgB,EAAE;IAChD,MAAMhB,OAAO,GAAG;MACZH,OAAO,EAAE,IAAI,CAACkB,aAAa,CAAClB,OAAO;MACnC,GAAGkB;IACP,CAAC;IACD,OAAO,IAAI,CAACyC,UAAU,CAAC,iBAAiB,EAAExD,OAAO,EAAEgB,gBAAgB,CAAC;EACxE;EACA;EACA6B,SAASA,CAAC9B,aAAa,EAAEC,gBAAgB,EAAE;IACvCD,aAAa,GAAG,IAAI,CAAC0C,oBAAoB,CAAC1C,aAAa,CAAC;IACxD,MAAMf,OAAO,GAAG;MACZH,OAAO,EAAE,IAAI,CAACkB,aAAa,CAAClB,OAAO;MACnC2B,MAAM,EAAE,IAAI,CAACT,aAAa,CAACS,MAAM;MACjCE,WAAW,EAAE,IAAI,CAACX,aAAa,CAACW,WAAW;MAC3CC,IAAI,EAAE,IAAI,CAACZ,aAAa,CAACY,IAAI;MAC7BC,SAAS,EAAE,IAAI,CAACb,aAAa,CAACa,SAAS;MACvCT,MAAM,EAAE,IAAI,CAACJ,aAAa,CAACI,MAAM;MACjCG,MAAM,EAAE,IAAI,CAACP,aAAa,CAACO,MAAM;MACjCC,GAAG,EAAE,IAAI,CAACR,aAAa,CAACQ,GAAG;MAC3B;MACA;MACA;MACA,GAAGR;IACP,CAAC;IACD,OAAO,IAAI,CAACyC,UAAU,CAAC,QAAQ,EAAExD,OAAO,EAAEgB,gBAAgB,CAAC;EAC/D;EACA;EACAgC,iBAAiBA,CAACjC,aAAa,EAAEC,gBAAgB,EAAE;IAC/CD,aAAa,GAAG,IAAI,CAAC0C,oBAAoB,CAAC1C,aAAa,CAAC;IACxD;IACA,MAAM;MAAEmB,WAAW;MAAEC;IAAK,CAAC,GAAGpB,aAAa;IAC3CA,aAAa,CAACoB,IAAI,GAAGD,WAAW,GAAG,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,EAAE,GAAGA,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGC,IAAI;IAChF,MAAMnC,OAAO,GAAG;MACZH,OAAO,EAAE,IAAI,CAACkB,aAAa,CAAClB,OAAO;MACnC;MACA;MACA4B,WAAW,EAAE,IAAI,CAACV,aAAa,CAACU,WAAW;MAC3CN,MAAM,EAAE,IAAI,CAACJ,aAAa,CAACI,MAAM;MACjCE,YAAY,EAAE,IAAI,CAACN,aAAa,CAACM,YAAY;MAC7CC,MAAM,EAAE,IAAI,CAACP,aAAa,CAACO,MAAM;MACjCC,GAAG,EAAE,IAAI,CAACR,aAAa,CAACQ,GAAG;MAC3B;MACA;MACA;MACA;MACA;MACA,GAAGR;IACP,CAAC;IACD,OAAO,IAAI,CAACyC,UAAU,CAAC,gBAAgB,EAAExD,OAAO,EAAEgB,gBAAgB,CAAC;EACvE;EACA;EACAqC,gBAAgBA,CAACtC,aAAa,EAAEC,gBAAgB,EAAE;IAC9C,MAAMhB,OAAO,GAAG;MACZH,OAAO,EAAE,IAAI,CAACkB,aAAa,CAAClB,OAAO;MACnC,GAAGkB;IACP,CAAC;IACD,OAAO,IAAI,CAACyC,UAAU,CAAC,eAAe,EAAExD,OAAO,EAAEgB,gBAAgB,CAAC;EACtE;EACAuC,mBAAmBA,CAACxC,aAAa,EAAEC,gBAAgB,EAAE;IACjD,MAAMhB,OAAO,GAAG;MACZH,OAAO,EAAE,IAAI,CAACkB,aAAa,CAAClB,OAAO;MACnC;MACA,GAAGkB;IACP,CAAC;IACD,OAAO,IAAI,CAACyC,UAAU,CAAC,kBAAkB,EAAExD,OAAO,EAAEgB,gBAAgB,CAAC;EACzE;EACA;EACA0C,YAAYA,CAACpD,GAAG,EAAE;IACd,MAAM,CAACqD,OAAO,EAAEC,MAAM,CAAC,GAAGtD,GAAG,CAACuD,KAAK,CAAC,GAAG,CAAC;IACxC,MAAMC,YAAY,GAAGF,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;IACtC,MAAM5B,UAAU,GAAG,CAAC,CAAC;IACrB,KAAK,MAAM8B,SAAS,IAAID,YAAY,EAAE;MAClC,MAAM,CAACE,GAAG,EAAEC,KAAK,CAAC,GAAGF,SAAS,CAACF,KAAK,CAAC,GAAG,CAAC;MACzC5B,UAAU,CAAC+B,GAAG,CAAC,GAAGC,KAAK;IAC3B;IACA,OAAO;MAAE3D,GAAG,EAAEqD,OAAO;MAAE1B;IAAW,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;EACIuB,UAAUA,CAACU,OAAO,EAAEnD,aAAa,EAAEC,gBAAgB,EAAE;IACjD,IAAIV,GAAG,GAAG,IAAI,CAACA,GAAG;IAClB,IAAI6D,KAAK,GAAG,IAAI;IAChB;IACA,MAAMC,aAAa,GAAG;MAClBC,OAAO,EAAE,KAAK;MACdxE,OAAO,EAAEkB,aAAa,CAAClB,OAAO;MAC9BqE,OAAO;MACP,GAAGnD,aAAa;MAChB,GAAG,IAAI,CAACC,gBAAgB;MACxB,GAAGA;IACP,CAAC;IACD;IACA,MAAMsD,iBAAiB,GAAG,CAAC,aAAa,EAAE,MAAM,EAAE,WAAW,CAAC;IAC9D,KAAK,MAAM,CAACN,GAAG,EAAEC,KAAK,CAAC,IAAIM,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,EAAE;MACtD;MACA,IAAI,CAACE,iBAAiB,CAAC9D,QAAQ,CAACwD,GAAG,CAAC,IAAIC,KAAK,EAAE;QAC3C3D,GAAG,IAAI6D,KAAK,GAAG,GAAG,GAAG,GAAG;QACxBA,KAAK,GAAG,KAAK;QACb7D,GAAG,IAAI,IAAI,CAACmE,gBAAgB,CAACT,GAAG,EAAEC,KAAK,EAAElD,aAAa,CAAC;MAC3D;IACJ;IACA,OAAO2D,SAAS,CAACpE,GAAG,CAAC;EACzB;EACAmD,oBAAoBA,CAAC1C,aAAa,EAAE;IAChC,MAAM4D,aAAa,GAAG;MAAE,GAAG5D;IAAc,CAAC;IAC1C,IAAI4D,aAAa,CAACC,GAAG,EAAE;MACnBD,aAAa,CAACpD,GAAG,GAAGoD,aAAa,CAACpD,GAAG,IAAIoD,aAAa,CAACC,GAAG;MAC1D,OAAOD,aAAa,CAACC,GAAG;IAC5B;IACA,OAAOD,aAAa;EACxB;EACA;EACAF,gBAAgBA,CAACT,GAAG,EAAEC,KAAK,EAAElD,aAAa,EAAE;IACxC;IACA,QAAQiD,GAAG;MACP,KAAK,KAAK;QACN;QACA,IAAIjD,aAAa,CAAClB,OAAO,KAAK,OAAO,EAAE;UACnCmE,GAAG,GAAG,KAAK;QACf,CAAC,MACI,IAAI,IAAI,CAACnD,eAAe,IAAIoD,KAAK,KAAK,WAAW,EAAE;UACpD;UACA;UACAA,KAAK,GAAG,QAAQ;QACpB;QACA;MACJ,KAAK,KAAK;QACN;QACA,IAAIlD,aAAa,CAAClB,OAAO,KAAK,OAAO,EAAE;UACnCmE,GAAG,GAAG,KAAK;QACf;QACA;MACJ,KAAK,MAAM;QACP;QACA,MAAM7B,IAAI,GAAG,IAAI,CAAC0C,gBAAgB,CAACZ,KAAK,EAAElD,aAAa,CAAC;QACxD,IAAIoB,IAAI,EAAE;UACN8B,KAAK,GAAG9B,IAAI;QAChB;QACA;MACJ,KAAK,GAAG;QACJ;QACA;QACA,IAAIpB,aAAa,CAAClB,OAAO,KAAK,OAAO,EAAE;UACnCmE,GAAG,GAAG,GAAG;QACb;QACA;MACJ,KAAK,GAAG;QACJ;QACA;QACA,IAAIjD,aAAa,CAAClB,OAAO,KAAK,OAAO,EAAE;UACnCmE,GAAG,GAAG,GAAG;QACb;QACA;MACJ;MACA;IACJ;IACAA,GAAG,GAAGA,GAAG,CAACc,WAAW,CAAC,CAAC;IACvB,OAAOC,KAAK,CAACC,OAAO,CAACf,KAAK,CAAC,GACrB,GAAGD,GAAG,IAAIC,KAAK,CAACgB,IAAI,CAAC,GAAG,CAAC,EAAE,GAC3B,GAAGjB,GAAG,IAAIC,KAAK,GAAGiB,MAAM,CAACjB,KAAK,CAAC,GAAG,EAAE,EAAE;EAChD;EACA;EACAY,gBAAgBA,CAACM,SAAS,EAAEpE,aAAa,EAAE;IACvC;IACA,IAAI,CAACgE,KAAK,CAACC,OAAO,CAACG,SAAS,CAAC,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MACrD,OAAO,IAAI;IACf;IACA,MAAMC,eAAe;IACrB;IACAtE,aAAa,CAAClB,OAAO,KAAK,OAAO;IAC7B;IACA,IAAI,CAACiB,OAAO,CAACN,QAAQ,CAACO,aAAa,CAACQ,GAAG,IAAI,EAAE,CAAC;IAC9C;IACA,EAAE,IAAI,CAACV,eAAe,IAAIE,aAAa,CAACQ,GAAG,KAAK,WAAW,CAAC;IAChE,MAAMY,IAAI,GAAGgD,SAAS;IACtB,OAAOE,eAAe,GAAG,CAAClD,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI;EACxE;EACA;EACA,MAAMmD,iBAAiBA,CAAChF,GAAG,EAAE;IACzB,MAAMiC,QAAQ,GAAG,MAAM,IAAI,CAACC,KAAK,CAAClC,GAAG,CAAC;IACtC,MAAMmC,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEE,WAAW,CAAC;IAC1C,OAAOA,WAAW;EACtB;EACA;EACAC,cAAcA,CAACH,QAAQ,EAAEE,WAAW,EAAE;IAClC,MAAM8C,WAAW,GAAGhD,QAAQ,CAACiD,OAAO,CAAC,cAAc,CAAC;IACpD,IAAI,CAACjD,QAAQ,CAACkD,EAAE,IAAIjG,cAAc,CAACO,SAAS,CAACS,QAAQ,CAAC+E,WAAW,CAAC,EAAE;MAChE;MACA,MAAM3C,WAAW,GAAGzD,kBAAkB,CAAC,IAAI,CAACyD,WAAW,EAAE;QACrD3C,GAAG,EAAE;UAAEyF,YAAY,EAAE;QAAK;MAC9B,CAAC,CAAC;MACF,MAAMC,KAAK,GAAGnG,cAAc,CAACoG,SAAS,GAAGnD,WAAW,EAAEG,WAAW,CAAC;MAClE,MAAM,IAAIiD,KAAK,CAACF,KAAK,CAAC;IAC1B;EACJ;EACA;EACA7C,WAAWA,CAACL,WAAW,EAAE;IACrB,MAAMkD,KAAK,GAAGnG,cAAc,CAACoG,SAAS,GAAGnD,WAAW,EAAE,IAAI,CAACG,WAAW,CAAC;IACvE,OAAO,IAAIiD,KAAK,CAACF,KAAK,CAAC;EAC3B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}