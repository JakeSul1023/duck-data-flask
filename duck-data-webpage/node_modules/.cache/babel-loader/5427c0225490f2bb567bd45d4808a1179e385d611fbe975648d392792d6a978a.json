{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport Transition from \"./transition.js\";\nimport { cloneAttribute, getAttributeBufferLength } from \"./gpu-transition-utils.js\";\nexport class GPUTransitionBase {\n  constructor({\n    device,\n    attribute,\n    timeline\n  }) {\n    this.buffers = [];\n    /** The vertex count of the last buffer.\n     * Buffer may be larger than the actual length we want to use\n     * because we only reallocate buffers when they grow, not when they shrink,\n     * due to performance costs */\n    this.currentLength = 0;\n    this.device = device;\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = cloneAttribute(attribute);\n    this.currentStartIndices = attribute.startIndices;\n  }\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n  start(transitionSettings, numInstances, duration = Infinity) {\n    this.settings = transitionSettings;\n    this.currentStartIndices = this.attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(this.attribute, numInstances);\n    this.transition.start({\n      ...transitionSettings,\n      duration\n    });\n  }\n  update() {\n    const updated = this.transition.update();\n    if (updated) {\n      this.onUpdate();\n    }\n    return updated;\n  }\n  setBuffer(buffer) {\n    this.attributeInTransition.setData({\n      buffer,\n      normalized: this.attribute.settings.normalized,\n      // Retain placeholder value to generate correct shader layout\n      value: this.attributeInTransition.value\n    });\n  }\n  cancel() {\n    this.transition.cancel();\n  }\n  delete() {\n    this.cancel();\n    for (const buffer of this.buffers) {\n      buffer.destroy();\n    }\n    this.buffers.length = 0;\n  }\n}","map":{"version":3,"names":["Transition","cloneAttribute","getAttributeBufferLength","GPUTransitionBase","constructor","device","attribute","timeline","buffers","currentLength","transition","attributeInTransition","currentStartIndices","startIndices","inProgress","start","transitionSettings","numInstances","duration","Infinity","settings","update","updated","onUpdate","setBuffer","buffer","setData","normalized","value","cancel","delete","destroy","length"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\transitions\\gpu-transition.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport Transition from './transition';\nimport {cloneAttribute, getAttributeBufferLength} from './gpu-transition-utils';\n\nimport type {Device, Buffer} from '@luma.gl/core';\nimport type {Timeline} from '@luma.gl/engine';\nimport type Attribute from '../lib/attribute/attribute';\nimport type {TransitionSettings} from '../lib/attribute/transition-settings';\nimport type {NumericArray} from '../types/types';\n\nexport interface GPUTransition {\n  get type(): string;\n  get inProgress(): boolean;\n  get attributeInTransition(): Attribute;\n\n  /** Called when an attribute's values have changed and we need to start animating towards the new values */\n  start(transitionSettings: TransitionSettings, numInstances: number): void;\n  /** Called while transition is in progress */\n  update(): boolean;\n  /** Called when transition is interrupted */\n  cancel(): void;\n  /** Called when transition is disposed */\n  delete(): void;\n}\n\nexport abstract class GPUTransitionBase<SettingsT extends TransitionSettings>\n  implements GPUTransition\n{\n  abstract get type(): string;\n\n  device: Device;\n  attribute: Attribute;\n  transition: Transition;\n  settings?: SettingsT;\n  /** The attribute that holds the buffer in transition */\n  attributeInTransition: Attribute;\n  protected buffers: Buffer[] = [];\n  /** The vertex count of the last buffer.\n   * Buffer may be larger than the actual length we want to use\n   * because we only reallocate buffers when they grow, not when they shrink,\n   * due to performance costs */\n  protected currentLength: number = 0;\n  /** The start indices of the last buffer. */\n  protected currentStartIndices: NumericArray | null;\n\n  constructor({\n    device,\n    attribute,\n    timeline\n  }: {\n    device: Device;\n    attribute: Attribute;\n    timeline: Timeline;\n  }) {\n    this.device = device;\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = cloneAttribute(attribute);\n    this.currentStartIndices = attribute.startIndices;\n  }\n\n  get inProgress(): boolean {\n    return this.transition.inProgress;\n  }\n\n  start(transitionSettings: SettingsT, numInstances: number, duration: number = Infinity) {\n    this.settings = transitionSettings;\n    this.currentStartIndices = this.attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(this.attribute, numInstances);\n    this.transition.start({...transitionSettings, duration});\n  }\n\n  update(): boolean {\n    const updated = this.transition.update();\n    if (updated) {\n      this.onUpdate();\n    }\n    return updated;\n  }\n\n  abstract onUpdate(): void;\n\n  protected setBuffer(buffer: Buffer) {\n    this.attributeInTransition.setData({\n      buffer,\n      normalized: this.attribute.settings.normalized,\n      // Retain placeholder value to generate correct shader layout\n      value: this.attributeInTransition.value as NumericArray\n    });\n  }\n\n  cancel(): void {\n    this.transition.cancel();\n  }\n\n  delete(): void {\n    this.cancel();\n    for (const buffer of this.buffers) {\n      buffer.destroy();\n    }\n    this.buffers.length = 0;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,UAAU;AACjB,SAAQC,cAAc,EAAEC,wBAAwB,QAAC;AAuBjD,OAAM,MAAgBC,iBAAiB;EAoBrCC,YAAY;IACVC,MAAM;IACNC,SAAS;IACTC;EAAQ,CAKT;IAjBS,KAAAC,OAAO,GAAa,EAAE;IAChC;;;;IAIU,KAAAC,aAAa,GAAW,CAAC;IAajC,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,UAAU,GAAG,IAAIV,UAAU,CAACO,QAAQ,CAAC;IAC1C,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACK,qBAAqB,GAAGV,cAAc,CAACK,SAAS,CAAC;IACtD,IAAI,CAACM,mBAAmB,GAAGN,SAAS,CAACO,YAAY;EACnD;EAEA,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACJ,UAAU,CAACI,UAAU;EACnC;EAEAC,KAAKA,CAACC,kBAA6B,EAAEC,YAAoB,EAAEC,QAAA,GAAmBC,QAAQ;IACpF,IAAI,CAACC,QAAQ,GAAGJ,kBAAkB;IAClC,IAAI,CAACJ,mBAAmB,GAAG,IAAI,CAACN,SAAS,CAACO,YAAY;IACtD,IAAI,CAACJ,aAAa,GAAGP,wBAAwB,CAAC,IAAI,CAACI,SAAS,EAAEW,YAAY,CAAC;IAC3E,IAAI,CAACP,UAAU,CAACK,KAAK,CAAC;MAAC,GAAGC,kBAAkB;MAAEE;IAAQ,CAAC,CAAC;EAC1D;EAEAG,MAAMA,CAAA;IACJ,MAAMC,OAAO,GAAG,IAAI,CAACZ,UAAU,CAACW,MAAM,EAAE;IACxC,IAAIC,OAAO,EAAE;MACX,IAAI,CAACC,QAAQ,EAAE;IACjB;IACA,OAAOD,OAAO;EAChB;EAIUE,SAASA,CAACC,MAAc;IAChC,IAAI,CAACd,qBAAqB,CAACe,OAAO,CAAC;MACjCD,MAAM;MACNE,UAAU,EAAE,IAAI,CAACrB,SAAS,CAACc,QAAQ,CAACO,UAAU;MAC9C;MACAC,KAAK,EAAE,IAAI,CAACjB,qBAAqB,CAACiB;KACnC,CAAC;EACJ;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACnB,UAAU,CAACmB,MAAM,EAAE;EAC1B;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACD,MAAM,EAAE;IACb,KAAK,MAAMJ,MAAM,IAAI,IAAI,CAACjB,OAAO,EAAE;MACjCiB,MAAM,CAACM,OAAO,EAAE;IAClB;IACA,IAAI,CAACvB,OAAO,CAACwB,MAAM,GAAG,CAAC;EACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}