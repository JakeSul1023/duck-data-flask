{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Framebuffer } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nimport { getDepthStencilAttachmentWebGL } from \"../converters/webgl-texture-table.js\";\n/** luma.gl Framebuffer, WebGL implementation  */\nexport class WEBGLFramebuffer extends Framebuffer {\n  device;\n  gl;\n  handle;\n  colorAttachments = [];\n  depthStencilAttachment = null;\n  constructor(device, props) {\n    super(device, props);\n    // WebGL default framebuffer handle is null\n    const isDefaultFramebuffer = props.handle === null;\n    this.device = device;\n    this.gl = device.gl;\n    this.handle = this.props.handle || isDefaultFramebuffer ? this.props.handle : this.gl.createFramebuffer();\n    if (!isDefaultFramebuffer) {\n      // default framebuffer handle is null, so we can't set spector metadata...\n      device.setSpectorMetadata(this.handle, {\n        id: this.props.id,\n        props: this.props\n      });\n      // Auto create textures for attachments if needed\n      this.autoCreateAttachmentTextures();\n      this.updateAttachments();\n    }\n  }\n  /** destroys any auto created resources etc. */\n  destroy() {\n    super.destroy(); // destroys owned resources etc.\n    if (!this.destroyed && this.handle !== null) {\n      this.gl.deleteFramebuffer(this.handle);\n      // this.handle = null;\n    }\n  }\n  updateAttachments() {\n    /** Attach from a map of attachments */\n    // @ts-expect-error native bindFramebuffer is overridden by our state tracker\n    const prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n    // Walk the attachments\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      const attachment = this.colorAttachments[i];\n      if (attachment) {\n        const attachmentPoint = 36064 + i;\n        this._attachTextureView(attachmentPoint, attachment);\n      }\n    }\n    if (this.depthStencilAttachment) {\n      const attachmentPoint = getDepthStencilAttachmentWebGL(this.depthStencilAttachment.props.format);\n      this._attachTextureView(attachmentPoint, this.depthStencilAttachment);\n    }\n    /** Check the status */\n    if (this.device.props.debug) {\n      const status = this.gl.checkFramebufferStatus(36160);\n      if (status !== 36053) {\n        throw new Error(`Framebuffer ${_getFrameBufferStatus(status)}`);\n      }\n    }\n    this.gl.bindFramebuffer(36160, prevHandle);\n  }\n  // PRIVATE\n  /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */\n  // protected override createDepthStencilTexture(format: TextureFormat): Texture {\n  //   // return new WEBGLRenderbuffer(this.device, {\n  //   return new WEBGLTexture(this.device, {\n  //     id: `${this.id}-depth-stencil`,\n  //     format,\n  //     width: this.width,\n  //     height: this.height,\n  //     mipmaps: false\n  //   });\n  // }\n  /**\n   * @param attachment\n   * @param texture\n   * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`\n   * @param level = 0 - mipmapLevel\n   */\n  _attachTextureView(attachment, textureView) {\n    const {\n      gl\n    } = this.device;\n    const {\n      texture\n    } = textureView;\n    const level = textureView.props.baseMipLevel;\n    const layer = textureView.props.baseArrayLayer;\n    gl.bindTexture(texture.glTarget, texture.handle);\n    switch (texture.glTarget) {\n      case 35866:\n      case 32879:\n        gl.framebufferTextureLayer(36160, attachment, texture.handle, level, layer);\n        break;\n      case 34067:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n        break;\n      case 3553:\n        gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n        break;\n      default:\n        throw new Error('Illegal texture type');\n    }\n    gl.bindTexture(texture.glTarget, null);\n  }\n}\n// Helper functions\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < 34069 ? layer + 34069 : layer;\n}\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  switch (status) {\n    case 36053:\n      return 'success';\n    case 36054:\n      return 'Mismatched attachments';\n    case 36055:\n      return 'No attachments';\n    case 36057:\n      return 'Height/width mismatch';\n    case 36061:\n      return 'Unsupported or split attachments';\n    // WebGL2\n    case 36182:\n      return 'Samples mismatch';\n    // OVR_multiview2 extension\n    // case GL.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: return 'baseViewIndex mismatch';\n    default:\n      return `${status}`;\n  }\n}\n/**\n * Attachment resize is expected to be a noop if size is same\n *\nprotected override resizeAttachments(width: number, height: number): this {\n  // for default framebuffer, just update the stored size\n  if (this.handle === null) {\n    // assert(width === undefined && height === undefined);\n    this.width = this.gl.drawingBufferWidth;\n    this.height = this.gl.drawingBufferHeight;\n    return this;\n  }\n\n  if (width === undefined) {\n    width = this.gl.drawingBufferWidth;\n  }\n  if (height === undefined) {\n    height = this.gl.drawingBufferHeight;\n  }\n\n  // TODO Not clear that this is better than default destroy/create implementation\n\n  for (const colorAttachment of this.colorAttachments) {\n    colorAttachment.texture.clone({width, height});\n  }\n  if (this.depthStencilAttachment) {\n    this.depthStencilAttachment.texture.resize({width, height});\n  }\n  return this;\n}\n*/","map":{"version":3,"names":["Framebuffer","GL","getDepthStencilAttachmentWebGL","WEBGLFramebuffer","device","gl","handle","colorAttachments","depthStencilAttachment","constructor","props","isDefaultFramebuffer","createFramebuffer","setSpectorMetadata","id","autoCreateAttachmentTextures","updateAttachments","destroy","destroyed","deleteFramebuffer","prevHandle","bindFramebuffer","i","length","attachment","attachmentPoint","_attachTextureView","format","debug","status","checkFramebufferStatus","Error","_getFrameBufferStatus","textureView","texture","level","baseMipLevel","layer","baseArrayLayer","bindTexture","glTarget","framebufferTextureLayer","face","mapIndexToCubeMapFace","framebufferTexture2D"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\resources\\webgl-framebuffer.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {FramebufferProps} from '@luma.gl/core';\nimport {Framebuffer} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLTexture} from './webgl-texture';\nimport {WEBGLTextureView} from './webgl-texture-view';\nimport {getDepthStencilAttachmentWebGL} from '../converters/webgl-texture-table';\n\nexport type Attachment = WEBGLTextureView | WEBGLTexture; // | WEBGLRenderbuffer;\n\n/** luma.gl Framebuffer, WebGL implementation  */\nexport class WEBGLFramebuffer extends Framebuffer {\n  device: WebGLDevice;\n  gl: WebGL2RenderingContext;\n  handle: WebGLFramebuffer;\n\n  colorAttachments: WEBGLTextureView[] = [];\n  depthStencilAttachment: WEBGLTextureView | null = null;\n\n  constructor(device: WebGLDevice, props: FramebufferProps) {\n    super(device, props);\n\n    // WebGL default framebuffer handle is null\n    const isDefaultFramebuffer = props.handle === null;\n\n    this.device = device;\n    this.gl = device.gl;\n    this.handle =\n      this.props.handle || isDefaultFramebuffer ? this.props.handle : this.gl.createFramebuffer();\n\n    if (!isDefaultFramebuffer) {\n      // default framebuffer handle is null, so we can't set spector metadata...\n      device.setSpectorMetadata(this.handle, {id: this.props.id, props: this.props});\n\n      // Auto create textures for attachments if needed\n      this.autoCreateAttachmentTextures();\n\n      this.updateAttachments();\n    }\n  }\n\n  /** destroys any auto created resources etc. */\n  override destroy(): void {\n    super.destroy(); // destroys owned resources etc.\n    if (!this.destroyed && this.handle !== null) {\n      this.gl.deleteFramebuffer(this.handle);\n      // this.handle = null;\n    }\n  }\n\n  protected updateAttachments(): void {\n    /** Attach from a map of attachments */\n    // @ts-expect-error native bindFramebuffer is overridden by our state tracker\n    const prevHandle: WebGLFramebuffer | null = this.gl.bindFramebuffer(\n      GL.FRAMEBUFFER,\n      this.handle\n    );\n\n    // Walk the attachments\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      const attachment = this.colorAttachments[i];\n      if (attachment) {\n        const attachmentPoint = GL.COLOR_ATTACHMENT0 + i;\n        this._attachTextureView(attachmentPoint, attachment);\n      }\n    }\n\n    if (this.depthStencilAttachment) {\n      const attachmentPoint = getDepthStencilAttachmentWebGL(\n        this.depthStencilAttachment.props.format\n      );\n      this._attachTextureView(attachmentPoint, this.depthStencilAttachment);\n    }\n\n    /** Check the status */\n    if (this.device.props.debug) {\n      const status = this.gl.checkFramebufferStatus(GL.FRAMEBUFFER) as GL;\n      if (status !== GL.FRAMEBUFFER_COMPLETE) {\n        throw new Error(`Framebuffer ${_getFrameBufferStatus(status)}`);\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle);\n  }\n\n  // PRIVATE\n\n  /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */\n  // protected override createDepthStencilTexture(format: TextureFormat): Texture {\n  //   // return new WEBGLRenderbuffer(this.device, {\n  //   return new WEBGLTexture(this.device, {\n  //     id: `${this.id}-depth-stencil`,\n  //     format,\n  //     width: this.width,\n  //     height: this.height,\n  //     mipmaps: false\n  //   });\n  // }\n\n  /**\n   * @param attachment\n   * @param texture\n   * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`\n   * @param level = 0 - mipmapLevel\n   */\n  protected _attachTextureView(attachment: GL, textureView: WEBGLTextureView): void {\n    const {gl} = this.device;\n    const {texture} = textureView;\n    const level = textureView.props.baseMipLevel;\n    const layer = textureView.props.baseArrayLayer;\n\n    gl.bindTexture(texture.glTarget, texture.handle);\n\n    switch (texture.glTarget) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.handle, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        throw new Error('Illegal texture type');\n    }\n\n    gl.bindTexture(texture.glTarget, null);\n  }\n}\n\n// Helper functions\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer: number | GL): GL {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < (GL.TEXTURE_CUBE_MAP_POSITIVE_X as number)\n    ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X\n    : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status: GL) {\n  switch (status) {\n    case GL.FRAMEBUFFER_COMPLETE:\n      return 'success';\n    case GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'Mismatched attachments';\n    case GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'No attachments';\n    case GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'Height/width mismatch';\n    case GL.FRAMEBUFFER_UNSUPPORTED:\n      return 'Unsupported or split attachments';\n    // WebGL2\n    case GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n      return 'Samples mismatch';\n    // OVR_multiview2 extension\n    // case GL.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: return 'baseViewIndex mismatch';\n    default:\n      return `${status}`;\n  }\n}\n\n/**\n * Attachment resize is expected to be a noop if size is same\n *\nprotected override resizeAttachments(width: number, height: number): this {\n  // for default framebuffer, just update the stored size\n  if (this.handle === null) {\n    // assert(width === undefined && height === undefined);\n    this.width = this.gl.drawingBufferWidth;\n    this.height = this.gl.drawingBufferHeight;\n    return this;\n  }\n\n  if (width === undefined) {\n    width = this.gl.drawingBufferWidth;\n  }\n  if (height === undefined) {\n    height = this.gl.drawingBufferHeight;\n  }\n\n  // TODO Not clear that this is better than default destroy/create implementation\n\n  for (const colorAttachment of this.colorAttachments) {\n    colorAttachment.texture.clone({width, height});\n  }\n  if (this.depthStencilAttachment) {\n    this.depthStencilAttachment.texture.resize({width, height});\n  }\n  return this;\n}\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}