{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n *\n * @param baseOptions Can be undefined, in which case a fresh options object will be minted\n * @param newOptions\n * @returns\n */\nexport function mergeLoaderOptions(baseOptions, newOptions) {\n  return mergeOptionsRecursively(baseOptions || {}, newOptions);\n}\nfunction mergeOptionsRecursively(baseOptions, newOptions, level = 0) {\n  // Sanity check (jest test runner overwrites the console object which can lead to infinite recursion)\n  if (level > 3) {\n    return newOptions;\n  }\n  const options = {\n    ...baseOptions\n  };\n  for (const [key, newValue] of Object.entries(newOptions)) {\n    if (newValue && typeof newValue === 'object' && !Array.isArray(newValue)) {\n      options[key] = mergeOptionsRecursively(options[key] || {}, newOptions[key], level + 1);\n      // Object.assign(options[key] as object, newOptions[key]);\n    } else {\n      options[key] = newOptions[key];\n    }\n  }\n  return options;\n}","map":{"version":3,"names":["mergeLoaderOptions","baseOptions","newOptions","mergeOptionsRecursively","level","options","key","newValue","Object","entries","Array","isArray"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/loader-utils/dist/lib/option-utils/merge-loader-options.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n *\n * @param baseOptions Can be undefined, in which case a fresh options object will be minted\n * @param newOptions\n * @returns\n */\nexport function mergeLoaderOptions(baseOptions, newOptions) {\n    return mergeOptionsRecursively(baseOptions || {}, newOptions);\n}\nfunction mergeOptionsRecursively(baseOptions, newOptions, level = 0) {\n    // Sanity check (jest test runner overwrites the console object which can lead to infinite recursion)\n    if (level > 3) {\n        return newOptions;\n    }\n    const options = { ...baseOptions };\n    for (const [key, newValue] of Object.entries(newOptions)) {\n        if (newValue && typeof newValue === 'object' && !Array.isArray(newValue)) {\n            options[key] = mergeOptionsRecursively(options[key] || {}, newOptions[key], level + 1);\n            // Object.assign(options[key] as object, newOptions[key]);\n        }\n        else {\n            options[key] = newOptions[key];\n        }\n    }\n    return options;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,kBAAkBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EACxD,OAAOC,uBAAuB,CAACF,WAAW,IAAI,CAAC,CAAC,EAAEC,UAAU,CAAC;AACjE;AACA,SAASC,uBAAuBA,CAACF,WAAW,EAAEC,UAAU,EAAEE,KAAK,GAAG,CAAC,EAAE;EACjE;EACA,IAAIA,KAAK,GAAG,CAAC,EAAE;IACX,OAAOF,UAAU;EACrB;EACA,MAAMG,OAAO,GAAG;IAAE,GAAGJ;EAAY,CAAC;EAClC,KAAK,MAAM,CAACK,GAAG,EAAEC,QAAQ,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACP,UAAU,CAAC,EAAE;IACtD,IAAIK,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAAC,EAAE;MACtEF,OAAO,CAACC,GAAG,CAAC,GAAGH,uBAAuB,CAACE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAEJ,UAAU,CAACI,GAAG,CAAC,EAAEF,KAAK,GAAG,CAAC,CAAC;MACtF;IACJ,CAAC,MACI;MACDC,OAAO,CAACC,GAAG,CAAC,GAAGJ,UAAU,CAACI,GAAG,CAAC;IAClC;EACJ;EACA,OAAOD,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}