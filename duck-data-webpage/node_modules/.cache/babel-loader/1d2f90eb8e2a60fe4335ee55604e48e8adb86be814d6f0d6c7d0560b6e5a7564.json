{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { BufferTransform } from '@luma.gl/engine';\nimport { fp64arithmetic } from '@luma.gl/shadertools';\nimport { GL } from '@luma.gl/constants';\nimport { getAttributeTypeFromSize, cycleBuffers, padBuffer, matchBuffer, getFloat32VertexFormat } from \"./gpu-transition-utils.js\";\nimport { GPUTransitionBase } from \"./gpu-transition.js\";\nexport default class GPUInterpolationTransition extends GPUTransitionBase {\n  constructor(_ref) {\n    let {\n      device,\n      attribute,\n      timeline\n    } = _ref;\n    super({\n      device,\n      attribute,\n      timeline\n    });\n    this.type = 'interpolation';\n    this.transform = getTransform(device, attribute);\n  }\n  start(transitionSettings, numInstances) {\n    const prevLength = this.currentLength;\n    const prevStartIndices = this.currentStartIndices;\n    super.start(transitionSettings, numInstances, transitionSettings.duration);\n    if (transitionSettings.duration <= 0) {\n      this.transition.cancel();\n      return;\n    }\n    const {\n      buffers,\n      attribute\n    } = this;\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the current buffer.\n    cycleBuffers(buffers);\n    buffers[0] = padBuffer({\n      device: this.device,\n      buffer: buffers[0],\n      attribute,\n      fromLength: prevLength,\n      toLength: this.currentLength,\n      fromStartIndices: prevStartIndices,\n      getData: transitionSettings.enter\n    });\n    buffers[1] = matchBuffer({\n      device: this.device,\n      source: buffers[0],\n      target: buffers[1]\n    });\n    this.setBuffer(buffers[1]);\n    const {\n      transform\n    } = this;\n    const model = transform.model;\n    let vertexCount = Math.floor(this.currentLength / attribute.size);\n    if (useFp64(attribute)) {\n      vertexCount /= 2;\n    }\n    model.setVertexCount(vertexCount);\n    if (attribute.isConstant) {\n      model.setAttributes({\n        aFrom: buffers[0]\n      });\n      model.setConstantAttributes({\n        aTo: attribute.value\n      });\n    } else {\n      model.setAttributes({\n        aFrom: buffers[0],\n        aTo: attribute.getBuffer()\n      });\n    }\n    transform.transformFeedback.setBuffers({\n      vCurrent: buffers[1]\n    });\n  }\n  onUpdate() {\n    const {\n      duration,\n      easing\n    } = this.settings;\n    const {\n      time\n    } = this.transition;\n    let t = time / duration;\n    if (easing) {\n      t = easing(t);\n    }\n    const {\n      model\n    } = this.transform;\n    const interpolationProps = {\n      time: t\n    };\n    model.shaderInputs.setProps({\n      interpolation: interpolationProps\n    });\n    this.transform.run({\n      discard: true\n    });\n  }\n  delete() {\n    super.delete();\n    this.transform.destroy();\n  }\n}\nconst uniformBlock = `\\\nuniform interpolationUniforms {\n  float time;\n} interpolation;\n`;\nconst interpolationUniforms = {\n  name: 'interpolation',\n  vs: uniformBlock,\n  uniformTypes: {\n    time: 'f32'\n  }\n};\nconst vs = `\\\n#version 300 es\n#define SHADER_NAME interpolation-transition-vertex-shader\n\nin ATTRIBUTE_TYPE aFrom;\nin ATTRIBUTE_TYPE aTo;\nout ATTRIBUTE_TYPE vCurrent;\n\nvoid main(void) {\n  vCurrent = mix(aFrom, aTo, interpolation.time);\n  gl_Position = vec4(0.0);\n}\n`;\nconst vs64 = `\\\n#version 300 es\n#define SHADER_NAME interpolation-transition-vertex-shader\n\nin ATTRIBUTE_TYPE aFrom;\nin ATTRIBUTE_TYPE aFrom64Low;\nin ATTRIBUTE_TYPE aTo;\nin ATTRIBUTE_TYPE aTo64Low;\nout ATTRIBUTE_TYPE vCurrent;\nout ATTRIBUTE_TYPE vCurrent64Low;\n\nvec2 mix_fp64(vec2 a, vec2 b, float x) {\n  vec2 range = sub_fp64(b, a);\n  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));\n}\n\nvoid main(void) {\n  for (int i=0; i<ATTRIBUTE_SIZE; i++) {\n    vec2 value = mix_fp64(vec2(aFrom[i], aFrom64Low[i]), vec2(aTo[i], aTo64Low[i]), interpolation.time);\n    vCurrent[i] = value.x;\n    vCurrent64Low[i] = value.y;\n  }\n  gl_Position = vec4(0.0);\n}\n`;\nfunction useFp64(attribute) {\n  return attribute.doublePrecision && attribute.value instanceof Float64Array;\n}\nfunction getTransform(device, attribute) {\n  const attributeSize = attribute.size;\n  const attributeType = getAttributeTypeFromSize(attributeSize);\n  const inputFormat = getFloat32VertexFormat(attributeSize);\n  const bufferLayout = attribute.getBufferLayout();\n  if (useFp64(attribute)) {\n    return new BufferTransform(device, {\n      vs: vs64,\n      bufferLayout: [{\n        name: 'aFrom',\n        byteStride: 8 * attributeSize,\n        attributes: [{\n          attribute: 'aFrom',\n          format: inputFormat,\n          byteOffset: 0\n        }, {\n          attribute: 'aFrom64Low',\n          format: inputFormat,\n          byteOffset: 4 * attributeSize\n        }]\n      }, {\n        name: 'aTo',\n        byteStride: 8 * attributeSize,\n        attributes: [{\n          attribute: 'aTo',\n          format: inputFormat,\n          byteOffset: 0\n        }, {\n          attribute: 'aTo64Low',\n          format: inputFormat,\n          byteOffset: 4 * attributeSize\n        }]\n      }],\n      // @ts-expect-error fp64 module only sets ONE uniform via defaultUniforms\n      modules: [fp64arithmetic, interpolationUniforms],\n      defines: {\n        ATTRIBUTE_TYPE: attributeType,\n        ATTRIBUTE_SIZE: attributeSize\n      },\n      // Default uniforms are not set without this\n      moduleSettings: {},\n      varyings: ['vCurrent', 'vCurrent64Low'],\n      bufferMode: 35980,\n      disableWarnings: true\n    });\n  }\n  return new BufferTransform(device, {\n    vs,\n    bufferLayout: [{\n      name: 'aFrom',\n      format: inputFormat\n    }, {\n      name: 'aTo',\n      format: bufferLayout.attributes[0].format\n    }],\n    modules: [interpolationUniforms],\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vCurrent'],\n    // TODO investigate why this is needed\n    disableWarnings: true\n  });\n}\n//# sourceMappingURL=gpu-interpolation-transition.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}