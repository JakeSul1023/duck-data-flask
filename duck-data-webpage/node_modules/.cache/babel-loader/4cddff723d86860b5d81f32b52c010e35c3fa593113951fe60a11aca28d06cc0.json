{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBrowser } from '@loaders.gl/loader-utils';\nimport { ConsoleLog } from \"./loggers.js\";\nexport const DEFAULT_LOADER_OPTIONS = {\n  // baseUri\n  fetch: null,\n  mimeType: undefined,\n  nothrow: false,\n  log: new ConsoleLog(),\n  // A probe.gl compatible (`log.log()()` syntax) that just logs to console\n  useLocalLibraries: false,\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true,\n  // By default, use worker if provided by loader.\n  maxConcurrency: 3,\n  // How many worker instances should be created for each loader.\n  maxMobileConcurrency: 1,\n  // How many worker instances should be created for each loader on mobile devices.\n  reuseWorkers: isBrowser,\n  // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)\n  _nodeWorkers: false,\n  // By default do not support node workers\n  _workerType: '',\n  // 'test' to use locally generated workers\n  limit: 0,\n  _limitMB: 0,\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  metadata: false,\n  // TODO - currently only implemented for parseInBatches, adds initial metadata batch,\n  transforms: []\n};\nexport const REMOVED_LOADER_OPTIONS = {\n  throws: 'nothrow',\n  dataType: '(no longer used)',\n  uri: 'baseUri',\n  // Warn if fetch options are used on top-level\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};","map":{"version":3,"names":["isBrowser","ConsoleLog","DEFAULT_LOADER_OPTIONS","fetch","mimeType","undefined","nothrow","log","useLocalLibraries","CDN","worker","maxConcurrency","maxMobileConcurrency","reuseWorkers","_nodeWorkers","_workerType","limit","_limitMB","batchSize","batchDebounceMs","metadata","transforms","REMOVED_LOADER_OPTIONS","throws","dataType","uri","method","headers","body","mode","credentials","cache","redirect","referrer","referrerPolicy","integrity","keepalive","signal"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/loader-utils/option-defaults.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBrowser } from '@loaders.gl/loader-utils';\nimport { ConsoleLog } from \"./loggers.js\";\nexport const DEFAULT_LOADER_OPTIONS = {\n    // baseUri\n    fetch: null,\n    mimeType: undefined,\n    nothrow: false,\n    log: new ConsoleLog(), // A probe.gl compatible (`log.log()()` syntax) that just logs to console\n    useLocalLibraries: false,\n    CDN: 'https://unpkg.com/@loaders.gl',\n    worker: true, // By default, use worker if provided by loader.\n    maxConcurrency: 3, // How many worker instances should be created for each loader.\n    maxMobileConcurrency: 1, // How many worker instances should be created for each loader on mobile devices.\n    reuseWorkers: isBrowser, // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)\n    _nodeWorkers: false, // By default do not support node workers\n    _workerType: '', // 'test' to use locally generated workers\n    limit: 0,\n    _limitMB: 0,\n    batchSize: 'auto',\n    batchDebounceMs: 0,\n    metadata: false, // TODO - currently only implemented for parseInBatches, adds initial metadata batch,\n    transforms: []\n};\nexport const REMOVED_LOADER_OPTIONS = {\n    throws: 'nothrow',\n    dataType: '(no longer used)',\n    uri: 'baseUri',\n    // Warn if fetch options are used on top-level\n    method: 'fetch.method',\n    headers: 'fetch.headers',\n    body: 'fetch.body',\n    mode: 'fetch.mode',\n    credentials: 'fetch.credentials',\n    cache: 'fetch.cache',\n    redirect: 'fetch.redirect',\n    referrer: 'fetch.referrer',\n    referrerPolicy: 'fetch.referrerPolicy',\n    integrity: 'fetch.integrity',\n    keepalive: 'fetch.keepalive',\n    signal: 'fetch.signal'\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAO,MAAMC,sBAAsB,GAAG;EAClC;EACAC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAEC,SAAS;EACnBC,OAAO,EAAE,KAAK;EACdC,GAAG,EAAE,IAAIN,UAAU,CAAC,CAAC;EAAE;EACvBO,iBAAiB,EAAE,KAAK;EACxBC,GAAG,EAAE,+BAA+B;EACpCC,MAAM,EAAE,IAAI;EAAE;EACdC,cAAc,EAAE,CAAC;EAAE;EACnBC,oBAAoB,EAAE,CAAC;EAAE;EACzBC,YAAY,EAAEb,SAAS;EAAE;EACzBc,YAAY,EAAE,KAAK;EAAE;EACrBC,WAAW,EAAE,EAAE;EAAE;EACjBC,KAAK,EAAE,CAAC;EACRC,QAAQ,EAAE,CAAC;EACXC,SAAS,EAAE,MAAM;EACjBC,eAAe,EAAE,CAAC;EAClBC,QAAQ,EAAE,KAAK;EAAE;EACjBC,UAAU,EAAE;AAChB,CAAC;AACD,OAAO,MAAMC,sBAAsB,GAAG;EAClCC,MAAM,EAAE,SAAS;EACjBC,QAAQ,EAAE,kBAAkB;EAC5BC,GAAG,EAAE,SAAS;EACd;EACAC,MAAM,EAAE,cAAc;EACtBC,OAAO,EAAE,eAAe;EACxBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,YAAY;EAClBC,WAAW,EAAE,mBAAmB;EAChCC,KAAK,EAAE,aAAa;EACpBC,QAAQ,EAAE,gBAAgB;EAC1BC,QAAQ,EAAE,gBAAgB;EAC1BC,cAAc,EAAE,sBAAsB;EACtCC,SAAS,EAAE,iBAAiB;EAC5BC,SAAS,EAAE,iBAAiB;EAC5BC,MAAM,EAAE;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}