{"ast":null,"code":"/* global setTimeout, clearTimeout */\nimport { Recognizer } from \"../recognizer/recognizer.js\";\nimport { RecognizerState } from \"../recognizer/recognizer-state.js\";\nimport { TOUCH_ACTION_AUTO } from \"../touchaction/touchaction-Consts.js\";\nimport { InputEvent } from \"../input/input-consts.js\";\nconst EVENT_NAMES = ['', 'up'];\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n */\nexport class PressRecognizer extends Recognizer {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      enable: true,\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      threshold: 9,\n      ...options\n    });\n    this._timer = null;\n    this._input = null;\n  }\n  getTouchAction() {\n    return [TOUCH_ACTION_AUTO];\n  }\n  getEventNames() {\n    return EVENT_NAMES.map(suffix => this.options.event + suffix);\n  }\n  process(input) {\n    const {\n      options\n    } = this;\n    const validPointers = input.pointers.length === options.pointers;\n    const validMovement = input.distance < options.threshold;\n    const validTime = input.deltaTime > options.time;\n    this._input = input;\n    // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n    if (!validMovement || !validPointers || input.eventType & (InputEvent.End | InputEvent.Cancel) && !validTime) {\n      this.reset();\n    } else if (input.eventType & InputEvent.Start) {\n      this.reset();\n      this._timer = setTimeout(() => {\n        this.state = RecognizerState.Recognized;\n        this.tryEmit();\n      }, options.time);\n    } else if (input.eventType & InputEvent.End) {\n      return RecognizerState.Recognized;\n    }\n    return RecognizerState.Failed;\n  }\n  reset() {\n    clearTimeout(this._timer);\n  }\n  emit(input) {\n    if (this.state !== RecognizerState.Recognized) {\n      return;\n    }\n    if (input && input.eventType & InputEvent.End) {\n      this.manager.emit(`${this.options.event}up`, input);\n    } else {\n      this._input.timeStamp = Date.now();\n      this.manager.emit(this.options.event, this._input);\n    }\n  }\n}\n//# sourceMappingURL=press.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}