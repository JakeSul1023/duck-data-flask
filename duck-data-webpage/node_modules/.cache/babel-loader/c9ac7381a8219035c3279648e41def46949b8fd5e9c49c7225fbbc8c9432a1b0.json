{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTableCell, getTableLength, getTableRowAsArray, getTableRowAsObject } from \"./table-accessors.js\";\nimport { deduceTableSchema } from \"./table-schema.js\";\nimport { makeColumnFromField } from \"./table-column.js\";\n/**\n * Convert a table to a different shape\n * @param table\n * @param shape\n * @returns\n */\nexport function convertTable(table, shape) {\n  switch (shape) {\n    case 'object-row-table':\n      return makeObjectRowTable(table);\n    case 'array-row-table':\n      return makeArrayRowTable(table);\n    case 'columnar-table':\n      return makeColumnarTable(table);\n    case 'arrow-table':\n      return makeArrowTable(table);\n    default:\n      throw new Error(shape);\n  }\n}\n/**\n * Convert a table to apache arrow format\n * @note this depends on the `@loaders.gl/arrow module being imported\n */\nexport function makeArrowTable(table) {\n  const _makeArrowTable = globalThis.__loaders?._makeArrowTable;\n  if (!_makeArrowTable) {\n    throw new Error('');\n  }\n  return _makeArrowTable(table);\n}\n/** Convert any simple table into columnar format */\nexport function makeColumnarTable(table) {\n  // TODO - should schema really be optional?\n  const schema = table.schema || deduceTableSchema(table);\n  const fields = table.schema?.fields || [];\n  if (table.shape === 'columnar-table') {\n    return {\n      ...table,\n      schema\n    };\n  }\n  const length = getTableLength(table);\n  const columns = {};\n  for (const field of fields) {\n    const column = makeColumnFromField(field, length);\n    columns[field.name] = column;\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n      column[rowIndex] = getTableCell(table, rowIndex, field.name);\n    }\n  }\n  return {\n    shape: 'columnar-table',\n    schema,\n    data: columns\n  };\n}\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table) {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table) {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n/**\n *\n * @note - should be part of schema module\n *\nexport function convertColumnarToRowFormatTable(columnarTable: ColumnarTable): ObjectRowTable {\n  const tableKeys = Object.keys(columnarTable);\n  const tableRowsCount = columnarTable[tableKeys[0]].length;\n\n  const rowFormatTable: {}[] = [];\n\n  for (let index = 0; index < tableRowsCount; index++) {\n    const tableItem = {};\n    for (let keyIndex = 0; keyIndex < tableKeys.length; keyIndex++) {\n      const fieldName = tableKeys[keyIndex];\n      tableItem[fieldName] = columnarTable[fieldName][index];\n    }\n    rowFormatTable.push(tableItem);\n  }\n\n  return {\n    shape: 'object-row-table',\n    schema: columnarTable.schema,\n    data: rowFormatTable\n  };\n}\n*/","map":{"version":3,"names":["getTableCell","getTableLength","getTableRowAsArray","getTableRowAsObject","deduceTableSchema","makeColumnFromField","convertTable","table","shape","makeObjectRowTable","makeArrayRowTable","makeColumnarTable","makeArrowTable","Error","_makeArrowTable","globalThis","__loaders","schema","fields","length","columns","field","column","name","rowIndex","data","Array"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/simple-table/convert-table.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTableCell, getTableLength, getTableRowAsArray, getTableRowAsObject } from \"./table-accessors.js\";\nimport { deduceTableSchema } from \"./table-schema.js\";\nimport { makeColumnFromField } from \"./table-column.js\";\n/**\n * Convert a table to a different shape\n * @param table\n * @param shape\n * @returns\n */\nexport function convertTable(table, shape) {\n    switch (shape) {\n        case 'object-row-table':\n            return makeObjectRowTable(table);\n        case 'array-row-table':\n            return makeArrayRowTable(table);\n        case 'columnar-table':\n            return makeColumnarTable(table);\n        case 'arrow-table':\n            return makeArrowTable(table);\n        default:\n            throw new Error(shape);\n    }\n}\n/**\n * Convert a table to apache arrow format\n * @note this depends on the `@loaders.gl/arrow module being imported\n */\nexport function makeArrowTable(table) {\n    const _makeArrowTable = globalThis.__loaders?._makeArrowTable;\n    if (!_makeArrowTable) {\n        throw new Error('');\n    }\n    return _makeArrowTable(table);\n}\n/** Convert any simple table into columnar format */\nexport function makeColumnarTable(table) {\n    // TODO - should schema really be optional?\n    const schema = table.schema || deduceTableSchema(table);\n    const fields = table.schema?.fields || [];\n    if (table.shape === 'columnar-table') {\n        return { ...table, schema };\n    }\n    const length = getTableLength(table);\n    const columns = {};\n    for (const field of fields) {\n        const column = makeColumnFromField(field, length);\n        columns[field.name] = column;\n        for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n            column[rowIndex] = getTableCell(table, rowIndex, field.name);\n        }\n    }\n    return {\n        shape: 'columnar-table',\n        schema,\n        data: columns\n    };\n}\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table) {\n    if (table.shape === 'array-row-table') {\n        return table;\n    }\n    const length = getTableLength(table);\n    const data = new Array(length);\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n        data[rowIndex] = getTableRowAsArray(table, rowIndex);\n    }\n    return {\n        shape: 'array-row-table',\n        schema: table.schema,\n        data\n    };\n}\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table) {\n    if (table.shape === 'object-row-table') {\n        return table;\n    }\n    const length = getTableLength(table);\n    const data = new Array(length);\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n        data[rowIndex] = getTableRowAsObject(table, rowIndex);\n    }\n    return {\n        shape: 'object-row-table',\n        schema: table.schema,\n        data\n    };\n}\n/**\n *\n * @note - should be part of schema module\n *\nexport function convertColumnarToRowFormatTable(columnarTable: ColumnarTable): ObjectRowTable {\n  const tableKeys = Object.keys(columnarTable);\n  const tableRowsCount = columnarTable[tableKeys[0]].length;\n\n  const rowFormatTable: {}[] = [];\n\n  for (let index = 0; index < tableRowsCount; index++) {\n    const tableItem = {};\n    for (let keyIndex = 0; keyIndex < tableKeys.length; keyIndex++) {\n      const fieldName = tableKeys[keyIndex];\n      tableItem[fieldName] = columnarTable[fieldName][index];\n    }\n    rowFormatTable.push(tableItem);\n  }\n\n  return {\n    shape: 'object-row-table',\n    schema: columnarTable.schema,\n    data: rowFormatTable\n  };\n}\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}