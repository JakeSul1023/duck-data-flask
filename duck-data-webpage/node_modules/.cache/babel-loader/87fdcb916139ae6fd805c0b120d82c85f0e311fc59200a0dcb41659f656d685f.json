{"ast":null,"code":"import { AttrRecognizer } from \"./attribute.js\";\nimport { InputDirection } from \"../input/input-consts.js\";\nimport { RecognizerState } from \"../recognizer/recognizer-state.js\";\nimport { TOUCH_ACTION_PAN_X, TOUCH_ACTION_PAN_Y } from \"../touchaction/touchaction-Consts.js\";\nconst EVENT_NAMES = ['', 'start', 'move', 'end', 'cancel', 'up', 'down', 'left', 'right'];\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n */\nexport class PanRecognizer extends AttrRecognizer {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      enable: true,\n      pointers: 1,\n      event: 'pan',\n      threshold: 10,\n      direction: InputDirection.All,\n      ...options\n    });\n    this.pX = null;\n    this.pY = null;\n  }\n  getTouchAction() {\n    const {\n      options: {\n        direction\n      }\n    } = this;\n    const actions = [];\n    if (direction & InputDirection.Horizontal) {\n      actions.push(TOUCH_ACTION_PAN_Y);\n    }\n    if (direction & InputDirection.Vertical) {\n      actions.push(TOUCH_ACTION_PAN_X);\n    }\n    return actions;\n  }\n  getEventNames() {\n    return EVENT_NAMES.map(suffix => this.options.event + suffix);\n  }\n  directionTest(input) {\n    const {\n      options\n    } = this;\n    let hasMoved = true;\n    let {\n      distance\n    } = input;\n    let {\n      direction\n    } = input;\n    const x = input.deltaX;\n    const y = input.deltaY;\n    // lock to axis?\n    if (!(direction & options.direction)) {\n      if (options.direction & InputDirection.Horizontal) {\n        direction = x === 0 ? InputDirection.None : x < 0 ? InputDirection.Left : InputDirection.Right;\n        hasMoved = x !== this.pX;\n        distance = Math.abs(input.deltaX);\n      } else {\n        direction = y === 0 ? InputDirection.None : y < 0 ? InputDirection.Up : InputDirection.Down;\n        hasMoved = y !== this.pY;\n        distance = Math.abs(input.deltaY);\n      }\n    }\n    input.direction = direction;\n    return hasMoved && distance > options.threshold && Boolean(direction & options.direction);\n  }\n  attrTest(input) {\n    return super.attrTest(input) && (Boolean(this.state & RecognizerState.Began) || !(this.state & RecognizerState.Began) && this.directionTest(input));\n  }\n  emit(input) {\n    this.pX = input.deltaX;\n    this.pY = input.deltaY;\n    const direction = InputDirection[input.direction].toLowerCase();\n    if (direction) {\n      input.additionalEvent = this.options.event + direction;\n    }\n    super.emit(input);\n  }\n}\n//# sourceMappingURL=pan.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}