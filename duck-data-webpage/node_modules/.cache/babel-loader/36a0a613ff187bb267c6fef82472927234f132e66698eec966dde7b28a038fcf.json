{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { project } from \"../../project/project.js\";\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: new Float32Array([1, 1, 2])\n};\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    // @ts-expect-error TODO add types\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\nconst fs = /* glsl */`\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n/**\n * Cheap lighting - single directional light, single dot product, one uniform\n */\nexport const dirlight = {\n  name: 'dirlight',\n  // vs // TODO - reuse normal from geometry module\n  fs,\n  getUniforms,\n  dependencies: [project]\n};","map":{"version":3,"names":["project","DEFAULT_MODULE_OPTIONS","lightDirection","Float32Array","getUniforms","opts","uniforms","dirlight_uLightDirection","fs","dirlight","name","dependencies"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules-webgl1\\lighting\\dirlight\\dirlight.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport type {NumericArray} from '../../../types';\nimport {project} from '../../project/project';\n\n/* eslint-disable camelcase */\n\nexport type DirlightOptions = {\n  lightDirection?: NumericArray;\n};\n\nconst DEFAULT_MODULE_OPTIONS: Required<DirlightOptions> = {\n  lightDirection: new Float32Array([1, 1, 2])\n};\n\nfunction getUniforms(opts: DirlightOptions = DEFAULT_MODULE_OPTIONS): Record<string, any> {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    // @ts-expect-error TODO add types\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\nconst fs = /* glsl */ `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\n/**\n * Cheap lighting - single directional light, single dot product, one uniform\n */\nexport const dirlight: ShaderModule = {\n  name: 'dirlight',\n  // vs // TODO - reuse normal from geometry module\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,OAAO,QAAC;AAQhB,MAAMC,sBAAsB,GAA8B;EACxDC,cAAc,EAAE,IAAIC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;CAC3C;AAED,SAASC,WAAWA,CAACC,IAAA,GAAwBJ,sBAAsB;EACjE,MAAMK,QAAQ,GAAG,EAAE;EACnB,IAAID,IAAI,CAACH,cAAc,EAAE;IACvB;IACAI,QAAQ,CAACC,wBAAwB,GAAGF,IAAI,CAACH,cAAc;EACzD;EACA,OAAOI,QAAQ;AACjB;AAEA,MAAME,EAAE,GAAG,UAAW;;;;;;;;;;;CAWrB;AAED;;;AAGA,OAAO,MAAMC,QAAQ,GAAiB;EACpCC,IAAI,EAAE,UAAU;EAChB;EACAF,EAAE;EACFJ,WAAW;EACXO,YAAY,EAAE,CAACX,OAAO;CACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}