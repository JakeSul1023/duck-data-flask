{"ast":null,"code":"/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features) {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set();\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n          // eslint-disable-next-line max-depth\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n  }\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}","map":{"version":3,"names":["extractGeometryInfo","features","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","feature","geometry","type","add","coordinates","length","point","coord","line","flattened","flat","polygon","Error","coordLength","size","Math","max"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gis/dist/lib/binary-features/extract-geometry-info.js"],"sourcesContent":["/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features) {\n    // Counts the number of _positions_, so [x, y, z] counts as one\n    let pointPositionsCount = 0;\n    let pointFeaturesCount = 0;\n    let linePositionsCount = 0;\n    let linePathsCount = 0;\n    let lineFeaturesCount = 0;\n    let polygonPositionsCount = 0;\n    let polygonObjectsCount = 0;\n    let polygonRingsCount = 0;\n    let polygonFeaturesCount = 0;\n    const coordLengths = new Set();\n    for (const feature of features) {\n        const geometry = feature.geometry;\n        switch (geometry.type) {\n            case 'Point':\n                pointFeaturesCount++;\n                pointPositionsCount++;\n                coordLengths.add(geometry.coordinates.length);\n                break;\n            case 'MultiPoint':\n                pointFeaturesCount++;\n                pointPositionsCount += geometry.coordinates.length;\n                for (const point of geometry.coordinates) {\n                    coordLengths.add(point.length);\n                }\n                break;\n            case 'LineString':\n                lineFeaturesCount++;\n                linePositionsCount += geometry.coordinates.length;\n                linePathsCount++;\n                for (const coord of geometry.coordinates) {\n                    coordLengths.add(coord.length);\n                }\n                break;\n            case 'MultiLineString':\n                lineFeaturesCount++;\n                for (const line of geometry.coordinates) {\n                    linePositionsCount += line.length;\n                    linePathsCount++;\n                    // eslint-disable-next-line max-depth\n                    for (const coord of line) {\n                        coordLengths.add(coord.length);\n                    }\n                }\n                break;\n            case 'Polygon':\n                polygonFeaturesCount++;\n                polygonObjectsCount++;\n                polygonRingsCount += geometry.coordinates.length;\n                const flattened = geometry.coordinates.flat();\n                polygonPositionsCount += flattened.length;\n                for (const coord of flattened) {\n                    coordLengths.add(coord.length);\n                }\n                break;\n            case 'MultiPolygon':\n                polygonFeaturesCount++;\n                for (const polygon of geometry.coordinates) {\n                    polygonObjectsCount++;\n                    polygonRingsCount += polygon.length;\n                    const flattened = polygon.flat();\n                    polygonPositionsCount += flattened.length;\n                    // eslint-disable-next-line max-depth\n                    for (const coord of flattened) {\n                        coordLengths.add(coord.length);\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Unsupported geometry type: ${geometry.type}`);\n        }\n    }\n    return {\n        coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n        pointPositionsCount,\n        pointFeaturesCount,\n        linePositionsCount,\n        linePathsCount,\n        lineFeaturesCount,\n        polygonPositionsCount,\n        polygonObjectsCount,\n        polygonRingsCount,\n        polygonFeaturesCount\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAmBA,CAACC,QAAQ,EAAE;EAC1C;EACA,IAAIC,mBAAmB,GAAG,CAAC;EAC3B,IAAIC,kBAAkB,GAAG,CAAC;EAC1B,IAAIC,kBAAkB,GAAG,CAAC;EAC1B,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,iBAAiB,GAAG,CAAC;EACzB,IAAIC,qBAAqB,GAAG,CAAC;EAC7B,IAAIC,mBAAmB,GAAG,CAAC;EAC3B,IAAIC,iBAAiB,GAAG,CAAC;EACzB,IAAIC,oBAAoB,GAAG,CAAC;EAC5B,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B,KAAK,MAAMC,OAAO,IAAIZ,QAAQ,EAAE;IAC5B,MAAMa,QAAQ,GAAGD,OAAO,CAACC,QAAQ;IACjC,QAAQA,QAAQ,CAACC,IAAI;MACjB,KAAK,OAAO;QACRZ,kBAAkB,EAAE;QACpBD,mBAAmB,EAAE;QACrBS,YAAY,CAACK,GAAG,CAACF,QAAQ,CAACG,WAAW,CAACC,MAAM,CAAC;QAC7C;MACJ,KAAK,YAAY;QACbf,kBAAkB,EAAE;QACpBD,mBAAmB,IAAIY,QAAQ,CAACG,WAAW,CAACC,MAAM;QAClD,KAAK,MAAMC,KAAK,IAAIL,QAAQ,CAACG,WAAW,EAAE;UACtCN,YAAY,CAACK,GAAG,CAACG,KAAK,CAACD,MAAM,CAAC;QAClC;QACA;MACJ,KAAK,YAAY;QACbZ,iBAAiB,EAAE;QACnBF,kBAAkB,IAAIU,QAAQ,CAACG,WAAW,CAACC,MAAM;QACjDb,cAAc,EAAE;QAChB,KAAK,MAAMe,KAAK,IAAIN,QAAQ,CAACG,WAAW,EAAE;UACtCN,YAAY,CAACK,GAAG,CAACI,KAAK,CAACF,MAAM,CAAC;QAClC;QACA;MACJ,KAAK,iBAAiB;QAClBZ,iBAAiB,EAAE;QACnB,KAAK,MAAMe,IAAI,IAAIP,QAAQ,CAACG,WAAW,EAAE;UACrCb,kBAAkB,IAAIiB,IAAI,CAACH,MAAM;UACjCb,cAAc,EAAE;UAChB;UACA,KAAK,MAAMe,KAAK,IAAIC,IAAI,EAAE;YACtBV,YAAY,CAACK,GAAG,CAACI,KAAK,CAACF,MAAM,CAAC;UAClC;QACJ;QACA;MACJ,KAAK,SAAS;QACVR,oBAAoB,EAAE;QACtBF,mBAAmB,EAAE;QACrBC,iBAAiB,IAAIK,QAAQ,CAACG,WAAW,CAACC,MAAM;QAChD,MAAMI,SAAS,GAAGR,QAAQ,CAACG,WAAW,CAACM,IAAI,CAAC,CAAC;QAC7ChB,qBAAqB,IAAIe,SAAS,CAACJ,MAAM;QACzC,KAAK,MAAME,KAAK,IAAIE,SAAS,EAAE;UAC3BX,YAAY,CAACK,GAAG,CAACI,KAAK,CAACF,MAAM,CAAC;QAClC;QACA;MACJ,KAAK,cAAc;QACfR,oBAAoB,EAAE;QACtB,KAAK,MAAMc,OAAO,IAAIV,QAAQ,CAACG,WAAW,EAAE;UACxCT,mBAAmB,EAAE;UACrBC,iBAAiB,IAAIe,OAAO,CAACN,MAAM;UACnC,MAAMI,SAAS,GAAGE,OAAO,CAACD,IAAI,CAAC,CAAC;UAChChB,qBAAqB,IAAIe,SAAS,CAACJ,MAAM;UACzC;UACA,KAAK,MAAME,KAAK,IAAIE,SAAS,EAAE;YAC3BX,YAAY,CAACK,GAAG,CAACI,KAAK,CAACF,MAAM,CAAC;UAClC;QACJ;QACA;MACJ;QACI,MAAM,IAAIO,KAAK,CAAC,8BAA8BX,QAAQ,CAACC,IAAI,EAAE,CAAC;IACtE;EACJ;EACA,OAAO;IACHW,WAAW,EAAEf,YAAY,CAACgB,IAAI,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGlB,YAAY,CAAC,GAAG,CAAC;IAClET,mBAAmB;IACnBC,kBAAkB;IAClBC,kBAAkB;IAClBC,cAAc;IACdC,iBAAiB;IACjBC,qBAAqB;IACrBC,mBAAmB;IACnBC,iBAAiB;IACjBC;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}