{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Model } from '@luma.gl/engine';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from \"./triangle-layer-vertex.glsl.js\";\nimport fs from \"./triangle-layer-fragment.glsl.js\";\nimport { triangleUniforms } from \"./triangle-layer-uniforms.js\";\nclass TriangleLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, triangleUniforms]\n    });\n  }\n  initializeState({\n    device\n  }) {\n    this.setState({\n      model: this._getModel(device)\n    });\n  }\n  _getModel(device) {\n    const {\n      vertexCount,\n      data\n    } = this.props;\n    return new Model(device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      attributes: data.attributes,\n      bufferLayout: [{\n        name: 'positions',\n        format: 'float32x3'\n      }, {\n        name: 'texCoords',\n        format: 'float32x2'\n      }],\n      topology: 'triangle-strip',\n      vertexCount\n    });\n  }\n  draw() {\n    const {\n      model\n    } = this.state;\n    const {\n      aggregationMode,\n      colorDomain,\n      intensity,\n      threshold,\n      colorTexture,\n      maxTexture,\n      weightsTexture\n    } = this.props;\n    const triangleProps = {\n      aggregationMode,\n      colorDomain,\n      intensity,\n      threshold,\n      colorTexture,\n      maxTexture,\n      weightsTexture\n    };\n    model.shaderInputs.setProps({\n      triangle: triangleProps\n    });\n    model.draw(this.context.renderPass);\n  }\n}\nTriangleLayer.layerName = 'TriangleLayer';\nexport default TriangleLayer;","map":{"version":3,"names":["Model","Layer","project32","vs","fs","triangleUniforms","TriangleLayer","getShaders","modules","initializeState","device","setState","model","_getModel","vertexCount","data","props","id","attributes","bufferLayout","name","format","topology","draw","state","aggregationMode","colorDomain","intensity","threshold","colorTexture","maxTexture","weightsTexture","triangleProps","shaderInputs","setProps","triangle","context","renderPass","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\heatmap-layer\\triangle-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Buffer, Device, Texture} from '@luma.gl/core';\nimport {Model} from '@luma.gl/engine';\nimport {Layer, LayerContext, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\nimport {TriangleProps, triangleUniforms} from './triangle-layer-uniforms';\n\ntype _TriangleLayerProps = {\n  data: {attributes: {positions: Buffer; texCoords: Buffer}};\n  colorDomain: [number, number];\n  aggregationMode: number;\n  threshold: number;\n  intensity: number;\n  vertexCount: number;\n  colorTexture: Texture;\n  maxTexture: Texture;\n  weightsTexture: Texture;\n};\n\nexport default class TriangleLayer extends Layer<_TriangleLayerProps> {\n  static layerName = 'TriangleLayer';\n\n  state!: {\n    model: Model;\n    positions: Buffer;\n    texCoords: Buffer;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, triangleUniforms]});\n  }\n\n  initializeState({device}: LayerContext): void {\n    this.setState({model: this._getModel(device)});\n  }\n\n  _getModel(device: Device): Model {\n    const {vertexCount, data} = this.props;\n\n    return new Model(device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      attributes: data.attributes,\n      bufferLayout: [\n        {name: 'positions', format: 'float32x3'},\n        {name: 'texCoords', format: 'float32x2'}\n      ],\n      topology: 'triangle-strip',\n      vertexCount\n    });\n  }\n\n  draw(): void {\n    const {model} = this.state;\n    const {\n      aggregationMode,\n      colorDomain,\n      intensity,\n      threshold,\n      colorTexture,\n      maxTexture,\n      weightsTexture\n    } = this.props;\n    const triangleProps: TriangleProps = {\n      aggregationMode,\n      colorDomain,\n      intensity,\n      threshold,\n      colorTexture,\n      maxTexture,\n      weightsTexture\n    };\n    model.shaderInputs.setProps({triangle: triangleProps});\n    model.draw(this.context.renderPass);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,KAAK,QAAO,iBAAiB;AACrC,SAAQC,KAAK,EAAgBC,SAAS,QAAO,eAAe;AAC5D,OAAOC,EAAE;AACT,OAAOC,EAAE;AACT,SAAuBC,gBAAgB,QAAC;AAcxC,MAAqBC,aAAc,SAAQL,KAA0B;EASnEM,UAAUA,CAAA;IACR,OAAO,KAAK,CAACA,UAAU,CAAC;MAACJ,EAAE;MAAEC,EAAE;MAAEI,OAAO,EAAE,CAACN,SAAS,EAAEG,gBAAgB;IAAC,CAAC,CAAC;EAC3E;EAEAI,eAAeA,CAAC;IAACC;EAAM,CAAe;IACpC,IAAI,CAACC,QAAQ,CAAC;MAACC,KAAK,EAAE,IAAI,CAACC,SAAS,CAACH,MAAM;IAAC,CAAC,CAAC;EAChD;EAEAG,SAASA,CAACH,MAAc;IACtB,MAAM;MAACI,WAAW;MAAEC;IAAI,CAAC,GAAG,IAAI,CAACC,KAAK;IAEtC,OAAO,IAAIhB,KAAK,CAACU,MAAM,EAAE;MACvB,GAAG,IAAI,CAACH,UAAU,EAAE;MACpBU,EAAE,EAAE,IAAI,CAACD,KAAK,CAACC,EAAE;MACjBC,UAAU,EAAEH,IAAI,CAACG,UAAU;MAC3BC,YAAY,EAAE,CACZ;QAACC,IAAI,EAAE,WAAW;QAAEC,MAAM,EAAE;MAAW,CAAC,EACxC;QAACD,IAAI,EAAE,WAAW;QAAEC,MAAM,EAAE;MAAW,CAAC,CACzC;MACDC,QAAQ,EAAE,gBAAgB;MAC1BR;KACD,CAAC;EACJ;EAEAS,IAAIA,CAAA;IACF,MAAM;MAACX;IAAK,CAAC,GAAG,IAAI,CAACY,KAAK;IAC1B,MAAM;MACJC,eAAe;MACfC,WAAW;MACXC,SAAS;MACTC,SAAS;MACTC,YAAY;MACZC,UAAU;MACVC;IAAc,CACf,GAAG,IAAI,CAACf,KAAK;IACd,MAAMgB,aAAa,GAAkB;MACnCP,eAAe;MACfC,WAAW;MACXC,SAAS;MACTC,SAAS;MACTC,YAAY;MACZC,UAAU;MACVC;KACD;IACDnB,KAAK,CAACqB,YAAY,CAACC,QAAQ,CAAC;MAACC,QAAQ,EAAEH;IAAa,CAAC,CAAC;IACtDpB,KAAK,CAACW,IAAI,CAAC,IAAI,CAACa,OAAO,CAACC,UAAU,CAAC;EACrC;;AAtDO/B,aAAA,CAAAgC,SAAS,GAAG,eAAe;eADfhC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}