{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CPUAggregator, WebGLAggregator } from \"../common/aggregator/index.js\";\n/** Returns an accessor to the aggregated values from bin id */\nexport function getAggregatorValueReader(opts) {\n  const {\n    aggregator,\n    binIdRange,\n    channel\n  } = opts;\n  if (aggregator instanceof WebGLAggregator) {\n    const buffer = aggregator.getResult(channel)?.buffer;\n    if (buffer) {\n      const values = new Float32Array(buffer.readSyncWebGL().buffer);\n      return getWebGLAggregatorValueReader(values, binIdRange);\n    }\n  }\n  if (aggregator instanceof CPUAggregator) {\n    const values = aggregator.getResult(channel)?.value;\n    const ids = aggregator.getBins()?.value;\n    if (ids && values) {\n      return getCPUAggregatorValueReader(values, ids, aggregator.binCount);\n    }\n  }\n  return null;\n}\nfunction getWebGLAggregatorValueReader(values, binIdRange) {\n  const [[minX, maxX], [minY, maxY]] = binIdRange;\n  const width = maxX - minX;\n  const height = maxY - minY;\n  return (x, y) => {\n    x -= minX;\n    y -= minY;\n    if (x < 0 || x >= width || y < 0 || y >= height) {\n      return NaN;\n    }\n    return values[y * width + x];\n  };\n}\nfunction getCPUAggregatorValueReader(values, ids, count) {\n  const idMap = {};\n  for (let i = 0; i < count; i++) {\n    const x = ids[i * 2];\n    const y = ids[i * 2 + 1];\n    idMap[x] = idMap[x] || {};\n    idMap[x][y] = values[i];\n  }\n  return (x, y) => idMap[x]?.[y] ?? NaN;\n}","map":{"version":3,"names":["CPUAggregator","WebGLAggregator","getAggregatorValueReader","opts","aggregator","binIdRange","channel","buffer","getResult","values","Float32Array","readSyncWebGL","getWebGLAggregatorValueReader","value","ids","getBins","getCPUAggregatorValueReader","binCount","minX","maxX","minY","maxY","width","height","x","y","NaN","count","idMap","i"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\contour-layer\\value-reader.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Aggregator, CPUAggregator, WebGLAggregator} from '../common/aggregator/index';\nimport type {TypedArray} from '@luma.gl/core';\n\ntype ValueReader = (x: number, y: number) => number;\n\n/** Returns an accessor to the aggregated values from bin id */\nexport function getAggregatorValueReader(opts: {\n  aggregator: Aggregator;\n  binIdRange: [number, number][];\n  channel: 0 | 1 | 2;\n}): ValueReader | null {\n  const {aggregator, binIdRange, channel} = opts;\n\n  if (aggregator instanceof WebGLAggregator) {\n    const buffer = aggregator.getResult(channel)?.buffer;\n    if (buffer) {\n      const values = new Float32Array(buffer.readSyncWebGL().buffer);\n      return getWebGLAggregatorValueReader(values, binIdRange);\n    }\n  }\n  if (aggregator instanceof CPUAggregator) {\n    const values = aggregator.getResult(channel)?.value;\n    const ids = aggregator.getBins()?.value;\n    if (ids && values) {\n      return getCPUAggregatorValueReader(values, ids, aggregator.binCount);\n    }\n  }\n  return null;\n}\n\nfunction getWebGLAggregatorValueReader(\n  values: Float32Array,\n  binIdRange: [number, number][]\n): ValueReader {\n  const [[minX, maxX], [minY, maxY]] = binIdRange;\n  const width = maxX - minX;\n  const height = maxY - minY;\n  return (x: number, y: number) => {\n    x -= minX;\n    y -= minY;\n    if (x < 0 || x >= width || y < 0 || y >= height) {\n      return NaN;\n    }\n    return values[y * width + x];\n  };\n}\n\nfunction getCPUAggregatorValueReader(\n  values: TypedArray,\n  ids: TypedArray,\n  count: number\n): ValueReader {\n  const idMap: Record<string, Record<string, number>> = {};\n  for (let i = 0; i < count; i++) {\n    const x = ids[i * 2];\n    const y = ids[i * 2 + 1];\n    idMap[x] = idMap[x] || {};\n    idMap[x][y] = values[i];\n  }\n  return (x: number, y: number) => idMap[x]?.[y] ?? NaN;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAoBA,aAAa,EAAEC,eAAe,QAAC;AAKnD;AACA,OAAM,SAAUC,wBAAwBA,CAACC,IAIxC;EACC,MAAM;IAACC,UAAU;IAAEC,UAAU;IAAEC;EAAO,CAAC,GAAGH,IAAI;EAE9C,IAAIC,UAAU,YAAYH,eAAe,EAAE;IACzC,MAAMM,MAAM,GAAGH,UAAU,CAACI,SAAS,CAACF,OAAO,CAAC,EAAEC,MAAM;IACpD,IAAIA,MAAM,EAAE;MACV,MAAME,MAAM,GAAG,IAAIC,YAAY,CAACH,MAAM,CAACI,aAAa,EAAE,CAACJ,MAAM,CAAC;MAC9D,OAAOK,6BAA6B,CAACH,MAAM,EAAEJ,UAAU,CAAC;IAC1D;EACF;EACA,IAAID,UAAU,YAAYJ,aAAa,EAAE;IACvC,MAAMS,MAAM,GAAGL,UAAU,CAACI,SAAS,CAACF,OAAO,CAAC,EAAEO,KAAK;IACnD,MAAMC,GAAG,GAAGV,UAAU,CAACW,OAAO,EAAE,EAAEF,KAAK;IACvC,IAAIC,GAAG,IAAIL,MAAM,EAAE;MACjB,OAAOO,2BAA2B,CAACP,MAAM,EAAEK,GAAG,EAAEV,UAAU,CAACa,QAAQ,CAAC;IACtE;EACF;EACA,OAAO,IAAI;AACb;AAEA,SAASL,6BAA6BA,CACpCH,MAAoB,EACpBJ,UAA8B;EAE9B,MAAM,CAAC,CAACa,IAAI,EAAEC,IAAI,CAAC,EAAE,CAACC,IAAI,EAAEC,IAAI,CAAC,CAAC,GAAGhB,UAAU;EAC/C,MAAMiB,KAAK,GAAGH,IAAI,GAAGD,IAAI;EACzB,MAAMK,MAAM,GAAGF,IAAI,GAAGD,IAAI;EAC1B,OAAO,CAACI,CAAS,EAAEC,CAAS,KAAI;IAC9BD,CAAC,IAAIN,IAAI;IACTO,CAAC,IAAIL,IAAI;IACT,IAAII,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAIF,KAAK,IAAIG,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAIF,MAAM,EAAE;MAC/C,OAAOG,GAAG;IACZ;IACA,OAAOjB,MAAM,CAACgB,CAAC,GAAGH,KAAK,GAAGE,CAAC,CAAC;EAC9B,CAAC;AACH;AAEA,SAASR,2BAA2BA,CAClCP,MAAkB,EAClBK,GAAe,EACfa,KAAa;EAEb,MAAMC,KAAK,GAA2C,EAAE;EACxD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC9B,MAAML,CAAC,GAAGV,GAAG,CAACe,CAAC,GAAG,CAAC,CAAC;IACpB,MAAMJ,CAAC,GAAGX,GAAG,CAACe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxBD,KAAK,CAACJ,CAAC,CAAC,GAAGI,KAAK,CAACJ,CAAC,CAAC,IAAI,EAAE;IACzBI,KAAK,CAACJ,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGhB,MAAM,CAACoB,CAAC,CAAC;EACzB;EACA,OAAO,CAACL,CAAS,EAAEC,CAAS,KAAKG,KAAK,CAACJ,CAAC,CAAC,GAAGC,CAAC,CAAC,IAAIC,GAAG;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}