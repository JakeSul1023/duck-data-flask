{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { cutPolylineByGrid, cutPolygonByGrid } from \"./cut-by-grid.js\";\nimport { getPointAtIndex, push } from \"./utils.js\";\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(positions, options) {\n  const {\n    size = 2,\n    startIndex = 0,\n    endIndex = positions.length,\n    normalize = true\n  } = options || {};\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  });\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(positions, holeIndices = null, options) {\n  const {\n    size = 2,\n    normalize = true,\n    edgeTypes = false\n  } = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions = [];\n  const newHoleIndices = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n/* Helpers */\n// See comments for insertPoleVertices\nfunction findSplitIndex(positions, size, startIndex, endIndex) {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(positions, size, startIndex, endIndex, maxLatitude = DEFAULT_MAX_LATITUDE) {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\nfunction wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {\n  let prevLng = positions[0];\n  let lng;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\nfunction shiftLongitudesIntoRange(positions, size) {\n  let refLng;\n  const pointCount = positions.length / size;\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}","map":{"version":3,"names":["cutPolylineByGrid","cutPolygonByGrid","getPointAtIndex","push","DEFAULT_MAX_LATITUDE","cutPolylineByMercatorBounds","positions","options","size","startIndex","endIndex","length","normalize","newPositions","slice","wrapLongitudesForShortestPath","parts","broken","gridResolution","gridOffset","part","shiftLongitudesIntoRange","cutPolygonByMercatorBounds","holeIndices","edgeTypes","newHoleIndices","srcStartIndex","targetIndex","ringIndex","srcEndIndex","targetStartIndex","splitIndex","findSplitIndex","i","insertPoleVertices","maxLatitude","pop","maxLat","pointIndex","lat","Math","abs","firstLng","lastLng","p","round","sign","prevLng","lng","delta","refLng","pointCount"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\polygon\\src\\cut-by-mercator-bounds.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\nimport type {Polygon} from './cut-by-grid';\nimport type {NumericArray} from '@math.gl/core';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n    normalize?: boolean;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options || {};\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  }) as number[][];\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    normalize?: boolean;\n    maxLatitude?: number;\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  const {size = 2, normalize = true, edgeTypes = false} = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions: number[] = [];\n  const newHoleIndices: number[] = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(\n  positions: Readonly<NumericArray>,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): number {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions: number[],\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  maxLatitude: number = DEFAULT_MAX_LATITUDE\n): void {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(\n  positions: NumericArray,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): void {\n  let prevLng: number = positions[0];\n  let lng: number;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions: NumericArray, size: number): void {\n  let refLng: number;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}