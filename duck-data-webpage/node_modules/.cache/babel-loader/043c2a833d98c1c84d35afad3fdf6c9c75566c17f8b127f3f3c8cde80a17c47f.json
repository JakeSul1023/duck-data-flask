{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport default class ViewState {\n  constructor(props, state) {\n    this._viewportProps = this.applyConstraints(props);\n    this._state = state;\n  }\n  getViewportProps() {\n    return this._viewportProps;\n  }\n  getState() {\n    return this._state;\n  }\n}","map":{"version":3,"names":["ViewState","constructor","props","state","_viewportProps","applyConstraints","_state","getViewportProps","getState"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\controllers\\view-state.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type Viewport from '../viewports/viewport';\n\nexport default abstract class ViewState<\n  T,\n  Props extends Record<string, any>,\n  State extends Record<string, any>\n> implements IViewState<T>\n{\n  private _viewportProps: Required<Props>;\n  private _state: State;\n\n  constructor(props: Required<Props>, state: State) {\n    this._viewportProps = this.applyConstraints(props);\n    this._state = state;\n  }\n\n  getViewportProps(): Required<Props> {\n    return this._viewportProps;\n  }\n\n  getState(): State {\n    return this._state;\n  }\n\n  abstract applyConstraints(props: Required<Props>): Required<Props>;\n\n  abstract shortestPathFrom(viewState: T): Props;\n\n  abstract panStart(params: {pos: [number, number]}): T;\n  abstract pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): T;\n  abstract panEnd(): T;\n\n  abstract rotateStart(params: {pos: [number, number]}): T;\n  abstract rotate(params: {pos?: [number, number]; deltaAngleX?: number; deltaAngleY: number}): T;\n  abstract rotateEnd(): T;\n\n  abstract zoomStart({pos}: {pos: [number, number]}): T;\n  abstract zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): T;\n  abstract zoomEnd(): T;\n\n  abstract zoomIn(speed?: number): T;\n  abstract zoomOut(speed?: number): T;\n\n  abstract moveLeft(speed?: number): T;\n  abstract moveRight(speed?: number): T;\n  abstract moveUp(speed?: number): T;\n  abstract moveDown(speed?: number): T;\n\n  abstract rotateLeft(speed?: number): T;\n  abstract rotateRight(speed?: number): T;\n  abstract rotateUp(speed?: number): T;\n  abstract rotateDown(speed?: number): T;\n}\n\nexport interface IViewState<T> {\n  makeViewport?: (props: Record<string, any>) => Viewport;\n\n  getViewportProps(): Record<string, any>;\n\n  getState(): Record<string, any>;\n\n  shortestPathFrom(viewState: T): Record<string, any>;\n\n  panStart(params: {pos: [number, number]}): T;\n  pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): T;\n  panEnd(): T;\n\n  rotateStart(params: {pos: [number, number]}): T;\n  rotate(params: {pos?: [number, number]; deltaAngleX?: number; deltaAngleY?: number}): T;\n  rotateEnd(): T;\n\n  zoomStart({pos}: {pos: [number, number]}): T;\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): T;\n  zoomEnd(): T;\n\n  zoomIn(speed?: number): T;\n  zoomOut(speed?: number): T;\n\n  moveLeft(speed?: number): T;\n  moveRight(speed?: number): T;\n  moveUp(speed?: number): T;\n  moveDown(speed?: number): T;\n\n  rotateLeft(speed?: number): T;\n  rotateRight(speed?: number): T;\n  rotateUp(speed?: number): T;\n  rotateDown(speed?: number): T;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,eAAc,MAAgBA,SAAS;EASrCC,YAAYC,KAAsB,EAAEC,KAAY;IAC9C,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,gBAAgB,CAACH,KAAK,CAAC;IAClD,IAAI,CAACI,MAAM,GAAGH,KAAK;EACrB;EAEAI,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACH,cAAc;EAC5B;EAEAI,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,MAAM;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}