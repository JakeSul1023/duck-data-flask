{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { WebMercatorViewport, _GlobeViewport } from '@deck.gl/core';\nimport { CullingVolume, Plane, AxisAlignedBoundingBox, makeOrientedBoundingBoxFromPoints } from '@math.gl/culling';\nimport { lngLatToWorld } from '@math.gl/web-mercator';\nimport { osmTile2lngLat } from \"./utils.js\";\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n// for calculating bounding volume of a tile in a non-web-mercator viewport\nconst REF_POINTS_5 = [[0.5, 0.5], [0, 0], [0, 1], [1, 0], [1, 1]]; // 4 corners and center\nconst REF_POINTS_9 = REF_POINTS_5.concat([[0, 0.5], [0.5, 0], [1, 0.5], [0.5, 1]]); // 4 corners, center and 4 mid points\nconst REF_POINTS_11 = REF_POINTS_9.concat([[0.25, 0.5], [0.75, 0.5]]); // 2 additional points on equator for top tile\nclass OSMNode {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [new OSMNode(x, y, z), new OSMNode(x, y + 1, z), new OSMNode(x + 1, y, z), new OSMNode(x + 1, y + 1, z)];\n    }\n    return this._children;\n  }\n  // eslint-disable-next-line complexity\n  update(params) {\n    const {\n      viewport,\n      cullingVolume,\n      elevationBounds,\n      minZ,\n      maxZ,\n      bounds,\n      offset,\n      project\n    } = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);\n    // First, check if this tile is visible\n    if (bounds && !this.insideBounds(bounds)) {\n      return false;\n    }\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {\n        z\n      } = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance = boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n  getSelected(result = []) {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n  insideBounds([minX, minY, maxX, maxY]) {\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    return this.x * extent < maxX && this.y * extent < maxY && (this.x + 1) * extent > minX && (this.y + 1) * extent > minY;\n  }\n  getBoundingVolume(zRange, worldOffset, project) {\n    if (project) {\n      // Custom projection\n      // Estimate bounding box from sample points\n      // At low zoom level we need more samples to calculate the bounding volume correctly\n      const refPoints = this.z < 1 ? REF_POINTS_11 : this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;\n      // Convert from tile-relative coordinates to common space\n      const refPointPositions = [];\n      for (const p of refPoints) {\n        const lngLat = osmTile2lngLat(this.x + p[0], this.y + p[1], this.z);\n        lngLat[2] = zRange[0];\n        refPointPositions.push(project(lngLat));\n        if (zRange[0] !== zRange[1]) {\n          // Account for the elevation volume\n          lngLat[2] = zRange[1];\n          refPointPositions.push(project(lngLat));\n        }\n      }\n      return makeOrientedBoundingBoxFromPoints(refPointPositions);\n    }\n    // Use WebMercator projection\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n    return new AxisAlignedBoundingBox([originX, originY, zRange[0]], [originX + extent, originY + extent, zRange[1]]);\n  }\n}\n// eslint-disable-next-line complexity\nexport function getOSMTileIndices(viewport, maxZ, zRange, bounds) {\n  const project = viewport instanceof _GlobeViewport && viewport.resolution ?\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  viewport.projectPosition : null;\n  // Get the culling volume of the current camera\n  const planes = Object.values(viewport.getFrustumPlanes()).map(({\n    normal,\n    distance\n  }) => new Plane(normal.clone().negate(), distance));\n  const cullingVolume = new CullingVolume(planes);\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = zRange && zRange[0] * unitsPerMeter || 0;\n  const elevationMax = zRange && zRange[1] * unitsPerMeter || 0;\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport instanceof WebMercatorViewport && viewport.pitch <= 60 ? maxZ : 0;\n  // Map extent to OSM position\n  if (bounds) {\n    const [minLng, minLat, maxLng, maxLat] = bounds;\n    const topLeft = lngLatToWorld([minLng, maxLat]);\n    const bottomRight = lngLatToWorld([maxLng, minLat]);\n    bounds = [topLeft[0], TILE_SIZE - topLeft[1], bottomRight[0], TILE_SIZE - bottomRight[1]];\n  }\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    project,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ,\n    maxZ,\n    bounds,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n  root.update(traversalParams);\n  if (viewport instanceof WebMercatorViewport && viewport.subViewports && viewport.subViewports.length > 1) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n  return root.getSelected();\n}","map":{"version":3,"names":["WebMercatorViewport","_GlobeViewport","CullingVolume","Plane","AxisAlignedBoundingBox","makeOrientedBoundingBoxFromPoints","lngLatToWorld","osmTile2lngLat","TILE_SIZE","MAX_MAPS","REF_POINTS_5","REF_POINTS_9","concat","REF_POINTS_11","OSMNode","constructor","x","y","z","children","_children","update","params","viewport","cullingVolume","elevationBounds","minZ","maxZ","bounds","offset","project","boundingVolume","getBoundingVolume","insideBounds","isInside","computeVisibility","childVisible","distance","distanceTo","cameraPosition","scale","height","Math","floor","log2","selected","child","getSelected","result","push","node","minX","minY","maxX","maxY","pow","extent","zRange","worldOffset","refPoints","refPointPositions","p","lngLat","originX","originY","getOSMTileIndices","resolution","projectPosition","planes","Object","values","getFrustumPlanes","map","normal","clone","negate","unitsPerMeter","distanceScales","elevationMin","elevationMax","pitch","minLng","minLat","maxLng","maxLat","topLeft","bottomRight","root","traversalParams","subViewports","length"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\tileset-2d\\tile-2d-traversal.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Viewport, WebMercatorViewport, _GlobeViewport} from '@deck.gl/core';\n\nimport {\n  CullingVolume,\n  Plane,\n  AxisAlignedBoundingBox,\n  makeOrientedBoundingBoxFromPoints\n} from '@math.gl/culling';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\nimport {Bounds, TileIndex, ZRange} from './types';\nimport {osmTile2lngLat} from './utils';\n\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n// for calculating bounding volume of a tile in a non-web-mercator viewport\nconst REF_POINTS_5 = [\n  [0.5, 0.5],\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1]\n]; // 4 corners and center\nconst REF_POINTS_9 = REF_POINTS_5.concat([\n  [0, 0.5],\n  [0.5, 0],\n  [1, 0.5],\n  [0.5, 1]\n]); // 4 corners, center and 4 mid points\nconst REF_POINTS_11 = REF_POINTS_9.concat([\n  [0.25, 0.5],\n  [0.75, 0.5]\n]); // 2 additional points on equator for top tile\n\nclass OSMNode {\n  x: number;\n  y: number;\n  z: number;\n\n  private childVisible?: boolean;\n  private selected?: boolean;\n\n  private _children?: OSMNode[];\n\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [\n        new OSMNode(x, y, z),\n        new OSMNode(x, y + 1, z),\n        new OSMNode(x + 1, y, z),\n        new OSMNode(x + 1, y + 1, z)\n      ];\n    }\n    return this._children;\n  }\n\n  // eslint-disable-next-line complexity\n  update(params: {\n    viewport: Viewport;\n    project: ((xyz: number[]) => number[]) | null;\n    cullingVolume: CullingVolume;\n    elevationBounds: ZRange;\n    minZ: number;\n    maxZ: number;\n    bounds?: Bounds;\n    offset: number;\n  }) {\n    const {viewport, cullingVolume, elevationBounds, minZ, maxZ, bounds, offset, project} = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);\n\n    // First, check if this tile is visible\n    if (bounds && !this.insideBounds(bounds)) {\n      return false;\n    }\n\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {z} = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance =\n          (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n\n  getSelected(result: OSMNode[] = []): OSMNode[] {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n\n  insideBounds([minX, minY, maxX, maxY]: Bounds): boolean {\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n\n    return (\n      this.x * extent < maxX &&\n      this.y * extent < maxY &&\n      (this.x + 1) * extent > minX &&\n      (this.y + 1) * extent > minY\n    );\n  }\n\n  getBoundingVolume(\n    zRange: ZRange,\n    worldOffset: number,\n    project: ((xyz: number[]) => number[]) | null\n  ) {\n    if (project) {\n      // Custom projection\n      // Estimate bounding box from sample points\n      // At low zoom level we need more samples to calculate the bounding volume correctly\n      const refPoints = this.z < 1 ? REF_POINTS_11 : this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;\n\n      // Convert from tile-relative coordinates to common space\n      const refPointPositions: number[][] = [];\n      for (const p of refPoints) {\n        const lngLat: number[] = osmTile2lngLat(this.x + p[0], this.y + p[1], this.z);\n        lngLat[2] = zRange[0];\n        refPointPositions.push(project(lngLat));\n\n        if (zRange[0] !== zRange[1]) {\n          // Account for the elevation volume\n          lngLat[2] = zRange[1];\n          refPointPositions.push(project(lngLat));\n        }\n      }\n\n      return makeOrientedBoundingBoxFromPoints(refPointPositions);\n    }\n\n    // Use WebMercator projection\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n\n    return new AxisAlignedBoundingBox(\n      [originX, originY, zRange[0]],\n      [originX + extent, originY + extent, zRange[1]]\n    );\n  }\n}\n\n// eslint-disable-next-line complexity\nexport function getOSMTileIndices(\n  viewport: Viewport,\n  maxZ: number,\n  zRange: ZRange | null,\n  bounds?: Bounds\n): TileIndex[] {\n  const project: ((xyz: number[]) => number[]) | null =\n    viewport instanceof _GlobeViewport && viewport.resolution\n      ? // eslint-disable-next-line @typescript-eslint/unbound-method\n        viewport.projectPosition\n      : null;\n\n  // Get the culling volume of the current camera\n  const planes: Plane[] = Object.values(viewport.getFrustumPlanes()).map(\n    ({normal, distance}) => new Plane(normal.clone().negate(), distance)\n  );\n  const cullingVolume = new CullingVolume(planes);\n\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;\n  const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;\n\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport instanceof WebMercatorViewport && viewport.pitch <= 60 ? maxZ : 0;\n\n  // Map extent to OSM position\n  if (bounds) {\n    const [minLng, minLat, maxLng, maxLat] = bounds;\n    const topLeft = lngLatToWorld([minLng, maxLat]);\n    const bottomRight = lngLatToWorld([maxLng, minLat]);\n    bounds = [topLeft[0], TILE_SIZE - topLeft[1], bottomRight[0], TILE_SIZE - bottomRight[1]];\n  }\n\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    project,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax] as ZRange,\n    minZ,\n    maxZ,\n    bounds,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n\n  root.update(traversalParams);\n\n  if (\n    viewport instanceof WebMercatorViewport &&\n    viewport.subViewports &&\n    viewport.subViewports.length > 1\n  ) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAkBA,mBAAmB,EAAEC,cAAc,QAAO,eAAe;AAE3E,SACEC,aAAa,EACbC,KAAK,EACLC,sBAAsB,EACtBC,iCAAiC,QAC5B,kBAAkB;AACzB,SAAQC,aAAa,QAAO,uBAAuB;AAEnD,SAAQC,cAAc,QAAC;AAEvB,MAAMC,SAAS,GAAG,GAAG;AACrB;AACA,MAAMC,QAAQ,GAAG,CAAC;AAClB;AACA,MAAMC,YAAY,GAAG,CACnB,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CACP,CAAC,CAAC;AACH,MAAMC,YAAY,GAAGD,YAAY,CAACE,MAAM,CAAC,CACvC,CAAC,CAAC,EAAE,GAAG,CAAC,EACR,CAAC,GAAG,EAAE,CAAC,CAAC,EACR,CAAC,CAAC,EAAE,GAAG,CAAC,EACR,CAAC,GAAG,EAAE,CAAC,CAAC,CACT,CAAC,CAAC,CAAC;AACJ,MAAMC,aAAa,GAAGF,YAAY,CAACC,MAAM,CAAC,CACxC,CAAC,IAAI,EAAE,GAAG,CAAC,EACX,CAAC,IAAI,EAAE,GAAG,CAAC,CACZ,CAAC,CAAC,CAAC;AAEJ,MAAME,OAAO;EAUXC,YAAYC,CAAC,EAAEC,CAAC,EAAEC,CAAC;IACjB,IAAI,CAACF,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;EACZ;EAEA,IAAIC,QAAQA,CAAA;IACV,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,MAAMJ,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,CAAC;MACpB,MAAMC,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,CAAC;MACpB,MAAMC,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,CAAC;MACpB,IAAI,CAACE,SAAS,GAAG,CACf,IAAIN,OAAO,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EACpB,IAAIJ,OAAO,CAACE,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC,EACxB,IAAIJ,OAAO,CAACE,CAAC,GAAG,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EACxB,IAAIJ,OAAO,CAACE,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC,CAC7B;IACH;IACA,OAAO,IAAI,CAACE,SAAS;EACvB;EAEA;EACAC,MAAMA,CAACC,MASN;IACC,MAAM;MAACC,QAAQ;MAAEC,aAAa;MAAEC,eAAe;MAAEC,IAAI;MAAEC,IAAI;MAAEC,MAAM;MAAEC,MAAM;MAAEC;IAAO,CAAC,GAAGR,MAAM;IAC9F,MAAMS,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAACP,eAAe,EAAEI,MAAM,EAAEC,OAAO,CAAC;IAE/E;IACA,IAAIF,MAAM,IAAI,CAAC,IAAI,CAACK,YAAY,CAACL,MAAM,CAAC,EAAE;MACxC,OAAO,KAAK;IACd;IAEA,MAAMM,QAAQ,GAAGV,aAAa,CAACW,iBAAiB,CAACJ,cAAc,CAAC;IAChE,IAAIG,QAAQ,GAAG,CAAC,EAAE;MAChB,OAAO,KAAK;IACd;IAEA;IACA,IAAI,CAAC,IAAI,CAACE,YAAY,EAAE;MACtB,IAAI;QAAClB;MAAC,CAAC,GAAG,IAAI;MACd,IAAIA,CAAC,GAAGS,IAAI,IAAIT,CAAC,IAAIQ,IAAI,EAAE;QACzB;QACA;QACA,MAAMW,QAAQ,GACXN,cAAc,CAACO,UAAU,CAACf,QAAQ,CAACgB,cAAc,CAAC,GAAGhB,QAAQ,CAACiB,KAAK,GAAIjB,QAAQ,CAACkB,MAAM;QACzFvB,CAAC,IAAIwB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,IAAI,CAACP,QAAQ,CAAC,CAAC;MACtC;MACA,IAAInB,CAAC,IAAIS,IAAI,EAAE;QACb;QACA,IAAI,CAACkB,QAAQ,GAAG,IAAI;QACpB,OAAO,IAAI;MACb;IACF;IAEA;IACA,IAAI,CAACA,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACT,YAAY,GAAG,IAAI;IACxB,KAAK,MAAMU,KAAK,IAAI,IAAI,CAAC3B,QAAQ,EAAE;MACjC2B,KAAK,CAACzB,MAAM,CAACC,MAAM,CAAC;IACtB;IACA,OAAO,IAAI;EACb;EAEAyB,WAAWA,CAACC,MAAA,GAAoB,EAAE;IAChC,IAAI,IAAI,CAACH,QAAQ,EAAE;MACjBG,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;IACnB;IACA,IAAI,IAAI,CAAC7B,SAAS,EAAE;MAClB,KAAK,MAAM8B,IAAI,IAAI,IAAI,CAAC9B,SAAS,EAAE;QACjC8B,IAAI,CAACH,WAAW,CAACC,MAAM,CAAC;MAC1B;IACF;IACA,OAAOA,MAAM;EACf;EAEAf,YAAYA,CAAC,CAACkB,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAS;IAC3C,MAAMd,KAAK,GAAGE,IAAI,CAACa,GAAG,CAAC,CAAC,EAAE,IAAI,CAACrC,CAAC,CAAC;IACjC,MAAMsC,MAAM,GAAGhD,SAAS,GAAGgC,KAAK;IAEhC,OACE,IAAI,CAACxB,CAAC,GAAGwC,MAAM,GAAGH,IAAI,IACtB,IAAI,CAACpC,CAAC,GAAGuC,MAAM,GAAGF,IAAI,IACtB,CAAC,IAAI,CAACtC,CAAC,GAAG,CAAC,IAAIwC,MAAM,GAAGL,IAAI,IAC5B,CAAC,IAAI,CAAClC,CAAC,GAAG,CAAC,IAAIuC,MAAM,GAAGJ,IAAI;EAEhC;EAEApB,iBAAiBA,CACfyB,MAAc,EACdC,WAAmB,EACnB5B,OAA6C;IAE7C,IAAIA,OAAO,EAAE;MACX;MACA;MACA;MACA,MAAM6B,SAAS,GAAG,IAAI,CAACzC,CAAC,GAAG,CAAC,GAAGL,aAAa,GAAG,IAAI,CAACK,CAAC,GAAG,CAAC,GAAGP,YAAY,GAAGD,YAAY;MAEvF;MACA,MAAMkD,iBAAiB,GAAe,EAAE;MACxC,KAAK,MAAMC,CAAC,IAAIF,SAAS,EAAE;QACzB,MAAMG,MAAM,GAAavD,cAAc,CAAC,IAAI,CAACS,CAAC,GAAG6C,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC5C,CAAC,GAAG4C,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC3C,CAAC,CAAC;QAC7E4C,MAAM,CAAC,CAAC,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC;QACrBG,iBAAiB,CAACX,IAAI,CAACnB,OAAO,CAACgC,MAAM,CAAC,CAAC;QAEvC,IAAIL,MAAM,CAAC,CAAC,CAAC,KAAKA,MAAM,CAAC,CAAC,CAAC,EAAE;UAC3B;UACAK,MAAM,CAAC,CAAC,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC;UACrBG,iBAAiB,CAACX,IAAI,CAACnB,OAAO,CAACgC,MAAM,CAAC,CAAC;QACzC;MACF;MAEA,OAAOzD,iCAAiC,CAACuD,iBAAiB,CAAC;IAC7D;IAEA;IACA,MAAMpB,KAAK,GAAGE,IAAI,CAACa,GAAG,CAAC,CAAC,EAAE,IAAI,CAACrC,CAAC,CAAC;IACjC,MAAMsC,MAAM,GAAGhD,SAAS,GAAGgC,KAAK;IAChC,MAAMuB,OAAO,GAAG,IAAI,CAAC/C,CAAC,GAAGwC,MAAM,GAAGE,WAAW,GAAGlD,SAAS;IACzD;IACA,MAAMwD,OAAO,GAAGxD,SAAS,GAAG,CAAC,IAAI,CAACS,CAAC,GAAG,CAAC,IAAIuC,MAAM;IAEjD,OAAO,IAAIpD,sBAAsB,CAC/B,CAAC2D,OAAO,EAAEC,OAAO,EAAEP,MAAM,CAAC,CAAC,CAAC,CAAC,EAC7B,CAACM,OAAO,GAAGP,MAAM,EAAEQ,OAAO,GAAGR,MAAM,EAAEC,MAAM,CAAC,CAAC,CAAC,CAAC,CAChD;EACH;;AAGF;AACA,OAAM,SAAUQ,iBAAiBA,CAC/B1C,QAAkB,EAClBI,IAAY,EACZ8B,MAAqB,EACrB7B,MAAe;EAEf,MAAME,OAAO,GACXP,QAAQ,YAAYtB,cAAc,IAAIsB,QAAQ,CAAC2C,UAAU;EACrD;EACA3C,QAAQ,CAAC4C,eAAe,GACxB,IAAI;EAEV;EACA,MAAMC,MAAM,GAAYC,MAAM,CAACC,MAAM,CAAC/C,QAAQ,CAACgD,gBAAgB,EAAE,CAAC,CAACC,GAAG,CACpE,CAAC;IAACC,MAAM;IAAEpC;EAAQ,CAAC,KAAK,IAAIlC,KAAK,CAACsE,MAAM,CAACC,KAAK,EAAE,CAACC,MAAM,EAAE,EAAEtC,QAAQ,CAAC,CACrE;EACD,MAAMb,aAAa,GAAG,IAAItB,aAAa,CAACkE,MAAM,CAAC;EAE/C;EACA,MAAMQ,aAAa,GAAGrD,QAAQ,CAACsD,cAAc,CAACD,aAAa,CAAC,CAAC,CAAC;EAC9D,MAAME,YAAY,GAAIrB,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAGmB,aAAa,IAAK,CAAC;EAC/D,MAAMG,YAAY,GAAItB,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAGmB,aAAa,IAAK,CAAC;EAE/D;EACA,MAAMlD,IAAI,GAAGH,QAAQ,YAAYvB,mBAAmB,IAAIuB,QAAQ,CAACyD,KAAK,IAAI,EAAE,GAAGrD,IAAI,GAAG,CAAC;EAEvF;EACA,IAAIC,MAAM,EAAE;IACV,MAAM,CAACqD,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC,GAAGxD,MAAM;IAC/C,MAAMyD,OAAO,GAAG/E,aAAa,CAAC,CAAC2E,MAAM,EAAEG,MAAM,CAAC,CAAC;IAC/C,MAAME,WAAW,GAAGhF,aAAa,CAAC,CAAC6E,MAAM,EAAED,MAAM,CAAC,CAAC;IACnDtD,MAAM,GAAG,CAACyD,OAAO,CAAC,CAAC,CAAC,EAAE7E,SAAS,GAAG6E,OAAO,CAAC,CAAC,CAAC,EAAEC,WAAW,CAAC,CAAC,CAAC,EAAE9E,SAAS,GAAG8E,WAAW,CAAC,CAAC,CAAC,CAAC;EAC3F;EAEA,MAAMC,IAAI,GAAG,IAAIzE,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACjC,MAAM0E,eAAe,GAAG;IACtBjE,QAAQ;IACRO,OAAO;IACPN,aAAa;IACbC,eAAe,EAAE,CAACqD,YAAY,EAAEC,YAAY,CAAW;IACvDrD,IAAI;IACJC,IAAI;IACJC,MAAM;IACN;IACAC,MAAM,EAAE;GACT;EAED0D,IAAI,CAAClE,MAAM,CAACmE,eAAe,CAAC;EAE5B,IACEjE,QAAQ,YAAYvB,mBAAmB,IACvCuB,QAAQ,CAACkE,YAAY,IACrBlE,QAAQ,CAACkE,YAAY,CAACC,MAAM,GAAG,CAAC,EAChC;IACA;IACAF,eAAe,CAAC3D,MAAM,GAAG,CAAC,CAAC;IAC3B,OAAO0D,IAAI,CAAClE,MAAM,CAACmE,eAAe,CAAC,EAAE;MACnC,IAAI,EAAEA,eAAe,CAAC3D,MAAM,GAAG,CAACpB,QAAQ,EAAE;QACxC;MACF;IACF;IACA+E,eAAe,CAAC3D,MAAM,GAAG,CAAC;IAC1B,OAAO0D,IAAI,CAAClE,MAAM,CAACmE,eAAe,CAAC,EAAE;MACnC,IAAI,EAAEA,eAAe,CAAC3D,MAAM,GAAGpB,QAAQ,EAAE;QACvC;MACF;IACF;EACF;EAEA,OAAO8E,IAAI,CAACxC,WAAW,EAAE;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}