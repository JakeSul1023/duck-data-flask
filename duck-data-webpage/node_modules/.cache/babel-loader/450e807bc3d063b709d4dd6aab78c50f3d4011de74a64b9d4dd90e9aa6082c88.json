{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from \"./load-image.js\";\nimport { deepLoad } from \"./deep-load.js\";\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\nconst CUBE_FACES = [{\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_X,\n  direction: 'right',\n  axis: 'x',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X,\n  direction: 'left',\n  axis: 'x',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y,\n  direction: 'top',\n  axis: 'y',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  direction: 'bottom',\n  axis: 'y',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z,\n  direction: 'front',\n  axis: 'z',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,\n  direction: 'back',\n  axis: 'z',\n  sign: 'negative'\n}];\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl, options) {\n  // Calculate URLs\n  const urls = {};\n  const promises = [];\n  let index = 0;\n  for (let i = 0; i < CUBE_FACES.length; ++i) {\n    const face = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, {\n      ...face,\n      index: index++\n    }).then(url => {\n      urls[face.face] = url;\n    });\n    promises.push(promise);\n  }\n  await Promise.all(promises);\n  return urls;\n}\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageTextureCube(getUrl, options = {}) {\n  const urls = await getImageCubeUrls(getUrl, options);\n  return await deepLoad(urls, ImageLoader.parse, options);\n}","map":{"version":3,"names":["ImageLoader","getImageUrls","deepLoad","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_TEXTURE_CUBE_MAP_NEGATIVE_X","GL_TEXTURE_CUBE_MAP_POSITIVE_Y","GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","GL_TEXTURE_CUBE_MAP_POSITIVE_Z","GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","CUBE_FACES","face","direction","axis","sign","getImageCubeUrls","getUrl","options","urls","promises","index","i","length","promise","then","url","push","Promise","all","loadImageTextureCube","parse"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/textures/dist/lib/texture-api/load-image-cube.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from \"./load-image.js\";\nimport { deepLoad } from \"./deep-load.js\";\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\nconst CUBE_FACES = [\n    { face: GL_TEXTURE_CUBE_MAP_POSITIVE_X, direction: 'right', axis: 'x', sign: 'positive' },\n    { face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X, direction: 'left', axis: 'x', sign: 'negative' },\n    { face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y, direction: 'top', axis: 'y', sign: 'positive' },\n    { face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, direction: 'bottom', axis: 'y', sign: 'negative' },\n    { face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z, direction: 'front', axis: 'z', sign: 'positive' },\n    { face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, direction: 'back', axis: 'z', sign: 'negative' }\n];\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl, options) {\n    // Calculate URLs\n    const urls = {};\n    const promises = [];\n    let index = 0;\n    for (let i = 0; i < CUBE_FACES.length; ++i) {\n        const face = CUBE_FACES[index];\n        const promise = getImageUrls(getUrl, options, { ...face, index: index++ }).then((url) => {\n            urls[face.face] = url;\n        });\n        promises.push(promise);\n    }\n    await Promise.all(promises);\n    return urls;\n}\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageTextureCube(getUrl, options = {}) {\n    const urls = await getImageCubeUrls(getUrl, options);\n    return (await deepLoad(urls, ImageLoader.parse, options));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,QAAQ,gBAAgB;AACzC;AACA,MAAMC,8BAA8B,GAAG,MAAM;AAC7C,MAAMC,8BAA8B,GAAG,MAAM;AAC7C,MAAMC,8BAA8B,GAAG,MAAM;AAC7C,MAAMC,8BAA8B,GAAG,MAAM;AAC7C,MAAMC,8BAA8B,GAAG,MAAM;AAC7C,MAAMC,8BAA8B,GAAG,MAAM;AAC7C,MAAMC,UAAU,GAAG,CACf;EAAEC,IAAI,EAAEP,8BAA8B;EAAEQ,SAAS,EAAE,OAAO;EAAEC,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAW,CAAC,EACzF;EAAEH,IAAI,EAAEN,8BAA8B;EAAEO,SAAS,EAAE,MAAM;EAAEC,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAW,CAAC,EACxF;EAAEH,IAAI,EAAEL,8BAA8B;EAAEM,SAAS,EAAE,KAAK;EAAEC,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAW,CAAC,EACvF;EAAEH,IAAI,EAAEJ,8BAA8B;EAAEK,SAAS,EAAE,QAAQ;EAAEC,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAW,CAAC,EAC1F;EAAEH,IAAI,EAAEH,8BAA8B;EAAEI,SAAS,EAAE,OAAO;EAAEC,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAW,CAAC,EACzF;EAAEH,IAAI,EAAEF,8BAA8B;EAAEG,SAAS,EAAE,MAAM;EAAEC,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAW,CAAC,CAC3F;AACD;AACA;AACA,OAAO,eAAeC,gBAAgBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACpD;EACA,MAAMC,IAAI,GAAG,CAAC,CAAC;EACf,MAAMC,QAAQ,GAAG,EAAE;EACnB,IAAIC,KAAK,GAAG,CAAC;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,UAAU,CAACY,MAAM,EAAE,EAAED,CAAC,EAAE;IACxC,MAAMV,IAAI,GAAGD,UAAU,CAACU,KAAK,CAAC;IAC9B,MAAMG,OAAO,GAAGrB,YAAY,CAACc,MAAM,EAAEC,OAAO,EAAE;MAAE,GAAGN,IAAI;MAAES,KAAK,EAAEA,KAAK;IAAG,CAAC,CAAC,CAACI,IAAI,CAAEC,GAAG,IAAK;MACrFP,IAAI,CAACP,IAAI,CAACA,IAAI,CAAC,GAAGc,GAAG;IACzB,CAAC,CAAC;IACFN,QAAQ,CAACO,IAAI,CAACH,OAAO,CAAC;EAC1B;EACA,MAAMI,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;EAC3B,OAAOD,IAAI;AACf;AACA;AACA;AACA,OAAO,eAAeW,oBAAoBA,CAACb,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC7D,MAAMC,IAAI,GAAG,MAAMH,gBAAgB,CAACC,MAAM,EAAEC,OAAO,CAAC;EACpD,OAAQ,MAAMd,QAAQ,CAACe,IAAI,EAAEjB,WAAW,CAAC6B,KAAK,EAAEb,OAAO,CAAC;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}