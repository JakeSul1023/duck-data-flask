{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport TransitionInterpolator from \"./transition-interpolator.js\";\nimport { lerp } from '@math.gl/core';\nimport { flyToViewport, getFlyToDuration } from '@math.gl/web-mercator';\nconst LINEARLY_INTERPOLATED_PROPS = {\n  bearing: 0,\n  pitch: 0,\n  position: [0, 0, 0]\n};\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  constructor(opts = {}) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.opts = {\n      ...DEFAULT_OPTS,\n      ...opts\n    };\n  }\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.opts);\n    // Linearly interpolate 'bearing', 'pitch' and 'position'.\n    // If they are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key in LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || LINEARLY_INTERPOLATED_PROPS[key], endProps[key] || LINEARLY_INTERPOLATED_PROPS[key], t);\n    }\n    return viewport;\n  }\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {\n      transitionDuration\n    } = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.opts);\n    }\n    return transitionDuration;\n  }\n}","map":{"version":3,"names":["TransitionInterpolator","lerp","flyToViewport","getFlyToDuration","LINEARLY_INTERPOLATED_PROPS","bearing","pitch","position","DEFAULT_OPTS","speed","curve","FlyToInterpolator","constructor","opts","compare","extract","required","interpolateProps","startProps","endProps","t","viewport","key","getDuration","transitionDuration"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\transitions\\fly-to-interpolator.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport TransitionInterpolator from './transition-interpolator';\nimport {lerp} from '@math.gl/core';\n\nimport {flyToViewport, getFlyToDuration} from '@math.gl/web-mercator';\n\nconst LINEARLY_INTERPOLATED_PROPS = {\n  bearing: 0,\n  pitch: 0,\n  position: [0, 0, 0]\n};\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  opts: {\n    curve: number;\n    speed: number;\n    screenSpeed?: number;\n    maxDuration?: number;\n  };\n\n  constructor(\n    opts: {\n      /** The zooming \"curve\" that will occur along the flight path. Default 1.414 */\n      curve?: number;\n      /** The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa. Default 1.2 */\n      speed?: number;\n      /** The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored. */\n      screenSpeed?: number;\n      /** Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned. */\n      maxDuration?: number;\n    } = {}\n  ) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.opts = {...DEFAULT_OPTS, ...opts};\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.opts);\n\n    // Linearly interpolate 'bearing', 'pitch' and 'position'.\n    // If they are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key in LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(\n        startProps[key] || LINEARLY_INTERPOLATED_PROPS[key],\n        endProps[key] || LINEARLY_INTERPOLATED_PROPS[key],\n        t\n      );\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.opts);\n    }\n    return transitionDuration;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,sBAAsB;AAC7B,SAAQC,IAAI,QAAO,eAAe;AAElC,SAAQC,aAAa,EAAEC,gBAAgB,QAAO,uBAAuB;AAErE,MAAMC,2BAA2B,GAAG;EAClCC,OAAO,EAAE,CAAC;EACVC,KAAK,EAAE,CAAC;EACRC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;CACnB;AACD,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE;CACR;AAED;;;;;;;AAOA,eAAc,MAAOC,iBAAkB,SAAQX,sBAAsB;EAQnEY,YACEC,IAAA,GASI,EAAE;IAEN,KAAK,CAAC;MACJC,OAAO,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,CAAC;MAC1EC,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,CAAC;MAC7FC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM;KAC9D,CAAC;IACF,IAAI,CAACH,IAAI,GAAG;MAAC,GAAGL,YAAY;MAAE,GAAGK;IAAI,CAAC;EACxC;EAEAI,gBAAgBA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,CAAC;IACtC,MAAMC,QAAQ,GAAGnB,aAAa,CAACgB,UAAU,EAAEC,QAAQ,EAAEC,CAAC,EAAE,IAAI,CAACP,IAAI,CAAC;IAElE;IACA;IACA;IACA;IACA;IACA,KAAK,MAAMS,GAAG,IAAIlB,2BAA2B,EAAE;MAC7CiB,QAAQ,CAACC,GAAG,CAAC,GAAGrB,IAAI,CAClBiB,UAAU,CAACI,GAAG,CAAC,IAAIlB,2BAA2B,CAACkB,GAAG,CAAC,EACnDH,QAAQ,CAACG,GAAG,CAAC,IAAIlB,2BAA2B,CAACkB,GAAG,CAAC,EACjDF,CAAC,CACF;IACH;IAEA,OAAOC,QAAQ;EACjB;EAEA;EACAE,WAAWA,CAACL,UAAU,EAAEC,QAAQ;IAC9B,IAAI;MAACK;IAAkB,CAAC,GAAGL,QAAQ;IACnC,IAAIK,kBAAkB,KAAK,MAAM,EAAE;MACjC;MACAA,kBAAkB,GAAGrB,gBAAgB,CAACe,UAAU,EAAEC,QAAQ,EAAE,IAAI,CAACN,IAAI,CAAC;IACxE;IACA,OAAOW,kBAAkB;EAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}