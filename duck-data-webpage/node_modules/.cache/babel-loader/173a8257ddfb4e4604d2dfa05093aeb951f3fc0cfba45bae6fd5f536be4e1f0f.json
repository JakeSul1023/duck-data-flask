{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model } from '@luma.gl/engine';\nimport { arcUniforms } from \"./arc-layer-uniforms.js\";\nimport vs from \"./arc-layer-vertex.glsl.js\";\nimport fs from \"./arc-layer-fragment.glsl.js\";\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: x => x.sourcePosition\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: x => x.targetPosition\n  },\n  getSourceColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getTargetColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getHeight: {\n    type: 'accessor',\n    value: 1\n  },\n  getTilt: {\n    type: 'accessor',\n    value: 0\n  },\n  greatCircle: false,\n  numSegments: {\n    type: 'number',\n    value: 50,\n    min: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\n/** Render raised arcs joining pairs of source and target coordinates. */\nclass ArcLayer extends Layer {\n  getBounds() {\n    return this.getAttributeManager()?.getBounds(['instanceSourcePositions', 'instanceTargetPositions']);\n  }\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking, arcUniforms]\n    }); // 'project' module added by default.\n  }\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n  updateState(params) {\n    super.updateState(params);\n    if (params.changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      wrapLongitude,\n      numSegments\n    } = this.props;\n    const arcProps = {\n      numSegments,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      useShortestPath: wrapLongitude\n    };\n    const model = this.state.model;\n    model.shaderInputs.setProps({\n      arc: arcProps\n    });\n    model.setVertexCount(numSegments * 2);\n    model.draw(this.context.renderPass);\n  }\n  _getModel() {\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      topology: 'triangle-strip',\n      isInstanced: true\n    });\n  }\n}\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;\nexport default ArcLayer;","map":{"version":3,"names":["Layer","project32","picking","UNIT","Model","arcUniforms","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","numSegments","min","widthUnits","widthScale","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","ArcLayer","getBounds","getAttributeManager","getShaders","modules","wrapLongitude","initializeState","attributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","props","colorFormat","length","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","updateState","params","changeFlags","extensionsChanged","state","model","destroy","_getModel","invalidateAll","draw","uniforms","arcProps","useShortestPath","shaderInputs","setProps","arc","setVertexCount","context","renderPass","device","id","bufferLayout","getBufferLayouts","topology","isInstanced","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\arc-layer\\arc-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport {Model} from '@luma.gl/engine';\n\nimport {arcUniforms, ArcProps} from './arc-layer-uniforms';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: (x: any) => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: (x: any) => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n  numSegments: {type: 'number', value: 50, min: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = unknown> = _ArcLayerProps<DataT> & LayerProps;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The number of segments used to draw each arc.\n   * @default 50\n   */\n  numSegments?: number;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, arcUniforms]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      wrapLongitude,\n      numSegments\n    } = this.props;\n    const arcProps: ArcProps = {\n      numSegments,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      useShortestPath: wrapLongitude\n    };\n\n    const model = this.state.model!;\n    model.shaderInputs.setProps({arc: arcProps});\n    model.setVertexCount(numSegments * 2);\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel(): Model {\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      topology: 'triangle-strip',\n      isInstanced: true\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}