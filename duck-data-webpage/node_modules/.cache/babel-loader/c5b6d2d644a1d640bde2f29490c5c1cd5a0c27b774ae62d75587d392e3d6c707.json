{"ast":null,"code":"import DRACOBuilder from \"./lib/draco-builder.js\";\nimport { loadDracoEncoderModule } from \"./lib/draco-module-loader.js\";\nimport { VERSION } from \"./lib/utils/version.js\";\nconst DEFAULT_DRACO_WRITER_OPTIONS = {\n  pointcloud: false,\n  // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING', // Use draco defaults\n  // speed: [5, 5], // Use draco defaults\n  // quantization: { // Use draco defaults\n  //   POSITION: 10\n  // }\n};\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  options: {\n    draco: DEFAULT_DRACO_WRITER_OPTIONS\n  },\n  encode\n};\nasync function encode(data, options = {}) {\n  // Dynamically load draco\n  const {\n    draco\n  } = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}","map":{"version":3,"names":["DRACOBuilder","loadDracoEncoderModule","VERSION","DEFAULT_DRACO_WRITER_OPTIONS","pointcloud","attributeNameEntry","DracoWriter","name","id","module","version","extensions","options","draco","encode","data","dracoBuilder","encodeSync","destroy"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/draco/dist/draco-writer.js"],"sourcesContent":["import DRACOBuilder from \"./lib/draco-builder.js\";\nimport { loadDracoEncoderModule } from \"./lib/draco-module-loader.js\";\nimport { VERSION } from \"./lib/utils/version.js\";\nconst DEFAULT_DRACO_WRITER_OPTIONS = {\n    pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n    attributeNameEntry: 'name'\n    // Draco Compression Parameters\n    // method: 'MESH_EDGEBREAKER_ENCODING', // Use draco defaults\n    // speed: [5, 5], // Use draco defaults\n    // quantization: { // Use draco defaults\n    //   POSITION: 10\n    // }\n};\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter = {\n    name: 'DRACO',\n    id: 'draco',\n    module: 'draco',\n    version: VERSION,\n    extensions: ['drc'],\n    options: {\n        draco: DEFAULT_DRACO_WRITER_OPTIONS\n    },\n    encode\n};\nasync function encode(data, options = {}) {\n    // Dynamically load draco\n    const { draco } = await loadDracoEncoderModule(options);\n    const dracoBuilder = new DRACOBuilder(draco);\n    try {\n        return dracoBuilder.encodeSync(data, options.draco);\n    }\n    finally {\n        dracoBuilder.destroy();\n    }\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,wBAAwB;AACjD,SAASC,sBAAsB,QAAQ,8BAA8B;AACrE,SAASC,OAAO,QAAQ,wBAAwB;AAChD,MAAMC,4BAA4B,GAAG;EACjCC,UAAU,EAAE,KAAK;EAAE;EACnBC,kBAAkB,EAAE;EACpB;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG;EACvBC,IAAI,EAAE,OAAO;EACbC,EAAE,EAAE,OAAO;EACXC,MAAM,EAAE,OAAO;EACfC,OAAO,EAAER,OAAO;EAChBS,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,OAAO,EAAE;IACLC,KAAK,EAAEV;EACX,CAAC;EACDW;AACJ,CAAC;AACD,eAAeA,MAAMA,CAACC,IAAI,EAAEH,OAAO,GAAG,CAAC,CAAC,EAAE;EACtC;EACA,MAAM;IAAEC;EAAM,CAAC,GAAG,MAAMZ,sBAAsB,CAACW,OAAO,CAAC;EACvD,MAAMI,YAAY,GAAG,IAAIhB,YAAY,CAACa,KAAK,CAAC;EAC5C,IAAI;IACA,OAAOG,YAAY,CAACC,UAAU,CAACF,IAAI,EAAEH,OAAO,CAACC,KAAK,CAAC;EACvD,CAAC,SACO;IACJG,YAAY,CAACE,OAAO,CAAC,CAAC;EAC1B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}