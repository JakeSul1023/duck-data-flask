{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Geometry } from '@luma.gl/engine';\nimport { Model } from '@luma.gl/engine';\nimport PathTesselator from \"./path-tesselator.js\";\nimport { pathUniforms } from \"./path-layer-uniforms.js\";\nimport vs from \"./path-layer-vertex.glsl.js\";\nimport fs from \"./path-layer-fragment.glsl.js\";\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: object => object.path\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  // deprecated props\n  rounded: {\n    deprecatedFor: ['jointRounded', 'capRounded']\n  }\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n/** Render lists of coordinate points as extruded polylines with mitering. */\nclass PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking, pathUniforms]\n    }); // 'project' module added by default.\n  }\n  get wrapLongitude() {\n    return false;\n  }\n  getBounds() {\n    return this.getAttributeManager()?.getBounds(['vertexPositions']);\n  }\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      vertexPositions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: 'uint8',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 4,\n        type: 'uint8',\n        accessor: (object, {\n          index,\n          target: value\n        }) => this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n    if (geometryChanged) {\n      const {\n        pathTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      attributeManager.invalidateAll();\n    }\n  }\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const data = this.props.data;\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex) {\n    const data = this.props.data;\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n    const model = this.state.model;\n    const pathProps = {\n      jointType: Number(jointRounded),\n      capType: Number(capRounded),\n      billboard,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels\n    };\n    model.shaderInputs.setProps({\n      path: pathProps\n    });\n    model.draw(this.context.renderPass);\n  }\n  _getModel() {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n    // start corner\n    0, 1, 2,\n    // body\n    1, 4, 2, 1, 3, 4,\n    // end corner\n    3, 5, 4];\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n    // bevel start corner\n    0, 0,\n    // start inner corner\n    0, -1,\n    // start outer corner\n    0, 1,\n    // end inner corner\n    1, -1,\n    // end outer corner\n    1, 1,\n    // bevel end corner\n    1, 0];\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-list',\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {\n            value: new Float32Array(SEGMENT_POSITIONS),\n            size: 2\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n  calculatePositions(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n  calculateSegmentTypes(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\nPathLayer.defaultProps = defaultProps;\nPathLayer.layerName = 'PathLayer';\nexport default PathLayer;","map":{"version":3,"names":["Layer","project32","picking","UNIT","Geometry","Model","PathTesselator","pathUniforms","vs","fs","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","getShaders","modules","wrapLongitude","getBounds","getAttributeManager","initializeState","noAlloc","attributeManager","addInstanced","vertexPositions","size","vertexOffset","fp64","use64bitPositions","transition","accessor","update","calculatePositions","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","instancePickingColors","index","target","encodePickingColor","__source","setState","pathTesselator","updateState","params","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","buffers","data","attributes","updateGeometry","geometryBuffer","normalize","loop","getGeometry","positionFormat","resolution","context","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","model","destroy","_getModel","getPickingInfo","info","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","pathProps","jointType","capType","shaderInputs","setProps","renderPass","SEGMENT_INDICES","SEGMENT_POSITIONS","device","id","bufferLayout","getBufferLayouts","geometry","topology","indices","Uint16Array","positions","Float32Array","isInstanced","attribute","get","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\path-layer\\path-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport {Geometry} from '@luma.gl/engine';\nimport {Model} from '@luma.gl/engine';\nimport PathTesselator from './path-tesselator';\n\nimport {pathUniforms, PathProps} from './path-layer-uniforms';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PathGeometry} from './path';\n\ntype _PathLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'meters'\n   */\n  widthUnits?: Unit;\n  /**\n   * Path width multiplier.\n   * @default 1\n   */\n  widthScale?: number;\n  /**\n   * The minimum path width in pixels. This prop can be used to prevent the path from getting too thin when zoomed out.\n   * @default 0\n   */\n  widthMinPixels?: number;\n  /**\n   * The maximum path width in pixels. This prop can be used to prevent the path from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   * @default false\n   */\n  jointRounded?: boolean;\n  /**\n   * Type of caps. If `true`, draw round caps. Otherwise draw square caps.\n   * @default false\n   */\n  capRounded?: boolean;\n  /**\n   * The maximum extent of a joint in ratio to the stroke width. Only works if `jointRounded` is `false`.\n   * @default 4\n   */\n  miterLimit?: number;\n  /**\n   * If `true`, extrude the path in screen space (width always faces the camera).\n   * If `false`, the width always faces up (z).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * (Experimental) If `'loop'` or `'open'`, will skip normalizing the coordinates returned by `getPath` and instead assume all paths are to be loops or open paths.\n   * When normalization is disabled, paths must be specified in the format of flat array. Open paths must contain at least 2 vertices and closed paths must contain at least 3 vertices.\n   * @default null\n   */\n  _pathType?: null | 'loop' | 'open';\n  /**\n   * Path geometry accessor.\n   */\n  getPath?: AccessorFunction<DataT, PathGeometry>;\n  /**\n   * Path color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color | Color[]>;\n  /**\n   * Path width accessor.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number | number[]>;\n  /**\n   * @deprecated Use `jointRounded` and `capRounded` instead\n   */\n  rounded?: boolean;\n};\n\nexport type PathLayerProps<DataT = unknown> = _PathLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PathLayerProps> = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1},\n  widthMinPixels: {type: 'number', min: 0, value: 0},\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: (object: any) => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\n/** Render lists of coordinate points as extruded polylines with mitering. */\nexport default class PathLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PathLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'PathLayer';\n\n  state!: {\n    model?: Model;\n    pathTesselator: PathTesselator;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, pathUniforms]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds(['vertexPositions']);\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      vertexPositions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: 'uint8',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 4,\n        type: 'uint8',\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager!.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const data = this.props.data as any[];\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex: number) {\n    const data = this.props.data as any[];\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    const model = this.state.model!;\n    const pathProps: PathProps = {\n      jointType: Number(jointRounded),\n      capType: Number(capRounded),\n      billboard,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels\n    };\n    model.shaderInputs.setProps({path: pathProps});\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel(): Model {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-list',\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  protected calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  protected calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}