{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from \"./viewport.js\";\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat, unitsPerMeter, getProjectionParameters, altitudeToFovy, fovyToAltitude, fitBounds, getBounds } from '@math.gl/web-mercator';\nimport { Matrix4, clamp, vec2 } from '@math.gl/core';\n/**\n * Manages transformations to/from WGS84 coordinates using the Web Mercator Projection.\n */\nclass WebMercatorViewport extends Viewport {\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      nearZ,\n      farZ,\n      orthographic = false,\n      projectionMatrix,\n      repeat = false,\n      worldOffset = 0,\n      position,\n      padding,\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n    let {\n      width,\n      height,\n      altitude = 1.5\n    } = opts;\n    const scale = Math.pow(2, zoom);\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n    let fovy;\n    let projectionParameters = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n      let offset;\n      if (padding) {\n        const {\n          top = 0,\n          bottom = 0\n        } = padding;\n        offset = [0, clamp((top + height - bottom) / 2, 0, height) - height / 2];\n      }\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        scale,\n        center: position && [0, 0, position[2] * unitsPerMeter(latitude)],\n        offset,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n      if (Number.isFinite(nearZ)) {\n        projectionParameters.near = nearZ;\n      }\n      if (Number.isFinite(farZ)) {\n        projectionParameters.far = farZ;\n      }\n    }\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.orthographic = orthographic;\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x ? new WebMercatorViewport({\n          ...this,\n          worldOffset: x\n        }) : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {\n      longitude,\n      latitude\n    };\n  }\n  getBounds(options = {}) {\n    // @ts-ignore\n    const corners = getBounds(this, options.z || 0);\n    return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n  }\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   */\n  fitBounds(/** [[lon, lat], [lon, lat]] */\n  bounds, options = {}) {\n    const {\n      width,\n      height\n    } = this;\n    const {\n      longitude,\n      latitude,\n      zoom\n    } = fitBounds({\n      width,\n      height,\n      bounds,\n      ...options\n    });\n    return new WebMercatorViewport({\n      width,\n      height,\n      longitude,\n      latitude,\n      zoom\n    });\n  }\n}\nWebMercatorViewport.displayName = 'WebMercatorViewport';\nexport default WebMercatorViewport;","map":{"version":3,"names":["Viewport","pixelsToWorld","getViewMatrix","addMetersToLngLat","unitsPerMeter","getProjectionParameters","altitudeToFovy","fovyToAltitude","fitBounds","getBounds","Matrix4","clamp","vec2","WebMercatorViewport","constructor","opts","latitude","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","nearZ","farZ","orthographic","projectionMatrix","repeat","worldOffset","position","padding","legacyMeterSizes","width","height","altitude","scale","Math","pow","fovy","projectionParameters","offset","top","bottom","center","Number","isFinite","near","far","viewMatrixUncentered","viewOffset","translate","multiplyLeft","viewMatrix","focalDistance","_subViewports","_pseudoMeters","Object","freeze","subViewports","length","bounds","minOffset","floor","maxOffset","ceil","x","offsetViewport","push","projectPosition","xyz","X","Y","projectFlat","Z","unprojectPosition","unprojectFlat","lngLatZ","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","add","negate","newCenter","options","corners","z","min","max","displayName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\viewports\\web-mercator-viewport.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  unitsPerMeter,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\nimport {Padding} from './viewport';\n\nimport {Matrix4, clamp, vec2} from '@math.gl/core';\n\nexport type WebMercatorViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude in degrees */\n  longitude?: number;\n  /** Latitude in degrees */\n  latitude?: number;\n  /** Tilt of the camera in degrees */\n  pitch?: number;\n  /** Heading of the camera in degrees */\n  bearing?: number;\n  /** Camera altitude relative to the viewport height, legacy property used to control the FOV. Default `1.5` */\n  altitude?: number;\n  /** Camera fovy in degrees. If provided, overrides `altitude` */\n  fovy?: number;\n  /** Viewport center in world space. If geospatial, refers to meter offsets from lng, lat, elevation */\n  position?: number[];\n  /** Zoom level */\n  zoom?: number;\n  /** Padding around the viewport, in pixels. */\n  padding?: Padding | null;\n  /** Model matrix of viewport center */\n  modelMatrix?: number[] | null;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Use orthographic projection */\n  orthographic?: boolean;\n  /** Scaler for the near plane, 1 unit equals to the height of the viewport. Default `0.1` */\n  nearZMultiplier?: number;\n  /** Scaler for the far plane, 1 unit equals to the distance from the camera to the edge of the screen. Default `1.01` */\n  farZMultiplier?: number;\n  /** Optionally override the near plane position. `nearZMultiplier` is ignored if `nearZ` is supplied. */\n  nearZ?: number;\n  /** Optionally override the far plane position. `farZMultiplier` is ignored if `farZ` is supplied. */\n  farZ?: number;\n  /** Render multiple copies of the world */\n  repeat?: boolean;\n  /** Internal use */\n  worldOffset?: number;\n  /** @deprecated Revert to approximated meter size calculation prior to v8.5 */\n  legacyMeterSizes?: boolean;\n};\n\n/**\n * Manages transformations to/from WGS84 coordinates using the Web Mercator Projection.\n */\nexport default class WebMercatorViewport extends Viewport {\n  static displayName = 'WebMercatorViewport';\n\n  longitude: number;\n  latitude: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  fovy: number;\n  orthographic: boolean;\n\n  /** Each sub viewport renders one copy of the world if repeat:true. The list is generated and cached on first request. */\n  private _subViewports: WebMercatorViewport[] | null;\n  /** @deprecated Revert to approximated meter size calculation prior to v8.5 */\n  private _pseudoMeters: boolean;\n\n  /* eslint-disable complexity, max-statements */\n  constructor(opts: WebMercatorViewportOptions = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      nearZ,\n      farZ,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n      position,\n      padding,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters: any = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n\n      let offset: [number, number] | undefined;\n      if (padding) {\n        const {top = 0, bottom = 0} = padding;\n        offset = [0, clamp((top + height - bottom) / 2, 0, height) - height / 2];\n      }\n\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        scale,\n        center: position && [0, 0, position[2] * unitsPerMeter(latitude)],\n        offset,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n\n      if (Number.isFinite(nearZ)) {\n        projectionParameters.near = nearZ;\n      }\n      if (Number.isFinite(farZ)) {\n        projectionParameters.far = farZ;\n      }\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports(): WebMercatorViewport[] | null {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz: number[]): [number, number, number] {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz: number[]): [number, number, number] {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords: number[], pixel: number[]): WebMercatorViewportOptions {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options: {z?: number} = {}): [number, number, number, number] {\n    // @ts-ignore\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   */\n  fitBounds(\n    /** [[lon, lat], [lon, lat]] */\n    bounds: [[number, number], [number, number]],\n    options: {\n      /** If not supplied, will use the current width of the viewport (default `1`) */\n      width?: number;\n      /** If not supplied, will use the current height of the viewport (default `1`) */\n      height?: number;\n      /** In degrees, 0.01 would be about 1000 meters */\n      minExtent?: number;\n      /** Max zoom level */\n      maxZoom?: number;\n      /** Extra padding in pixels */\n      padding?: number | Required<Padding>;\n      /** Center shift in pixels */\n      offset?: number[];\n    } = {}\n  ) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}