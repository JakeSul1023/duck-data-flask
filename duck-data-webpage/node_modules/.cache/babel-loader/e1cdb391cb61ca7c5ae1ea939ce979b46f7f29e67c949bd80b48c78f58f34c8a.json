{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parseFromContext } from '@loaders.gl/loader-utils';\nimport { parseQuantizedMesh } from \"./lib/parse-quantized-mesh.js\";\nimport { makeTerrainMeshFromImage } from \"./lib/parse-terrain.js\";\nimport { TerrainLoader as TerrainWorkerLoader } from \"./terrain-loader.js\";\nimport { QuantizedMeshLoader as QuantizedMeshWorkerLoader } from \"./quantized-mesh-loader.js\";\n// TerrainLoader\nexport { TerrainWorkerLoader };\nexport const TerrainLoader = {\n  ...TerrainWorkerLoader,\n  parse: parseTerrain\n};\nexport async function parseTerrain(arrayBuffer, options, context) {\n  const loadImageOptions = {\n    ...options,\n    mimeType: 'application/x.image',\n    image: {\n      ...options?.image,\n      type: 'data'\n    }\n  };\n  const image = await parseFromContext(arrayBuffer, [], loadImageOptions, context);\n  // Extend function to support additional mesh generation options (square grid or delatin)\n  const terrainOptions = {\n    ...TerrainLoader.options.terrain,\n    ...options?.terrain\n  };\n  // @ts-expect-error sort out image typing asap\n  return makeTerrainMeshFromImage(image, terrainOptions);\n}\n// QuantizedMeshLoader\nexport { QuantizedMeshWorkerLoader };\n/**\n * Loader for quantized meshes\n */\nexport const QuantizedMeshLoader = {\n  ...QuantizedMeshWorkerLoader,\n  parseSync: (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options?.['quantized-mesh']),\n  parse: async (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options?.['quantized-mesh'])\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}