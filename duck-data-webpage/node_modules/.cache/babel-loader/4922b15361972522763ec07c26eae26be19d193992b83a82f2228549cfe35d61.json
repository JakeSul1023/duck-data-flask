{"ast":null,"code":"import { VERSION } from \"./lib/utils/version.js\";\nimport { parseGLTF } from \"./lib/parsers/parse-gltf.js\";\n/**\n * GLTF loader\n */\nexport const GLTFLoader = {\n  dataType: null,\n  batchType: null,\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n  options: {\n    gltf: {\n      normalize: true,\n      // Normalize glTF v1 to glTF v2 format (not yet stable)\n      loadBuffers: true,\n      // Fetch any linked .BIN buffers, decode base64\n      loadImages: true,\n      // Create image objects\n      decompressMeshes: true // Decompress Draco encoded meshes\n    },\n    // common?\n    log: console // eslint-disable-line\n  }\n};\nexport async function parse(arrayBuffer, options = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {\n    ...GLTFLoader.options,\n    ...options\n  };\n  // @ts-ignore\n  options.gltf = {\n    ...GLTFLoader.options.gltf,\n    ...options.gltf\n  };\n  const {\n    byteOffset = 0\n  } = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}","map":{"version":3,"names":["VERSION","parseGLTF","GLTFLoader","dataType","batchType","name","id","module","version","extensions","mimeTypes","text","binary","tests","parse","options","gltf","normalize","loadBuffers","loadImages","decompressMeshes","log","console","arrayBuffer","context","byteOffset"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/gltf-loader.js"],"sourcesContent":["import { VERSION } from \"./lib/utils/version.js\";\nimport { parseGLTF } from \"./lib/parsers/parse-gltf.js\";\n/**\n * GLTF loader\n */\nexport const GLTFLoader = {\n    dataType: null,\n    batchType: null,\n    name: 'glTF',\n    id: 'gltf',\n    module: 'gltf',\n    version: VERSION,\n    extensions: ['gltf', 'glb'],\n    mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n    text: true,\n    binary: true,\n    tests: ['glTF'],\n    parse,\n    options: {\n        gltf: {\n            normalize: true, // Normalize glTF v1 to glTF v2 format (not yet stable)\n            loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n            loadImages: true, // Create image objects\n            decompressMeshes: true // Decompress Draco encoded meshes\n        },\n        // common?\n        log: console // eslint-disable-line\n    }\n};\nexport async function parse(arrayBuffer, options = {}, context) {\n    // Apps can call the parse method directly, we so apply default options here\n    options = { ...GLTFLoader.options, ...options };\n    // @ts-ignore\n    options.gltf = { ...GLTFLoader.options.gltf, ...options.gltf };\n    const { byteOffset = 0 } = options;\n    const gltf = {};\n    return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;EACtBC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,MAAM;EACZC,EAAE,EAAE,MAAM;EACVC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAER,OAAO;EAChBS,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;EAC3BC,SAAS,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,CAAC;EACnDC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,IAAI;EACZC,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,KAAK;EACLC,OAAO,EAAE;IACLC,IAAI,EAAE;MACFC,SAAS,EAAE,IAAI;MAAE;MACjBC,WAAW,EAAE,IAAI;MAAE;MACnBC,UAAU,EAAE,IAAI;MAAE;MAClBC,gBAAgB,EAAE,IAAI,CAAC;IAC3B,CAAC;IACD;IACAC,GAAG,EAAEC,OAAO,CAAC;EACjB;AACJ,CAAC;AACD,OAAO,eAAeR,KAAKA,CAACS,WAAW,EAAER,OAAO,GAAG,CAAC,CAAC,EAAES,OAAO,EAAE;EAC5D;EACAT,OAAO,GAAG;IAAE,GAAGb,UAAU,CAACa,OAAO;IAAE,GAAGA;EAAQ,CAAC;EAC/C;EACAA,OAAO,CAACC,IAAI,GAAG;IAAE,GAAGd,UAAU,CAACa,OAAO,CAACC,IAAI;IAAE,GAAGD,OAAO,CAACC;EAAK,CAAC;EAC9D,MAAM;IAAES,UAAU,GAAG;EAAE,CAAC,GAAGV,OAAO;EAClC,MAAMC,IAAI,GAAG,CAAC,CAAC;EACf,OAAO,MAAMf,SAAS,CAACe,IAAI,EAAEO,WAAW,EAAEE,UAAU,EAAEV,OAAO,EAAES,OAAO,CAAC;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}