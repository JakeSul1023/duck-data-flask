{"ast":null,"code":"import getHiResTimestamp from \"../utils/hi-res-timestamp.js\";\nexport default class Stat {\n  constructor(name, type) {\n    this.sampleSize = 1;\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    return this;\n  }\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n    return this;\n  }\n  /** Call to increment count (+1) */\n  incrementCount() {\n    this.addCount(1);\n    return this;\n  }\n  /** Call to decrement count (-1) */\n  decrementCount() {\n    this.subtractCount(1);\n    return this;\n  }\n  /** Increase count */\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  /** Decrease count */\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  /** Add an arbitrary timing and bump the count */\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  /** Start a timer */\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n    return this;\n  }\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n    return this;\n  }\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n  /** Calculate counts per second for the previous window */\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n  /** Calculate average time / count */\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n  /** Calculate counts per second */\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n//# sourceMappingURL=stat.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}