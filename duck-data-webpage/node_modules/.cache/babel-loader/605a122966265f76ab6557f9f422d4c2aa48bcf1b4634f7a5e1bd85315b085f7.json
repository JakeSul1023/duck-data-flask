{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** A single element of an array is not represented as an array in XML */\nexport function getXMLArray(xmlValue) {\n  // Already an array, return as is\n  if (Array.isArray(xmlValue)) {\n    return xmlValue;\n  }\n  // Single value, wrap in array\n  if (xmlValue) {\n    return [xmlValue];\n  }\n  // nullish, return empty array\n  return [];\n}\n/** Get a list of strings from XML */\nexport function getXMLStringArray(xmlValue) {\n  const xmlArray = getXMLArray(xmlValue);\n  if (xmlArray.length > 0 && xmlArray.every(_ => typeof _ === 'string')) {\n    return xmlArray;\n  }\n  // TODO - error handling?\n  return [];\n}\n/** Get XML float */\nexport function getXMLFloat(xmlValue, defaultValue = undefined) {\n  switch (typeof xmlValue) {\n    case 'number':\n      return xmlValue;\n    case 'string':\n      return parseFloat(xmlValue);\n    default:\n      return undefined;\n  }\n}\n/** Get XML integer */\nexport function getXMLInteger(xmlValue, defaultValue = undefined) {\n  switch (typeof xmlValue) {\n    case 'number':\n      return xmlValue;\n    case 'string':\n      return parseInt(xmlValue, 10);\n    default:\n      return undefined;\n  }\n}\n/** Somewhat arbitrary boolean parsing */\nexport function getXMLBoolean(xmlValue) {\n  switch (xmlValue) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    case '1':\n      return true;\n    case '0':\n      return false;\n    default:\n      return false;\n  }\n}","map":{"version":3,"names":["getXMLArray","xmlValue","Array","isArray","getXMLStringArray","xmlArray","length","every","_","getXMLFloat","defaultValue","undefined","parseFloat","getXMLInteger","parseInt","getXMLBoolean"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/wms/dist/lib/parsers/xml/parse-xml-helpers.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** A single element of an array is not represented as an array in XML */\nexport function getXMLArray(xmlValue) {\n    // Already an array, return as is\n    if (Array.isArray(xmlValue)) {\n        return xmlValue;\n    }\n    // Single value, wrap in array\n    if (xmlValue) {\n        return [xmlValue];\n    }\n    // nullish, return empty array\n    return [];\n}\n/** Get a list of strings from XML */\nexport function getXMLStringArray(xmlValue) {\n    const xmlArray = getXMLArray(xmlValue);\n    if (xmlArray.length > 0 && xmlArray.every((_) => typeof _ === 'string')) {\n        return xmlArray;\n    }\n    // TODO - error handling?\n    return [];\n}\n/** Get XML float */\nexport function getXMLFloat(xmlValue, defaultValue = undefined) {\n    switch (typeof xmlValue) {\n        case 'number':\n            return xmlValue;\n        case 'string':\n            return parseFloat(xmlValue);\n        default:\n            return undefined;\n    }\n}\n/** Get XML integer */\nexport function getXMLInteger(xmlValue, defaultValue = undefined) {\n    switch (typeof xmlValue) {\n        case 'number':\n            return xmlValue;\n        case 'string':\n            return parseInt(xmlValue, 10);\n        default:\n            return undefined;\n    }\n}\n/** Somewhat arbitrary boolean parsing */\nexport function getXMLBoolean(xmlValue) {\n    switch (xmlValue) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        case '1':\n            return true;\n        case '0':\n            return false;\n        default:\n            return false;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAWA,CAACC,QAAQ,EAAE;EAClC;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;IACzB,OAAOA,QAAQ;EACnB;EACA;EACA,IAAIA,QAAQ,EAAE;IACV,OAAO,CAACA,QAAQ,CAAC;EACrB;EACA;EACA,OAAO,EAAE;AACb;AACA;AACA,OAAO,SAASG,iBAAiBA,CAACH,QAAQ,EAAE;EACxC,MAAMI,QAAQ,GAAGL,WAAW,CAACC,QAAQ,CAAC;EACtC,IAAII,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAID,QAAQ,CAACE,KAAK,CAAEC,CAAC,IAAK,OAAOA,CAAC,KAAK,QAAQ,CAAC,EAAE;IACrE,OAAOH,QAAQ;EACnB;EACA;EACA,OAAO,EAAE;AACb;AACA;AACA,OAAO,SAASI,WAAWA,CAACR,QAAQ,EAAES,YAAY,GAAGC,SAAS,EAAE;EAC5D,QAAQ,OAAOV,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAOA,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAOW,UAAU,CAACX,QAAQ,CAAC;IAC/B;MACI,OAAOU,SAAS;EACxB;AACJ;AACA;AACA,OAAO,SAASE,aAAaA,CAACZ,QAAQ,EAAES,YAAY,GAAGC,SAAS,EAAE;EAC9D,QAAQ,OAAOV,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAOA,QAAQ;IACnB,KAAK,QAAQ;MACT,OAAOa,QAAQ,CAACb,QAAQ,EAAE,EAAE,CAAC;IACjC;MACI,OAAOU,SAAS;EACxB;AACJ;AACA;AACA,OAAO,SAASI,aAAaA,CAACd,QAAQ,EAAE;EACpC,QAAQA,QAAQ;IACZ,KAAK,MAAM;MACP,OAAO,IAAI;IACf,KAAK,OAAO;MACR,OAAO,KAAK;IAChB,KAAK,GAAG;MACJ,OAAO,IAAI;IACf,KAAK,GAAG;MACJ,OAAO,KAAK;IAChB;MACI,OAAO,KAAK;EACpB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}