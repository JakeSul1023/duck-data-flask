{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\nimport { createProtoFeature } from \"./proto-feature.js\";\nimport { simplifyPath } from \"./simplify-path.js\";\n/**\n * converts a GeoJSON feature into an intermediate projected JSON vector format\n * with simplification data\n */\nexport function convertFeaturesToProtoFeature(data, options) {\n  const protoFeatures = [];\n  switch (data.type) {\n    case 'FeatureCollection':\n      let i = 0;\n      for (const feature of data.features) {\n        protoFeatures.push(convertFeature(feature, options, i++));\n      }\n      break;\n    case 'Feature':\n      protoFeatures.push(convertFeature(data, options));\n      break;\n    default:\n      // single geometry or a geometry collection\n      protoFeatures.push(convertFeature({\n        geometry: data\n      }, options));\n  }\n  return protoFeatures;\n}\n/**\n * converts a GeoJSON feature into an intermediate projected JSON vector format\n * with simplification data\n */\nfunction convertFeature(geojson, options, index) {\n  // GeoJSON geometries can be null, but no vector tile will include them.\n  if (!geojson.geometry) {\n    return;\n  }\n  const coords = geojson.geometry.coordinates;\n  const type = geojson.geometry.type;\n  const tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);\n  let geometry = [];\n  let id = geojson.id;\n  if (options.promoteId) {\n    id = geojson.properties[options.promoteId];\n  } else if (options.generateId) {\n    id = index || 0;\n  }\n  switch (type) {\n    case 'Point':\n      convertPoint(coords, geometry);\n      break;\n    case 'MultiPoint':\n      for (const p of coords) {\n        convertPoint(p, geometry);\n      }\n      break;\n    case 'LineString':\n      convertLine(coords, geometry, tolerance, false);\n      break;\n    case 'MultiLineString':\n      if (options.lineMetrics) {\n        // explode into linestrings to be able to track metrics\n        for (const line of coords) {\n          geometry = [];\n          convertLine(line, geometry, tolerance, false);\n          features.push(createProtoFeature(id, 'LineString', geometry, geojson.properties));\n        }\n        return;\n        convertLines(coords, geometry, tolerance, false);\n      }\n      break;\n    case 'Polygon':\n      convertLines(coords, geometry, tolerance, true);\n      break;\n    case 'MultiPolygon':\n      for (const polygon of coords) {\n        const newPolygon = [];\n        convertLines(polygon, newPolygon, tolerance, true);\n        geometry.push(newPolygon);\n      }\n      break;\n    case 'GeometryCollection':\n      for (const singleGeometry of geojson.geometry.geometries) {\n        convertFeature(features, {\n          id,\n          geometry: singleGeometry,\n          properties: geojson.properties\n        }, options, index);\n      }\n      break;\n    default:\n      throw new Error('Input data is not a valid GeoJSON object.');\n  }\n  return createProtoFeature(id, type, geometry, geojson.properties);\n}\nfunction convertPoint(coords, out) {\n  out.push(projectX(coords[0]), projectY(coords[1]), 0);\n}\nfunction convertLine(ring, out, tolerance, isPolygon) {\n  let x0, y0;\n  let size = 0;\n  for (let j = 0; j < ring.length; j++) {\n    const x = projectX(ring[j][0]);\n    const y = projectY(ring[j][1]);\n    out.push(x, y, 0);\n    if (j > 0) {\n      if (isPolygon) {\n        size += (x0 * y - x * y0) / 2; // area\n      } else {\n        size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length\n      }\n    }\n    x0 = x;\n    y0 = y;\n  }\n  const last = out.length - 3;\n  out[2] = 1;\n  simplifyPath(out, 0, last, tolerance);\n  out[last + 2] = 1;\n  out.size = Math.abs(size);\n  out.start = 0;\n  out.end = out.size;\n}\nfunction convertLines(rings, out, tolerance, isPolygon) {\n  for (let i = 0; i < rings.length; i++) {\n    const geom = [];\n    convertLine(rings[i], geom, tolerance, isPolygon);\n    out.push(geom);\n  }\n}\nfunction projectX(x) {\n  return x / 360 + 0.5;\n}\nfunction projectY(y) {\n  const sin = Math.sin(y * Math.PI / 180);\n  const y2 = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n  return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;\n}","map":{"version":3,"names":["createProtoFeature","simplifyPath","convertFeaturesToProtoFeature","data","options","protoFeatures","type","i","feature","features","push","convertFeature","geometry","geojson","index","coords","coordinates","tolerance","Math","pow","maxZoom","extent","id","promoteId","properties","generateId","convertPoint","p","convertLine","lineMetrics","line","convertLines","polygon","newPolygon","singleGeometry","geometries","Error","out","projectX","projectY","ring","isPolygon","x0","y0","size","j","length","x","y","sqrt","last","abs","start","end","rings","geom","sin","PI","y2","log"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/mvt/dist/lib/vector-tiler/features/convert-feature.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\nimport { createProtoFeature } from \"./proto-feature.js\";\nimport { simplifyPath } from \"./simplify-path.js\";\n/**\n * converts a GeoJSON feature into an intermediate projected JSON vector format\n * with simplification data\n */\nexport function convertFeaturesToProtoFeature(data, options) {\n    const protoFeatures = [];\n    switch (data.type) {\n        case 'FeatureCollection':\n            let i = 0;\n            for (const feature of data.features) {\n                protoFeatures.push(convertFeature(feature, options, i++));\n            }\n            break;\n        case 'Feature':\n            protoFeatures.push(convertFeature(data, options));\n            break;\n        default:\n            // single geometry or a geometry collection\n            protoFeatures.push(convertFeature({ geometry: data }, options));\n    }\n    return protoFeatures;\n}\n/**\n * converts a GeoJSON feature into an intermediate projected JSON vector format\n * with simplification data\n */\nfunction convertFeature(geojson, options, index) {\n    // GeoJSON geometries can be null, but no vector tile will include them.\n    if (!geojson.geometry) {\n        return;\n    }\n    const coords = geojson.geometry.coordinates;\n    const type = geojson.geometry.type;\n    const tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);\n    let geometry = [];\n    let id = geojson.id;\n    if (options.promoteId) {\n        id = geojson.properties[options.promoteId];\n    }\n    else if (options.generateId) {\n        id = index || 0;\n    }\n    switch (type) {\n        case 'Point':\n            convertPoint(coords, geometry);\n            break;\n        case 'MultiPoint':\n            for (const p of coords) {\n                convertPoint(p, geometry);\n            }\n            break;\n        case 'LineString':\n            convertLine(coords, geometry, tolerance, false);\n            break;\n        case 'MultiLineString':\n            if (options.lineMetrics) {\n                // explode into linestrings to be able to track metrics\n                for (const line of coords) {\n                    geometry = [];\n                    convertLine(line, geometry, tolerance, false);\n                    features.push(createProtoFeature(id, 'LineString', geometry, geojson.properties));\n                }\n                return;\n                convertLines(coords, geometry, tolerance, false);\n            }\n            break;\n        case 'Polygon':\n            convertLines(coords, geometry, tolerance, true);\n            break;\n        case 'MultiPolygon':\n            for (const polygon of coords) {\n                const newPolygon = [];\n                convertLines(polygon, newPolygon, tolerance, true);\n                geometry.push(newPolygon);\n            }\n            break;\n        case 'GeometryCollection':\n            for (const singleGeometry of geojson.geometry.geometries) {\n                convertFeature(features, {\n                    id,\n                    geometry: singleGeometry,\n                    properties: geojson.properties\n                }, options, index);\n            }\n            break;\n        default:\n            throw new Error('Input data is not a valid GeoJSON object.');\n    }\n    return createProtoFeature(id, type, geometry, geojson.properties);\n}\nfunction convertPoint(coords, out) {\n    out.push(projectX(coords[0]), projectY(coords[1]), 0);\n}\nfunction convertLine(ring, out, tolerance, isPolygon) {\n    let x0, y0;\n    let size = 0;\n    for (let j = 0; j < ring.length; j++) {\n        const x = projectX(ring[j][0]);\n        const y = projectY(ring[j][1]);\n        out.push(x, y, 0);\n        if (j > 0) {\n            if (isPolygon) {\n                size += (x0 * y - x * y0) / 2; // area\n            }\n            else {\n                size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length\n            }\n        }\n        x0 = x;\n        y0 = y;\n    }\n    const last = out.length - 3;\n    out[2] = 1;\n    simplifyPath(out, 0, last, tolerance);\n    out[last + 2] = 1;\n    out.size = Math.abs(size);\n    out.start = 0;\n    out.end = out.size;\n}\nfunction convertLines(rings, out, tolerance, isPolygon) {\n    for (let i = 0; i < rings.length; i++) {\n        const geom = [];\n        convertLine(rings[i], geom, tolerance, isPolygon);\n        out.push(geom);\n    }\n}\nfunction projectX(x) {\n    return x / 360 + 0.5;\n}\nfunction projectY(y) {\n    const sin = Math.sin((y * Math.PI) / 180);\n    const y2 = 0.5 - (0.25 * Math.log((1 + sin) / (1 - sin))) / Math.PI;\n    return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}