{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n  const hasExtensions = Array.isArray(loader?.extensions);\n  /* Now handled by types and worker loaders do not have these\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n  */\n  return hasExtensions;\n}\nexport function normalizeLoader(loader) {\n  // This error is fairly easy to trigger by mixing up import statements etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {\n        ...loader.options,\n        ...options\n      }\n    };\n  }\n  // NORMALIZE text and binary flags\n  // Ensure at least one of text/binary flags are properly set\n  // @ts-expect-error\n  if (loader?.parseTextSync || loader?.parseText) {\n    loader.text = true;\n  }\n  if (!loader.text) {\n    loader.binary = true;\n  }\n  return loader;\n}","map":{"version":3,"names":["assert","isLoaderObject","loader","Array","isArray","hasExtensions","extensions","normalizeLoader","options","parseTextSync","parseText","text","binary"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n    if (!loader) {\n        return false;\n    }\n    if (Array.isArray(loader)) {\n        loader = loader[0];\n    }\n    const hasExtensions = Array.isArray(loader?.extensions);\n    /* Now handled by types and worker loaders do not have these\n    let hasParser =\n      loader.parseTextSync ||\n      loader.parseSync ||\n      loader.parse ||\n      loader.parseStream || // TODO Remove, Replace with parseInBatches\n      loader.parseInBatches;\n    */\n    return hasExtensions;\n}\nexport function normalizeLoader(loader) {\n    // This error is fairly easy to trigger by mixing up import statements etc\n    // So we make an exception and add a developer error message for this case\n    // To help new users from getting stuck here\n    assert(loader, 'null loader');\n    assert(isLoaderObject(loader), 'invalid loader');\n    // NORMALIZE [LOADER, OPTIONS] => LOADER\n    // If [loader, options], create a new loaders object with options merged in\n    let options;\n    if (Array.isArray(loader)) {\n        options = loader[1];\n        loader = loader[0];\n        loader = {\n            ...loader,\n            options: { ...loader.options, ...options }\n        };\n    }\n    // NORMALIZE text and binary flags\n    // Ensure at least one of text/binary flags are properly set\n    // @ts-expect-error\n    if (loader?.parseTextSync || loader?.parseText) {\n        loader.text = true;\n    }\n    if (!loader.text) {\n        loader.binary = true;\n    }\n    return loader;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAE;EACnC,IAAI,CAACA,MAAM,EAAE;IACT,OAAO,KAAK;EAChB;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IACvBA,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;EACtB;EACA,MAAMG,aAAa,GAAGF,KAAK,CAACC,OAAO,CAACF,MAAM,EAAEI,UAAU,CAAC;EACvD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOD,aAAa;AACxB;AACA,OAAO,SAASE,eAAeA,CAACL,MAAM,EAAE;EACpC;EACA;EACA;EACAF,MAAM,CAACE,MAAM,EAAE,aAAa,CAAC;EAC7BF,MAAM,CAACC,cAAc,CAACC,MAAM,CAAC,EAAE,gBAAgB,CAAC;EAChD;EACA;EACA,IAAIM,OAAO;EACX,IAAIL,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IACvBM,OAAO,GAAGN,MAAM,CAAC,CAAC,CAAC;IACnBA,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;IAClBA,MAAM,GAAG;MACL,GAAGA,MAAM;MACTM,OAAO,EAAE;QAAE,GAAGN,MAAM,CAACM,OAAO;QAAE,GAAGA;MAAQ;IAC7C,CAAC;EACL;EACA;EACA;EACA;EACA,IAAIN,MAAM,EAAEO,aAAa,IAAIP,MAAM,EAAEQ,SAAS,EAAE;IAC5CR,MAAM,CAACS,IAAI,GAAG,IAAI;EACtB;EACA,IAAI,CAACT,MAAM,CAACS,IAAI,EAAE;IACdT,MAAM,CAACU,MAAM,GAAG,IAAI;EACxB;EACA,OAAOV,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}