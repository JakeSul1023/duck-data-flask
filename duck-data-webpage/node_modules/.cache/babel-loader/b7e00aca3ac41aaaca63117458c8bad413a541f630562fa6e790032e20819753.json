{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\nimport { createProtoFeature } from \"./proto-feature.js\";\nimport { clipFeatures } from \"./clip-features.js\";\n/**\n * Wrap across antemeridian, by clipping into two tiles, shifting the overflowing x coordinates\n * @param list of features to be wrapped\n * @param options buffer and extent\n * @returns\n */\nexport function wrapFeatures(features, options) {\n  const buffer = options.buffer / options.extent;\n  let merged = features;\n  const left = clipFeatures(features, 1, -1 - buffer, buffer, 0, -1, 2, options); // left world copy\n  const right = clipFeatures(features, 1, 1 - buffer, 2 + buffer, 0, -1, 2, options); // right world copy\n  if (left || right) {\n    merged = clipFeatures(features, 1, -buffer, 1 + buffer, 0, -1, 2, options) || []; // center world copy\n    if (left) {\n      merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center\n    }\n    if (right) {\n      merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center\n    }\n  }\n  return merged;\n}\n/**\n * Shift the x coordinates of a list of features\n * @param features list of features to shift x coordinates for\n * @param offset\n * @returns\n */\nfunction shiftFeatureCoords(features, offset) {\n  const newFeatures = [];\n  for (let i = 0; i < features.length; i++) {\n    const feature = features[i];\n    const type = feature.type;\n    let newGeometry;\n    switch (type) {\n      case 'Point':\n      case 'MultiPoint':\n      case 'LineString':\n        newGeometry = shiftCoords(feature.geometry, offset);\n        break;\n      case 'MultiLineString':\n      case 'Polygon':\n        newGeometry = [];\n        for (const line of feature.geometry) {\n          newGeometry.push(shiftCoords(line, offset));\n        }\n        break;\n      case 'MultiPolygon':\n        newGeometry = [];\n        for (const polygon of feature.geometry) {\n          const newPolygon = [];\n          for (const line of polygon) {\n            // @ts-expect-error TODO\n            newPolygon.push(shiftCoords(line, offset));\n          }\n          newGeometry.push(newPolygon);\n        }\n        break;\n      default:\n        throw new Error(String(type));\n    }\n    newFeatures.push(createProtoFeature(feature.id, type, newGeometry, feature.tags));\n  }\n  return newFeatures;\n}\nclass Points extends Array {\n  size;\n  start;\n  end;\n}\n/**\n * Shift the x coordinate of every point\n * @param points\n * @param offset\n * @returns\n */\nfunction shiftCoords(points, offset) {\n  const newPoints = [];\n  newPoints.size = points.size;\n  if (points.start !== undefined) {\n    newPoints.start = points.start;\n    newPoints.end = points.end;\n  }\n  for (let i = 0; i < points.length; i += 3) {\n    newPoints.push(points[i] + offset, points[i + 1], points[i + 2]);\n  }\n  return newPoints;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}