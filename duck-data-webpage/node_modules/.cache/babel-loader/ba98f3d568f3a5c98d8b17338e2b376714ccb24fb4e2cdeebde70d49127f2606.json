{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTransferList } from \"../worker-utils/get-transfer-list.js\";\n// import type {TransferListItem} from '../node/worker_threads';\nimport { parentPort } from \"../node/worker_threads.js\";\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nasync function getParentPort() {\n  // const isNode = globalThis.process;\n  // let parentPort;\n  // try {\n  //   // prettier-ignore\n  //   eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n  //   parentPort = globalThis.parentPort;\n  // } catch {\n  //   try {\n  //     // prettier-ignore\n  //     eval('globalThis.workerThreadsPromise = import(\\'worker_threads\\')'); // eslint-disable-line no-eval\n  //     const workerThreads = await globalThis.workerThreadsPromise;\n  //     parentPort = workerThreads.parentPort;\n  //   } catch (error) {\n  //     console.error((error as Error).message); // eslint-disable-line no-console\n  //   }\n  // }\n  return parentPort;\n}\nconst onMessageWrapperMap = new Map();\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /** Check that we are actually in a worker thread */\n  static async inWorkerThread() {\n    return typeof self !== 'undefined' || Boolean(await getParentPort());\n  }\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage) {\n    async function handleMessage(message) {\n      const parentPort = await getParentPort();\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {\n        type,\n        payload\n      } = parentPort ? message : message.data;\n      // if (!isKnownMessage(message)) {\n      //   return;\n      // }\n      onMessage(type, payload);\n    }\n    getParentPort().then(parentPort => {\n      if (parentPort) {\n        parentPort.on('message', message => {\n          handleMessage(message);\n        });\n        // if (message == 'exit') { parentPort.unref(); }\n        // eslint-disable-next-line\n        parentPort.on('exit', () => console.debug('Node worker closing'));\n      } else {\n        // eslint-disable-next-line no-restricted-globals\n        globalThis.onmessage = handleMessage;\n      }\n    });\n  }\n  static async addEventListener(onMessage) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    if (!onMessageWrapper) {\n      onMessageWrapper = async message => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n        const parentPort = await getParentPort();\n        // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n        const {\n          type,\n          payload\n        } = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n    const parentPort = await getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n  static async removeEventListener(onMessage) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = await getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static async postMessage(type, payload) {\n    const data = {\n      source: 'loaders.gl',\n      type,\n      payload\n    };\n    // console.log('posting message', data);\n    // Cast to Node compatible transfer list\n    const transferList = getTransferList(payload);\n    const parentPort = await getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n      // console.log('posted message', data);\n    } else {\n      // @ts-expect-error Outside of worker scopes this call has a third parameter\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n  const {\n    type,\n    data\n  } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"names":["getTransferList","parentPort","getParentPort","onMessageWrapperMap","Map","WorkerBody","inWorkerThread","self","Boolean","onmessage","onMessage","handleMessage","message","type","payload","data","then","on","console","debug","globalThis","addEventListener","onMessageWrapper","get","isKnownMessage","error","removeEventListener","delete","postMessage","source","transferList","startsWith"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-body.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTransferList } from \"../worker-utils/get-transfer-list.js\";\n// import type {TransferListItem} from '../node/worker_threads';\nimport { parentPort } from \"../node/worker_threads.js\";\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nasync function getParentPort() {\n    // const isNode = globalThis.process;\n    // let parentPort;\n    // try {\n    //   // prettier-ignore\n    //   eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n    //   parentPort = globalThis.parentPort;\n    // } catch {\n    //   try {\n    //     // prettier-ignore\n    //     eval('globalThis.workerThreadsPromise = import(\\'worker_threads\\')'); // eslint-disable-line no-eval\n    //     const workerThreads = await globalThis.workerThreadsPromise;\n    //     parentPort = workerThreads.parentPort;\n    //   } catch (error) {\n    //     console.error((error as Error).message); // eslint-disable-line no-console\n    //   }\n    // }\n    return parentPort;\n}\nconst onMessageWrapperMap = new Map();\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n    /** Check that we are actually in a worker thread */\n    static async inWorkerThread() {\n        return typeof self !== 'undefined' || Boolean(await getParentPort());\n    }\n    /*\n     * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n     */\n    static set onmessage(onMessage) {\n        async function handleMessage(message) {\n            const parentPort = await getParentPort();\n            // Confusingly the message itself also has a 'type' field which is always set to 'message'\n            const { type, payload } = parentPort ? message : message.data;\n            // if (!isKnownMessage(message)) {\n            //   return;\n            // }\n            onMessage(type, payload);\n        }\n        getParentPort().then((parentPort) => {\n            if (parentPort) {\n                parentPort.on('message', (message) => {\n                    handleMessage(message);\n                });\n                // if (message == 'exit') { parentPort.unref(); }\n                // eslint-disable-next-line\n                parentPort.on('exit', () => console.debug('Node worker closing'));\n            }\n            else {\n                // eslint-disable-next-line no-restricted-globals\n                globalThis.onmessage = handleMessage;\n            }\n        });\n    }\n    static async addEventListener(onMessage) {\n        let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n        if (!onMessageWrapper) {\n            onMessageWrapper = async (message) => {\n                if (!isKnownMessage(message)) {\n                    return;\n                }\n                const parentPort = await getParentPort();\n                // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n                const { type, payload } = parentPort ? message : message.data;\n                onMessage(type, payload);\n            };\n        }\n        const parentPort = await getParentPort();\n        if (parentPort) {\n            console.error('not implemented'); // eslint-disable-line\n        }\n        else {\n            globalThis.addEventListener('message', onMessageWrapper);\n        }\n    }\n    static async removeEventListener(onMessage) {\n        const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n        onMessageWrapperMap.delete(onMessage);\n        const parentPort = await getParentPort();\n        if (parentPort) {\n            console.error('not implemented'); // eslint-disable-line\n        }\n        else {\n            globalThis.removeEventListener('message', onMessageWrapper);\n        }\n    }\n    /**\n     * Send a message from a worker to creating thread (main thread)\n     * @param type\n     * @param payload\n     */\n    static async postMessage(type, payload) {\n        const data = { source: 'loaders.gl', type, payload };\n        // console.log('posting message', data);\n        // Cast to Node compatible transfer list\n        const transferList = getTransferList(payload);\n        const parentPort = await getParentPort();\n        if (parentPort) {\n            parentPort.postMessage(data, transferList);\n            // console.log('posted message', data);\n        }\n        else {\n            // @ts-expect-error Outside of worker scopes this call has a third parameter\n            globalThis.postMessage(data, transferList);\n        }\n    }\n}\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n    const { type, data } = message;\n    return (type === 'message' &&\n        data &&\n        typeof data.source === 'string' &&\n        data.source.startsWith('loaders.gl'));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}