{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { TILE3D_TYPE } from \"../constants.js\";\nimport { getMagicString } from \"./helpers/parse-utils.js\";\nimport { parsePointCloud3DTile } from \"./parse-3d-tile-point-cloud.js\";\nimport { parseBatchedModel3DTile } from \"./parse-3d-tile-batched-model.js\";\nimport { parseInstancedModel3DTile } from \"./parse-3d-tile-instanced-model.js\";\nimport { parseComposite3DTile } from \"./parse-3d-tile-composite.js\";\nimport { parseGltf3DTile } from \"./parse-3d-tile-gltf.js\";\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {\n  shape: 'tile3d'\n}) {\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile);\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n    case TILE3D_TYPE.GLTF:\n      return await parseGltf3DTile(tile, arrayBuffer, options, context);\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`);\n    // eslint-disable-line\n  }\n}","map":{"version":3,"names":["TILE3D_TYPE","getMagicString","parsePointCloud3DTile","parseBatchedModel3DTile","parseInstancedModel3DTile","parseComposite3DTile","parseGltf3DTile","parse3DTile","arrayBuffer","byteOffset","options","context","tile","shape","type","COMPOSITE","BATCHED_3D_MODEL","GLTF","INSTANCED_3D_MODEL","POINT_CLOUD","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { TILE3D_TYPE } from \"../constants.js\";\nimport { getMagicString } from \"./helpers/parse-utils.js\";\nimport { parsePointCloud3DTile } from \"./parse-3d-tile-point-cloud.js\";\nimport { parseBatchedModel3DTile } from \"./parse-3d-tile-batched-model.js\";\nimport { parseInstancedModel3DTile } from \"./parse-3d-tile-instanced-model.js\";\nimport { parseComposite3DTile } from \"./parse-3d-tile-composite.js\";\nimport { parseGltf3DTile } from \"./parse-3d-tile-gltf.js\";\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = { shape: 'tile3d' }) {\n    tile.byteOffset = byteOffset;\n    tile.type = getMagicString(arrayBuffer, byteOffset);\n    switch (tile.type) {\n        case TILE3D_TYPE.COMPOSITE:\n            // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n            return await parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile);\n        case TILE3D_TYPE.BATCHED_3D_MODEL:\n            return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n        case TILE3D_TYPE.GLTF:\n            return await parseGltf3DTile(tile, arrayBuffer, options, context);\n        case TILE3D_TYPE.INSTANCED_3D_MODEL:\n            return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n        case TILE3D_TYPE.POINT_CLOUD:\n            return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n        default:\n            throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,qBAAqB,QAAQ,gCAAgC;AACtE,SAASC,uBAAuB,QAAQ,kCAAkC;AAC1E,SAASC,yBAAyB,QAAQ,oCAAoC;AAC9E,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,eAAe,QAAQ,yBAAyB;AACzD;AACA,OAAO,eAAeC,WAAWA,CAACC,WAAW,EAAEC,UAAU,GAAG,CAAC,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,GAAG;EAAEC,KAAK,EAAE;AAAS,CAAC,EAAE;EACzGD,IAAI,CAACH,UAAU,GAAGA,UAAU;EAC5BG,IAAI,CAACE,IAAI,GAAGb,cAAc,CAACO,WAAW,EAAEC,UAAU,CAAC;EACnD,QAAQG,IAAI,CAACE,IAAI;IACb,KAAKd,WAAW,CAACe,SAAS;MACtB;MACA,OAAO,MAAMV,oBAAoB,CAACO,IAAI,EAAEJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEJ,WAAW,CAAC;IACnG,KAAKP,WAAW,CAACgB,gBAAgB;MAC7B,OAAO,MAAMb,uBAAuB,CAACS,IAAI,EAAEJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;IACzF,KAAKX,WAAW,CAACiB,IAAI;MACjB,OAAO,MAAMX,eAAe,CAACM,IAAI,EAAEJ,WAAW,EAAEE,OAAO,EAAEC,OAAO,CAAC;IACrE,KAAKX,WAAW,CAACkB,kBAAkB;MAC/B,OAAO,MAAMd,yBAAyB,CAACQ,IAAI,EAAEJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;IAC3F,KAAKX,WAAW,CAACmB,WAAW;MACxB,OAAO,MAAMjB,qBAAqB,CAACU,IAAI,EAAEJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;IACvF;MACI,MAAM,IAAIS,KAAK,CAAC,8BAA8BR,IAAI,CAACE,IAAI,EAAE,CAAC;IAAE;EACpE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}