{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Compression interface\nimport { concatenateArrayBuffersAsync, registerJSModules } from '@loaders.gl/loader-utils';\n/** Compression */\nexport class Compression {\n  constructor(options) {\n    this.compressBatches = this.compressBatches.bind(this);\n    this.decompressBatches = this.decompressBatches.bind(this);\n  }\n  /** Preloads any dynamic libraries. May enable sync functions */\n  async preload(modules = {}) {\n    registerJSModules(modules);\n    return;\n  }\n  /** Asynchronously compress data */\n  async compress(input) {\n    await this.preload();\n    return this.compressSync(input);\n  }\n  /** Asynchronously decompress data */\n  async decompress(input, size) {\n    await this.preload();\n    return this.decompressSync(input, size);\n  }\n  /** Synchronously compress data */\n  compressSync(input) {\n    throw new Error(`${this.name}: sync compression not supported`);\n  }\n  /** Synchronously compress data */\n  decompressSync(input, size) {\n    throw new Error(`${this.name}: sync decompression not supported`);\n  }\n  /** Compress batches */\n  async *compressBatches(asyncIterator) {\n    // TODO - implement incremental compression\n    const input = await this.concatenate(asyncIterator);\n    yield this.compress(input);\n  }\n  /** Decompress batches */\n  async *decompressBatches(asyncIterator) {\n    // TODO - implement incremental compression\n    const input = await this.concatenate(asyncIterator);\n    yield this.decompress(input);\n  }\n  // HELPERS\n  concatenate(asyncIterator) {\n    return concatenateArrayBuffersAsync(asyncIterator);\n  }\n  improveError(error) {\n    if (!error.message.includes(this.name)) {\n      error.message = `${this.name} ${error.message}`;\n    }\n    return error;\n  }\n}","map":{"version":3,"names":["concatenateArrayBuffersAsync","registerJSModules","Compression","constructor","options","compressBatches","bind","decompressBatches","preload","modules","compress","input","compressSync","decompress","size","decompressSync","Error","name","asyncIterator","concatenate","improveError","error","message","includes"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/compression/dist/lib/compression.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Compression interface\nimport { concatenateArrayBuffersAsync, registerJSModules } from '@loaders.gl/loader-utils';\n/** Compression */\nexport class Compression {\n    constructor(options) {\n        this.compressBatches = this.compressBatches.bind(this);\n        this.decompressBatches = this.decompressBatches.bind(this);\n    }\n    /** Preloads any dynamic libraries. May enable sync functions */\n    async preload(modules = {}) {\n        registerJSModules(modules);\n        return;\n    }\n    /** Asynchronously compress data */\n    async compress(input) {\n        await this.preload();\n        return this.compressSync(input);\n    }\n    /** Asynchronously decompress data */\n    async decompress(input, size) {\n        await this.preload();\n        return this.decompressSync(input, size);\n    }\n    /** Synchronously compress data */\n    compressSync(input) {\n        throw new Error(`${this.name}: sync compression not supported`);\n    }\n    /** Synchronously compress data */\n    decompressSync(input, size) {\n        throw new Error(`${this.name}: sync decompression not supported`);\n    }\n    /** Compress batches */\n    async *compressBatches(asyncIterator) {\n        // TODO - implement incremental compression\n        const input = await this.concatenate(asyncIterator);\n        yield this.compress(input);\n    }\n    /** Decompress batches */\n    async *decompressBatches(asyncIterator) {\n        // TODO - implement incremental compression\n        const input = await this.concatenate(asyncIterator);\n        yield this.decompress(input);\n    }\n    // HELPERS\n    concatenate(asyncIterator) {\n        return concatenateArrayBuffersAsync(asyncIterator);\n    }\n    improveError(error) {\n        if (!error.message.includes(this.name)) {\n            error.message = `${this.name} ${error.message}`;\n        }\n        return error;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,4BAA4B,EAAEC,iBAAiB,QAAQ,0BAA0B;AAC1F;AACA,OAAO,MAAMC,WAAW,CAAC;EACrBC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACD,IAAI,CAAC,IAAI,CAAC;EAC9D;EACA;EACA,MAAME,OAAOA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxBR,iBAAiB,CAACQ,OAAO,CAAC;IAC1B;EACJ;EACA;EACA,MAAMC,QAAQA,CAACC,KAAK,EAAE;IAClB,MAAM,IAAI,CAACH,OAAO,CAAC,CAAC;IACpB,OAAO,IAAI,CAACI,YAAY,CAACD,KAAK,CAAC;EACnC;EACA;EACA,MAAME,UAAUA,CAACF,KAAK,EAAEG,IAAI,EAAE;IAC1B,MAAM,IAAI,CAACN,OAAO,CAAC,CAAC;IACpB,OAAO,IAAI,CAACO,cAAc,CAACJ,KAAK,EAAEG,IAAI,CAAC;EAC3C;EACA;EACAF,YAAYA,CAACD,KAAK,EAAE;IAChB,MAAM,IAAIK,KAAK,CAAC,GAAG,IAAI,CAACC,IAAI,kCAAkC,CAAC;EACnE;EACA;EACAF,cAAcA,CAACJ,KAAK,EAAEG,IAAI,EAAE;IACxB,MAAM,IAAIE,KAAK,CAAC,GAAG,IAAI,CAACC,IAAI,oCAAoC,CAAC;EACrE;EACA;EACA,OAAOZ,eAAeA,CAACa,aAAa,EAAE;IAClC;IACA,MAAMP,KAAK,GAAG,MAAM,IAAI,CAACQ,WAAW,CAACD,aAAa,CAAC;IACnD,MAAM,IAAI,CAACR,QAAQ,CAACC,KAAK,CAAC;EAC9B;EACA;EACA,OAAOJ,iBAAiBA,CAACW,aAAa,EAAE;IACpC;IACA,MAAMP,KAAK,GAAG,MAAM,IAAI,CAACQ,WAAW,CAACD,aAAa,CAAC;IACnD,MAAM,IAAI,CAACL,UAAU,CAACF,KAAK,CAAC;EAChC;EACA;EACAQ,WAAWA,CAACD,aAAa,EAAE;IACvB,OAAOlB,4BAA4B,CAACkB,aAAa,CAAC;EACtD;EACAE,YAAYA,CAACC,KAAK,EAAE;IAChB,IAAI,CAACA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,IAAI,CAACN,IAAI,CAAC,EAAE;MACpCI,KAAK,CAACC,OAAO,GAAG,GAAG,IAAI,CAACL,IAAI,IAAII,KAAK,CAACC,OAAO,EAAE;IACnD;IACA,OAAOD,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}