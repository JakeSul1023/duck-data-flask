{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { fp64ify, fp64LowPart, fp64ifyMatrix4 } from \"../../../modules/math/fp64/fp64-utils.js\";\nimport { fp64arithmeticShader } from \"./fp64-arithmetic-glsl.js\";\nimport { fp64functionShader } from \"./fp64-functions-glsl.js\";\nconst defaultUniforms = {\n  // Used in LUMA_FP64_CODE_ELIMINATION_WORKAROUND\n  ONE: 1.0\n};\n/**\n * 64bit arithmetic: add, sub, mul, div (small subset of fp64 module)\n */\nexport const fp64arithmetic = {\n  name: 'fp64arithmetic',\n  vs: fp64arithmeticShader,\n  defaultUniforms,\n  uniformTypes: {\n    ONE: 'f32'\n  },\n  // Additional Functions\n  fp64ify,\n  fp64LowPart,\n  fp64ifyMatrix4\n};\n/**\n * Full 64 bit math library\n */\nexport const fp64 = {\n  name: 'fp64',\n  vs: fp64functionShader,\n  dependencies: [fp64arithmetic],\n  // Additional Functions\n  fp64ify,\n  fp64LowPart,\n  fp64ifyMatrix4\n};\nexport { fp64ify, fp64LowPart, fp64ifyMatrix4 };","map":{"version":3,"names":["fp64ify","fp64LowPart","fp64ifyMatrix4","fp64arithmeticShader","fp64functionShader","defaultUniforms","ONE","fp64arithmetic","name","vs","uniformTypes","fp64","dependencies"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules\\math\\fp64\\fp64.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\n\nimport {fp64ify, fp64LowPart, fp64ifyMatrix4} from '../../../modules/math/fp64/fp64-utils';\nimport {fp64arithmeticShader} from './fp64-arithmetic-glsl';\nimport {fp64functionShader} from './fp64-functions-glsl';\n\ntype FP64Props = {};\ntype FP64Uniforms = {ONE: number};\ntype FP64Bindings = {};\n\ntype FP64Utilities = {\n  fp64ify: typeof fp64ify;\n  fp64LowPart: typeof fp64LowPart;\n  fp64ifyMatrix4: typeof fp64ifyMatrix4;\n};\n\nconst defaultUniforms: FP64Uniforms = {\n  // Used in LUMA_FP64_CODE_ELIMINATION_WORKAROUND\n  ONE: 1.0\n};\n\n/**\n * 64bit arithmetic: add, sub, mul, div (small subset of fp64 module)\n */\nexport const fp64arithmetic: ShaderModule<FP64Props, FP64Uniforms, FP64Bindings> & FP64Utilities = {\n  name: 'fp64arithmetic',\n  vs: fp64arithmeticShader,\n  defaultUniforms,\n  uniformTypes: {ONE: 'f32'},\n\n  // Additional Functions\n  fp64ify,\n  fp64LowPart,\n  fp64ifyMatrix4\n};\n\n/**\n * Full 64 bit math library\n */\nexport const fp64: ShaderModule<{}> & FP64Utilities = {\n  name: 'fp64',\n  vs: fp64functionShader,\n  dependencies: [fp64arithmetic],\n\n  // Additional Functions\n  fp64ify,\n  fp64LowPart,\n  fp64ifyMatrix4\n};\n\nexport {fp64ify, fp64LowPart, fp64ifyMatrix4};\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,OAAO,EAAEC,WAAW,EAAEC,cAAc,QAAC;AAC7C,SAAQC,oBAAoB,QAAC;AAC7B,SAAQC,kBAAkB,QAAC;AAY3B,MAAMC,eAAe,GAAiB;EACpC;EACAC,GAAG,EAAE;CACN;AAED;;;AAGA,OAAO,MAAMC,cAAc,GAAwE;EACjGC,IAAI,EAAE,gBAAgB;EACtBC,EAAE,EAAEN,oBAAoB;EACxBE,eAAe;EACfK,YAAY,EAAE;IAACJ,GAAG,EAAE;EAAK,CAAC;EAE1B;EACAN,OAAO;EACPC,WAAW;EACXC;CACD;AAED;;;AAGA,OAAO,MAAMS,IAAI,GAAqC;EACpDH,IAAI,EAAE,MAAM;EACZC,EAAE,EAAEL,kBAAkB;EACtBQ,YAAY,EAAE,CAACL,cAAc,CAAC;EAE9B;EACAP,OAAO;EACPC,WAAW;EACXC;CACD;AAED,SAAQF,OAAO,EAAEC,WAAW,EAAEC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}