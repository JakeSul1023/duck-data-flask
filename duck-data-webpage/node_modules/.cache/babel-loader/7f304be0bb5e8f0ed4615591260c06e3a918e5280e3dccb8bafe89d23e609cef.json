{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { TILE3D_TYPE } from \"../constants.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { encodeComposite3DTile } from \"./encode-3d-tile-composite.js\";\nimport { encodeBatchedModel3DTile } from \"./encode-3d-tile-batched-model.js\";\nimport { encodeInstancedModel3DTile } from \"./encode-3d-tile-instanced-model.js\";\nimport { encodePointCloud3DTile } from \"./encode-3d-tile-point-cloud.js\";\nexport default function encode3DTile(tile, options) {\n  const byteLength = encode3DTileToDataView(tile, null, 0, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encode3DTileToDataView(tile, dataView, 0, options);\n  return arrayBuffer;\n}\nfunction encode3DTileToDataView(tile, dataView, byteOffset, options) {\n  assert(typeof tile.type === 'string');\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      return encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTileToDataView);\n    case TILE3D_TYPE.POINT_CLOUD:\n      return encodePointCloud3DTile(tile, dataView, byteOffset, options);\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return encodeBatchedModel3DTile(tile, dataView, byteOffset, options);\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return encodeInstancedModel3DTile(tile, dataView, byteOffset, options);\n    default:\n      throw new Error('3D Tiles: unknown tile type');\n  }\n}","map":{"version":3,"names":["TILE3D_TYPE","assert","encodeComposite3DTile","encodeBatchedModel3DTile","encodeInstancedModel3DTile","encodePointCloud3DTile","encode3DTile","tile","options","byteLength","encode3DTileToDataView","arrayBuffer","ArrayBuffer","dataView","DataView","byteOffset","type","COMPOSITE","POINT_CLOUD","BATCHED_3D_MODEL","INSTANCED_3D_MODEL","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/encoders/encode-3d-tile.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { TILE3D_TYPE } from \"../constants.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { encodeComposite3DTile } from \"./encode-3d-tile-composite.js\";\nimport { encodeBatchedModel3DTile } from \"./encode-3d-tile-batched-model.js\";\nimport { encodeInstancedModel3DTile } from \"./encode-3d-tile-instanced-model.js\";\nimport { encodePointCloud3DTile } from \"./encode-3d-tile-point-cloud.js\";\nexport default function encode3DTile(tile, options) {\n    const byteLength = encode3DTileToDataView(tile, null, 0, options);\n    const arrayBuffer = new ArrayBuffer(byteLength);\n    const dataView = new DataView(arrayBuffer);\n    encode3DTileToDataView(tile, dataView, 0, options);\n    return arrayBuffer;\n}\nfunction encode3DTileToDataView(tile, dataView, byteOffset, options) {\n    assert(typeof tile.type === 'string');\n    switch (tile.type) {\n        case TILE3D_TYPE.COMPOSITE:\n            return encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTileToDataView);\n        case TILE3D_TYPE.POINT_CLOUD:\n            return encodePointCloud3DTile(tile, dataView, byteOffset, options);\n        case TILE3D_TYPE.BATCHED_3D_MODEL:\n            return encodeBatchedModel3DTile(tile, dataView, byteOffset, options);\n        case TILE3D_TYPE.INSTANCED_3D_MODEL:\n            return encodeInstancedModel3DTile(tile, dataView, byteOffset, options);\n        default:\n            throw new Error('3D Tiles: unknown tile type');\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,wBAAwB,QAAQ,mCAAmC;AAC5E,SAASC,0BAA0B,QAAQ,qCAAqC;AAChF,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,eAAe,SAASC,YAAYA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAChD,MAAMC,UAAU,GAAGC,sBAAsB,CAACH,IAAI,EAAE,IAAI,EAAE,CAAC,EAAEC,OAAO,CAAC;EACjE,MAAMG,WAAW,GAAG,IAAIC,WAAW,CAACH,UAAU,CAAC;EAC/C,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,CAACH,WAAW,CAAC;EAC1CD,sBAAsB,CAACH,IAAI,EAAEM,QAAQ,EAAE,CAAC,EAAEL,OAAO,CAAC;EAClD,OAAOG,WAAW;AACtB;AACA,SAASD,sBAAsBA,CAACH,IAAI,EAAEM,QAAQ,EAAEE,UAAU,EAAEP,OAAO,EAAE;EACjEP,MAAM,CAAC,OAAOM,IAAI,CAACS,IAAI,KAAK,QAAQ,CAAC;EACrC,QAAQT,IAAI,CAACS,IAAI;IACb,KAAKhB,WAAW,CAACiB,SAAS;MACtB,OAAOf,qBAAqB,CAACK,IAAI,EAAEM,QAAQ,EAAEE,UAAU,EAAEP,OAAO,EAAEE,sBAAsB,CAAC;IAC7F,KAAKV,WAAW,CAACkB,WAAW;MACxB,OAAOb,sBAAsB,CAACE,IAAI,EAAEM,QAAQ,EAAEE,UAAU,EAAEP,OAAO,CAAC;IACtE,KAAKR,WAAW,CAACmB,gBAAgB;MAC7B,OAAOhB,wBAAwB,CAACI,IAAI,EAAEM,QAAQ,EAAEE,UAAU,EAAEP,OAAO,CAAC;IACxE,KAAKR,WAAW,CAACoB,kBAAkB;MAC/B,OAAOhB,0BAA0B,CAACG,IAAI,EAAEM,QAAQ,EAAEE,UAAU,EAAEP,OAAO,CAAC;IAC1E;MACI,MAAM,IAAIa,KAAK,CAAC,6BAA6B,CAAC;EACtD;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}