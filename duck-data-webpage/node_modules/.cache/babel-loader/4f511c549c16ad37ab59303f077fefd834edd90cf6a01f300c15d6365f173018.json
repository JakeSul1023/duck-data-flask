{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { lerp } from '@math.gl/core';\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\nfunction Point(_ref, _ref2, viewport) {\n  let [pointX, pointY] = _ref;\n  let [nw, se] = _ref2;\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n  return viewport.unprojectFlat([x, y]);\n}\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](geometry.coordinates, projectedBbox, viewport)\n  };\n}\n//# sourceMappingURL=coordinate-transform.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}