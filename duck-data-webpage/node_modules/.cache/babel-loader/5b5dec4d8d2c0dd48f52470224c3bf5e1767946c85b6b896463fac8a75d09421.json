{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\nexport default class LRUCache {\n  constructor(limit = 5) {\n    this._cache = {};\n    /** access/update order, first item is oldest, last item is newest */\n    this._order = [];\n    this.limit = limit;\n  }\n  get(key) {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n  set(key, value) {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n  delete(key) {\n    const value = this._cache[key];\n    if (value) {\n      delete this._cache[key];\n      this._deleteOrder(key);\n    }\n  }\n  _deleteOrder(key) {\n    const index = this._order.indexOf(key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n  _appendOrder(key) {\n    this._order.push(key);\n  }\n}\n//# sourceMappingURL=lru-cache.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}