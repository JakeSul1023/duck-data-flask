{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { gouraudMaterial, phongMaterial } from '@luma.gl/shadertools';\nimport { Model } from '@luma.gl/engine';\nimport ColumnGeometry from \"./column-geometry.js\";\nimport { columnUniforms } from \"./column-layer-uniforms.js\";\nimport vs from \"./column-layer-vertex.glsl.js\";\nimport fs from \"./column-layer-fragment.glsl.js\";\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  flatShading: false,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nclass ColumnLayer extends Layer {\n  getShaders() {\n    const defines = {};\n    const {\n      flatShading\n    } = this.props;\n    if (flatShading) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      modules: [project32, flatShading ? phongMaterial : gouraudMaterial, picking, columnUniforms]\n    });\n  }\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.destroy());\n      this.setState(this._getModels());\n      this.getAttributeManager().invalidateAll();\n    }\n    const instanceCount = this.getNumInstances();\n    this.state.fillModel.setInstanceCount(instanceCount);\n    this.state.wireframeModel.setInstanceCount(instanceCount);\n    if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n      this._updateGeometry(props);\n    }\n  }\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n    return geometry;\n  }\n  _getModels() {\n    const shaders = this.getShaders();\n    const bufferLayout = this.getAttributeManager().getBufferLayouts();\n    const fillModel = new Model(this.context.device, {\n      ...shaders,\n      id: `${this.props.id}-fill`,\n      bufferLayout,\n      isInstanced: true\n    });\n    const wireframeModel = new Model(this.context.device, {\n      ...shaders,\n      id: `${this.props.id}-wireframe`,\n      bufferLayout,\n      isInstanced: true\n    });\n    return {\n      fillModel,\n      wireframeModel,\n      models: [wireframeModel, fillModel]\n    };\n  }\n  _updateGeometry({\n    diskResolution,\n    vertices,\n    extruded,\n    stroked\n  }) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3\n    });\n    const fillModel = this.state.fillModel;\n    const wireframeModel = this.state.wireframeModel;\n    fillModel.setGeometry(geometry);\n    fillModel.setTopology('triangle-strip');\n    // Disable indices\n    fillModel.setIndexBuffer(null);\n    wireframeModel.setGeometry(geometry);\n    wireframeModel.setTopology('line-list');\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const fillModel = this.state.fillModel;\n    const wireframeModel = this.state.wireframeModel;\n    const {\n      fillVertexCount,\n      edgeDistance\n    } = this.state;\n    const columnProps = {\n      radius,\n      angle: angle / 180 * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    };\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      wireframeModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: true\n        }\n      });\n      wireframeModel.draw(this.context.renderPass);\n    }\n    if (filled) {\n      // model.setProps({isIndexed: false});\n      fillModel.setVertexCount(fillVertexCount);\n      fillModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: false\n        }\n      });\n      fillModel.draw(this.context.renderPass);\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      // model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      fillModel.setVertexCount(fillVertexCount * 2 / 3);\n      fillModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: true\n        }\n      });\n      fillModel.draw(this.context.renderPass);\n    }\n  }\n}\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\nexport default ColumnLayer;","map":{"version":3,"names":["Layer","project32","picking","UNIT","gouraudMaterial","phongMaterial","Model","ColumnGeometry","columnUniforms","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","flatShading","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","defines","props","FLAT_SHADING","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","length","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","params","oldProps","changeFlags","regenerateModels","extensionsChanged","state","models","forEach","model","destroy","setState","_getModels","invalidateAll","instanceCount","getNumInstances","fillModel","setInstanceCount","wireframeModel","_updateGeometry","getGeometry","hasThinkness","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","edgeDistance","cos","PI","shaders","bufferLayout","getBufferLayouts","context","device","id","isInstanced","fillVertexCount","attributes","POSITION","setGeometry","setTopology","setIndexBuffer","draw","uniforms","columnProps","widthUnits","widthScale","widthMinPixels","widthMaxPixels","shaderInputs","setProps","column","isStroke","renderPass","setVertexCount","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\column-layer\\column-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport {gouraudMaterial, phongMaterial} from '@luma.gl/shadertools';\nimport {Model} from '@luma.gl/engine';\nimport ColumnGeometry from './column-geometry';\n\nimport {columnUniforms, ColumnProps} from './column-layer-uniforms';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ColumnLayerProps> = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  flatShading: false,\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** All properties supported by ColumnLayer. */\nexport type ColumnLayerProps<DataT = unknown> = _ColumnLayerProps<DataT> & LayerProps;\n\n/** Properties added by ColumnLayer. */\ntype _ColumnLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The number of sides to render the disk as.\n   * @default 20\n   */\n  diskResolution?: number;\n\n  /**\n   * isk size in units specified by `radiusUnits`.\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Disk rotation, counter-clockwise in degrees.\n   * @default 0\n   */\n  angle?: number;\n\n  /**\n   * Replace the default geometry (regular polygon that fits inside the unit circle) with a custom one.\n   * @default null\n   */\n  vertices?: Position[] | null;\n\n  /**\n   * Disk offset from the position, relative to the radius.\n   * @default [0,0]\n   */\n  offset?: [number, number];\n\n  /**\n   * Radius multiplier, between 0 - 1\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Column elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to draw a filled column (solid fill).\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to draw an outline around the disks.\n   * @default false\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to extrude the columns. If set to `false`, all columns will be rendered as flat polygons.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the column.\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * If `true`, the vertical surfaces of the columns use [flat shading](https://en.wikipedia.org/wiki/Shading#Flat_vs._smooth_shading).\n   * @default false\n   */\n  flatShading?: boolean;\n\n  /**\n   * The units of the radius.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n\n  /**\n   * The units of the line width.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines.\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum outline width in pixels.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum outline width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each column.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * @deprecated Use getFilledColor and getLineColor instead\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Fill collor value or accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * The elevation of each cell in meters.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * The width of the outline of the column, in units specified by `lineWidthUnits`.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n};\n\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nexport default class ColumnLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ColumnLayerProps<DataT>>\n> {\n  static layerName = 'ColumnLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    fillModel?: Model;\n    wireframeModel?: Model;\n    models?: Model[];\n    fillVertexCount: number;\n    edgeDistance: number;\n  };\n\n  getShaders() {\n    const defines: Record<string, any> = {};\n\n    const {flatShading} = this.props;\n    if (flatShading) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      modules: [project32, flatShading ? phongMaterial : gouraudMaterial, picking, columnUniforms]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.destroy());\n      this.setState(this._getModels());\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    const instanceCount = this.getNumInstances();\n    this.state.fillModel!.setInstanceCount(instanceCount);\n    this.state.wireframeModel!.setInstanceCount(instanceCount);\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution: number, vertices: number[] | undefined, hasThinkness: boolean) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  protected _getModels() {\n    const shaders = this.getShaders();\n    const bufferLayout = this.getAttributeManager()!.getBufferLayouts();\n\n    const fillModel = new Model(this.context.device, {\n      ...shaders,\n      id: `${this.props.id}-fill`,\n      bufferLayout,\n      isInstanced: true\n    });\n    const wireframeModel = new Model(this.context.device, {\n      ...shaders,\n      id: `${this.props.id}-wireframe`,\n      bufferLayout,\n      isInstanced: true\n    });\n\n    return {\n      fillModel,\n      wireframeModel,\n      models: [wireframeModel, fillModel]\n    };\n  }\n\n  protected _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3\n    });\n\n    const fillModel = this.state.fillModel!;\n    const wireframeModel = this.state.wireframeModel!;\n    fillModel.setGeometry(geometry);\n    fillModel.setTopology('triangle-strip');\n    // Disable indices\n    fillModel.setIndexBuffer(null);\n\n    wireframeModel.setGeometry(geometry);\n    wireframeModel.setTopology('line-list');\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const fillModel = this.state.fillModel!;\n    const wireframeModel = this.state.wireframeModel!;\n    const {fillVertexCount, edgeDistance} = this.state;\n\n    const columnProps: Omit<ColumnProps, 'isStroke'> = {\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    };\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      wireframeModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: true\n        }\n      });\n      wireframeModel.draw(this.context.renderPass);\n    }\n\n    if (filled) {\n      // model.setProps({isIndexed: false});\n      fillModel.setVertexCount(fillVertexCount);\n      fillModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: false\n        }\n      });\n      fillModel.draw(this.context.renderPass);\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      // model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      fillModel.setVertexCount((fillVertexCount * 2) / 3);\n      fillModel.shaderInputs.setProps({\n        column: {\n          ...columnProps,\n          isStroke: true\n        }\n      });\n      fillModel.draw(this.context.renderPass);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}