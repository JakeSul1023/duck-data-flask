{"ast":null,"code":"///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\nconst KHR_SUPERCOMPRESSION_NONE = 0;\nconst KHR_SUPERCOMPRESSION_BASISLZ = 1;\nconst KHR_SUPERCOMPRESSION_ZSTD = 2;\nconst KHR_SUPERCOMPRESSION_ZLIB = 3;\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\nconst KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nconst KHR_DF_VENDORID_KHRONOS = 0;\nconst KHR_DF_VERSION = 2;\nconst KHR_DF_MODEL_UNSPECIFIED = 0;\nconst KHR_DF_MODEL_RGBSDA = 1;\n// ...\nconst KHR_DF_MODEL_ETC1 = 160;\nconst KHR_DF_MODEL_ETC2 = 161;\nconst KHR_DF_MODEL_ASTC = 162;\nconst KHR_DF_MODEL_ETC1S = 163;\nconst KHR_DF_MODEL_UASTC = 166;\nconst KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nconst KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\nconst KHR_DF_TRANSFER_UNSPECIFIED = 0;\nconst KHR_DF_TRANSFER_LINEAR = 1;\nconst KHR_DF_TRANSFER_SRGB = 2;\nconst KHR_DF_TRANSFER_ITU = 3;\nconst KHR_DF_TRANSFER_NTSC = 4;\nconst KHR_DF_TRANSFER_SLOG = 5;\nconst KHR_DF_TRANSFER_SLOG2 = 6;\nconst KHR_DF_TRANSFER_BT1886 = 7;\nconst KHR_DF_TRANSFER_HLG_OETF = 8;\nconst KHR_DF_TRANSFER_HLG_EOTF = 9;\nconst KHR_DF_TRANSFER_PQ_EOTF = 10;\nconst KHR_DF_TRANSFER_PQ_OETF = 11;\nconst KHR_DF_TRANSFER_DCIP3 = 12;\nconst KHR_DF_TRANSFER_PAL_OETF = 13;\nconst KHR_DF_TRANSFER_PAL625_EOTF = 14;\nconst KHR_DF_TRANSFER_ST240 = 15;\nconst KHR_DF_TRANSFER_ACESCC = 16;\nconst KHR_DF_TRANSFER_ACESCCT = 17;\nconst KHR_DF_TRANSFER_ADOBERGB = 18;\nconst KHR_DF_PRIMARIES_UNSPECIFIED = 0;\nconst KHR_DF_PRIMARIES_BT709 = 1;\nconst KHR_DF_PRIMARIES_BT601_EBU = 2;\nconst KHR_DF_PRIMARIES_BT601_SMPTE = 3;\nconst KHR_DF_PRIMARIES_BT2020 = 4;\nconst KHR_DF_PRIMARIES_CIEXYZ = 5;\nconst KHR_DF_PRIMARIES_ACES = 6;\nconst KHR_DF_PRIMARIES_ACESCC = 7;\nconst KHR_DF_PRIMARIES_NTSC1953 = 8;\nconst KHR_DF_PRIMARIES_PAL525 = 9;\nconst KHR_DF_PRIMARIES_DISPLAYP3 = 10;\nconst KHR_DF_PRIMARIES_ADOBERGB = 11;\nconst KHR_DF_CHANNEL_RGBSDA_RED = 0;\nconst KHR_DF_CHANNEL_RGBSDA_GREEN = 1;\nconst KHR_DF_CHANNEL_RGBSDA_BLUE = 2;\nconst KHR_DF_CHANNEL_RGBSDA_STENCIL = 13;\nconst KHR_DF_CHANNEL_RGBSDA_DEPTH = 14;\nconst KHR_DF_CHANNEL_RGBSDA_ALPHA = 15;\nconst KHR_DF_SAMPLE_DATATYPE_FLOAT = 0x80;\nconst KHR_DF_SAMPLE_DATATYPE_SIGNED = 0x40;\nconst KHR_DF_SAMPLE_DATATYPE_EXPONENT = 0x20;\nconst KHR_DF_SAMPLE_DATATYPE_LINEAR = 0x10;\n///////////////////////////////////////////////////\n// VK FORMAT.\n///////////////////////////////////////////////////\nconst VK_FORMAT_UNDEFINED = 0;\nconst VK_FORMAT_R4G4_UNORM_PACK8 = 1;\nconst VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;\nconst VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;\nconst VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;\nconst VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;\nconst VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;\nconst VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;\nconst VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;\nconst VK_FORMAT_R8_UNORM = 9;\nconst VK_FORMAT_R8_SNORM = 10;\nconst VK_FORMAT_R8_UINT = 13;\nconst VK_FORMAT_R8_SINT = 14;\nconst VK_FORMAT_R8_SRGB = 15;\nconst VK_FORMAT_R8G8_UNORM = 16;\nconst VK_FORMAT_R8G8_SNORM = 17;\nconst VK_FORMAT_R8G8_UINT = 20;\nconst VK_FORMAT_R8G8_SINT = 21;\nconst VK_FORMAT_R8G8_SRGB = 22;\nconst VK_FORMAT_R8G8B8_UNORM = 23;\nconst VK_FORMAT_R8G8B8_SNORM = 24;\nconst VK_FORMAT_R8G8B8_UINT = 27;\nconst VK_FORMAT_R8G8B8_SINT = 28;\nconst VK_FORMAT_R8G8B8_SRGB = 29;\nconst VK_FORMAT_B8G8R8_UNORM = 30;\nconst VK_FORMAT_B8G8R8_SNORM = 31;\nconst VK_FORMAT_B8G8R8_UINT = 34;\nconst VK_FORMAT_B8G8R8_SINT = 35;\nconst VK_FORMAT_B8G8R8_SRGB = 36;\nconst VK_FORMAT_R8G8B8A8_UNORM = 37;\nconst VK_FORMAT_R8G8B8A8_SNORM = 38;\nconst VK_FORMAT_R8G8B8A8_UINT = 41;\nconst VK_FORMAT_R8G8B8A8_SINT = 42;\nconst VK_FORMAT_R8G8B8A8_SRGB = 43;\nconst VK_FORMAT_B8G8R8A8_UNORM = 44;\nconst VK_FORMAT_B8G8R8A8_SNORM = 45;\nconst VK_FORMAT_B8G8R8A8_UINT = 48;\nconst VK_FORMAT_B8G8R8A8_SINT = 49;\nconst VK_FORMAT_B8G8R8A8_SRGB = 50;\nconst VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;\nconst VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;\nconst VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;\nconst VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;\nconst VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;\nconst VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;\nconst VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;\nconst VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;\nconst VK_FORMAT_R16_UNORM = 70;\nconst VK_FORMAT_R16_SNORM = 71;\nconst VK_FORMAT_R16_UINT = 74;\nconst VK_FORMAT_R16_SINT = 75;\nconst VK_FORMAT_R16_SFLOAT = 76;\nconst VK_FORMAT_R16G16_UNORM = 77;\nconst VK_FORMAT_R16G16_SNORM = 78;\nconst VK_FORMAT_R16G16_UINT = 81;\nconst VK_FORMAT_R16G16_SINT = 82;\nconst VK_FORMAT_R16G16_SFLOAT = 83;\nconst VK_FORMAT_R16G16B16_UNORM = 84;\nconst VK_FORMAT_R16G16B16_SNORM = 85;\nconst VK_FORMAT_R16G16B16_UINT = 88;\nconst VK_FORMAT_R16G16B16_SINT = 89;\nconst VK_FORMAT_R16G16B16_SFLOAT = 90;\nconst VK_FORMAT_R16G16B16A16_UNORM = 91;\nconst VK_FORMAT_R16G16B16A16_SNORM = 92;\nconst VK_FORMAT_R16G16B16A16_UINT = 95;\nconst VK_FORMAT_R16G16B16A16_SINT = 96;\nconst VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nconst VK_FORMAT_R32_UINT = 98;\nconst VK_FORMAT_R32_SINT = 99;\nconst VK_FORMAT_R32_SFLOAT = 100;\nconst VK_FORMAT_R32G32_UINT = 101;\nconst VK_FORMAT_R32G32_SINT = 102;\nconst VK_FORMAT_R32G32_SFLOAT = 103;\nconst VK_FORMAT_R32G32B32_UINT = 104;\nconst VK_FORMAT_R32G32B32_SINT = 105;\nconst VK_FORMAT_R32G32B32_SFLOAT = 106;\nconst VK_FORMAT_R32G32B32A32_UINT = 107;\nconst VK_FORMAT_R32G32B32A32_SINT = 108;\nconst VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nconst VK_FORMAT_R64_UINT = 110;\nconst VK_FORMAT_R64_SINT = 111;\nconst VK_FORMAT_R64_SFLOAT = 112;\nconst VK_FORMAT_R64G64_UINT = 113;\nconst VK_FORMAT_R64G64_SINT = 114;\nconst VK_FORMAT_R64G64_SFLOAT = 115;\nconst VK_FORMAT_R64G64B64_UINT = 116;\nconst VK_FORMAT_R64G64B64_SINT = 117;\nconst VK_FORMAT_R64G64B64_SFLOAT = 118;\nconst VK_FORMAT_R64G64B64A64_UINT = 119;\nconst VK_FORMAT_R64G64B64A64_SINT = 120;\nconst VK_FORMAT_R64G64B64A64_SFLOAT = 121;\nconst VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;\nconst VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;\nconst VK_FORMAT_D16_UNORM = 124;\nconst VK_FORMAT_X8_D24_UNORM_PACK32 = 125;\nconst VK_FORMAT_D32_SFLOAT = 126;\nconst VK_FORMAT_S8_UINT = 127;\nconst VK_FORMAT_D16_UNORM_S8_UINT = 128;\nconst VK_FORMAT_D24_UNORM_S8_UINT = 129;\nconst VK_FORMAT_D32_SFLOAT_S8_UINT = 130;\nconst VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;\nconst VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;\nconst VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;\nconst VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;\nconst VK_FORMAT_BC2_UNORM_BLOCK = 135;\nconst VK_FORMAT_BC2_SRGB_BLOCK = 136;\nconst VK_FORMAT_BC3_UNORM_BLOCK = 137;\nconst VK_FORMAT_BC3_SRGB_BLOCK = 138;\nconst VK_FORMAT_BC4_UNORM_BLOCK = 139;\nconst VK_FORMAT_BC4_SNORM_BLOCK = 140;\nconst VK_FORMAT_BC5_UNORM_BLOCK = 141;\nconst VK_FORMAT_BC5_SNORM_BLOCK = 142;\nconst VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;\nconst VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;\nconst VK_FORMAT_BC7_UNORM_BLOCK = 145;\nconst VK_FORMAT_BC7_SRGB_BLOCK = 146;\nconst VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;\nconst VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;\nconst VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;\nconst VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;\nconst VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;\nconst VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;\nconst VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;\nconst VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;\nconst VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;\nconst VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;\nconst VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;\nconst VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;\nconst VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;\nconst VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;\nconst VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;\nconst VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;\nconst VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;\nconst VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;\nconst VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;\nconst VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;\nconst VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;\nconst VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;\nconst VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;\nconst VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;\nconst VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;\nconst VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;\nconst VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;\nconst VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;\nconst VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;\nconst VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;\nconst VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;\nconst VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;\nconst VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;\nconst VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;\nconst VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;\nconst VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;\nconst VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;\nconst VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;\nconst VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;\nconst VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;\nconst VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;\nconst VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;\nconst VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;\nconst VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;\nconst VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;\nconst VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;\nconst VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;\nconst VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;\nconst VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;\nconst VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;\nconst VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;\nconst VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;\nconst VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;\nconst VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;\nconst VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;\nconst VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;\nconst VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;\nconst VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;\nconst VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;\nconst VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;\nconst VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;\nconst VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;\nconst VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;\nconst VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;\nconst VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;\nconst VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;\nconst VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;\nconst VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;\nconst VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;\nconst VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;\nconst VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;\nconst VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nclass KTX2Container {\n  constructor() {\n    /**\n     * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n     * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n     */\n    this.vkFormat = VK_FORMAT_UNDEFINED;\n    /**\n     * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n     * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n     */\n    this.typeSize = 1;\n    /** Width of the texture image for level 0, in pixels. */\n    this.pixelWidth = 0;\n    /** Height of the texture image for level 0, in pixels. */\n    this.pixelHeight = 0;\n    /** Depth of the texture image for level 0, in pixels (3D textures only). */\n    this.pixelDepth = 0;\n    /** Number of array elements (array textures only). */\n    this.layerCount = 0;\n    /**\n     * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n     * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n     * order.\n     */\n    this.faceCount = 1;\n    /** Indicates which supercompression scheme has been applied to mip level images, if any. */\n    this.supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;\n    /** Mip levels, ordered largest (original) to smallest (~1px). */\n    this.levels = [];\n    /** Data Format Descriptor. */\n    this.dataFormatDescriptor = [{\n      vendorId: KHR_DF_VENDORID_KHRONOS,\n      descriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n      descriptorBlockSize: 0,\n      versionNumber: KHR_DF_VERSION,\n      colorModel: KHR_DF_MODEL_UNSPECIFIED,\n      colorPrimaries: KHR_DF_PRIMARIES_BT709,\n      transferFunction: KHR_DF_TRANSFER_SRGB,\n      flags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n      texelBlockDimension: [0, 0, 0, 0],\n      bytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n      samples: []\n    }];\n    /** Key/Value Data. */\n    this.keyValue = {};\n    /** Supercompression Global Data. */\n    this.globalData = null;\n  }\n}\nclass BufferReader {\n  constructor(data, byteOffset, byteLength, littleEndian) {\n    this._dataView = void 0;\n    this._littleEndian = void 0;\n    this._offset = void 0;\n    this._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n    this._littleEndian = littleEndian;\n    this._offset = 0;\n  }\n  _nextUint8() {\n    const value = this._dataView.getUint8(this._offset);\n    this._offset += 1;\n    return value;\n  }\n  _nextUint16() {\n    const value = this._dataView.getUint16(this._offset, this._littleEndian);\n    this._offset += 2;\n    return value;\n  }\n  _nextUint32() {\n    const value = this._dataView.getUint32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n  _nextUint64() {\n    const left = this._dataView.getUint32(this._offset, this._littleEndian);\n    const right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n    // TODO(cleanup): Just test this...\n    // const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n    const value = left + 2 ** 32 * right;\n    this._offset += 8;\n    return value;\n  }\n  _nextInt32() {\n    const value = this._dataView.getInt32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n  _nextUint8Array(len) {\n    const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._offset, len);\n    this._offset += len;\n    return value;\n  }\n  _skip(bytes) {\n    this._offset += bytes;\n    return this;\n  }\n  _scan(maxByteLength, term = 0x00) {\n    const byteOffset = this._offset;\n    let byteLength = 0;\n    while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n      byteLength++;\n      this._offset++;\n    }\n    if (byteLength < maxByteLength) this._offset++;\n    return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n  }\n}\n\n///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\nconst KTX_WRITER = `KTX-Parse v${\"0.7.1\"}`;\nconst NUL = new Uint8Array([0x00]);\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\nconst KTX2_ID = [\n// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\nconst HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\n/** Encodes text to an ArrayBuffer. */\nfunction encodeText(text) {\n  return new TextEncoder().encode(text);\n}\n/** Decodes an ArrayBuffer to text. */\nfunction decodeText(buffer) {\n  return new TextDecoder().decode(buffer);\n}\n/** Concatenates N ArrayBuffers. */\nfunction concat(buffers) {\n  let totalByteLength = 0;\n  for (const buffer of buffers) {\n    totalByteLength += buffer.byteLength;\n  }\n  const result = new Uint8Array(totalByteLength);\n  let byteOffset = 0;\n  for (const buffer of buffers) {\n    result.set(new Uint8Array(buffer), byteOffset);\n    byteOffset += buffer.byteLength;\n  }\n  return result;\n}\n/** Returns the least common multiple (LCM) for two positive integers. */\nfunction leastCommonMultiple(a, b) {\n  const max = Math.max(a, b);\n  const min = Math.min(a, b);\n  let lcm = max;\n  while (lcm % min !== 0) {\n    lcm += max;\n  }\n  return lcm;\n}\n/**\n * Returns amount of padding, in bytes, required to pad a value V to N-byte\n * boundaries. Both V and N must be positive integers.\n */\nfunction getPadding(v, n = 4) {\n  return Math.ceil(v / n) * n - v;\n}\n/** Returns byte length per texel block. */\nfunction getBlockByteLength(container) {\n  return container.levels[0].levelData.byteLength / getBlockCount(container, 0);\n}\n/**\n * Returns total number of blocks for given level. For VK_FORMAT_UNDEFINED, DFD is required.\n *\n * References:\n * - https://github.khronos.org/KTX-Specification/ktxspec.v2.html#levelImages\n */\nfunction getBlockCount(container, levelIndex) {\n  let blockCount = 1;\n  const pixelDimensions = [container.pixelWidth, container.pixelHeight, container.pixelDepth];\n  const blockDimensions = getBlockDimensions(container);\n  for (let i = 0; i < 3; i++) {\n    if (pixelDimensions[i] > 0) {\n      const dimBlockCount = Math.ceil(Math.floor(pixelDimensions[i] * Math.pow(2, -levelIndex)) / blockDimensions[i]);\n      blockCount *= Math.max(1, dimBlockCount);\n    }\n  }\n  if (container.layerCount > 0) {\n    blockCount *= container.layerCount;\n  }\n  if (container.faceCount > 0) {\n    blockCount *= container.faceCount;\n  }\n  return blockCount;\n}\n/**\n * Given a KTX2 container, returns block dimensions as [width, height, depth]. Requires valid DFD.\n */\nfunction getBlockDimensions(container) {\n  const [x, y, z] = container.dataFormatDescriptor[0].texelBlockDimension;\n  return [x + 1, y + 1, z + 1];\n}\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nfunction read(data) {\n  ///////////////////////////////////////////////////\n  // KTX 2.0 Identifier.\n  ///////////////////////////////////////////////////\n  const id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n  if (id[0] !== KTX2_ID[0] ||\n  // '´'\n  id[1] !== KTX2_ID[1] ||\n  // 'K'\n  id[2] !== KTX2_ID[2] ||\n  // 'T'\n  id[3] !== KTX2_ID[3] ||\n  // 'X'\n  id[4] !== KTX2_ID[4] ||\n  // ' '\n  id[5] !== KTX2_ID[5] ||\n  // '2'\n  id[6] !== KTX2_ID[6] ||\n  // '0'\n  id[7] !== KTX2_ID[7] ||\n  // 'ª'\n  id[8] !== KTX2_ID[8] ||\n  // '\\r'\n  id[9] !== KTX2_ID[9] ||\n  // '\\n'\n  id[10] !== KTX2_ID[10] ||\n  // '\\x1A'\n  id[11] !== KTX2_ID[11] // '\\n'\n  ) {\n    throw new Error('Missing KTX 2.0 identifier.');\n  }\n  const container = new KTX2Container();\n  ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n  const headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n  const headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n  container.vkFormat = headerReader._nextUint32();\n  container.typeSize = headerReader._nextUint32();\n  container.pixelWidth = headerReader._nextUint32();\n  container.pixelHeight = headerReader._nextUint32();\n  container.pixelDepth = headerReader._nextUint32();\n  container.layerCount = headerReader._nextUint32();\n  container.faceCount = headerReader._nextUint32();\n  const levelCount = headerReader._nextUint32();\n  container.supercompressionScheme = headerReader._nextUint32();\n  const dfdByteOffset = headerReader._nextUint32();\n  const dfdByteLength = headerReader._nextUint32();\n  const kvdByteOffset = headerReader._nextUint32();\n  const kvdByteLength = headerReader._nextUint32();\n  const sgdByteOffset = headerReader._nextUint64();\n  const sgdByteLength = headerReader._nextUint64();\n  ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n  const levelByteLength = levelCount * 3 * 8;\n  const levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n  for (let i = 0; i < levelCount; i++) {\n    container.levels.push({\n      levelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n      uncompressedByteLength: levelReader._nextUint64()\n    });\n  }\n  ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n  const dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n  const dfd = {\n    vendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n    descriptorType: dfdReader._nextUint16(),\n    versionNumber: dfdReader._nextUint16(),\n    descriptorBlockSize: dfdReader._nextUint16(),\n    colorModel: dfdReader._nextUint8(),\n    colorPrimaries: dfdReader._nextUint8(),\n    transferFunction: dfdReader._nextUint8(),\n    flags: dfdReader._nextUint8(),\n    texelBlockDimension: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    bytesPlane: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    samples: []\n  };\n  const sampleStart = 6;\n  const sampleWords = 4;\n  const numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n  for (let i = 0; i < numSamples; i++) {\n    const sample = {\n      bitOffset: dfdReader._nextUint16(),\n      bitLength: dfdReader._nextUint8(),\n      channelType: dfdReader._nextUint8(),\n      samplePosition: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n      sampleLower: -Infinity,\n      sampleUpper: Infinity\n    };\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      sample.sampleLower = dfdReader._nextInt32();\n      sample.sampleUpper = dfdReader._nextInt32();\n    } else {\n      sample.sampleLower = dfdReader._nextUint32();\n      sample.sampleUpper = dfdReader._nextUint32();\n    }\n    dfd.samples[i] = sample;\n  }\n  container.dataFormatDescriptor.length = 0;\n  container.dataFormatDescriptor.push(dfd);\n  ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n  const kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n  while (kvdReader._offset < kvdByteLength) {\n    const keyValueByteLength = kvdReader._nextUint32();\n    const keyData = kvdReader._scan(keyValueByteLength);\n    const key = decodeText(keyData);\n    container.keyValue[key] = kvdReader._nextUint8Array(keyValueByteLength - keyData.byteLength - 1);\n    if (key.match(/^ktx/i)) {\n      const text = decodeText(container.keyValue[key]);\n      container.keyValue[key] = text.substring(0, text.lastIndexOf('\\x00'));\n    }\n    const kvPadding = keyValueByteLength % 4 ? 4 - keyValueByteLength % 4 : 0; // align(4)\n    // 4-byte alignment.\n    kvdReader._skip(kvPadding);\n  }\n  ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n  if (sgdByteLength <= 0) return container;\n  const sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n  const endpointCount = sgdReader._nextUint16();\n  const selectorCount = sgdReader._nextUint16();\n  const endpointsByteLength = sgdReader._nextUint32();\n  const selectorsByteLength = sgdReader._nextUint32();\n  const tablesByteLength = sgdReader._nextUint32();\n  const extendedByteLength = sgdReader._nextUint32();\n  const imageDescs = [];\n  for (let i = 0; i < levelCount; i++) {\n    imageDescs.push({\n      imageFlags: sgdReader._nextUint32(),\n      rgbSliceByteOffset: sgdReader._nextUint32(),\n      rgbSliceByteLength: sgdReader._nextUint32(),\n      alphaSliceByteOffset: sgdReader._nextUint32(),\n      alphaSliceByteLength: sgdReader._nextUint32()\n    });\n  }\n  const endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n  const selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n  const tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n  const extendedByteOffset = tablesByteOffset + tablesByteLength;\n  const endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n  const selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n  const tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n  const extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n  container.globalData = {\n    endpointCount,\n    selectorCount,\n    imageDescs,\n    endpointsData,\n    selectorsData,\n    tablesData,\n    extendedData\n  };\n  return container;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nconst DEFAULT_OPTIONS = {\n  keepWriter: false\n};\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nfunction write(container, options = {}) {\n  options = _extends({}, DEFAULT_OPTIONS, options);\n  ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n  let sgdBuffer = new ArrayBuffer(0);\n  if (container.globalData) {\n    const sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n    const sgdHeaderView = new DataView(sgdHeaderBuffer);\n    sgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n    sgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n    sgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n    sgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n    sgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n    sgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n    for (let i = 0; i < container.globalData.imageDescs.length; i++) {\n      const imageDesc = container.globalData.imageDescs[i];\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n    }\n    sgdBuffer = concat([sgdHeaderBuffer, container.globalData.endpointsData, container.globalData.selectorsData, container.globalData.tablesData, container.globalData.extendedData]);\n  }\n  ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n  const keyValueData = [];\n  let keyValue = container.keyValue;\n  if (!options.keepWriter) {\n    keyValue = _extends({}, container.keyValue, {\n      KTXwriter: KTX_WRITER\n    });\n  }\n  for (const key in keyValue) {\n    const value = keyValue[key];\n    const keyData = encodeText(key);\n    const valueData = typeof value === 'string' ? concat([encodeText(value), NUL]) : value;\n    const kvByteLength = keyData.byteLength + 1 + valueData.byteLength;\n    const kvPadding = getPadding(kvByteLength, 4); // align(4)\n    keyValueData.push(concat([new Uint32Array([kvByteLength]), keyData, NUL, valueData, new Uint8Array(kvPadding).fill(0x00) // align(4)\n    ]));\n  }\n  const kvdBuffer = concat(keyValueData);\n  ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n  if (container.dataFormatDescriptor.length !== 1 || container.dataFormatDescriptor[0].descriptorType !== KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT) {\n    throw new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n  }\n  const dfd = container.dataFormatDescriptor[0];\n  const dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n  const dfdView = new DataView(dfdBuffer);\n  const descriptorBlockSize = 24 + dfd.samples.length * 16;\n  dfdView.setUint32(0, dfdBuffer.byteLength, true);\n  dfdView.setUint16(4, dfd.vendorId, true);\n  dfdView.setUint16(6, dfd.descriptorType, true);\n  dfdView.setUint16(8, dfd.versionNumber, true);\n  dfdView.setUint16(10, descriptorBlockSize, true);\n  dfdView.setUint8(12, dfd.colorModel);\n  dfdView.setUint8(13, dfd.colorPrimaries);\n  dfdView.setUint8(14, dfd.transferFunction);\n  dfdView.setUint8(15, dfd.flags);\n  if (!Array.isArray(dfd.texelBlockDimension)) {\n    throw new Error('texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.');\n  }\n  dfdView.setUint8(16, dfd.texelBlockDimension[0]);\n  dfdView.setUint8(17, dfd.texelBlockDimension[1]);\n  dfdView.setUint8(18, dfd.texelBlockDimension[2]);\n  dfdView.setUint8(19, dfd.texelBlockDimension[3]);\n  for (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n  for (let i = 0; i < dfd.samples.length; i++) {\n    const sample = dfd.samples[i];\n    const sampleByteOffset = 28 + i * 16;\n    if (sample.channelID) {\n      throw new Error('channelID has been renamed to channelType.');\n    }\n    dfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n    dfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n    dfdView.setUint8(sampleByteOffset + 3, sample.channelType);\n    dfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n    dfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n    dfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n    dfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      dfdView.setInt32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setInt32(sampleByteOffset + 12, sample.sampleUpper, true);\n    } else {\n      dfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n    }\n  }\n  ///////////////////////////////////////////////////\n  // Data alignment.\n  ///////////////////////////////////////////////////\n  const dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n  const kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n  let sgdByteOffset = sgdBuffer.byteLength > 0 ? kvdByteOffset + kvdBuffer.byteLength : 0;\n  if (sgdByteOffset % 8) sgdByteOffset += 8 - sgdByteOffset % 8; // align(8)\n  ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n  const levelData = [];\n  const levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n  const levelDataByteOffsets = new Uint32Array(container.levels.length);\n  let levelAlign = 0;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelAlign = leastCommonMultiple(getBlockByteLength(container), 4);\n  }\n  // Level data is ordered small → large.\n  let levelDataByteOffset = (sgdByteOffset || kvdByteOffset + kvdBuffer.byteLength) + sgdBuffer.byteLength;\n  for (let i = container.levels.length - 1; i >= 0; i--) {\n    // Level padding.\n    if (levelDataByteOffset % levelAlign) {\n      const paddingBytes = getPadding(levelDataByteOffset, levelAlign);\n      levelData.push(new Uint8Array(paddingBytes));\n      levelDataByteOffset += paddingBytes;\n    }\n    // Level data.\n    const level = container.levels[i];\n    levelData.push(level.levelData);\n    levelDataByteOffsets[i] = levelDataByteOffset;\n    levelDataByteOffset += level.levelData.byteLength;\n  }\n  // Level index is ordered large → small.\n  for (let i = 0; i < container.levels.length; i++) {\n    const level = container.levels[i];\n    levelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffsets[i]), true);\n    levelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n    levelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n  }\n  ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n  const headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n  const headerView = new DataView(headerBuffer);\n  headerView.setUint32(0, container.vkFormat, true);\n  headerView.setUint32(4, container.typeSize, true);\n  headerView.setUint32(8, container.pixelWidth, true);\n  headerView.setUint32(12, container.pixelHeight, true);\n  headerView.setUint32(16, container.pixelDepth, true);\n  headerView.setUint32(20, container.layerCount, true);\n  headerView.setUint32(24, container.faceCount, true);\n  headerView.setUint32(28, container.levels.length, true);\n  headerView.setUint32(32, container.supercompressionScheme, true);\n  headerView.setUint32(36, dfdByteOffset, true);\n  headerView.setUint32(40, dfdBuffer.byteLength, true);\n  headerView.setUint32(44, kvdByteOffset, true);\n  headerView.setUint32(48, kvdBuffer.byteLength, true);\n  headerView.setBigUint64(52, BigInt(sgdBuffer.byteLength > 0 ? sgdByteOffset : 0), true);\n  headerView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n  ///////////////////////////////////////////////////\n  // Compose.\n  ///////////////////////////////////////////////////\n  return new Uint8Array(concat([new Uint8Array(KTX2_ID).buffer, headerBuffer, levelIndex.buffer, dfdBuffer, kvdBuffer, sgdByteOffset > 0 ? new ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)) // align(8)\n  : new ArrayBuffer(0), sgdBuffer, ...levelData]));\n}\nexport { KHR_DF_CHANNEL_RGBSDA_ALPHA, KHR_DF_CHANNEL_RGBSDA_BLUE, KHR_DF_CHANNEL_RGBSDA_DEPTH, KHR_DF_CHANNEL_RGBSDA_GREEN, KHR_DF_CHANNEL_RGBSDA_RED, KHR_DF_CHANNEL_RGBSDA_STENCIL, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_FLAG_ALPHA_STRAIGHT, KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_MODEL_ASTC, KHR_DF_MODEL_ETC1, KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_ETC2, KHR_DF_MODEL_RGBSDA, KHR_DF_MODEL_UASTC, KHR_DF_MODEL_UNSPECIFIED, KHR_DF_PRIMARIES_ACES, KHR_DF_PRIMARIES_ACESCC, KHR_DF_PRIMARIES_ADOBERGB, KHR_DF_PRIMARIES_BT2020, KHR_DF_PRIMARIES_BT601_EBU, KHR_DF_PRIMARIES_BT601_SMPTE, KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_CIEXYZ, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_NTSC1953, KHR_DF_PRIMARIES_PAL525, KHR_DF_PRIMARIES_UNSPECIFIED, KHR_DF_SAMPLE_DATATYPE_EXPONENT, KHR_DF_SAMPLE_DATATYPE_FLOAT, KHR_DF_SAMPLE_DATATYPE_LINEAR, KHR_DF_SAMPLE_DATATYPE_SIGNED, KHR_DF_TRANSFER_ACESCC, KHR_DF_TRANSFER_ACESCCT, KHR_DF_TRANSFER_ADOBERGB, KHR_DF_TRANSFER_BT1886, KHR_DF_TRANSFER_DCIP3, KHR_DF_TRANSFER_HLG_EOTF, KHR_DF_TRANSFER_HLG_OETF, KHR_DF_TRANSFER_ITU, KHR_DF_TRANSFER_LINEAR, KHR_DF_TRANSFER_NTSC, KHR_DF_TRANSFER_PAL625_EOTF, KHR_DF_TRANSFER_PAL_OETF, KHR_DF_TRANSFER_PQ_EOTF, KHR_DF_TRANSFER_PQ_OETF, KHR_DF_TRANSFER_SLOG, KHR_DF_TRANSFER_SLOG2, KHR_DF_TRANSFER_SRGB, KHR_DF_TRANSFER_ST240, KHR_DF_TRANSFER_UNSPECIFIED, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KHR_SUPERCOMPRESSION_BASISLZ, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZLIB, KHR_SUPERCOMPRESSION_ZSTD, KTX2Container, VK_FORMAT_A1R5G5B5_UNORM_PACK16, VK_FORMAT_A2B10G10R10_SINT_PACK32, VK_FORMAT_A2B10G10R10_SNORM_PACK32, VK_FORMAT_A2B10G10R10_UINT_PACK32, VK_FORMAT_A2B10G10R10_UNORM_PACK32, VK_FORMAT_A2R10G10B10_SINT_PACK32, VK_FORMAT_A2R10G10B10_SNORM_PACK32, VK_FORMAT_A2R10G10B10_UINT_PACK32, VK_FORMAT_A2R10G10B10_UNORM_PACK32, VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT, VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT, VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x10_SRGB_BLOCK, VK_FORMAT_ASTC_10x10_UNORM_BLOCK, VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x5_SRGB_BLOCK, VK_FORMAT_ASTC_10x5_UNORM_BLOCK, VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x6_SRGB_BLOCK, VK_FORMAT_ASTC_10x6_UNORM_BLOCK, VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x8_UNORM_BLOCK, VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x10_UNORM_BLOCK, VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x12_SRGB_BLOCK, VK_FORMAT_ASTC_12x12_UNORM_BLOCK, VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x5_SRGB_BLOCK, VK_FORMAT_ASTC_5x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x5_SRGB_BLOCK, VK_FORMAT_ASTC_8x5_UNORM_BLOCK, VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x8_SRGB_BLOCK, VK_FORMAT_ASTC_8x8_UNORM_BLOCK, VK_FORMAT_B10G11R11_UFLOAT_PACK32, VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, VK_FORMAT_B4G4R4A4_UNORM_PACK16, VK_FORMAT_B5G5R5A1_UNORM_PACK16, VK_FORMAT_B5G6R5_UNORM_PACK16, VK_FORMAT_B8G8R8A8_SINT, VK_FORMAT_B8G8R8A8_SNORM, VK_FORMAT_B8G8R8A8_SRGB, VK_FORMAT_B8G8R8A8_UINT, VK_FORMAT_B8G8R8A8_UNORM, VK_FORMAT_B8G8R8_SINT, VK_FORMAT_B8G8R8_SNORM, VK_FORMAT_B8G8R8_SRGB, VK_FORMAT_B8G8R8_UINT, VK_FORMAT_B8G8R8_UNORM, VK_FORMAT_BC1_RGBA_SRGB_BLOCK, VK_FORMAT_BC1_RGBA_UNORM_BLOCK, VK_FORMAT_BC1_RGB_SRGB_BLOCK, VK_FORMAT_BC1_RGB_UNORM_BLOCK, VK_FORMAT_BC2_SRGB_BLOCK, VK_FORMAT_BC2_UNORM_BLOCK, VK_FORMAT_BC3_SRGB_BLOCK, VK_FORMAT_BC3_UNORM_BLOCK, VK_FORMAT_BC4_SNORM_BLOCK, VK_FORMAT_BC4_UNORM_BLOCK, VK_FORMAT_BC5_SNORM_BLOCK, VK_FORMAT_BC5_UNORM_BLOCK, VK_FORMAT_BC6H_SFLOAT_BLOCK, VK_FORMAT_BC6H_UFLOAT_BLOCK, VK_FORMAT_BC7_SRGB_BLOCK, VK_FORMAT_BC7_UNORM_BLOCK, VK_FORMAT_D16_UNORM, VK_FORMAT_D16_UNORM_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT, VK_FORMAT_D32_SFLOAT, VK_FORMAT_D32_SFLOAT_S8_UINT, VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, VK_FORMAT_EAC_R11G11_SNORM_BLOCK, VK_FORMAT_EAC_R11G11_UNORM_BLOCK, VK_FORMAT_EAC_R11_SNORM_BLOCK, VK_FORMAT_EAC_R11_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, VK_FORMAT_R10X6G10X6_UNORM_2PACK16, VK_FORMAT_R10X6_UNORM_PACK16, VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, VK_FORMAT_R12X4G12X4_UNORM_2PACK16, VK_FORMAT_R12X4_UNORM_PACK16, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R16G16B16A16_SINT, VK_FORMAT_R16G16B16A16_SNORM, VK_FORMAT_R16G16B16A16_UINT, VK_FORMAT_R16G16B16A16_UNORM, VK_FORMAT_R16G16B16_SFLOAT, VK_FORMAT_R16G16B16_SINT, VK_FORMAT_R16G16B16_SNORM, VK_FORMAT_R16G16B16_UINT, VK_FORMAT_R16G16B16_UNORM, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16_SINT, VK_FORMAT_R16G16_SNORM, VK_FORMAT_R16G16_UINT, VK_FORMAT_R16G16_UNORM, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16_SINT, VK_FORMAT_R16_SNORM, VK_FORMAT_R16_UINT, VK_FORMAT_R16_UNORM, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R32G32B32A32_SINT, VK_FORMAT_R32G32B32A32_UINT, VK_FORMAT_R32G32B32_SFLOAT, VK_FORMAT_R32G32B32_SINT, VK_FORMAT_R32G32B32_UINT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32_SINT, VK_FORMAT_R32G32_UINT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32_SINT, VK_FORMAT_R32_UINT, VK_FORMAT_R4G4B4A4_UNORM_PACK16, VK_FORMAT_R4G4_UNORM_PACK8, VK_FORMAT_R5G5B5A1_UNORM_PACK16, VK_FORMAT_R5G6B5_UNORM_PACK16, VK_FORMAT_R64G64B64A64_SFLOAT, VK_FORMAT_R64G64B64A64_SINT, VK_FORMAT_R64G64B64A64_UINT, VK_FORMAT_R64G64B64_SFLOAT, VK_FORMAT_R64G64B64_SINT, VK_FORMAT_R64G64B64_UINT, VK_FORMAT_R64G64_SFLOAT, VK_FORMAT_R64G64_SINT, VK_FORMAT_R64G64_UINT, VK_FORMAT_R64_SFLOAT, VK_FORMAT_R64_SINT, VK_FORMAT_R64_UINT, VK_FORMAT_R8G8B8A8_SINT, VK_FORMAT_R8G8B8A8_SNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UINT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8_SINT, VK_FORMAT_R8G8B8_SNORM, VK_FORMAT_R8G8B8_SRGB, VK_FORMAT_R8G8B8_UINT, VK_FORMAT_R8G8B8_UNORM, VK_FORMAT_R8G8_SINT, VK_FORMAT_R8G8_SNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UINT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8_SINT, VK_FORMAT_R8_SNORM, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UINT, VK_FORMAT_R8_UNORM, VK_FORMAT_S8_UINT, VK_FORMAT_UNDEFINED, VK_FORMAT_X8_D24_UNORM_PACK32, read, write };","map":{"version":3,"names":["KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_BASISLZ","KHR_SUPERCOMPRESSION_ZSTD","KHR_SUPERCOMPRESSION_ZLIB","KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT","KHR_DF_VENDORID_KHRONOS","KHR_DF_VERSION","KHR_DF_MODEL_UNSPECIFIED","KHR_DF_MODEL_RGBSDA","KHR_DF_MODEL_ETC1","KHR_DF_MODEL_ETC2","KHR_DF_MODEL_ASTC","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","KHR_DF_FLAG_ALPHA_STRAIGHT","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","KHR_DF_TRANSFER_UNSPECIFIED","KHR_DF_TRANSFER_LINEAR","KHR_DF_TRANSFER_SRGB","KHR_DF_TRANSFER_ITU","KHR_DF_TRANSFER_NTSC","KHR_DF_TRANSFER_SLOG","KHR_DF_TRANSFER_SLOG2","KHR_DF_TRANSFER_BT1886","KHR_DF_TRANSFER_HLG_OETF","KHR_DF_TRANSFER_HLG_EOTF","KHR_DF_TRANSFER_PQ_EOTF","KHR_DF_TRANSFER_PQ_OETF","KHR_DF_TRANSFER_DCIP3","KHR_DF_TRANSFER_PAL_OETF","KHR_DF_TRANSFER_PAL625_EOTF","KHR_DF_TRANSFER_ST240","KHR_DF_TRANSFER_ACESCC","KHR_DF_TRANSFER_ACESCCT","KHR_DF_TRANSFER_ADOBERGB","KHR_DF_PRIMARIES_UNSPECIFIED","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_BT601_EBU","KHR_DF_PRIMARIES_BT601_SMPTE","KHR_DF_PRIMARIES_BT2020","KHR_DF_PRIMARIES_CIEXYZ","KHR_DF_PRIMARIES_ACES","KHR_DF_PRIMARIES_ACESCC","KHR_DF_PRIMARIES_NTSC1953","KHR_DF_PRIMARIES_PAL525","KHR_DF_PRIMARIES_DISPLAYP3","KHR_DF_PRIMARIES_ADOBERGB","KHR_DF_CHANNEL_RGBSDA_RED","KHR_DF_CHANNEL_RGBSDA_GREEN","KHR_DF_CHANNEL_RGBSDA_BLUE","KHR_DF_CHANNEL_RGBSDA_STENCIL","KHR_DF_CHANNEL_RGBSDA_DEPTH","KHR_DF_CHANNEL_RGBSDA_ALPHA","KHR_DF_SAMPLE_DATATYPE_FLOAT","KHR_DF_SAMPLE_DATATYPE_SIGNED","KHR_DF_SAMPLE_DATATYPE_EXPONENT","KHR_DF_SAMPLE_DATATYPE_LINEAR","VK_FORMAT_UNDEFINED","VK_FORMAT_R4G4_UNORM_PACK8","VK_FORMAT_R4G4B4A4_UNORM_PACK16","VK_FORMAT_B4G4R4A4_UNORM_PACK16","VK_FORMAT_R5G6B5_UNORM_PACK16","VK_FORMAT_B5G6R5_UNORM_PACK16","VK_FORMAT_R5G5B5A1_UNORM_PACK16","VK_FORMAT_B5G5R5A1_UNORM_PACK16","VK_FORMAT_A1R5G5B5_UNORM_PACK16","VK_FORMAT_R8_UNORM","VK_FORMAT_R8_SNORM","VK_FORMAT_R8_UINT","VK_FORMAT_R8_SINT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SNORM","VK_FORMAT_R8G8_UINT","VK_FORMAT_R8G8_SINT","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8B8_UNORM","VK_FORMAT_R8G8B8_SNORM","VK_FORMAT_R8G8B8_UINT","VK_FORMAT_R8G8B8_SINT","VK_FORMAT_R8G8B8_SRGB","VK_FORMAT_B8G8R8_UNORM","VK_FORMAT_B8G8R8_SNORM","VK_FORMAT_B8G8R8_UINT","VK_FORMAT_B8G8R8_SINT","VK_FORMAT_B8G8R8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SNORM","VK_FORMAT_R8G8B8A8_UINT","VK_FORMAT_R8G8B8A8_SINT","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_B8G8R8A8_UNORM","VK_FORMAT_B8G8R8A8_SNORM","VK_FORMAT_B8G8R8A8_UINT","VK_FORMAT_B8G8R8A8_SINT","VK_FORMAT_B8G8R8A8_SRGB","VK_FORMAT_A2R10G10B10_UNORM_PACK32","VK_FORMAT_A2R10G10B10_SNORM_PACK32","VK_FORMAT_A2R10G10B10_UINT_PACK32","VK_FORMAT_A2R10G10B10_SINT_PACK32","VK_FORMAT_A2B10G10R10_UNORM_PACK32","VK_FORMAT_A2B10G10R10_SNORM_PACK32","VK_FORMAT_A2B10G10R10_UINT_PACK32","VK_FORMAT_A2B10G10R10_SINT_PACK32","VK_FORMAT_R16_UNORM","VK_FORMAT_R16_SNORM","VK_FORMAT_R16_UINT","VK_FORMAT_R16_SINT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_UNORM","VK_FORMAT_R16G16_SNORM","VK_FORMAT_R16G16_UINT","VK_FORMAT_R16G16_SINT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16_UNORM","VK_FORMAT_R16G16B16_SNORM","VK_FORMAT_R16G16B16_UINT","VK_FORMAT_R16G16B16_SINT","VK_FORMAT_R16G16B16_SFLOAT","VK_FORMAT_R16G16B16A16_UNORM","VK_FORMAT_R16G16B16A16_SNORM","VK_FORMAT_R16G16B16A16_UINT","VK_FORMAT_R16G16B16A16_SINT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_UINT","VK_FORMAT_R32_SINT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_UINT","VK_FORMAT_R32G32_SINT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32_UINT","VK_FORMAT_R32G32B32_SINT","VK_FORMAT_R32G32B32_SFLOAT","VK_FORMAT_R32G32B32A32_UINT","VK_FORMAT_R32G32B32A32_SINT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R64_UINT","VK_FORMAT_R64_SINT","VK_FORMAT_R64_SFLOAT","VK_FORMAT_R64G64_UINT","VK_FORMAT_R64G64_SINT","VK_FORMAT_R64G64_SFLOAT","VK_FORMAT_R64G64B64_UINT","VK_FORMAT_R64G64B64_SINT","VK_FORMAT_R64G64B64_SFLOAT","VK_FORMAT_R64G64B64A64_UINT","VK_FORMAT_R64G64B64A64_SINT","VK_FORMAT_R64G64B64A64_SFLOAT","VK_FORMAT_B10G11R11_UFLOAT_PACK32","VK_FORMAT_E5B9G9R9_UFLOAT_PACK32","VK_FORMAT_D16_UNORM","VK_FORMAT_X8_D24_UNORM_PACK32","VK_FORMAT_D32_SFLOAT","VK_FORMAT_S8_UINT","VK_FORMAT_D16_UNORM_S8_UINT","VK_FORMAT_D24_UNORM_S8_UINT","VK_FORMAT_D32_SFLOAT_S8_UINT","VK_FORMAT_BC1_RGB_UNORM_BLOCK","VK_FORMAT_BC1_RGB_SRGB_BLOCK","VK_FORMAT_BC1_RGBA_UNORM_BLOCK","VK_FORMAT_BC1_RGBA_SRGB_BLOCK","VK_FORMAT_BC2_UNORM_BLOCK","VK_FORMAT_BC2_SRGB_BLOCK","VK_FORMAT_BC3_UNORM_BLOCK","VK_FORMAT_BC3_SRGB_BLOCK","VK_FORMAT_BC4_UNORM_BLOCK","VK_FORMAT_BC4_SNORM_BLOCK","VK_FORMAT_BC5_UNORM_BLOCK","VK_FORMAT_BC5_SNORM_BLOCK","VK_FORMAT_BC6H_UFLOAT_BLOCK","VK_FORMAT_BC6H_SFLOAT_BLOCK","VK_FORMAT_BC7_UNORM_BLOCK","VK_FORMAT_BC7_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK","VK_FORMAT_EAC_R11_UNORM_BLOCK","VK_FORMAT_EAC_R11_SNORM_BLOCK","VK_FORMAT_EAC_R11G11_UNORM_BLOCK","VK_FORMAT_EAC_R11G11_SNORM_BLOCK","VK_FORMAT_ASTC_4x4_UNORM_BLOCK","VK_FORMAT_ASTC_4x4_SRGB_BLOCK","VK_FORMAT_ASTC_5x4_UNORM_BLOCK","VK_FORMAT_ASTC_5x4_SRGB_BLOCK","VK_FORMAT_ASTC_5x5_UNORM_BLOCK","VK_FORMAT_ASTC_5x5_SRGB_BLOCK","VK_FORMAT_ASTC_6x5_UNORM_BLOCK","VK_FORMAT_ASTC_6x5_SRGB_BLOCK","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","VK_FORMAT_ASTC_8x5_UNORM_BLOCK","VK_FORMAT_ASTC_8x5_SRGB_BLOCK","VK_FORMAT_ASTC_8x6_UNORM_BLOCK","VK_FORMAT_ASTC_8x6_SRGB_BLOCK","VK_FORMAT_ASTC_8x8_UNORM_BLOCK","VK_FORMAT_ASTC_8x8_SRGB_BLOCK","VK_FORMAT_ASTC_10x5_UNORM_BLOCK","VK_FORMAT_ASTC_10x5_SRGB_BLOCK","VK_FORMAT_ASTC_10x6_UNORM_BLOCK","VK_FORMAT_ASTC_10x6_SRGB_BLOCK","VK_FORMAT_ASTC_10x8_UNORM_BLOCK","VK_FORMAT_ASTC_10x8_SRGB_BLOCK","VK_FORMAT_ASTC_10x10_UNORM_BLOCK","VK_FORMAT_ASTC_10x10_SRGB_BLOCK","VK_FORMAT_ASTC_12x10_UNORM_BLOCK","VK_FORMAT_ASTC_12x10_SRGB_BLOCK","VK_FORMAT_ASTC_12x12_UNORM_BLOCK","VK_FORMAT_ASTC_12x12_SRGB_BLOCK","VK_FORMAT_R10X6_UNORM_PACK16","VK_FORMAT_R10X6G10X6_UNORM_2PACK16","VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16","VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16","VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16","VK_FORMAT_R12X4_UNORM_PACK16","VK_FORMAT_R12X4G12X4_UNORM_2PACK16","VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16","VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16","VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16","VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG","VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG","VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG","VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG","VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT","VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT","VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT","KTX2Container","constructor","vkFormat","typeSize","pixelWidth","pixelHeight","pixelDepth","layerCount","faceCount","supercompressionScheme","levels","dataFormatDescriptor","vendorId","descriptorType","descriptorBlockSize","versionNumber","colorModel","colorPrimaries","transferFunction","flags","texelBlockDimension","bytesPlane","samples","keyValue","globalData","BufferReader","data","byteOffset","byteLength","littleEndian","_dataView","_littleEndian","_offset","DataView","buffer","_nextUint8","value","getUint8","_nextUint16","getUint16","_nextUint32","getUint32","_nextUint64","left","right","_nextInt32","getInt32","_nextUint8Array","len","Uint8Array","_skip","bytes","_scan","maxByteLength","term","KTX_WRITER","NUL","KTX2_ID","HEADER_BYTE_LENGTH","encodeText","text","TextEncoder","encode","decodeText","TextDecoder","decode","concat","buffers","totalByteLength","result","set","leastCommonMultiple","a","b","max","Math","min","lcm","getPadding","v","n","ceil","getBlockByteLength","container","levelData","getBlockCount","levelIndex","blockCount","pixelDimensions","blockDimensions","getBlockDimensions","i","dimBlockCount","floor","pow","x","y","z","read","id","length","Error","headerByteLength","Uint32Array","BYTES_PER_ELEMENT","headerReader","levelCount","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","levelByteLength","levelReader","push","uncompressedByteLength","dfdReader","dfd","sampleStart","sampleWords","numSamples","sample","bitOffset","bitLength","channelType","samplePosition","sampleLower","Infinity","sampleUpper","kvdReader","keyValueByteLength","keyData","key","match","substring","lastIndexOf","kvPadding","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","DEFAULT_OPTIONS","keepWriter","write","options","_extends","sgdBuffer","ArrayBuffer","sgdHeaderBuffer","sgdHeaderView","setUint16","setUint32","imageDesc","keyValueData","KTXwriter","valueData","kvByteLength","fill","kvdBuffer","dfdBuffer","dfdView","setUint8","Array","isArray","sampleByteOffset","channelID","setInt32","levelDataByteOffsets","levelAlign","levelDataByteOffset","paddingBytes","level","setBigUint64","BigInt","headerBuffer","headerView"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\ktx-parse\\src\\constants.ts","C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\ktx-parse\\src\\container.ts","C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\ktx-parse\\src\\buffer-reader.ts","C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\ktx-parse\\src\\constants-internal.ts","C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\ktx-parse\\src\\util.ts","C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\ktx-parse\\src\\read.ts","C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\ktx-parse\\src\\write.ts"],"sourcesContent":["///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KHR_SUPERCOMPRESSION_NONE = 0;\nexport const KHR_SUPERCOMPRESSION_BASISLZ = 1;\nexport const KHR_SUPERCOMPRESSION_ZSTD = 2;\nexport const KHR_SUPERCOMPRESSION_ZLIB = 3;\n\nexport type Supercompression =\n\t| typeof KHR_SUPERCOMPRESSION_NONE\n\t| typeof KHR_SUPERCOMPRESSION_BASISLZ\n\t| typeof KHR_SUPERCOMPRESSION_ZSTD\n\t| typeof KHR_SUPERCOMPRESSION_ZLIB;\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport const KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nexport const KHR_DF_VENDORID_KHRONOS = 0;\nexport const KHR_DF_VERSION = 2;\n\nexport const KHR_DF_MODEL_UNSPECIFIED = 0;\nexport const KHR_DF_MODEL_RGBSDA = 1;\n// ...\nexport const KHR_DF_MODEL_ETC1 = 160;\nexport const KHR_DF_MODEL_ETC2 = 161;\nexport const KHR_DF_MODEL_ASTC = 162;\nexport const KHR_DF_MODEL_ETC1S = 163;\nexport const KHR_DF_MODEL_UASTC = 166;\n\nexport const KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nexport const KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\n\nexport const KHR_DF_TRANSFER_UNSPECIFIED = 0;\nexport const KHR_DF_TRANSFER_LINEAR = 1;\nexport const KHR_DF_TRANSFER_SRGB = 2;\nexport const KHR_DF_TRANSFER_ITU = 3;\nexport const KHR_DF_TRANSFER_NTSC = 4;\nexport const KHR_DF_TRANSFER_SLOG = 5;\nexport const KHR_DF_TRANSFER_SLOG2 = 6;\nexport const KHR_DF_TRANSFER_BT1886 = 7;\nexport const KHR_DF_TRANSFER_HLG_OETF = 8;\nexport const KHR_DF_TRANSFER_HLG_EOTF = 9;\nexport const KHR_DF_TRANSFER_PQ_EOTF = 10;\nexport const KHR_DF_TRANSFER_PQ_OETF = 11;\nexport const KHR_DF_TRANSFER_DCIP3 = 12;\nexport const KHR_DF_TRANSFER_PAL_OETF = 13;\nexport const KHR_DF_TRANSFER_PAL625_EOTF = 14;\nexport const KHR_DF_TRANSFER_ST240 = 15;\nexport const KHR_DF_TRANSFER_ACESCC = 16;\nexport const KHR_DF_TRANSFER_ACESCCT = 17;\nexport const KHR_DF_TRANSFER_ADOBERGB = 18;\n\nexport type Transfer =\n\t| typeof KHR_DF_TRANSFER_UNSPECIFIED\n\t| typeof KHR_DF_TRANSFER_LINEAR\n\t| typeof KHR_DF_TRANSFER_SRGB\n\t| typeof KHR_DF_TRANSFER_ITU\n\t| typeof KHR_DF_TRANSFER_NTSC\n\t| typeof KHR_DF_TRANSFER_SLOG\n\t| typeof KHR_DF_TRANSFER_SLOG2\n\t| typeof KHR_DF_TRANSFER_BT1886\n\t| typeof KHR_DF_TRANSFER_HLG_OETF\n\t| typeof KHR_DF_TRANSFER_HLG_EOTF\n\t| typeof KHR_DF_TRANSFER_PQ_EOTF\n\t| typeof KHR_DF_TRANSFER_PQ_OETF\n\t| typeof KHR_DF_TRANSFER_DCIP3\n\t| typeof KHR_DF_TRANSFER_PAL_OETF\n\t| typeof KHR_DF_TRANSFER_PAL625_EOTF\n\t| typeof KHR_DF_TRANSFER_ST240\n\t| typeof KHR_DF_TRANSFER_ACESCC\n\t| typeof KHR_DF_TRANSFER_ACESCCT\n\t| typeof KHR_DF_TRANSFER_ADOBERGB;\n\nexport const KHR_DF_PRIMARIES_UNSPECIFIED = 0;\nexport const KHR_DF_PRIMARIES_BT709 = 1;\nexport const KHR_DF_PRIMARIES_BT601_EBU = 2;\nexport const KHR_DF_PRIMARIES_BT601_SMPTE = 3;\nexport const KHR_DF_PRIMARIES_BT2020 = 4;\nexport const KHR_DF_PRIMARIES_CIEXYZ = 5;\nexport const KHR_DF_PRIMARIES_ACES = 6;\nexport const KHR_DF_PRIMARIES_ACESCC = 7;\nexport const KHR_DF_PRIMARIES_NTSC1953 = 8;\nexport const KHR_DF_PRIMARIES_PAL525 = 9;\nexport const KHR_DF_PRIMARIES_DISPLAYP3 = 10;\nexport const KHR_DF_PRIMARIES_ADOBERGB = 11;\n\nexport type Primaries =\n\t| typeof KHR_DF_PRIMARIES_UNSPECIFIED\n\t| typeof KHR_DF_PRIMARIES_BT709\n\t| typeof KHR_DF_PRIMARIES_BT601_EBU\n\t| typeof KHR_DF_PRIMARIES_BT601_SMPTE\n\t| typeof KHR_DF_PRIMARIES_BT2020\n\t| typeof KHR_DF_PRIMARIES_CIEXYZ\n\t| typeof KHR_DF_PRIMARIES_ACES\n\t| typeof KHR_DF_PRIMARIES_ACESCC\n\t| typeof KHR_DF_PRIMARIES_NTSC1953\n\t| typeof KHR_DF_PRIMARIES_PAL525\n\t| typeof KHR_DF_PRIMARIES_DISPLAYP3\n\t| typeof KHR_DF_PRIMARIES_ADOBERGB;\n\nexport const KHR_DF_CHANNEL_RGBSDA_RED = 0;\nexport const KHR_DF_CHANNEL_RGBSDA_GREEN = 1;\nexport const KHR_DF_CHANNEL_RGBSDA_BLUE = 2;\nexport const KHR_DF_CHANNEL_RGBSDA_STENCIL = 13;\nexport const KHR_DF_CHANNEL_RGBSDA_DEPTH = 14;\nexport const KHR_DF_CHANNEL_RGBSDA_ALPHA = 15;\n\nexport type Channel =\n\t| typeof KHR_DF_CHANNEL_RGBSDA_RED\n\t| typeof KHR_DF_CHANNEL_RGBSDA_GREEN\n\t| typeof KHR_DF_CHANNEL_RGBSDA_BLUE\n\t| typeof KHR_DF_CHANNEL_RGBSDA_STENCIL\n\t| typeof KHR_DF_CHANNEL_RGBSDA_DEPTH\n\t| typeof KHR_DF_CHANNEL_RGBSDA_ALPHA;\n\nexport const KHR_DF_SAMPLE_DATATYPE_FLOAT = 0x80;\nexport const KHR_DF_SAMPLE_DATATYPE_SIGNED = 0x40;\nexport const KHR_DF_SAMPLE_DATATYPE_EXPONENT = 0x20;\nexport const KHR_DF_SAMPLE_DATATYPE_LINEAR = 0x10;\n\nexport type SampleDatatype =\n\t| typeof KHR_DF_SAMPLE_DATATYPE_FLOAT\n\t| typeof KHR_DF_SAMPLE_DATATYPE_SIGNED\n\t| typeof KHR_DF_SAMPLE_DATATYPE_EXPONENT\n\t| typeof KHR_DF_SAMPLE_DATATYPE_LINEAR;\n\n///////////////////////////////////////////////////\n// VK FORMAT.\n///////////////////////////////////////////////////\n\nexport const VK_FORMAT_UNDEFINED = 0;\nexport const VK_FORMAT_R4G4_UNORM_PACK8 = 1;\nexport const VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;\nexport const VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;\nexport const VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;\nexport const VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;\nexport const VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;\nexport const VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;\nexport const VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;\nexport const VK_FORMAT_R8_UNORM = 9;\nexport const VK_FORMAT_R8_SNORM = 10;\nexport const VK_FORMAT_R8_UINT = 13;\nexport const VK_FORMAT_R8_SINT = 14;\nexport const VK_FORMAT_R8_SRGB = 15;\nexport const VK_FORMAT_R8G8_UNORM = 16;\nexport const VK_FORMAT_R8G8_SNORM = 17;\nexport const VK_FORMAT_R8G8_UINT = 20;\nexport const VK_FORMAT_R8G8_SINT = 21;\nexport const VK_FORMAT_R8G8_SRGB = 22;\nexport const VK_FORMAT_R8G8B8_UNORM = 23;\nexport const VK_FORMAT_R8G8B8_SNORM = 24;\nexport const VK_FORMAT_R8G8B8_UINT = 27;\nexport const VK_FORMAT_R8G8B8_SINT = 28;\nexport const VK_FORMAT_R8G8B8_SRGB = 29;\nexport const VK_FORMAT_B8G8R8_UNORM = 30;\nexport const VK_FORMAT_B8G8R8_SNORM = 31;\nexport const VK_FORMAT_B8G8R8_UINT = 34;\nexport const VK_FORMAT_B8G8R8_SINT = 35;\nexport const VK_FORMAT_B8G8R8_SRGB = 36;\nexport const VK_FORMAT_R8G8B8A8_UNORM = 37;\nexport const VK_FORMAT_R8G8B8A8_SNORM = 38;\nexport const VK_FORMAT_R8G8B8A8_UINT = 41;\nexport const VK_FORMAT_R8G8B8A8_SINT = 42;\nexport const VK_FORMAT_R8G8B8A8_SRGB = 43;\nexport const VK_FORMAT_B8G8R8A8_UNORM = 44;\nexport const VK_FORMAT_B8G8R8A8_SNORM = 45;\nexport const VK_FORMAT_B8G8R8A8_UINT = 48;\nexport const VK_FORMAT_B8G8R8A8_SINT = 49;\nexport const VK_FORMAT_B8G8R8A8_SRGB = 50;\nexport const VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;\nexport const VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;\nexport const VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;\nexport const VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;\nexport const VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;\nexport const VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;\nexport const VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;\nexport const VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;\nexport const VK_FORMAT_R16_UNORM = 70;\nexport const VK_FORMAT_R16_SNORM = 71;\nexport const VK_FORMAT_R16_UINT = 74;\nexport const VK_FORMAT_R16_SINT = 75;\nexport const VK_FORMAT_R16_SFLOAT = 76;\nexport const VK_FORMAT_R16G16_UNORM = 77;\nexport const VK_FORMAT_R16G16_SNORM = 78;\nexport const VK_FORMAT_R16G16_UINT = 81;\nexport const VK_FORMAT_R16G16_SINT = 82;\nexport const VK_FORMAT_R16G16_SFLOAT = 83;\nexport const VK_FORMAT_R16G16B16_UNORM = 84;\nexport const VK_FORMAT_R16G16B16_SNORM = 85;\nexport const VK_FORMAT_R16G16B16_UINT = 88;\nexport const VK_FORMAT_R16G16B16_SINT = 89;\nexport const VK_FORMAT_R16G16B16_SFLOAT = 90;\nexport const VK_FORMAT_R16G16B16A16_UNORM = 91;\nexport const VK_FORMAT_R16G16B16A16_SNORM = 92;\nexport const VK_FORMAT_R16G16B16A16_UINT = 95;\nexport const VK_FORMAT_R16G16B16A16_SINT = 96;\nexport const VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nexport const VK_FORMAT_R32_UINT = 98;\nexport const VK_FORMAT_R32_SINT = 99;\nexport const VK_FORMAT_R32_SFLOAT = 100;\nexport const VK_FORMAT_R32G32_UINT = 101;\nexport const VK_FORMAT_R32G32_SINT = 102;\nexport const VK_FORMAT_R32G32_SFLOAT = 103;\nexport const VK_FORMAT_R32G32B32_UINT = 104;\nexport const VK_FORMAT_R32G32B32_SINT = 105;\nexport const VK_FORMAT_R32G32B32_SFLOAT = 106;\nexport const VK_FORMAT_R32G32B32A32_UINT = 107;\nexport const VK_FORMAT_R32G32B32A32_SINT = 108;\nexport const VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nexport const VK_FORMAT_R64_UINT = 110;\nexport const VK_FORMAT_R64_SINT = 111;\nexport const VK_FORMAT_R64_SFLOAT = 112;\nexport const VK_FORMAT_R64G64_UINT = 113;\nexport const VK_FORMAT_R64G64_SINT = 114;\nexport const VK_FORMAT_R64G64_SFLOAT = 115;\nexport const VK_FORMAT_R64G64B64_UINT = 116;\nexport const VK_FORMAT_R64G64B64_SINT = 117;\nexport const VK_FORMAT_R64G64B64_SFLOAT = 118;\nexport const VK_FORMAT_R64G64B64A64_UINT = 119;\nexport const VK_FORMAT_R64G64B64A64_SINT = 120;\nexport const VK_FORMAT_R64G64B64A64_SFLOAT = 121;\nexport const VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;\nexport const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;\nexport const VK_FORMAT_D16_UNORM = 124;\nexport const VK_FORMAT_X8_D24_UNORM_PACK32 = 125;\nexport const VK_FORMAT_D32_SFLOAT = 126;\nexport const VK_FORMAT_S8_UINT = 127;\nexport const VK_FORMAT_D16_UNORM_S8_UINT = 128;\nexport const VK_FORMAT_D24_UNORM_S8_UINT = 129;\nexport const VK_FORMAT_D32_SFLOAT_S8_UINT = 130;\nexport const VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;\nexport const VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;\nexport const VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;\nexport const VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;\nexport const VK_FORMAT_BC2_UNORM_BLOCK = 135;\nexport const VK_FORMAT_BC2_SRGB_BLOCK = 136;\nexport const VK_FORMAT_BC3_UNORM_BLOCK = 137;\nexport const VK_FORMAT_BC3_SRGB_BLOCK = 138;\nexport const VK_FORMAT_BC4_UNORM_BLOCK = 139;\nexport const VK_FORMAT_BC4_SNORM_BLOCK = 140;\nexport const VK_FORMAT_BC5_UNORM_BLOCK = 141;\nexport const VK_FORMAT_BC5_SNORM_BLOCK = 142;\nexport const VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;\nexport const VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;\nexport const VK_FORMAT_BC7_UNORM_BLOCK = 145;\nexport const VK_FORMAT_BC7_SRGB_BLOCK = 146;\nexport const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;\nexport const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;\nexport const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;\nexport const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;\nexport const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;\nexport const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;\nexport const VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;\nexport const VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;\nexport const VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;\nexport const VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;\nexport const VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;\nexport const VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;\nexport const VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;\nexport const VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;\nexport const VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;\nexport const VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;\nexport const VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;\nexport const VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;\nexport const VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;\nexport const VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;\nexport const VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;\nexport const VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;\nexport const VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;\nexport const VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;\nexport const VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;\nexport const VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;\nexport const VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;\nexport const VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;\nexport const VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;\nexport const VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;\nexport const VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;\nexport const VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;\nexport const VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;\nexport const VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;\nexport const VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;\nexport const VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;\nexport const VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;\nexport const VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;\nexport const VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;\nexport const VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;\nexport const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;\nexport const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;\nexport const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;\nexport const VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;\nexport const VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;\nexport const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;\nexport const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;\nexport const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;\nexport const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;\nexport const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;\nexport const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;\nexport const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;\nexport const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;\nexport const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;\nexport const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;\nexport const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;\nexport const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;\nexport const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;\nexport const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;\nexport const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;\nexport const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;\nexport const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;\nexport const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;\nexport const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;\nexport const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;\nexport const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;\nexport const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;\nexport const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;\nexport const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;\nexport const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;\nexport const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;\nexport const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;\n\nexport type VKFormat =\n\t| typeof VK_FORMAT_UNDEFINED\n\t| typeof VK_FORMAT_R4G4_UNORM_PACK8\n\t| typeof VK_FORMAT_R4G4B4A4_UNORM_PACK16\n\t| typeof VK_FORMAT_B4G4R4A4_UNORM_PACK16\n\t| typeof VK_FORMAT_R5G6B5_UNORM_PACK16\n\t| typeof VK_FORMAT_B5G6R5_UNORM_PACK16\n\t| typeof VK_FORMAT_R5G5B5A1_UNORM_PACK16\n\t| typeof VK_FORMAT_B5G5R5A1_UNORM_PACK16\n\t| typeof VK_FORMAT_A1R5G5B5_UNORM_PACK16\n\t| typeof VK_FORMAT_R8_UNORM\n\t| typeof VK_FORMAT_R8_SNORM\n\t| typeof VK_FORMAT_R8_UINT\n\t| typeof VK_FORMAT_R8_SINT\n\t| typeof VK_FORMAT_R8_SRGB\n\t| typeof VK_FORMAT_R8G8_UNORM\n\t| typeof VK_FORMAT_R8G8_SNORM\n\t| typeof VK_FORMAT_R8G8_UINT\n\t| typeof VK_FORMAT_R8G8_SINT\n\t| typeof VK_FORMAT_R8G8_SRGB\n\t| typeof VK_FORMAT_R8G8B8_UNORM\n\t| typeof VK_FORMAT_R8G8B8_SNORM\n\t| typeof VK_FORMAT_R8G8B8_UINT\n\t| typeof VK_FORMAT_R8G8B8_SINT\n\t| typeof VK_FORMAT_R8G8B8_SRGB\n\t| typeof VK_FORMAT_B8G8R8_UNORM\n\t| typeof VK_FORMAT_B8G8R8_SNORM\n\t| typeof VK_FORMAT_B8G8R8_UINT\n\t| typeof VK_FORMAT_B8G8R8_SINT\n\t| typeof VK_FORMAT_B8G8R8_SRGB\n\t| typeof VK_FORMAT_R8G8B8A8_UNORM\n\t| typeof VK_FORMAT_R8G8B8A8_SNORM\n\t| typeof VK_FORMAT_R8G8B8A8_UINT\n\t| typeof VK_FORMAT_R8G8B8A8_SINT\n\t| typeof VK_FORMAT_R8G8B8A8_SRGB\n\t| typeof VK_FORMAT_B8G8R8A8_UNORM\n\t| typeof VK_FORMAT_B8G8R8A8_SNORM\n\t| typeof VK_FORMAT_B8G8R8A8_UINT\n\t| typeof VK_FORMAT_B8G8R8A8_SINT\n\t| typeof VK_FORMAT_B8G8R8A8_SRGB\n\t| typeof VK_FORMAT_A2R10G10B10_UNORM_PACK32\n\t| typeof VK_FORMAT_A2R10G10B10_SNORM_PACK32\n\t| typeof VK_FORMAT_A2R10G10B10_UINT_PACK32\n\t| typeof VK_FORMAT_A2R10G10B10_SINT_PACK32\n\t| typeof VK_FORMAT_A2B10G10R10_UNORM_PACK32\n\t| typeof VK_FORMAT_A2B10G10R10_SNORM_PACK32\n\t| typeof VK_FORMAT_A2B10G10R10_UINT_PACK32\n\t| typeof VK_FORMAT_A2B10G10R10_SINT_PACK32\n\t| typeof VK_FORMAT_R16_UNORM\n\t| typeof VK_FORMAT_R16_SNORM\n\t| typeof VK_FORMAT_R16_UINT\n\t| typeof VK_FORMAT_R16_SINT\n\t| typeof VK_FORMAT_R16_SFLOAT\n\t| typeof VK_FORMAT_R16G16_UNORM\n\t| typeof VK_FORMAT_R16G16_SNORM\n\t| typeof VK_FORMAT_R16G16_UINT\n\t| typeof VK_FORMAT_R16G16_SINT\n\t| typeof VK_FORMAT_R16G16_SFLOAT\n\t| typeof VK_FORMAT_R16G16B16_UNORM\n\t| typeof VK_FORMAT_R16G16B16_SNORM\n\t| typeof VK_FORMAT_R16G16B16_UINT\n\t| typeof VK_FORMAT_R16G16B16_SINT\n\t| typeof VK_FORMAT_R16G16B16_SFLOAT\n\t| typeof VK_FORMAT_R16G16B16A16_UNORM\n\t| typeof VK_FORMAT_R16G16B16A16_SNORM\n\t| typeof VK_FORMAT_R16G16B16A16_UINT\n\t| typeof VK_FORMAT_R16G16B16A16_SINT\n\t| typeof VK_FORMAT_R16G16B16A16_SFLOAT\n\t| typeof VK_FORMAT_R32_UINT\n\t| typeof VK_FORMAT_R32_SINT\n\t| typeof VK_FORMAT_R32_SFLOAT\n\t| typeof VK_FORMAT_R32G32_UINT\n\t| typeof VK_FORMAT_R32G32_SINT\n\t| typeof VK_FORMAT_R32G32_SFLOAT\n\t| typeof VK_FORMAT_R32G32B32_UINT\n\t| typeof VK_FORMAT_R32G32B32_SINT\n\t| typeof VK_FORMAT_R32G32B32_SFLOAT\n\t| typeof VK_FORMAT_R32G32B32A32_UINT\n\t| typeof VK_FORMAT_R32G32B32A32_SINT\n\t| typeof VK_FORMAT_R32G32B32A32_SFLOAT\n\t| typeof VK_FORMAT_R64_UINT\n\t| typeof VK_FORMAT_R64_SINT\n\t| typeof VK_FORMAT_R64_SFLOAT\n\t| typeof VK_FORMAT_R64G64_UINT\n\t| typeof VK_FORMAT_R64G64_SINT\n\t| typeof VK_FORMAT_R64G64_SFLOAT\n\t| typeof VK_FORMAT_R64G64B64_UINT\n\t| typeof VK_FORMAT_R64G64B64_SINT\n\t| typeof VK_FORMAT_R64G64B64_SFLOAT\n\t| typeof VK_FORMAT_R64G64B64A64_UINT\n\t| typeof VK_FORMAT_R64G64B64A64_SINT\n\t| typeof VK_FORMAT_R64G64B64A64_SFLOAT\n\t| typeof VK_FORMAT_B10G11R11_UFLOAT_PACK32\n\t| typeof VK_FORMAT_E5B9G9R9_UFLOAT_PACK32\n\t| typeof VK_FORMAT_D16_UNORM\n\t| typeof VK_FORMAT_X8_D24_UNORM_PACK32\n\t| typeof VK_FORMAT_D32_SFLOAT\n\t| typeof VK_FORMAT_S8_UINT\n\t| typeof VK_FORMAT_D16_UNORM_S8_UINT\n\t| typeof VK_FORMAT_D24_UNORM_S8_UINT\n\t| typeof VK_FORMAT_D32_SFLOAT_S8_UINT\n\t| typeof VK_FORMAT_BC1_RGB_UNORM_BLOCK\n\t| typeof VK_FORMAT_BC1_RGB_SRGB_BLOCK\n\t| typeof VK_FORMAT_BC1_RGBA_UNORM_BLOCK\n\t| typeof VK_FORMAT_BC1_RGBA_SRGB_BLOCK\n\t| typeof VK_FORMAT_BC2_UNORM_BLOCK\n\t| typeof VK_FORMAT_BC2_SRGB_BLOCK\n\t| typeof VK_FORMAT_BC3_UNORM_BLOCK\n\t| typeof VK_FORMAT_BC3_SRGB_BLOCK\n\t| typeof VK_FORMAT_BC4_UNORM_BLOCK\n\t| typeof VK_FORMAT_BC4_SNORM_BLOCK\n\t| typeof VK_FORMAT_BC5_UNORM_BLOCK\n\t| typeof VK_FORMAT_BC5_SNORM_BLOCK\n\t| typeof VK_FORMAT_BC6H_UFLOAT_BLOCK\n\t| typeof VK_FORMAT_BC6H_SFLOAT_BLOCK\n\t| typeof VK_FORMAT_BC7_UNORM_BLOCK\n\t| typeof VK_FORMAT_BC7_SRGB_BLOCK\n\t| typeof VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK\n\t| typeof VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK\n\t| typeof VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK\n\t| typeof VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK\n\t| typeof VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK\n\t| typeof VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK\n\t| typeof VK_FORMAT_EAC_R11_UNORM_BLOCK\n\t| typeof VK_FORMAT_EAC_R11_SNORM_BLOCK\n\t| typeof VK_FORMAT_EAC_R11G11_UNORM_BLOCK\n\t| typeof VK_FORMAT_EAC_R11G11_SNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_4x4_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_4x4_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_5x4_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_5x4_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_5x5_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_5x5_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_6x5_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_6x5_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_6x6_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_6x6_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_8x5_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_8x5_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_8x6_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_8x6_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_8x8_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_8x8_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x5_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x5_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x6_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x6_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x8_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x8_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x10_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_10x10_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_12x10_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_12x10_SRGB_BLOCK\n\t| typeof VK_FORMAT_ASTC_12x12_UNORM_BLOCK\n\t| typeof VK_FORMAT_ASTC_12x12_SRGB_BLOCK\n\t| typeof VK_FORMAT_R10X6_UNORM_PACK16\n\t| typeof VK_FORMAT_R10X6G10X6_UNORM_2PACK16\n\t| typeof VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16\n\t| typeof VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16\n\t| typeof VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16\n\t| typeof VK_FORMAT_R12X4_UNORM_PACK16\n\t| typeof VK_FORMAT_R12X4G12X4_UNORM_2PACK16\n\t| typeof VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16\n\t| typeof VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16\n\t| typeof VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16\n\t| typeof VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG\n\t| typeof VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG\n\t| typeof VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG\n\t| typeof VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG\n\t| typeof VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG\n\t| typeof VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG\n\t| typeof VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG\n\t| typeof VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG\n\t| typeof VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT\n\t| typeof VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT\n\t| typeof VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT;\n","import {\n\tKHR_DF_FLAG_ALPHA_STRAIGHT,\n\tKHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n\tKHR_DF_MODEL_UNSPECIFIED,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_DF_VENDORID_KHRONOS,\n\tKHR_DF_VERSION,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tSupercompression,\n\tVKFormat,\n\tVK_FORMAT_UNDEFINED,\n} from './constants.js';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat: VKFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme: Supercompression = KHR_SUPERCOMPRESSION_NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [\n\t\t{\n\t\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\t\tdescriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n\t\t\tdescriptorBlockSize: 0,\n\t\t\tversionNumber: KHR_DF_VERSION,\n\t\t\tcolorModel: KHR_DF_MODEL_UNSPECIFIED,\n\t\t\tcolorPrimaries: KHR_DF_PRIMARIES_BT709,\n\t\t\ttransferFunction: KHR_DF_TRANSFER_SRGB,\n\t\t\tflags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n\t\t\ttexelBlockDimension: [0, 0, 0, 0],\n\t\t\tbytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n\t\t\tsamples: [],\n\t\t},\n\t];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: { [key: string]: string | Uint8Array } = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n}\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\t/** @deprecated Inferred. */\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: [number, number, number, number];\n\tbytesPlane: [number, number, number, number, number, number, number, number];\n\tsamples: KTX2BasicFormatSample[];\n}\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\t/** @deprecated Renamed to 'channelType'. */\n\tchannelID?: number;\n\tchannelType: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n}\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n}\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n}\n","export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + 2 ** 32 * right;\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_nextInt32() {\n\t\tconst value = this._dataView.getInt32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint8Array(len: number) {\n\t\tconst value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._offset, len);\n\t\tthis._offset += len;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n\t}\n}\n","///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\nexport type vec3 = [number, number, number];\nexport type vec2 = [number, number, number];\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a,\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n","import { vec3 } from './constants-internal.js';\nimport {\n\tVKFormat,\n\tVK_FORMAT_ASTC_10x10_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_10x10_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_10x5_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_10x5_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_10x6_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_10x6_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_10x8_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_10x8_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_12x10_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_12x10_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_12x12_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_12x12_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_4x4_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_4x4_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_5x4_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_5x4_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_5x5_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_5x5_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_6x5_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_6x5_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_6x6_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_6x6_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_8x5_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_8x5_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_8x6_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_8x6_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_8x8_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_8x8_UNORM_BLOCK,\n\tVK_FORMAT_BC1_RGB_UNORM_BLOCK,\n\tVK_FORMAT_BC7_SRGB_BLOCK,\n\tVK_FORMAT_EAC_R11G11_SNORM_BLOCK,\n\tVK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,\n\tVK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,\n\tVK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,\n\tVK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,\n\tVK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,\n\tVK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,\n\tVK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,\n\tVK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,\n\tVK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,\n\tVK_FORMAT_UNDEFINED,\n} from './constants.js';\nimport type { KTX2Container } from './container.js';\n\n/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\treturn new TextEncoder().encode(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\treturn new TextDecoder().decode(buffer);\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat(buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}\n\n/** Returns the least common multiple (LCM) for two positive integers. */\nexport function leastCommonMultiple(a: number, b: number): number {\n\tconst max = Math.max(a, b);\n\tconst min = Math.min(a, b);\n\tlet lcm = max;\n\n\twhile (lcm % min !== 0) {\n\t\tlcm += max;\n\t}\n\n\treturn lcm;\n}\n\n/**\n * Returns amount of padding, in bytes, required to pad a value V to N-byte\n * boundaries. Both V and N must be positive integers.\n */\nexport function getPadding(v: number, n = 4): number {\n\treturn Math.ceil(v / n) * n - v;\n}\n\n/** Returns byte length per texel block. */\nexport function getBlockByteLength(container: KTX2Container): number {\n\treturn container.levels[0].levelData.byteLength / getBlockCount(container, 0);\n}\n\n/**\n * Returns total number of blocks for given level. For VK_FORMAT_UNDEFINED, DFD is required.\n *\n * References:\n * - https://github.khronos.org/KTX-Specification/ktxspec.v2.html#levelImages\n */\nexport function getBlockCount(container: KTX2Container, levelIndex: number): number {\n\tlet blockCount = 1;\n\n\tconst pixelDimensions = [container.pixelWidth, container.pixelHeight, container.pixelDepth];\n\tconst blockDimensions = getBlockDimensions(container);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tif (pixelDimensions[i] > 0) {\n\t\t\tconst dimBlockCount = Math.ceil(\n\t\t\t\tMath.floor(pixelDimensions[i] * Math.pow(2, -levelIndex)) / blockDimensions[i],\n\t\t\t);\n\t\t\tblockCount *= Math.max(1, dimBlockCount);\n\t\t}\n\t}\n\n\tif (container.layerCount > 0) {\n\t\tblockCount *= container.layerCount;\n\t}\n\n\tif (container.faceCount > 0) {\n\t\tblockCount *= container.faceCount;\n\t}\n\n\treturn blockCount;\n}\n\n/**\n * Given a KTX2 container, returns block dimensions as [width, height, depth]. Requires valid DFD.\n */\nexport function getBlockDimensions(container: KTX2Container): vec3 {\n\tconst [x, y, z] = container.dataFormatDescriptor[0].texelBlockDimension;\n\treturn [x + 1, y + 1, z + 1];\n}\n\n/**\n * Given `vkFormat`, returns block dimensions as [width, height, depth]. Does not support\n * VK_FORMAT_UNDEFINED.\n *\n * References:\n * - https://github.khronos.org/KTX-Specification/ktxspec.v2.html#_mippadding\n * - https://registry.khronos.org/vulkan/specs/1.2-extensions/html/vkspec.html#formats-compatibility\n */\nexport function getBlockDimensionsByVKFormat(vkFormat: VKFormat): vec3 {\n\tif (vkFormat === VK_FORMAT_UNDEFINED) {\n\t\tthrow new Error('Unknown block dimensions for VK_FORMAT_UNDEFINED.');\n\t} else if (vkFormat >= VK_FORMAT_BC1_RGB_UNORM_BLOCK && vkFormat <= VK_FORMAT_BC7_SRGB_BLOCK) {\n\t\treturn [4, 4, 1];\n\t} else if (vkFormat >= VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK && vkFormat <= VK_FORMAT_EAC_R11G11_SNORM_BLOCK) {\n\t\treturn [4, 4, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_4x4_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_4x4_SRGB_BLOCK) {\n\t\treturn [4, 4, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_5x4_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_5x4_SRGB_BLOCK) {\n\t\treturn [5, 4, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_5x5_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_5x5_SRGB_BLOCK) {\n\t\treturn [5, 5, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_6x5_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_6x5_SRGB_BLOCK) {\n\t\treturn [6, 5, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_6x6_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_6x6_SRGB_BLOCK) {\n\t\treturn [6, 6, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_8x5_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_8x5_SRGB_BLOCK) {\n\t\treturn [8, 5, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_8x6_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_8x6_SRGB_BLOCK) {\n\t\treturn [8, 6, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_8x8_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_8x8_SRGB_BLOCK) {\n\t\treturn [8, 8, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_10x5_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_10x5_SRGB_BLOCK) {\n\t\treturn [10, 5, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_10x6_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_10x6_SRGB_BLOCK) {\n\t\treturn [10, 6, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_10x8_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_10x8_SRGB_BLOCK) {\n\t\treturn [10, 8, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_10x10_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_10x10_SRGB_BLOCK) {\n\t\treturn [10, 10, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_12x10_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_12x10_SRGB_BLOCK) {\n\t\treturn [12, 10, 1];\n\t} else if (vkFormat === VK_FORMAT_ASTC_12x12_UNORM_BLOCK || vkFormat === VK_FORMAT_ASTC_12x12_SRGB_BLOCK) {\n\t\treturn [12, 12, 1];\n\t} else if (\n\t\tvkFormat === VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG ||\n\t\tvkFormat === VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG ||\n\t\tvkFormat === VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG ||\n\t\tvkFormat === VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG\n\t) {\n\t\treturn [8, 4, 1];\n\t} else if (\n\t\tvkFormat === VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG ||\n\t\tvkFormat === VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG ||\n\t\tvkFormat === VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG ||\n\t\tvkFormat === VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG\n\t) {\n\t\treturn [4, 4, 1];\n\t} else {\n\t\treturn [1, 1, 1];\n\t}\n}\n","import { BufferReader } from './buffer-reader.js';\nimport { KHR_DF_SAMPLE_DATATYPE_SIGNED, Supercompression, VKFormat } from './constants.js';\nimport { KTX2_ID } from './constants-internal.js';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container.js';\nimport { decodeText } from './util.js';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (\n\t\tid[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32() as VKFormat;\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32() as Supercompression;\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(\n\t\t\t\tdata.buffer,\n\t\t\t\tdata.byteOffset + levelReader._nextUint64(),\n\t\t\t\tlevelReader._nextUint64(),\n\t\t\t),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i++) {\n\t\tconst sample = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelType: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: -Infinity,\n\t\t\tsampleUpper: Infinity,\n\t\t};\n\n\t\tif (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n\t\t\tsample.sampleLower = dfdReader._nextInt32();\n\t\t\tsample.sampleUpper = dfdReader._nextInt32();\n\t\t} else {\n\t\t\tsample.sampleLower = dfdReader._nextUint32();\n\t\t\tsample.sampleUpper = dfdReader._nextUint32();\n\t\t}\n\n\t\tdfd.samples[i] = sample;\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tcontainer.keyValue[key] = kvdReader._nextUint8Array(keyValueByteLength - keyData.byteLength - 1);\n\n\t\tif (key.match(/^ktx/i)) {\n\t\t\tconst text = decodeText(container.keyValue[key] as Uint8Array);\n\t\t\tcontainer.keyValue[key] = text.substring(0, text.lastIndexOf('\\x00'));\n\t\t}\n\n\t\tconst kvPadding = keyValueByteLength % 4 ? 4 - (keyValueByteLength % 4) : 0; // align(4)\n\t\t// 4-byte alignment.\n\t\tkvdReader._skip(kvPadding);\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n","import { HEADER_BYTE_LENGTH, KTX2_ID, KTX_WRITER, NUL } from './constants-internal.js';\nimport {\n\tKHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n\tKHR_DF_SAMPLE_DATATYPE_SIGNED,\n\tKHR_SUPERCOMPRESSION_NONE,\n} from './constants.js';\nimport { KTX2Container } from './container.js';\nimport { concat, encodeText, getBlockByteLength, getPadding, leastCommonMultiple } from './util.js';\n\ninterface WriteOptions {\n\tkeepWriter?: boolean;\n}\nconst DEFAULT_OPTIONS: WriteOptions = { keepWriter: false };\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = { ...DEFAULT_OPTIONS, ...options };\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = { ...container.keyValue, KTXwriter: KTX_WRITER };\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? concat([encodeText(value), NUL]) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength;\n\t\tconst kvPadding = getPadding(kvByteLength, 4); // align(4)\n\t\tkeyValueData.push(\n\t\t\tconcat([\n\t\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\t\tkeyData,\n\t\t\t\tNUL,\n\t\t\t\tvalueData,\n\t\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t\t]),\n\t\t);\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tif (\n\t\tcontainer.dataFormatDescriptor.length !== 1 ||\n\t\tcontainer.dataFormatDescriptor[0].descriptorType !== KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT\n\t) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tconst dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n\tconst dfdView = new DataView(dfdBuffer);\n\tconst descriptorBlockSize = 24 + dfd.samples.length * 16;\n\n\tdfdView.setUint32(0, dfdBuffer.byteLength, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tif (!Array.isArray(dfd.texelBlockDimension)) {\n\t\tthrow new Error('texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.');\n\t}\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension[0]);\n\tdfdView.setUint8(17, dfd.texelBlockDimension[1]);\n\tdfdView.setUint8(18, dfd.texelBlockDimension[2]);\n\tdfdView.setUint8(19, dfd.texelBlockDimension[3]);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tif (sample.channelID) {\n\t\t\tthrow new Error('channelID has been renamed to channelType.');\n\t\t}\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelType);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tif (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n\t\t\tdfdView.setInt32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\t\tdfdView.setInt32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t\t} else {\n\t\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = sgdBuffer.byteLength > 0 ? kvdByteOffset + kvdBuffer.byteLength : 0;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\tconst levelDataByteOffsets = new Uint32Array(container.levels.length);\n\n\tlet levelAlign = 0;\n\tif (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n\t\tlevelAlign = leastCommonMultiple(getBlockByteLength(container), 4);\n\t}\n\n\t// Level data is ordered small → large.\n\tlet levelDataByteOffset = (sgdByteOffset || kvdByteOffset + kvdBuffer.byteLength) + sgdBuffer.byteLength;\n\tfor (let i = container.levels.length - 1; i >= 0; i--) {\n\t\t// Level padding.\n\t\tif (levelDataByteOffset % levelAlign) {\n\t\t\tconst paddingBytes = getPadding(levelDataByteOffset, levelAlign);\n\t\t\tlevelData.push(new Uint8Array(paddingBytes));\n\t\t\tlevelDataByteOffset += paddingBytes;\n\t\t}\n\n\t\t// Level data.\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelDataByteOffsets[i] = levelDataByteOffset;\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\t// Level index is ordered large → small.\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffsets[i]), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdBuffer.byteLength > 0 ? sgdByteOffset : 0), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(\n\t\tconcat([\n\t\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\t\theaderBuffer,\n\t\t\tlevelIndex.buffer,\n\t\t\tdfdBuffer,\n\t\t\tkvdBuffer,\n\t\t\tsgdByteOffset > 0\n\t\t\t\t? new ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)) // align(8)\n\t\t\t\t: new ArrayBuffer(0),\n\t\t\tsgdBuffer,\n\t\t\t...levelData,\n\t\t]),\n\t);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}