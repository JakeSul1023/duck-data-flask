{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { assert } from '@loaders.gl/loader-utils';\nimport { createTypedArrayFromAccessor } from \"./helpers/tile-3d-accessor-utils.js\";\nimport { initializeHierarchy, traverseHierarchy } from \"./tile-3d-batch-table-hierarchy.js\";\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\nconst clone = (x, y) => x;\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true,\n  // Deprecated HIERARCHY property\n  extensions: true,\n  extras: true\n};\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n  json;\n  binary;\n  featureCount;\n  _extensions;\n  // Copy all top-level property fields from the json object, ignoring special fields\n  _properties;\n  _binaryProperties;\n  // TODO: hierarchy support is only partially implemented and not tested\n  _hierarchy;\n  constructor(json, binary, featureCount, options = {}) {\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n    this._extensions = this.json?.extensions || {};\n    // Copy all top-level property fields from the json object, ignoring special fields\n    this._properties = {};\n    for (const propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n    this._binaryProperties = this._initializeBinaryProperties();\n    // TODO: hierarchy support is only partially implemented and not tested\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n  getExtension(extensionName) {\n    return this.json && this.json.extensions && this.json.extensions[extensionName];\n  }\n  memorySizeInBytes() {\n    return 0;\n  }\n  isClass(batchId, className) {\n    this._checkBatchId(batchId);\n    assert(typeof className === 'string', className);\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      // PERFORMANCE_IDEA : cache results in the ancestor classes\n      //   to speed up this check if this area becomes a hotspot\n      // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n        const classId = hierarchy.classIds[instanceIndex];\n        const instanceClass = hierarchy.classes[classId];\n        return instanceClass.name === className;\n      });\n      return defined(result);\n    }\n    return false;\n  }\n  isExactClass(batchId, className) {\n    assert(typeof className === 'string', className);\n    return this.getExactClassName(batchId) === className;\n  }\n  getExactClassName(batchId) {\n    this._checkBatchId(batchId);\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const classId = this._hierarchy.classIds[batchId];\n      const instanceClass = this._hierarchy.classes[classId];\n      return instanceClass.name;\n    }\n    return undefined;\n  }\n  hasProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n    return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n  }\n  getPropertyNames(batchId, results) {\n    this._checkBatchId(batchId);\n    results = defined(results) ? results : [];\n    results.length = 0;\n    const propertyNames = Object.keys(this._properties);\n    results.push(...propertyNames);\n    if (this._hierarchy) {\n      this._getPropertyNamesInHierarchy(batchId, results);\n    }\n    return results;\n  }\n  getProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (defined(binaryProperty)) {\n        return this._getBinaryProperty(binaryProperty, batchId);\n      }\n    }\n    const propertyValues = this._properties[name];\n    if (defined(propertyValues)) {\n      return clone(propertyValues[batchId], true);\n    }\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n      if (defined(hierarchyProperty)) {\n        return hierarchyProperty;\n      }\n    }\n    return undefined;\n  }\n  setProperty(batchId, name, value) {\n    const featureCount = this.featureCount;\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (binaryProperty) {\n        this._setBinaryProperty(binaryProperty, batchId, value);\n        return;\n      }\n    }\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      if (this._setHierarchyProperty(this, batchId, name, value)) {\n        return;\n      }\n    }\n    let propertyValues = this._properties[name];\n    if (!defined(propertyValues)) {\n      // Property does not exist. Create it.\n      this._properties[name] = new Array(featureCount);\n      propertyValues = this._properties[name];\n    }\n    propertyValues[batchId] = clone(value, true);\n  }\n  // PRIVATE METHODS\n  _checkBatchId(batchId) {\n    const valid = batchId >= 0 && batchId < this.featureCount;\n    if (!valid) {\n      throw new Error('batchId not in range [0, featureCount - 1].');\n    }\n  }\n  _getBinaryProperty(binaryProperty, index) {\n    return binaryProperty.unpack(binaryProperty.typedArray, index);\n  }\n  _setBinaryProperty(binaryProperty, index, value) {\n    binaryProperty.pack(value, binaryProperty.typedArray, index);\n  }\n  _initializeBinaryProperties() {\n    let binaryProperties = null;\n    for (const name in this._properties) {\n      const property = this._properties[name];\n      const binaryProperty = this._initializeBinaryProperty(name, property);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      if (binaryProperty) {\n        binaryProperties = binaryProperties || {};\n        binaryProperties[name] = binaryProperty;\n      }\n    }\n    return binaryProperties;\n  }\n  _initializeBinaryProperty(name, property) {\n    if ('byteOffset' in property) {\n      // This is a binary property\n      const tile3DAccessor = property;\n      assert(this.binary, `Property ${name} requires a batch table binary.`);\n      assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n      const accessor = createTypedArrayFromAccessor(tile3DAccessor, this.binary.buffer, this.binary.byteOffset | 0, this.featureCount);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      return {\n        typedArray: accessor.values,\n        componentCount: accessor.size,\n        unpack: accessor.unpacker,\n        pack: accessor.packer\n      };\n    }\n    return null;\n  }\n  //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n  _hasPropertyInHierarchy(batchId, name) {\n    if (!this._hierarchy) {\n      return false;\n    }\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      return defined(instances[name]);\n    });\n    return defined(result);\n  }\n  _getPropertyNamesInHierarchy(batchId, results) {\n    traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      for (const name in instances) {\n        if (instances.hasOwnProperty(name)) {\n          if (results.indexOf(name) === -1) {\n            results.push(name);\n          }\n        }\n      }\n    });\n  }\n  _getHierarchyProperty(batchId, name) {\n    return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        if (defined(propertyValues.typedArray)) {\n          return this._getBinaryProperty(propertyValues, indexInClass);\n        }\n        return clone(propertyValues[indexInClass], true);\n      }\n      return null;\n    });\n  }\n  _setHierarchyProperty(batchTable, batchId, name, value) {\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n        if (defined(propertyValues.typedArray)) {\n          this._setBinaryProperty(propertyValues, indexInClass, value);\n        } else {\n          propertyValues[indexInClass] = clone(value, true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return defined(result);\n  }\n}","map":{"version":3,"names":["assert","createTypedArrayFromAccessor","initializeHierarchy","traverseHierarchy","defined","x","undefined","clone","y","IGNORED_PROPERTY_FIELDS","HIERARCHY","extensions","extras","Tile3DBatchTableParser","json","binary","featureCount","_extensions","_properties","_binaryProperties","_hierarchy","constructor","options","propertyName","_initializeBinaryProperties","getExtension","extensionName","memorySizeInBytes","isClass","batchId","className","_checkBatchId","result","hierarchy","instanceIndex","classId","classIds","instanceClass","classes","name","isExactClass","getExactClassName","hasProperty","_hasPropertyInHierarchy","getPropertyNames","results","length","propertyNames","Object","keys","push","_getPropertyNamesInHierarchy","getProperty","binaryProperty","_getBinaryProperty","propertyValues","hierarchyProperty","_getHierarchyProperty","setProperty","value","_setBinaryProperty","_setHierarchyProperty","Array","valid","Error","index","unpack","typedArray","pack","binaryProperties","property","_initializeBinaryProperty","tile3DAccessor","type","accessor","buffer","byteOffset","values","componentCount","size","unpacker","packer","instances","hasOwnProperty","indexOf","indexInClass","classIndexes","batchTable"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/classes/tile-3d-batch-table.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { assert } from '@loaders.gl/loader-utils';\nimport { createTypedArrayFromAccessor } from \"./helpers/tile-3d-accessor-utils.js\";\nimport { initializeHierarchy, traverseHierarchy } from \"./tile-3d-batch-table-hierarchy.js\";\nfunction defined(x) {\n    return x !== undefined && x !== null;\n}\nconst clone = (x, y) => x;\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n    HIERARCHY: true, // Deprecated HIERARCHY property\n    extensions: true,\n    extras: true\n};\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n    json;\n    binary;\n    featureCount;\n    _extensions;\n    // Copy all top-level property fields from the json object, ignoring special fields\n    _properties;\n    _binaryProperties;\n    // TODO: hierarchy support is only partially implemented and not tested\n    _hierarchy;\n    constructor(json, binary, featureCount, options = {}) {\n        assert(featureCount >= 0);\n        this.json = json || {};\n        this.binary = binary;\n        this.featureCount = featureCount;\n        this._extensions = this.json?.extensions || {};\n        // Copy all top-level property fields from the json object, ignoring special fields\n        this._properties = {};\n        for (const propertyName in this.json) {\n            if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n                this._properties[propertyName] = this.json[propertyName];\n            }\n        }\n        this._binaryProperties = this._initializeBinaryProperties();\n        // TODO: hierarchy support is only partially implemented and not tested\n        if (options['3DTILES_batch_table_hierarchy']) {\n            this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n        }\n    }\n    getExtension(extensionName) {\n        return this.json && this.json.extensions && this.json.extensions[extensionName];\n    }\n    memorySizeInBytes() {\n        return 0;\n    }\n    isClass(batchId, className) {\n        this._checkBatchId(batchId);\n        assert(typeof className === 'string', className);\n        // extension: 3DTILES_batch_table_hierarchy\n        if (this._hierarchy) {\n            // PERFORMANCE_IDEA : cache results in the ancestor classes\n            //   to speed up this check if this area becomes a hotspot\n            // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n            const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n                const classId = hierarchy.classIds[instanceIndex];\n                const instanceClass = hierarchy.classes[classId];\n                return instanceClass.name === className;\n            });\n            return defined(result);\n        }\n        return false;\n    }\n    isExactClass(batchId, className) {\n        assert(typeof className === 'string', className);\n        return this.getExactClassName(batchId) === className;\n    }\n    getExactClassName(batchId) {\n        this._checkBatchId(batchId);\n        // extension: 3DTILES_batch_table_hierarchy\n        if (this._hierarchy) {\n            const classId = this._hierarchy.classIds[batchId];\n            const instanceClass = this._hierarchy.classes[classId];\n            return instanceClass.name;\n        }\n        return undefined;\n    }\n    hasProperty(batchId, name) {\n        this._checkBatchId(batchId);\n        assert(typeof name === 'string', name);\n        return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n    }\n    getPropertyNames(batchId, results) {\n        this._checkBatchId(batchId);\n        results = defined(results) ? results : [];\n        results.length = 0;\n        const propertyNames = Object.keys(this._properties);\n        results.push(...propertyNames);\n        if (this._hierarchy) {\n            this._getPropertyNamesInHierarchy(batchId, results);\n        }\n        return results;\n    }\n    getProperty(batchId, name) {\n        this._checkBatchId(batchId);\n        assert(typeof name === 'string', name);\n        if (this._binaryProperties) {\n            const binaryProperty = this._binaryProperties[name];\n            if (defined(binaryProperty)) {\n                return this._getBinaryProperty(binaryProperty, batchId);\n            }\n        }\n        const propertyValues = this._properties[name];\n        if (defined(propertyValues)) {\n            return clone(propertyValues[batchId], true);\n        }\n        // EXTENSION: 3DTILES_batch_table_hierarchy\n        if (this._hierarchy) {\n            const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n            if (defined(hierarchyProperty)) {\n                return hierarchyProperty;\n            }\n        }\n        return undefined;\n    }\n    setProperty(batchId, name, value) {\n        const featureCount = this.featureCount;\n        this._checkBatchId(batchId);\n        assert(typeof name === 'string', name);\n        if (this._binaryProperties) {\n            const binaryProperty = this._binaryProperties[name];\n            if (binaryProperty) {\n                this._setBinaryProperty(binaryProperty, batchId, value);\n                return;\n            }\n        }\n        // EXTENSION: 3DTILES_batch_table_hierarchy\n        if (this._hierarchy) {\n            if (this._setHierarchyProperty(this, batchId, name, value)) {\n                return;\n            }\n        }\n        let propertyValues = this._properties[name];\n        if (!defined(propertyValues)) {\n            // Property does not exist. Create it.\n            this._properties[name] = new Array(featureCount);\n            propertyValues = this._properties[name];\n        }\n        propertyValues[batchId] = clone(value, true);\n    }\n    // PRIVATE METHODS\n    _checkBatchId(batchId) {\n        const valid = batchId >= 0 && batchId < this.featureCount;\n        if (!valid) {\n            throw new Error('batchId not in range [0, featureCount - 1].');\n        }\n    }\n    _getBinaryProperty(binaryProperty, index) {\n        return binaryProperty.unpack(binaryProperty.typedArray, index);\n    }\n    _setBinaryProperty(binaryProperty, index, value) {\n        binaryProperty.pack(value, binaryProperty.typedArray, index);\n    }\n    _initializeBinaryProperties() {\n        let binaryProperties = null;\n        for (const name in this._properties) {\n            const property = this._properties[name];\n            const binaryProperty = this._initializeBinaryProperty(name, property);\n            // Store any information needed to access the binary data, including the typed array,\n            // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n            if (binaryProperty) {\n                binaryProperties = binaryProperties || {};\n                binaryProperties[name] = binaryProperty;\n            }\n        }\n        return binaryProperties;\n    }\n    _initializeBinaryProperty(name, property) {\n        if ('byteOffset' in property) {\n            // This is a binary property\n            const tile3DAccessor = property;\n            assert(this.binary, `Property ${name} requires a batch table binary.`);\n            assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n            const accessor = createTypedArrayFromAccessor(tile3DAccessor, this.binary.buffer, this.binary.byteOffset | 0, this.featureCount);\n            // Store any information needed to access the binary data, including the typed array,\n            // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n            return {\n                typedArray: accessor.values,\n                componentCount: accessor.size,\n                unpack: accessor.unpacker,\n                pack: accessor.packer\n            };\n        }\n        return null;\n    }\n    //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n    _hasPropertyInHierarchy(batchId, name) {\n        if (!this._hierarchy) {\n            return false;\n        }\n        const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n            const classId = hierarchy.classIds[instanceIndex];\n            const instances = hierarchy.classes[classId].instances;\n            return defined(instances[name]);\n        });\n        return defined(result);\n    }\n    _getPropertyNamesInHierarchy(batchId, results) {\n        traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n            const classId = hierarchy.classIds[instanceIndex];\n            const instances = hierarchy.classes[classId].instances;\n            for (const name in instances) {\n                if (instances.hasOwnProperty(name)) {\n                    if (results.indexOf(name) === -1) {\n                        results.push(name);\n                    }\n                }\n            }\n        });\n    }\n    _getHierarchyProperty(batchId, name) {\n        return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n            const classId = hierarchy.classIds[instanceIndex];\n            const instanceClass = hierarchy.classes[classId];\n            const indexInClass = hierarchy.classIndexes[instanceIndex];\n            const propertyValues = instanceClass.instances[name];\n            if (defined(propertyValues)) {\n                if (defined(propertyValues.typedArray)) {\n                    return this._getBinaryProperty(propertyValues, indexInClass);\n                }\n                return clone(propertyValues[indexInClass], true);\n            }\n            return null;\n        });\n    }\n    _setHierarchyProperty(batchTable, batchId, name, value) {\n        const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n            const classId = hierarchy.classIds[instanceIndex];\n            const instanceClass = hierarchy.classes[classId];\n            const indexInClass = hierarchy.classIndexes[instanceIndex];\n            const propertyValues = instanceClass.instances[name];\n            if (defined(propertyValues)) {\n                assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n                if (defined(propertyValues.typedArray)) {\n                    this._setBinaryProperty(propertyValues, indexInClass, value);\n                }\n                else {\n                    propertyValues[indexInClass] = clone(value, true);\n                }\n                return true;\n            }\n            return false;\n        });\n        return defined(result);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}