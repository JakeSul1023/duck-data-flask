{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from '@luma.gl/core';\n// import type {ShaderUniformType, UniformValue, UniformFormat, UniformInfoDevice, Texture, Sampler} from '@luma.gl/core';\nimport { getShaderModuleDependencies } from '@luma.gl/shadertools';\nimport { splitUniformsAndBindings } from \"./model/split-uniforms-and-bindings.js\";\n/**\n * ShaderInputs holds uniform and binding values for one or more shader modules,\n * - It can generate binary data for any uniform buffer\n * - It can manage a uniform buffer for each block\n * - It can update managed uniform buffers with a single call\n * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.\n */\nexport class ShaderInputs {\n  options = {\n    disableWarnings: false\n  };\n  /**\n   * The map of modules\n   * @todo should should this include the resolved dependencies?\n   */\n  // @ts-ignore Fix typings\n  modules;\n  /** Stores the uniform values for each module */\n  moduleUniforms;\n  /** Stores the uniform bindings for each module  */\n  moduleBindings;\n  /** Tracks if uniforms have changed */\n  // moduleUniformsChanged: Record<keyof ShaderPropsT, false | string>;\n  /**\n   * Create a new UniformStore instance\n   * @param modules\n   */\n  constructor(\n  // @ts-ignore Fix typings\n  modules, options) {\n    Object.assign(this.options, options);\n    // Extract modules with dependencies\n    const resolvedModules = getShaderModuleDependencies(Object.values(modules).filter(module => module.dependencies));\n    for (const resolvedModule of resolvedModules) {\n      // @ts-ignore\n      modules[resolvedModule.name] = resolvedModule;\n    }\n    log.log(1, 'Creating ShaderInputs with modules', Object.keys(modules))();\n    // Store the module definitions and create storage for uniform values and binding values, per module\n    // @ts-ignore Fix typings\n    this.modules = modules;\n    this.moduleUniforms = {};\n    this.moduleBindings = {};\n    // Initialize the modules\n    for (const [name, module] of Object.entries(modules)) {\n      this._addModule(module);\n      if (module.name && name !== module.name && !this.options.disableWarnings) {\n        log.warn(`Module name: ${name} vs ${module.name}`)();\n      }\n    }\n  }\n  /** Destroy */\n  destroy() {}\n  /**\n   * Set module props\n   */\n  setProps(props) {\n    for (const name of Object.keys(props)) {\n      const moduleName = name;\n      const moduleProps = props[moduleName] || {};\n      const module = this.modules[moduleName];\n      if (!module) {\n        // Ignore props for unregistered modules\n        if (!this.options.disableWarnings) {\n          log.warn(`Module ${name} not found`)();\n        }\n        continue; // eslint-disable-line no-continue\n      }\n      const oldUniforms = this.moduleUniforms[moduleName];\n      const oldBindings = this.moduleBindings[moduleName];\n      const uniformsAndBindings = module.getUniforms?.(moduleProps, oldUniforms) || moduleProps;\n      const {\n        uniforms,\n        bindings\n      } = splitUniformsAndBindings(uniformsAndBindings);\n      this.moduleUniforms[moduleName] = {\n        ...oldUniforms,\n        ...uniforms\n      };\n      this.moduleBindings[moduleName] = {\n        ...oldBindings,\n        ...bindings\n      };\n      // this.moduleUniformsChanged ||= moduleName;\n      // console.log(`setProps(${String(moduleName)}`, moduleName, this.moduleUniforms[moduleName])\n    }\n  }\n  /**\n   * Return the map of modules\n   * @todo should should this include the resolved dependencies?\n   */\n  getModules() {\n    return Object.values(this.modules);\n  }\n  /** Get all uniform values for all modules */\n  getUniformValues() {\n    return this.moduleUniforms;\n  }\n  /** Merges all bindings for the shader (from the various modules) */\n  getBindingValues() {\n    const bindings = {};\n    for (const moduleBindings of Object.values(this.moduleBindings)) {\n      Object.assign(bindings, moduleBindings);\n    }\n    return bindings;\n  }\n  // INTERNAL\n  /** Return a debug table that can be used for console.table() or log.table() */\n  getDebugTable() {\n    const table = {};\n    for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {\n      for (const [key, value] of Object.entries(module)) {\n        table[`${moduleName}.${key}`] = {\n          type: this.modules[moduleName].uniformTypes?.[key],\n          value: String(value)\n        };\n      }\n    }\n    return table;\n  }\n  _addModule(module) {\n    const moduleName = module.name;\n    // Get default uniforms from module\n    this.moduleUniforms[moduleName] = module.defaultUniforms || {};\n    this.moduleBindings[moduleName] = {};\n  }\n}","map":{"version":3,"names":["log","getShaderModuleDependencies","splitUniformsAndBindings","ShaderInputs","options","disableWarnings","modules","moduleUniforms","moduleBindings","constructor","Object","assign","resolvedModules","values","filter","module","dependencies","resolvedModule","name","keys","entries","_addModule","warn","destroy","setProps","props","moduleName","moduleProps","oldUniforms","oldBindings","uniformsAndBindings","getUniforms","uniforms","bindings","getModules","getUniformValues","getBindingValues","getDebugTable","table","key","value","type","uniformTypes","String","defaultUniforms"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\shader-inputs.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Binding, UniformValue} from '@luma.gl/core';\nimport {log} from '@luma.gl/core';\n// import type {ShaderUniformType, UniformValue, UniformFormat, UniformInfoDevice, Texture, Sampler} from '@luma.gl/core';\nimport {getShaderModuleDependencies, ShaderModule} from '@luma.gl/shadertools';\nimport {splitUniformsAndBindings} from './model/split-uniforms-and-bindings';\n\nexport type ShaderInputsOptions = {\n  disableWarnings?: boolean;\n};\n\n/**\n * ShaderInputs holds uniform and binding values for one or more shader modules,\n * - It can generate binary data for any uniform buffer\n * - It can manage a uniform buffer for each block\n * - It can update managed uniform buffers with a single call\n * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.\n */\nexport class ShaderInputs<\n  ShaderPropsT extends Partial<Record<string, Record<string, unknown>>> = Partial<\n    Record<string, Record<string, unknown>>\n  >\n> {\n  options: Required<ShaderInputsOptions> = {\n    disableWarnings: false\n  };\n\n  /**\n   * The map of modules\n   * @todo should should this include the resolved dependencies?\n   */\n  // @ts-ignore Fix typings\n  modules: Readonly<{[P in keyof ShaderPropsT]: ShaderModule<ShaderPropsT[P]>}>;\n\n  /** Stores the uniform values for each module */\n  moduleUniforms: Record<keyof ShaderPropsT, Record<string, UniformValue>>;\n  /** Stores the uniform bindings for each module  */\n  moduleBindings: Record<keyof ShaderPropsT, Record<string, Binding>>;\n  /** Tracks if uniforms have changed */\n  // moduleUniformsChanged: Record<keyof ShaderPropsT, false | string>;\n\n  /**\n   * Create a new UniformStore instance\n   * @param modules\n   */\n  constructor(\n    // @ts-ignore Fix typings\n    modules: {[P in keyof ShaderPropsT]?: ShaderModule<ShaderPropsT[P], any>},\n    options?: ShaderInputsOptions\n  ) {\n    Object.assign(this.options, options);\n\n    // Extract modules with dependencies\n    const resolvedModules = getShaderModuleDependencies(\n      Object.values(modules).filter(module => module.dependencies)\n    );\n    for (const resolvedModule of resolvedModules) {\n      // @ts-ignore\n      modules[resolvedModule.name] = resolvedModule;\n    }\n\n    log.log(1, 'Creating ShaderInputs with modules', Object.keys(modules))();\n\n    // Store the module definitions and create storage for uniform values and binding values, per module\n    // @ts-ignore Fix typings\n    this.modules = modules as {[P in keyof ShaderPropsT]: ShaderModule<ShaderPropsT[P]>};\n    this.moduleUniforms = {} as Record<keyof ShaderPropsT, Record<string, UniformValue>>;\n    this.moduleBindings = {} as Record<keyof ShaderPropsT, Record<string, Binding>>;\n\n    // Initialize the modules\n    for (const [name, module] of Object.entries(modules)) {\n      this._addModule(module);\n      if (module.name && name !== module.name && !this.options.disableWarnings) {\n        log.warn(`Module name: ${name} vs ${module.name}`)();\n      }\n    }\n  }\n\n  /** Destroy */\n  destroy(): void {}\n\n  /**\n   * Set module props\n   */\n  setProps(props: Partial<{[P in keyof ShaderPropsT]?: Partial<ShaderPropsT[P]>}>): void {\n    for (const name of Object.keys(props)) {\n      const moduleName = name as keyof ShaderPropsT;\n      const moduleProps = props[moduleName] || {};\n      const module = this.modules[moduleName];\n      if (!module) {\n        // Ignore props for unregistered modules\n        if (!this.options.disableWarnings) {\n          log.warn(`Module ${name} not found`)();\n        }\n        continue; // eslint-disable-line no-continue\n      }\n\n      const oldUniforms = this.moduleUniforms[moduleName] as (typeof module)['uniforms'];\n      const oldBindings = this.moduleBindings[moduleName];\n      const uniformsAndBindings =\n        module.getUniforms?.(moduleProps, oldUniforms) || (moduleProps as any);\n\n      const {uniforms, bindings} = splitUniformsAndBindings(uniformsAndBindings);\n      this.moduleUniforms[moduleName] = {...oldUniforms, ...uniforms};\n      this.moduleBindings[moduleName] = {...oldBindings, ...bindings};\n      // this.moduleUniformsChanged ||= moduleName;\n\n      // console.log(`setProps(${String(moduleName)}`, moduleName, this.moduleUniforms[moduleName])\n    }\n  }\n\n  /**\n   * Return the map of modules\n   * @todo should should this include the resolved dependencies?\n   */\n  getModules(): ShaderModule[] {\n    return Object.values(this.modules);\n  }\n\n  /** Get all uniform values for all modules */\n  getUniformValues(): Partial<Record<keyof ShaderPropsT, Record<string, UniformValue>>> {\n    return this.moduleUniforms;\n  }\n\n  /** Merges all bindings for the shader (from the various modules) */\n  getBindingValues(): Record<string, Binding> {\n    const bindings = {} as Record<string, Binding>;\n    for (const moduleBindings of Object.values(this.moduleBindings)) {\n      Object.assign(bindings, moduleBindings);\n    }\n    return bindings;\n  }\n\n  // INTERNAL\n\n  /** Return a debug table that can be used for console.table() or log.table() */\n  getDebugTable(): Record<string, Record<string, unknown>> {\n    const table: Record<string, Record<string, unknown>> = {};\n    for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {\n      for (const [key, value] of Object.entries(module)) {\n        table[`${moduleName}.${key}`] = {\n          type: this.modules[moduleName].uniformTypes?.[key as keyof ShaderPropsT],\n          value: String(value)\n        };\n      }\n    }\n    return table;\n  }\n\n  _addModule(module: ShaderModule): void {\n    const moduleName = module.name as keyof ShaderPropsT;\n    // Get default uniforms from module\n    this.moduleUniforms[moduleName] = module.defaultUniforms || {};\n    this.moduleBindings[moduleName] = {};\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}