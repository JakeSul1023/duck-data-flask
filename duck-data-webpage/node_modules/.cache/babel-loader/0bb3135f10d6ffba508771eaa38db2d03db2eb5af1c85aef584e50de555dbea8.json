{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Helper class for using the legacy picking module\n */\nexport class LegacyPickingManager {\n  device;\n  framebuffer = null;\n  shaderInputs;\n  constructor(device, shaderInputs) {\n    this.device = device;\n    this.shaderInputs = shaderInputs;\n  }\n  destroy() {\n    this.framebuffer?.destroy();\n  }\n  getFramebuffer() {\n    if (!this.framebuffer) {\n      this.framebuffer = this.device.createFramebuffer({\n        colorAttachments: ['rgba8unorm'],\n        depthStencilAttachment: 'depth24plus'\n      });\n    }\n    return this.framebuffer;\n  }\n  /** Clear highlighted / picked object */\n  clearPickState() {\n    this.shaderInputs.setProps({\n      picking: {\n        highlightedObjectColor: null\n      }\n    });\n  }\n  /** Prepare for rendering picking colors */\n  beginRenderPass() {\n    const framebuffer = this.getFramebuffer();\n    framebuffer.resize(this.device.getCanvasContext().getPixelSize());\n    this.shaderInputs.setProps({\n      picking: {\n        isActive: true\n      }\n    });\n    const pickingPass = this.device.beginRenderPass({\n      framebuffer,\n      clearColor: [0, 0, 0, 0],\n      clearDepth: 1\n    });\n    return pickingPass;\n  }\n  updatePickState(mousePosition) {\n    const framebuffer = this.getFramebuffer();\n    // use the center pixel location in device pixel range\n    const [pickX, pickY] = this.getPickPosition(mousePosition);\n    // Read back\n    const color255 = this.device.readPixelsToArrayWebGL(framebuffer, {\n      sourceX: pickX,\n      sourceY: pickY,\n      sourceWidth: 1,\n      sourceHeight: 1\n    });\n    // console.log(color255);\n    // Check if we have\n    let highlightedObjectColor = [...color255].map(x => x / 255);\n    const isHighlightActive = highlightedObjectColor[0] + highlightedObjectColor[1] + highlightedObjectColor[2] > 0;\n    if (!isHighlightActive) {\n      highlightedObjectColor = null;\n    }\n    this.shaderInputs.setProps({\n      picking: {\n        isActive: false,\n        highlightedObjectColor\n      }\n    });\n  }\n  /**\n   * Get pick position in device pixel range\n   * use the center pixel location in device pixel range\n   */\n  getPickPosition(mousePosition) {\n    const devicePixels = this.device.getCanvasContext().cssToDevicePixels(mousePosition);\n    const pickX = devicePixels.x + Math.floor(devicePixels.width / 2);\n    const pickY = devicePixels.y + Math.floor(devicePixels.height / 2);\n    return [pickX, pickY];\n  }\n}\n//# sourceMappingURL=legacy-picking-manager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}