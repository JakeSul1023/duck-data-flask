{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ScenegraphNode } from \"./scenegraph-node.js\";\nexport class ModelNode extends ScenegraphNode {\n  model;\n  bounds = null;\n  managedResources;\n  // TODO - is this used? override callbacks to make sure we call them with this\n  // onBeforeRender = null;\n  // onAfterRender = null;\n  // AfterRender = null;\n  constructor(props) {\n    super(props);\n    // Create new Model or used supplied Model\n    this.model = props.model;\n    this.managedResources = props.managedResources || [];\n    this.bounds = props.bounds || null;\n    this.setProps(props);\n  }\n  destroy() {\n    if (this.model) {\n      this.model.destroy();\n      // @ts-expect-error\n      this.model = null;\n    }\n    this.managedResources.forEach(resource => resource.destroy());\n    this.managedResources = [];\n  }\n  getBounds() {\n    return this.bounds;\n  }\n  // Expose model methods\n  draw(renderPass) {\n    // Return value indicates if something was actually drawn\n    return this.model.draw(renderPass);\n  }\n}","map":{"version":3,"names":["ScenegraphNode","ModelNode","model","bounds","managedResources","constructor","props","setProps","destroy","forEach","resource","getBounds","draw","renderPass"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\scenegraph\\model-node.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {RenderPass} from '@luma.gl/core';\nimport {ScenegraphNode, ScenegraphNodeProps} from './scenegraph-node';\nimport {Model} from '../model/model';\n\nexport type ModelNodeProps = ScenegraphNodeProps & {\n  model: Model;\n  managedResources?: any[];\n  bounds?: [number[], number[]];\n};\n\nexport class ModelNode extends ScenegraphNode {\n  readonly model: Model;\n  bounds: [number[], number[]] | null = null;\n  managedResources: any[];\n\n  // TODO - is this used? override callbacks to make sure we call them with this\n  // onBeforeRender = null;\n  // onAfterRender = null;\n  // AfterRender = null;\n\n  constructor(props: ModelNodeProps) {\n    super(props);\n\n    // Create new Model or used supplied Model\n    this.model = props.model;\n    this.managedResources = props.managedResources || [];\n    this.bounds = props.bounds || null;\n    this.setProps(props);\n  }\n\n  override destroy(): void {\n    if (this.model) {\n      this.model.destroy();\n      // @ts-expect-error\n      this.model = null;\n    }\n    this.managedResources.forEach(resource => resource.destroy());\n    this.managedResources = [];\n  }\n\n  override getBounds(): [number[], number[]] | null {\n    return this.bounds;\n  }\n\n  // Expose model methods\n  draw(renderPass: RenderPass) {\n    // Return value indicates if something was actually drawn\n    return this.model.draw(renderPass);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,cAAc,QAAsB;AAS5C,OAAM,MAAOC,SAAU,SAAQD,cAAc;EAClCE,KAAK;EACdC,MAAM,GAAgC,IAAI;EAC1CC,gBAAgB;EAEhB;EACA;EACA;EACA;EAEAC,YAAYC,KAAqB;IAC/B,KAAK,CAACA,KAAK,CAAC;IAEZ;IACA,IAAI,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK;IACxB,IAAI,CAACE,gBAAgB,GAAGE,KAAK,CAACF,gBAAgB,IAAI,EAAE;IACpD,IAAI,CAACD,MAAM,GAAGG,KAAK,CAACH,MAAM,IAAI,IAAI;IAClC,IAAI,CAACI,QAAQ,CAACD,KAAK,CAAC;EACtB;EAESE,OAAOA,CAAA;IACd,IAAI,IAAI,CAACN,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACM,OAAO,EAAE;MACpB;MACA,IAAI,CAACN,KAAK,GAAG,IAAI;IACnB;IACA,IAAI,CAACE,gBAAgB,CAACK,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACF,OAAO,EAAE,CAAC;IAC7D,IAAI,CAACJ,gBAAgB,GAAG,EAAE;EAC5B;EAESO,SAASA,CAAA;IAChB,OAAO,IAAI,CAACR,MAAM;EACpB;EAEA;EACAS,IAAIA,CAACC,UAAsB;IACzB;IACA,OAAO,IAAI,CAACX,KAAK,CAACU,IAAI,CAACC,UAAU,CAAC;EACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}