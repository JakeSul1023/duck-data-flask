{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { VERSION } from \"./lib/utils/version.js\";\nimport { parseCompressedTexture } from \"./lib/parsers/parse-compressed-texture.js\";\nimport { parseBasis } from \"./lib/parsers/parse-basis.js\";\n/**\n * Worker Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureWorkerLoader = {\n  dataType: null,\n  batchType: null,\n  name: 'Texture Containers',\n  id: 'compressed-texture',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: ['ktx', 'ktx2', 'dds',\n  // WEBGL_compressed_texture_s3tc, WEBGL_compressed_texture_atc\n  'pvr' // WEBGL_compressed_texture_pvrtc\n  ],\n  mimeTypes: ['image/ktx2', 'image/ktx', 'image/vnd-ms.dds', 'image/x-dds', 'application/octet-stream'],\n  binary: true,\n  options: {\n    'compressed-texture': {\n      libraryPath: 'libs/',\n      useBasis: false\n    }\n  }\n};\n/**\n * Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureLoader = {\n  ...CompressedTextureWorkerLoader,\n  parse: async (arrayBuffer, options) => {\n    if (options?.['compressed-texture']?.useBasis) {\n      // @ts-expect-error TODO not allowed to modify inputs\n      options.basis = {\n        format: {\n          alpha: 'BC3',\n          noAlpha: 'BC1'\n        },\n        // @ts-expect-error TODO not allowed to modify inputs\n        ...options.basis,\n        containerFormat: 'ktx2',\n        module: 'encoder'\n      };\n      const result = await parseBasis(arrayBuffer, options);\n      return result[0];\n    }\n    return parseCompressedTexture(arrayBuffer);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}