{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Check is an array is a typed array\n * @param value value to be tested\n * @returns input with type narrowed to TypedArray, or null\n */\nexport function isTypedArray(value) {\n  return ArrayBuffer.isView(value) && !(value instanceof DataView);\n}\n/**\n * Check is an array is an array of numbers)\n * @param value value to be tested\n * @returns input with type narrowed to NumberArray, or null\n */\nexport function isNumberArray(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0 || typeof value[0] === 'number';\n  }\n  return false;\n}\n/**\n * Check is an array is a numeric array (typed array or array of numbers)\n * @param value value to be tested\n * @returns input with type narrowed to NumericArray, or null\n */\nexport function isNumericArray(value) {\n  return isTypedArray(value) || isNumberArray(value);\n}","map":{"version":3,"names":["isTypedArray","value","ArrayBuffer","isView","DataView","isNumberArray","Array","isArray","length","isNumericArray"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\types\\src\\is-array.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {TypedArray, NumericArray, NumberArray} from './array-types';\n\n/**\n * Check is an array is a typed array\n * @param value value to be tested\n * @returns input with type narrowed to TypedArray, or null\n */\nexport function isTypedArray(value: unknown): value is TypedArray {\n  return ArrayBuffer.isView(value) && !(value instanceof DataView);\n}\n\n/**\n * Check is an array is an array of numbers)\n * @param value value to be tested\n * @returns input with type narrowed to NumberArray, or null\n */\nexport function isNumberArray(value: unknown): value is NumberArray {\n  if (Array.isArray(value)) {\n    return value.length === 0 || typeof value[0] === 'number';\n  }\n  return false;\n}\n\n/**\n * Check is an array is a numeric array (typed array or array of numbers)\n * @param value value to be tested\n * @returns input with type narrowed to NumericArray, or null\n */\nexport function isNumericArray(value: unknown): value is NumericArray {\n  return isTypedArray(value) || isNumberArray(value);\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;;;;;AAKA,OAAM,SAAUA,YAAYA,CAACC,KAAc;EACzC,OAAOC,WAAW,CAACC,MAAM,CAACF,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYG,QAAQ,CAAC;AAClE;AAEA;;;;;AAKA,OAAM,SAAUC,aAAaA,CAACJ,KAAc;EAC1C,IAAIK,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;IACxB,OAAOA,KAAK,CAACO,MAAM,KAAK,CAAC,IAAI,OAAOP,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ;EAC3D;EACA,OAAO,KAAK;AACd;AAEA;;;;;AAKA,OAAM,SAAUQ,cAAcA,CAACR,KAAc;EAC3C,OAAOD,YAAY,CAACC,KAAK,CAAC,IAAII,aAAa,CAACJ,KAAK,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}