{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport View from \"./view.js\";\nimport OrbitViewport from \"../viewports/orbit-viewport.js\";\nimport OrbitController from \"../controllers/orbit-controller.js\";\nclass OrbitView extends View {\n  constructor(props = {}) {\n    super(props);\n    this.props.orbitAxis = props.orbitAxis || 'Z';\n  }\n  getViewportType() {\n    return OrbitViewport;\n  }\n  get ControllerType() {\n    return OrbitController;\n  }\n}\nOrbitView.displayName = 'OrbitView';\nexport default OrbitView;","map":{"version":3,"names":["View","OrbitViewport","OrbitController","OrbitView","constructor","props","orbitAxis","getViewportType","ControllerType","displayName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\views\\orbit-view.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport View, {CommonViewState, CommonViewProps} from './view';\nimport OrbitViewport from '../viewports/orbit-viewport';\nimport OrbitController from '../controllers/orbit-controller';\n\nexport type OrbitViewState = {\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target: [number, number, number];\n  /** The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large. Default `0`. */\n  zoom: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationOrbit?: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationX?: number;\n  /** The min zoom level of the viewport. Default `-Infinity`. */\n  minZoom?: number;\n  /** The max zoom level of the viewport. Default `Infinity`. */\n  maxZoom?: number;\n  /** The min rotating angle around X axis. Default `-90`. */\n  minRotationX?: number;\n  /** The max rotating angle around X axis. Default `90`. */\n  maxRotationX?: number;\n} & CommonViewState;\n\nexport type OrbitViewProps = {\n  /** Axis with 360 degrees rotating freedom, either `'Y'` or `'Z'`, default to `'Z'`. */\n  orbitAxis?: 'Y' | 'Z';\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Field of view covered by camera, in the perspective case. In degrees. Default `50`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to create an orthographic or perspective projection matrix. Default is `false` (perspective projection). */\n  orthographic?: boolean;\n} & CommonViewProps<OrbitViewState>;\n\nexport default class OrbitView extends View<OrbitViewState, OrbitViewProps> {\n  static displayName = 'OrbitView';\n\n  constructor(props: OrbitViewProps = {}) {\n    super(props);\n    this.props.orbitAxis = props.orbitAxis || 'Z';\n  }\n\n  getViewportType() {\n    return OrbitViewport;\n  }\n\n  get ControllerType() {\n    return OrbitController;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,IAAwC;AAC/C,OAAOC,aAAa;AACpB,OAAOC,eAAe;AAoCtB,MAAqBC,SAAU,SAAQH,IAAoC;EAGzEI,YAAYC,KAAA,GAAwB,EAAE;IACpC,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACA,KAAK,CAACC,SAAS,GAAGD,KAAK,CAACC,SAAS,IAAI,GAAG;EAC/C;EAEAC,eAAeA,CAAA;IACb,OAAON,aAAa;EACtB;EAEA,IAAIO,cAAcA,CAAA;IAChB,OAAON,eAAe;EACxB;;AAbOC,SAAA,CAAAM,WAAW,GAAG,WAAW;eADbN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}