{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isResponse, isBlob } from \"../../javascript-utils/is-type.js\";\nimport { parseMIMEType, parseMIMETypeFromURL } from \"./mime-type-utils.js\";\nimport { stripQueryString } from \"./url-utils.js\";\n/**\n * Returns the URL associated with this resource.\n * The returned value may include a query string and need further processing.\n * If it cannot determine url, the corresponding value will be an empty string\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrl(resource) {\n  // If resource is a `Response`, it contains the information directly as a field\n  if (isResponse(resource)) {\n    const response = resource;\n    return response.url;\n  }\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    const blob = resource;\n    // File objects have a \"name\" property. Blob objects don't have any\n    // url (name) information\n    return blob.name || '';\n  }\n  if (typeof resource === 'string') {\n    return resource;\n  }\n  // Unknown\n  return '';\n}\n/**\n * Returns the URL associated with this resource.\n * The returned value may include a query string and need further processing.\n * If it cannot determine url, the corresponding value will be an empty string\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceMIMEType(resource) {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const response = resource;\n    const contentTypeHeader = response.headers.get('content-type') || '';\n    const noQueryUrl = stripQueryString(response.url);\n    return parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(noQueryUrl);\n  }\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    const blob = resource;\n    return blob.type || '';\n  }\n  if (typeof resource === 'string') {\n    return parseMIMETypeFromURL(resource);\n  }\n  // Unknown\n  return '';\n}\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    const response = resource;\n    return response.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    const blob = resource;\n    return blob.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}","map":{"version":3,"names":["isResponse","isBlob","parseMIMEType","parseMIMETypeFromURL","stripQueryString","getResourceUrl","resource","response","url","blob","name","getResourceMIMEType","contentTypeHeader","headers","get","noQueryUrl","type","getResourceContentLength","size","length","ArrayBuffer","byteLength","isView"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isResponse, isBlob } from \"../../javascript-utils/is-type.js\";\nimport { parseMIMEType, parseMIMETypeFromURL } from \"./mime-type-utils.js\";\nimport { stripQueryString } from \"./url-utils.js\";\n/**\n * Returns the URL associated with this resource.\n * The returned value may include a query string and need further processing.\n * If it cannot determine url, the corresponding value will be an empty string\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrl(resource) {\n    // If resource is a `Response`, it contains the information directly as a field\n    if (isResponse(resource)) {\n        const response = resource;\n        return response.url;\n    }\n    // If the resource is a Blob or a File (subclass of Blob)\n    if (isBlob(resource)) {\n        const blob = resource;\n        // File objects have a \"name\" property. Blob objects don't have any\n        // url (name) information\n        return blob.name || '';\n    }\n    if (typeof resource === 'string') {\n        return resource;\n    }\n    // Unknown\n    return '';\n}\n/**\n * Returns the URL associated with this resource.\n * The returned value may include a query string and need further processing.\n * If it cannot determine url, the corresponding value will be an empty string\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceMIMEType(resource) {\n    // If resource is a response, it contains the information directly\n    if (isResponse(resource)) {\n        const response = resource;\n        const contentTypeHeader = response.headers.get('content-type') || '';\n        const noQueryUrl = stripQueryString(response.url);\n        return parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(noQueryUrl);\n    }\n    // If the resource is a Blob or a File (subclass of Blob)\n    if (isBlob(resource)) {\n        const blob = resource;\n        return blob.type || '';\n    }\n    if (typeof resource === 'string') {\n        return parseMIMETypeFromURL(resource);\n    }\n    // Unknown\n    return '';\n}\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource) {\n    if (isResponse(resource)) {\n        const response = resource;\n        return response.headers['content-length'] || -1;\n    }\n    if (isBlob(resource)) {\n        const blob = resource;\n        return blob.size;\n    }\n    if (typeof resource === 'string') {\n        // TODO - handle data URL?\n        return resource.length;\n    }\n    if (resource instanceof ArrayBuffer) {\n        return resource.byteLength;\n    }\n    if (ArrayBuffer.isView(resource)) {\n        return resource.byteLength;\n    }\n    return -1;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,UAAU,EAAEC,MAAM,QAAQ,mCAAmC;AACtE,SAASC,aAAa,EAAEC,oBAAoB,QAAQ,sBAAsB;AAC1E,SAASC,gBAAgB,QAAQ,gBAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,QAAQ,EAAE;EACrC;EACA,IAAIN,UAAU,CAACM,QAAQ,CAAC,EAAE;IACtB,MAAMC,QAAQ,GAAGD,QAAQ;IACzB,OAAOC,QAAQ,CAACC,GAAG;EACvB;EACA;EACA,IAAIP,MAAM,CAACK,QAAQ,CAAC,EAAE;IAClB,MAAMG,IAAI,GAAGH,QAAQ;IACrB;IACA;IACA,OAAOG,IAAI,CAACC,IAAI,IAAI,EAAE;EAC1B;EACA,IAAI,OAAOJ,QAAQ,KAAK,QAAQ,EAAE;IAC9B,OAAOA,QAAQ;EACnB;EACA;EACA,OAAO,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,mBAAmBA,CAACL,QAAQ,EAAE;EAC1C;EACA,IAAIN,UAAU,CAACM,QAAQ,CAAC,EAAE;IACtB,MAAMC,QAAQ,GAAGD,QAAQ;IACzB,MAAMM,iBAAiB,GAAGL,QAAQ,CAACM,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE;IACpE,MAAMC,UAAU,GAAGX,gBAAgB,CAACG,QAAQ,CAACC,GAAG,CAAC;IACjD,OAAON,aAAa,CAACU,iBAAiB,CAAC,IAAIT,oBAAoB,CAACY,UAAU,CAAC;EAC/E;EACA;EACA,IAAId,MAAM,CAACK,QAAQ,CAAC,EAAE;IAClB,MAAMG,IAAI,GAAGH,QAAQ;IACrB,OAAOG,IAAI,CAACO,IAAI,IAAI,EAAE;EAC1B;EACA,IAAI,OAAOV,QAAQ,KAAK,QAAQ,EAAE;IAC9B,OAAOH,oBAAoB,CAACG,QAAQ,CAAC;EACzC;EACA;EACA,OAAO,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,wBAAwBA,CAACX,QAAQ,EAAE;EAC/C,IAAIN,UAAU,CAACM,QAAQ,CAAC,EAAE;IACtB,MAAMC,QAAQ,GAAGD,QAAQ;IACzB,OAAOC,QAAQ,CAACM,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;EACnD;EACA,IAAIZ,MAAM,CAACK,QAAQ,CAAC,EAAE;IAClB,MAAMG,IAAI,GAAGH,QAAQ;IACrB,OAAOG,IAAI,CAACS,IAAI;EACpB;EACA,IAAI,OAAOZ,QAAQ,KAAK,QAAQ,EAAE;IAC9B;IACA,OAAOA,QAAQ,CAACa,MAAM;EAC1B;EACA,IAAIb,QAAQ,YAAYc,WAAW,EAAE;IACjC,OAAOd,QAAQ,CAACe,UAAU;EAC9B;EACA,IAAID,WAAW,CAACE,MAAM,CAAChB,QAAQ,CAAC,EAAE;IAC9B,OAAOA,QAAQ,CAACe,UAAU;EAC9B;EACA,OAAO,CAAC,CAAC;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}