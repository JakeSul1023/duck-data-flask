{"ast":null,"code":"import { ZipFileSystem } from \"./zip-filesystem.js\";\n/**\n * Abstract class for fetching indexed archive formats (SLPK, 3TZ). Those types of zip archive has\n * a hash file inside that allows to increase reading speed\n */\nexport class IndexedArchive {\n  fileProvider;\n  fileName;\n  /**\n   * Constructor\n   * @param fileProvider - instance of a binary data reader\n   * @param hashTable - pre-loaded hashTable. If presented, getFile will skip reading the hash file\n   * @param fileName - name of the archive. It is used to add to an URL of a loader context\n   */\n  constructor(fileProvider, hashTable, fileName) {\n    this.fileProvider = fileProvider;\n    this.fileName = fileName;\n  }\n  /**\n   * Get file as from order ZIP arhive without using the hash file\n   * @param filename - path to the internal file\n   * @returns\n   */\n  async getFileWithoutHash(filename) {\n    const zipFS = new ZipFileSystem(this.fileProvider);\n    const response = await zipFS.fetch(filename);\n    return await response.arrayBuffer();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}