{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { project } from '@deck.gl/core';\nconst uniformBlock = /* glsl */`\\\nuniform maskUniforms {\n  vec4 bounds;\n  highp int channel;\n  bool enabled;\n  bool inverted;\n  bool maskByInstance;\n} mask;\n`;\nconst vertex = /* glsl */`\nvec2 mask_getCoords(vec4 position) {\n  return (position.xy - mask.bounds.xy) / (mask.bounds.zw - mask.bounds.xy);\n}\n`;\nconst vs = `\n${uniformBlock}\n${vertex}\n`;\nconst fragment = /* glsl */`\nuniform sampler2D mask_texture;\n\nbool mask_isInBounds(vec2 texCoords) {\n  if (!mask.enabled) {\n    return true;\n  }\n  vec4 maskColor = texture(mask_texture, texCoords);\n  float maskValue = 1.0;\n  if (mask.channel == 0) {\n    maskValue = maskColor.r;\n  } else if (mask.channel == 1) {\n    maskValue = maskColor.g;\n  } else if (mask.channel == 2) {\n    maskValue = maskColor.b;\n  } else if (mask.channel == 3) {\n    maskValue = maskColor.a;\n  }\n\n  if (mask.inverted) {\n    return maskValue >= 0.5;\n  } else {\n    return maskValue < 0.5;\n  }\n}\n`;\nconst fs = `\n${uniformBlock}\n${fragment}\n`;\nconst inject = {\n  'vs:#decl': /* glsl */`\nout vec2 mask_texCoords;\n`,\n  'vs:#main-end': /* glsl */`\n   vec4 mask_common_position;\n   if (mask.maskByInstance) {\n     mask_common_position = project_position(vec4(geometry.worldPosition, 1.0));\n   } else {\n     mask_common_position = geometry.position;\n   }\n   mask_texCoords = mask_getCoords(mask_common_position);\n`,\n  'fs:#decl': /* glsl */`\nin vec2 mask_texCoords;\n`,\n  'fs:#main-start': /* glsl */`\n  if (mask.enabled) {\n    bool mask = mask_isInBounds(mask_texCoords);\n\n    // Debug: show extent of render target\n    // fragColor = vec4(mask_texCoords, 0.0, 1.0);\n    // fragColor = texture(mask_texture, mask_texCoords);\n\n    if (!mask) discard;\n  }\n`\n};\n/* eslint-disable camelcase */\nconst getMaskUniforms = opts => {\n  if (opts && 'maskMap' in opts) {\n    return {\n      mask_texture: opts.maskMap\n    };\n  }\n  return opts || {};\n};\nexport default {\n  name: 'mask',\n  dependencies: [project],\n  vs,\n  fs,\n  inject,\n  getUniforms: getMaskUniforms,\n  uniformTypes: {\n    bounds: 'vec4<f32>',\n    channel: 'i32',\n    enabled: 'i32',\n    inverted: 'i32',\n    maskByInstance: 'i32'\n  }\n};\n//# sourceMappingURL=shader-module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}