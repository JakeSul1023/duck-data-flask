{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { decodeTextureFormat } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nimport { getWebGLExtension } from \"../../context/helpers/webgl-extensions.js\";\nimport { getGLFromVertexType } from \"./vertex-formats.js\";\n/* eslint-disable camelcase */\n// TEXTURE FEATURES\n// Define local webgl extension strings to optimize minification\nconst X_S3TC = 'WEBGL_compressed_texture_s3tc'; // BC1, BC2, BC3\nconst X_S3TC_SRGB = 'WEBGL_compressed_texture_s3tc_srgb'; // BC1, BC2, BC3\nconst X_RGTC = 'EXT_texture_compression_rgtc'; // BC4, BC5\nconst X_BPTC = 'EXT_texture_compression_bptc'; // BC6, BC7\nconst X_ETC2 = 'WEBGL_compressed_texture_etc'; // Renamed from 'WEBGL_compressed_texture_es3'\nconst X_ASTC = 'WEBGL_compressed_texture_astc';\nconst X_ETC1 = 'WEBGL_compressed_texture_etc1';\nconst X_PVRTC = 'WEBGL_compressed_texture_pvrtc';\nconst X_ATC = 'WEBGL_compressed_texture_atc';\n// Define local webgl extension strings to optimize minification\nconst EXT_texture_norm16 = 'EXT_texture_norm16';\nconst EXT_render_snorm = 'EXT_render_snorm';\nconst EXT_color_buffer_float = 'EXT_color_buffer_float';\n// prettier-ignore\nexport const TEXTURE_FEATURES = {\n  'float32-renderable-webgl': ['EXT_color_buffer_float'],\n  'float16-renderable-webgl': ['EXT_color_buffer_half_float'],\n  'rgb9e5ufloat-renderable-webgl': ['WEBGL_render_shared_exponent'],\n  'snorm8-renderable-webgl': [EXT_render_snorm],\n  'norm16-renderable-webgl': [EXT_texture_norm16],\n  'snorm16-renderable-webgl': [EXT_texture_norm16, EXT_render_snorm],\n  'float32-filterable': ['OES_texture_float_linear'],\n  'float16-filterable-webgl': ['OES_texture_half_float_linear'],\n  'texture-filterable-anisotropic-webgl': ['EXT_texture_filter_anisotropic'],\n  'texture-blend-float-webgl': ['EXT_float_blend'],\n  'texture-compression-bc': [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],\n  // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],\n  // 'texture-compression-bc3-webgl': [X_S3TC],\n  'texture-compression-bc5-webgl': [X_RGTC],\n  'texture-compression-bc7-webgl': [X_BPTC],\n  'texture-compression-etc2': [X_ETC2],\n  'texture-compression-astc': [X_ASTC],\n  'texture-compression-etc1-webgl': [X_ETC1],\n  'texture-compression-pvrtc-webgl': [X_PVRTC],\n  'texture-compression-atc-webgl': [X_ATC]\n};\nexport function isTextureFeature(feature) {\n  return feature in TEXTURE_FEATURES;\n}\n/** Checks a texture feature (for Device.features). Mainly compressed texture support */\nexport function checkTextureFeature(gl, feature, extensions) {\n  const textureExtensions = TEXTURE_FEATURES[feature] || [];\n  return textureExtensions.every(extension => getWebGLExtension(gl, extension, extensions));\n}\n// TABLES\n/**\n * Texture format data -\n * Exported but can change without notice\n */\n// prettier-ignore\nexport const WEBGL_TEXTURE_FORMATS = {\n  // 8-bit formats\n  'r8unorm': {\n    gl: 33321,\n    rb: true\n  },\n  'r8snorm': {\n    gl: 36756\n  },\n  'r8uint': {\n    gl: 33330,\n    rb: true\n  },\n  'r8sint': {\n    gl: 33329,\n    rb: true\n  },\n  // 16-bit formats\n  'rg8unorm': {\n    gl: 33323,\n    rb: true\n  },\n  'rg8snorm': {\n    gl: 36757\n  },\n  'rg8uint': {\n    gl: 33336,\n    rb: true\n  },\n  'rg8sint': {\n    gl: 33335,\n    rb: true\n  },\n  'r16uint': {\n    gl: 33332,\n    rb: true\n  },\n  'r16sint': {\n    gl: 33331,\n    rb: true\n  },\n  'r16float': {\n    gl: 33325,\n    rb: true\n  },\n  'r16unorm-webgl': {\n    gl: 33322,\n    rb: true\n  },\n  'r16snorm-webgl': {\n    gl: 36760\n  },\n  // Packed 16-bit formats\n  'rgba4unorm-webgl': {\n    gl: 32854,\n    rb: true\n  },\n  'rgb565unorm-webgl': {\n    gl: 36194,\n    rb: true\n  },\n  'rgb5a1unorm-webgl': {\n    gl: 32855,\n    rb: true\n  },\n  // 24-bit formats\n  'rgb8unorm-webgl': {\n    gl: 32849\n  },\n  'rgb8snorm-webgl': {\n    gl: 36758\n  },\n  // 32-bit formats  \n  'rgba8unorm': {\n    gl: 32856\n  },\n  'rgba8unorm-srgb': {\n    gl: 35907\n  },\n  'rgba8snorm': {\n    gl: 36759\n  },\n  'rgba8uint': {\n    gl: 36220\n  },\n  'rgba8sint': {\n    gl: 36238\n  },\n  // reverse colors, webgpu only\n  'bgra8unorm': {},\n  'bgra8unorm-srgb': {},\n  'rg16uint': {\n    gl: 33338\n  },\n  'rg16sint': {\n    gl: 33337\n  },\n  'rg16float': {\n    gl: 33327,\n    rb: true\n  },\n  'rg16unorm-webgl': {\n    gl: 33324\n  },\n  'rg16snorm-webgl': {\n    gl: 36761\n  },\n  'r32uint': {\n    gl: 33334,\n    rb: true\n  },\n  'r32sint': {\n    gl: 33333,\n    rb: true\n  },\n  'r32float': {\n    gl: 33326\n  },\n  // Packed 32-bit formats\n  'rgb9e5ufloat': {\n    gl: 35901\n  },\n  // , filter: true},\n  'rg11b10ufloat': {\n    gl: 35898,\n    rb: true\n  },\n  'rgb10a2unorm': {\n    gl: 32857,\n    rb: true\n  },\n  'rgb10a2uint-webgl': {\n    gl: 36975,\n    rb: true\n  },\n  // 48-bit formats\n  'rgb16unorm-webgl': {\n    gl: 32852\n  },\n  // rgb not renderable\n  'rgb16snorm-webgl': {\n    gl: 36762\n  },\n  // rgb not renderable\n  // 64-bit formats\n  'rg32uint': {\n    gl: 33340,\n    rb: true\n  },\n  'rg32sint': {\n    gl: 33339,\n    rb: true\n  },\n  'rg32float': {\n    gl: 33328,\n    rb: true\n  },\n  'rgba16uint': {\n    gl: 36214,\n    rb: true\n  },\n  'rgba16sint': {\n    gl: 36232,\n    rb: true\n  },\n  'rgba16float': {\n    gl: 34842\n  },\n  'rgba16unorm-webgl': {\n    gl: 32859,\n    rb: true\n  },\n  'rgba16snorm-webgl': {\n    gl: 36763\n  },\n  // 96-bit formats (deprecated!)\n  'rgb32float-webgl': {\n    gl: 34837,\n    x: EXT_color_buffer_float,\n    dataFormat: 6407,\n    types: [5126]\n  },\n  // 128-bit formats\n  'rgba32uint': {\n    gl: 36208,\n    rb: true\n  },\n  'rgba32sint': {\n    gl: 36226,\n    rb: true\n  },\n  'rgba32float': {\n    gl: 34836,\n    rb: true\n  },\n  // Depth and stencil formats\n  'stencil8': {\n    gl: 36168,\n    rb: true\n  },\n  // 8 stencil bits\n  'depth16unorm': {\n    gl: 33189,\n    dataFormat: 6402,\n    types: [5123],\n    rb: true\n  },\n  // 16 depth bits\n  'depth24plus': {\n    gl: 33190,\n    dataFormat: 6402,\n    types: [5125]\n  },\n  'depth32float': {\n    gl: 36012,\n    dataFormat: 6402,\n    types: [5126],\n    rb: true\n  },\n  // The depth component of the \"depth24plus\" and \"depth24plus-stencil8\" formats may be implemented as either a 24-bit depth value or a \"depth32float\" value.\n  'depth24plus-stencil8': {\n    gl: 35056,\n    rb: true,\n    depthTexture: true,\n    dataFormat: 34041,\n    types: [34042]\n  },\n  // \"depth32float-stencil8\" feature - TODO below is render buffer only?\n  'depth32float-stencil8': {\n    gl: 36013,\n    dataFormat: 34041,\n    types: [36269],\n    rb: true\n  },\n  // BC compressed formats: check device.features.has(\"texture-compression-bc\");\n  'bc1-rgb-unorm-webgl': {\n    gl: 33776,\n    x: X_S3TC\n  },\n  'bc1-rgb-unorm-srgb-webgl': {\n    gl: 35916,\n    x: X_S3TC_SRGB\n  },\n  'bc1-rgba-unorm': {\n    gl: 33777,\n    x: X_S3TC\n  },\n  'bc1-rgba-unorm-srgb': {\n    gl: 35916,\n    x: X_S3TC_SRGB\n  },\n  'bc2-rgba-unorm': {\n    gl: 33778,\n    x: X_S3TC\n  },\n  'bc2-rgba-unorm-srgb': {\n    gl: 35918,\n    x: X_S3TC_SRGB\n  },\n  'bc3-rgba-unorm': {\n    gl: 33779,\n    x: X_S3TC\n  },\n  'bc3-rgba-unorm-srgb': {\n    gl: 35919,\n    x: X_S3TC_SRGB\n  },\n  'bc4-r-unorm': {\n    gl: 36283,\n    x: X_RGTC\n  },\n  'bc4-r-snorm': {\n    gl: 36284,\n    x: X_RGTC\n  },\n  'bc5-rg-unorm': {\n    gl: 36285,\n    x: X_RGTC\n  },\n  'bc5-rg-snorm': {\n    gl: 36286,\n    x: X_RGTC\n  },\n  'bc6h-rgb-ufloat': {\n    gl: 36495,\n    x: X_BPTC\n  },\n  'bc6h-rgb-float': {\n    gl: 36494,\n    x: X_BPTC\n  },\n  'bc7-rgba-unorm': {\n    gl: 36492,\n    x: X_BPTC\n  },\n  'bc7-rgba-unorm-srgb': {\n    gl: 36493,\n    x: X_BPTC\n  },\n  // WEBGL_compressed_texture_etc: device.features.has(\"texture-compression-etc2\")\n  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression\n  'etc2-rgb8unorm': {\n    gl: 37492\n  },\n  'etc2-rgb8unorm-srgb': {\n    gl: 37494\n  },\n  'etc2-rgb8a1unorm': {\n    gl: 37496\n  },\n  'etc2-rgb8a1unorm-srgb': {\n    gl: 37497\n  },\n  'etc2-rgba8unorm': {\n    gl: 37493\n  },\n  'etc2-rgba8unorm-srgb': {\n    gl: 37495\n  },\n  'eac-r11unorm': {\n    gl: 37488\n  },\n  'eac-r11snorm': {\n    gl: 37489\n  },\n  'eac-rg11unorm': {\n    gl: 37490\n  },\n  'eac-rg11snorm': {\n    gl: 37491\n  },\n  // X_ASTC compressed formats: device.features.has(\"texture-compression-astc\")\n  'astc-4x4-unorm': {\n    gl: 37808\n  },\n  'astc-4x4-unorm-srgb': {\n    gl: 37840\n  },\n  'astc-5x4-unorm': {\n    gl: 37809\n  },\n  'astc-5x4-unorm-srgb': {\n    gl: 37841\n  },\n  'astc-5x5-unorm': {\n    gl: 37810\n  },\n  'astc-5x5-unorm-srgb': {\n    gl: 37842\n  },\n  'astc-6x5-unorm': {\n    gl: 37811\n  },\n  'astc-6x5-unorm-srgb': {\n    gl: 37843\n  },\n  'astc-6x6-unorm': {\n    gl: 37812\n  },\n  'astc-6x6-unorm-srgb': {\n    gl: 37844\n  },\n  'astc-8x5-unorm': {\n    gl: 37813\n  },\n  'astc-8x5-unorm-srgb': {\n    gl: 37845\n  },\n  'astc-8x6-unorm': {\n    gl: 37814\n  },\n  'astc-8x6-unorm-srgb': {\n    gl: 37846\n  },\n  'astc-8x8-unorm': {\n    gl: 37815\n  },\n  'astc-8x8-unorm-srgb': {\n    gl: 37847\n  },\n  'astc-10x5-unorm': {\n    gl: 37819\n  },\n  'astc-10x5-unorm-srgb': {\n    gl: 37851\n  },\n  'astc-10x6-unorm': {\n    gl: 37817\n  },\n  'astc-10x6-unorm-srgb': {\n    gl: 37849\n  },\n  'astc-10x8-unorm': {\n    gl: 37818\n  },\n  'astc-10x8-unorm-srgb': {\n    gl: 37850\n  },\n  'astc-10x10-unorm': {\n    gl: 37819\n  },\n  'astc-10x10-unorm-srgb': {\n    gl: 37851\n  },\n  'astc-12x10-unorm': {\n    gl: 37820\n  },\n  'astc-12x10-unorm-srgb': {\n    gl: 37852\n  },\n  'astc-12x12-unorm': {\n    gl: 37821\n  },\n  'astc-12x12-unorm-srgb': {\n    gl: 37853\n  },\n  // WEBGL_compressed_texture_pvrtc\n  'pvrtc-rgb4unorm-webgl': {\n    gl: 35840\n  },\n  'pvrtc-rgba4unorm-webgl': {\n    gl: 35842\n  },\n  'pvrtc-rbg2unorm-webgl': {\n    gl: 35841\n  },\n  'pvrtc-rgba2unorm-webgl': {\n    gl: 35843\n  },\n  // WEBGL_compressed_texture_etc1\n  'etc1-rbg-unorm-webgl': {\n    gl: 36196\n  },\n  // WEBGL_compressed_texture_atc\n  'atc-rgb-unorm-webgl': {\n    gl: 35986\n  },\n  'atc-rgba-unorm-webgl': {\n    gl: 35986\n  },\n  'atc-rgbai-unorm-webgl': {\n    gl: 34798\n  }\n};\n// FUNCTIONS\n/** Checks if a texture format is supported */\nexport function isWebGLTextureFormatCapabilitiesed(gl, format, extensions) {\n  const webglTextureInfo = WEBGL_TEXTURE_FORMATS[format];\n  // Check that we have a GL constant\n  if (!webglTextureInfo?.gl) {\n    return false;\n  }\n  // Check extensions\n  const extension = webglTextureInfo.x;\n  if (extension) {\n    return Boolean(getWebGLExtension(gl, extension, extensions));\n  }\n  return true;\n}\n/** Checks if a texture format is supported, renderable, filterable etc */\nexport function getTextureFormatCapabilitiesWebGL(gl, formatSupport, extensions) {\n  let supported = formatSupport.create;\n  const webglFormatInfo = WEBGL_TEXTURE_FORMATS[formatSupport.format];\n  // Support Check that we have a GL constant\n  if (webglFormatInfo?.gl === undefined) {\n    supported = false;\n  }\n  if (webglFormatInfo?.x) {\n    supported = supported && Boolean(getWebGLExtension(gl, webglFormatInfo.x, extensions));\n  }\n  return {\n    format: formatSupport.format,\n    // @ts-ignore\n    create: supported && formatSupport.create,\n    // @ts-ignore\n    render: supported && formatSupport.render,\n    // @ts-ignore\n    filter: supported && formatSupport.filter,\n    // @ts-ignore\n    blend: supported && formatSupport.blend,\n    // @ts-ignore\n    store: supported && formatSupport.store\n  };\n}\n/** Get parameters necessary to work with format in WebGL: internalFormat, dataFormat, type, compressed, */\nexport function getTextureFormatWebGL(format) {\n  const formatData = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = convertTextureFormatToGL(format);\n  const decoded = decodeTextureFormat(format);\n  return {\n    internalFormat: webglFormat,\n    format: formatData?.dataFormat || getWebGLPixelDataFormat(decoded.channels, decoded.integer, decoded.normalized, webglFormat),\n    // depth formats don't have a type\n    type: decoded.dataType ? getGLFromVertexType(decoded.dataType) : formatData?.types?.[0] || 5121,\n    compressed: decoded.compressed || false\n  };\n}\nexport function getDepthStencilAttachmentWebGL(format) {\n  const formatInfo = decodeTextureFormat(format);\n  switch (formatInfo.attachment) {\n    case 'depth':\n      return 36096;\n    case 'stencil':\n      return 36128;\n    case 'depth-stencil':\n      return 33306;\n    default:\n      throw new Error(`Not a depth stencil format: ${format}`);\n  }\n}\n/** TODO - VERY roundabout legacy way of calculating bytes per pixel */\nexport function getTextureFormatBytesPerPixel(format) {\n  const formatInfo = decodeTextureFormat(format);\n  return formatInfo.bytesPerPixel;\n}\n// DATA TYPE HELPERS\nexport function getWebGLPixelDataFormat(channels, integer, normalized, format) {\n  // WebGL1 formats use same internalFormat\n  if (format === 6408 || format === 6407) {\n    return format;\n  }\n  // prettier-ignore\n  switch (channels) {\n    case 'r':\n      return integer && !normalized ? 36244 : 6403;\n    case 'rg':\n      return integer && !normalized ? 33320 : 33319;\n    case 'rgb':\n      return integer && !normalized ? 36248 : 6407;\n    case 'rgba':\n      return integer && !normalized ? 36249 : 6408;\n    case 'bgra':\n      throw new Error('bgra pixels not supported by WebGL');\n    default:\n      return 6408;\n  }\n}\n/**\n * Map WebGPU style texture format strings to GL constants\n */\nfunction convertTextureFormatToGL(format) {\n  const formatInfo = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = formatInfo?.gl;\n  if (webglFormat === undefined) {\n    throw new Error(`Unsupported texture format ${format}`);\n  }\n  return webglFormat;\n}","map":{"version":3,"names":["decodeTextureFormat","GL","getWebGLExtension","getGLFromVertexType","X_S3TC","X_S3TC_SRGB","X_RGTC","X_BPTC","X_ETC2","X_ASTC","X_ETC1","X_PVRTC","X_ATC","EXT_texture_norm16","EXT_render_snorm","EXT_color_buffer_float","TEXTURE_FEATURES","isTextureFeature","feature","checkTextureFeature","gl","extensions","textureExtensions","every","extension","WEBGL_TEXTURE_FORMATS","rb","x","dataFormat","types","depthTexture","isWebGLTextureFormatCapabilitiesed","format","webglTextureInfo","Boolean","getTextureFormatCapabilitiesWebGL","formatSupport","supported","create","webglFormatInfo","undefined","render","filter","blend","store","getTextureFormatWebGL","formatData","webglFormat","convertTextureFormatToGL","decoded","internalFormat","getWebGLPixelDataFormat","channels","integer","normalized","type","dataType","compressed","getDepthStencilAttachmentWebGL","formatInfo","attachment","Error","getTextureFormatBytesPerPixel","bytesPerPixel"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\converters\\webgl-texture-table.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  DeviceFeature,\n  TextureFormat,\n  TextureFormatCapabilities,\n  DeviceTextureFormatCapabilities\n} from '@luma.gl/core';\nimport {decodeTextureFormat} from '@luma.gl/core';\nimport {GL, GLPixelType, GLExtensions, GLTexelDataFormat} from '@luma.gl/constants';\nimport {getWebGLExtension} from '../../context/helpers/webgl-extensions';\nimport {getGLFromVertexType} from './vertex-formats';\n\n/* eslint-disable camelcase */\n\n// TEXTURE FEATURES\n\n// Define local webgl extension strings to optimize minification\nconst X_S3TC = 'WEBGL_compressed_texture_s3tc'; // BC1, BC2, BC3\nconst X_S3TC_SRGB = 'WEBGL_compressed_texture_s3tc_srgb'; // BC1, BC2, BC3\nconst X_RGTC = 'EXT_texture_compression_rgtc'; // BC4, BC5\nconst X_BPTC = 'EXT_texture_compression_bptc'; // BC6, BC7\nconst X_ETC2 = 'WEBGL_compressed_texture_etc'; // Renamed from 'WEBGL_compressed_texture_es3'\nconst X_ASTC = 'WEBGL_compressed_texture_astc';\nconst X_ETC1 = 'WEBGL_compressed_texture_etc1';\nconst X_PVRTC = 'WEBGL_compressed_texture_pvrtc';\nconst X_ATC = 'WEBGL_compressed_texture_atc';\n\n// Define local webgl extension strings to optimize minification\nconst EXT_texture_norm16 = 'EXT_texture_norm16';\nconst EXT_render_snorm = 'EXT_render_snorm';\nconst EXT_color_buffer_float = 'EXT_color_buffer_float';\n\n// prettier-ignore\nexport const TEXTURE_FEATURES: Partial<Record<DeviceFeature, string[]>> = {\n  'float32-renderable-webgl': ['EXT_color_buffer_float'],\n  'float16-renderable-webgl': ['EXT_color_buffer_half_float'],\n  'rgb9e5ufloat-renderable-webgl': ['WEBGL_render_shared_exponent'],\n  'snorm8-renderable-webgl': [EXT_render_snorm],\n  'norm16-renderable-webgl': [EXT_texture_norm16],\n  'snorm16-renderable-webgl': [EXT_texture_norm16, EXT_render_snorm],\n\n  'float32-filterable': ['OES_texture_float_linear'],\n  'float16-filterable-webgl': ['OES_texture_half_float_linear'],\n  'texture-filterable-anisotropic-webgl': ['EXT_texture_filter_anisotropic'],\n\n  'texture-blend-float-webgl': ['EXT_float_blend'],\n\n  'texture-compression-bc': [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],\n  // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],\n  // 'texture-compression-bc3-webgl': [X_S3TC],\n  'texture-compression-bc5-webgl': [X_RGTC],\n  'texture-compression-bc7-webgl': [X_BPTC],\n  'texture-compression-etc2': [X_ETC2],\n  'texture-compression-astc': [X_ASTC],\n  'texture-compression-etc1-webgl': [X_ETC1],\n  'texture-compression-pvrtc-webgl': [X_PVRTC],\n  'texture-compression-atc-webgl': [X_ATC]\n};\n\nexport function isTextureFeature(feature: DeviceFeature): boolean {\n  return feature in TEXTURE_FEATURES;\n}\n\n/** Checks a texture feature (for Device.features). Mainly compressed texture support */\nexport function checkTextureFeature(\n  gl: WebGL2RenderingContext,\n  feature: DeviceFeature,\n  extensions: GLExtensions\n): boolean {\n  const textureExtensions = TEXTURE_FEATURES[feature] || [];\n  return textureExtensions.every(extension => getWebGLExtension(gl, extension, extensions));\n}\n\n// TEXTURE FORMATS\n\n/** Map a format to webgl and constants */\ntype WebGLFormatInfo = {\n  gl?: GL;\n  /** compressed */\n  x?: string;\n  types?: GLPixelType[];\n  dataFormat?: GLTexelDataFormat;\n  /** if depthTexture is set this is a depth/stencil format that can be set to a texture  */\n  depthTexture?: boolean;\n  /** @deprecated can this format be used with renderbuffers */\n  rb?: boolean;\n};\n\n// TABLES\n\n/**\n * Texture format data -\n * Exported but can change without notice\n */\n// prettier-ignore\nexport const WEBGL_TEXTURE_FORMATS: Record<TextureFormat, WebGLFormatInfo> = {\n  // 8-bit formats\n  'r8unorm': {gl: GL.R8, rb: true},\n  'r8snorm': {gl: GL.R8_SNORM},\n  'r8uint': {gl: GL.R8UI, rb: true},\n  'r8sint': {gl: GL.R8I, rb: true},\n\n  // 16-bit formats\n  'rg8unorm': {gl: GL.RG8, rb: true},\n  'rg8snorm': {gl: GL.RG8_SNORM},\n  'rg8uint': {gl: GL.RG8UI, rb: true},\n  'rg8sint': {gl: GL.RG8I, rb: true},\n\n  'r16uint': {gl: GL.R16UI, rb: true},\n  'r16sint': {gl: GL.R16I, rb: true},\n  'r16float': {gl: GL.R16F, rb: true},\n  'r16unorm-webgl': {gl: GL.R16_EXT, rb: true},\n  'r16snorm-webgl': {gl: GL.R16_SNORM_EXT},\n\n  // Packed 16-bit formats\n  'rgba4unorm-webgl': {gl: GL.RGBA4, rb: true},\n  'rgb565unorm-webgl': {gl: GL.RGB565, rb: true},\n  'rgb5a1unorm-webgl': {gl: GL.RGB5_A1, rb: true},\n\n  // 24-bit formats\n  'rgb8unorm-webgl': {gl: GL.RGB8},\n  'rgb8snorm-webgl': {gl: GL.RGB8_SNORM},\n\n  // 32-bit formats  \n  'rgba8unorm': {gl: GL.RGBA8},\n  'rgba8unorm-srgb': {gl: GL.SRGB8_ALPHA8},\n  'rgba8snorm': {gl: GL.RGBA8_SNORM},\n  'rgba8uint': {gl: GL.RGBA8UI},\n  'rgba8sint': {gl: GL.RGBA8I},\n  // reverse colors, webgpu only\n  'bgra8unorm': {},\n  'bgra8unorm-srgb': {},\n\n  'rg16uint': {gl: GL.RG16UI},\n  'rg16sint': {gl: GL.RG16I},\n  'rg16float': {gl: GL.RG16F, rb: true},\n  'rg16unorm-webgl': {gl: GL.RG16_EXT},\n  'rg16snorm-webgl': {gl: GL.RG16_SNORM_EXT},\n\n  'r32uint': {gl: GL.R32UI, rb: true},\n  'r32sint': {gl: GL.R32I, rb: true},\n  'r32float': {gl: GL.R32F},\n\n  // Packed 32-bit formats\n  'rgb9e5ufloat': {gl: GL.RGB9_E5}, // , filter: true},\n  'rg11b10ufloat': {gl: GL.R11F_G11F_B10F, rb: true},\n  'rgb10a2unorm': {gl: GL.RGB10_A2, rb: true},\n  'rgb10a2uint-webgl': {gl: GL.RGB10_A2UI, rb: true},\n\n  // 48-bit formats\n  'rgb16unorm-webgl': {gl: GL.RGB16_EXT}, // rgb not renderable\n  'rgb16snorm-webgl': {gl: GL.RGB16_SNORM_EXT}, // rgb not renderable\n\n  // 64-bit formats\n  'rg32uint': {gl: GL.RG32UI, rb: true},\n  'rg32sint': {gl: GL.RG32I, rb: true},\n  'rg32float': {gl: GL.RG32F, rb: true},\n  'rgba16uint': {gl: GL.RGBA16UI, rb: true},\n  'rgba16sint': {gl: GL.RGBA16I, rb: true},\n  'rgba16float': {gl: GL.RGBA16F},\n  'rgba16unorm-webgl': {gl: GL.RGBA16_EXT, rb: true},\n  'rgba16snorm-webgl': {gl: GL.RGBA16_SNORM_EXT},\n\n  // 96-bit formats (deprecated!)\n  'rgb32float-webgl': {gl: GL.RGB32F, x: EXT_color_buffer_float, dataFormat: GL.RGB, types: [GL.FLOAT]},\n  \n  // 128-bit formats\n  'rgba32uint': {gl: GL.RGBA32UI, rb: true},\n  'rgba32sint': {gl: GL.RGBA32I, rb: true},\n  'rgba32float': {gl: GL.RGBA32F, rb: true},\n\n  // Depth and stencil formats\n  'stencil8': {gl: GL.STENCIL_INDEX8, rb: true}, // 8 stencil bits\n\n  'depth16unorm': {gl: GL.DEPTH_COMPONENT16, dataFormat: GL.DEPTH_COMPONENT, types: [GL.UNSIGNED_SHORT], rb: true}, // 16 depth bits\n  'depth24plus': {gl: GL.DEPTH_COMPONENT24, dataFormat: GL.DEPTH_COMPONENT, types: [GL.UNSIGNED_INT]},\n  'depth32float': {gl: GL.DEPTH_COMPONENT32F, dataFormat: GL.DEPTH_COMPONENT, types: [GL.FLOAT], rb: true},\n\n  // The depth component of the \"depth24plus\" and \"depth24plus-stencil8\" formats may be implemented as either a 24-bit depth value or a \"depth32float\" value.\n  'depth24plus-stencil8': {gl: GL.DEPTH24_STENCIL8, rb: true, depthTexture: true, dataFormat: GL.DEPTH_STENCIL, types: [GL.UNSIGNED_INT_24_8]},\n  // \"depth32float-stencil8\" feature - TODO below is render buffer only?\n  'depth32float-stencil8': {gl: GL.DEPTH32F_STENCIL8, dataFormat: GL.DEPTH_STENCIL, types: [GL.FLOAT_32_UNSIGNED_INT_24_8_REV], rb: true},\n\n  // BC compressed formats: check device.features.has(\"texture-compression-bc\");\n\n  'bc1-rgb-unorm-webgl': {gl: GL.COMPRESSED_RGB_S3TC_DXT1_EXT, x: X_S3TC},\n  'bc1-rgb-unorm-srgb-webgl': {gl: GL.COMPRESSED_SRGB_S3TC_DXT1_EXT, x: X_S3TC_SRGB},\n\n  'bc1-rgba-unorm': {gl: GL.COMPRESSED_RGBA_S3TC_DXT1_EXT, x: X_S3TC},\n  'bc1-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_S3TC_DXT1_EXT, x: X_S3TC_SRGB},\n  'bc2-rgba-unorm': {gl: GL.COMPRESSED_RGBA_S3TC_DXT3_EXT, x: X_S3TC},\n  'bc2-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, x: X_S3TC_SRGB},\n  'bc3-rgba-unorm': {gl: GL.COMPRESSED_RGBA_S3TC_DXT5_EXT, x: X_S3TC},\n  'bc3-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, x: X_S3TC_SRGB},\n  'bc4-r-unorm': {gl: GL.COMPRESSED_RED_RGTC1_EXT, x: X_RGTC},\n  'bc4-r-snorm': {gl: GL.COMPRESSED_SIGNED_RED_RGTC1_EXT, x: X_RGTC},\n  'bc5-rg-unorm': {gl: GL.COMPRESSED_RED_GREEN_RGTC2_EXT, x: X_RGTC},\n  'bc5-rg-snorm': {gl: GL.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT, x: X_RGTC},\n  'bc6h-rgb-ufloat': {gl: GL.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT, x: X_BPTC},\n  'bc6h-rgb-float': {gl: GL.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT, x: X_BPTC},\n  'bc7-rgba-unorm': {gl: GL.COMPRESSED_RGBA_BPTC_UNORM_EXT, x: X_BPTC},\n  'bc7-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT, x: X_BPTC},\n\n  // WEBGL_compressed_texture_etc: device.features.has(\"texture-compression-etc2\")\n  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression\n\n  'etc2-rgb8unorm': {gl: GL.COMPRESSED_RGB8_ETC2},\n  'etc2-rgb8unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ETC2},\n  'etc2-rgb8a1unorm': {gl: GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2},\n  'etc2-rgb8a1unorm-srgb': {gl: GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2},\n  'etc2-rgba8unorm': {gl: GL.COMPRESSED_RGBA8_ETC2_EAC},\n  'etc2-rgba8unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC},\n\n  'eac-r11unorm': {gl: GL.COMPRESSED_R11_EAC},\n  'eac-r11snorm': {gl: GL.COMPRESSED_SIGNED_R11_EAC},\n  'eac-rg11unorm': {gl: GL.COMPRESSED_RG11_EAC},\n  'eac-rg11snorm': {gl: GL.COMPRESSED_SIGNED_RG11_EAC},\n\n  // X_ASTC compressed formats: device.features.has(\"texture-compression-astc\")\n\n  'astc-4x4-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_4x4_KHR},\n  'astc-4x4-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR},\n  'astc-5x4-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_5x4_KHR},\n  'astc-5x4-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR},\n  'astc-5x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_5x5_KHR},\n  'astc-5x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR},\n  'astc-6x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_6x5_KHR},\n  'astc-6x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR},\n  'astc-6x6-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_6x6_KHR},\n  'astc-6x6-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR},\n  'astc-8x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_8x5_KHR},\n  'astc-8x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR},\n  'astc-8x6-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_8x6_KHR},\n  'astc-8x6-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR},\n  'astc-8x8-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_8x8_KHR},\n  'astc-8x8-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR},\n  'astc-10x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x10_KHR},\n  'astc-10x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR},\n  'astc-10x6-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x6_KHR},\n  'astc-10x6-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR},\n  'astc-10x8-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x8_KHR},\n  'astc-10x8-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR},\n  'astc-10x10-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x10_KHR},\n  'astc-10x10-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR},\n  'astc-12x10-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_12x10_KHR},\n  'astc-12x10-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR},\n  'astc-12x12-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_12x12_KHR},\n  'astc-12x12-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR},\n\n  // WEBGL_compressed_texture_pvrtc\n\n  'pvrtc-rgb4unorm-webgl': {gl: GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG},\n  'pvrtc-rgba4unorm-webgl': {gl: GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG},\n  'pvrtc-rbg2unorm-webgl': {gl: GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG},\n  'pvrtc-rgba2unorm-webgl': {gl: GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG},\n\n  // WEBGL_compressed_texture_etc1\n\n  'etc1-rbg-unorm-webgl': {gl: GL.COMPRESSED_RGB_ETC1_WEBGL},\n\n  // WEBGL_compressed_texture_atc\n\n  'atc-rgb-unorm-webgl': {gl: GL.COMPRESSED_RGB_ATC_WEBGL},\n  'atc-rgba-unorm-webgl': {gl: GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL},\n  'atc-rgbai-unorm-webgl': {gl: GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL}\n};\n\n// FUNCTIONS\n\n/** Checks if a texture format is supported */\nexport function isWebGLTextureFormatCapabilitiesed(\n  gl: WebGL2RenderingContext,\n  format: TextureFormat,\n  extensions: GLExtensions\n): boolean {\n  const webglTextureInfo = WEBGL_TEXTURE_FORMATS[format];\n  // Check that we have a GL constant\n  if (!webglTextureInfo?.gl) {\n    return false;\n  }\n\n  // Check extensions\n  const extension = webglTextureInfo.x;\n  if (extension) {\n    return Boolean(getWebGLExtension(gl, extension, extensions));\n  }\n  return true;\n}\n\n/** Checks if a texture format is supported, renderable, filterable etc */\nexport function getTextureFormatCapabilitiesWebGL(\n  gl: WebGL2RenderingContext,\n  formatSupport: TextureFormatCapabilities,\n  extensions: GLExtensions\n): DeviceTextureFormatCapabilities {\n  let supported = formatSupport.create;\n  const webglFormatInfo = WEBGL_TEXTURE_FORMATS[formatSupport.format];\n\n  // Support Check that we have a GL constant\n  if (webglFormatInfo?.gl === undefined) {\n    supported = false;\n  }\n\n  if (webglFormatInfo?.x) {\n    supported = supported && Boolean(getWebGLExtension(gl, webglFormatInfo.x, extensions));\n  }\n\n  return {\n    format: formatSupport.format,\n    // @ts-ignore\n    create: supported && formatSupport.create,\n    // @ts-ignore\n    render: supported && formatSupport.render,\n    // @ts-ignore\n    filter: supported && formatSupport.filter,\n    // @ts-ignore\n    blend: supported && formatSupport.blend,\n    // @ts-ignore\n    store: supported && formatSupport.store\n  };\n}\n\n/** Get parameters necessary to work with format in WebGL: internalFormat, dataFormat, type, compressed, */\nexport function getTextureFormatWebGL(format: TextureFormat): {\n  internalFormat: GL;\n  format: GLTexelDataFormat;\n  type: GLPixelType;\n  compressed: boolean;\n} {\n  const formatData = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = convertTextureFormatToGL(format);\n  const decoded = decodeTextureFormat(format);\n  return {\n    internalFormat: webglFormat,\n    format:\n      formatData?.dataFormat ||\n      getWebGLPixelDataFormat(decoded.channels, decoded.integer, decoded.normalized, webglFormat),\n    // depth formats don't have a type\n    type: decoded.dataType\n      ? getGLFromVertexType(decoded.dataType)\n      : formatData?.types?.[0] || GL.UNSIGNED_BYTE,\n    compressed: decoded.compressed || false\n  };\n}\n\nexport function getDepthStencilAttachmentWebGL(\n  format: TextureFormat\n): GL.DEPTH_ATTACHMENT | GL.STENCIL_ATTACHMENT | GL.DEPTH_STENCIL_ATTACHMENT {\n  const formatInfo = decodeTextureFormat(format);\n  switch (formatInfo.attachment) {\n    case 'depth':\n      return GL.DEPTH_ATTACHMENT;\n    case 'stencil':\n      return GL.STENCIL_ATTACHMENT;\n    case 'depth-stencil':\n      return GL.DEPTH_STENCIL_ATTACHMENT;\n    default:\n      throw new Error(`Not a depth stencil format: ${format}`);\n  }\n}\n\n/** TODO - VERY roundabout legacy way of calculating bytes per pixel */\nexport function getTextureFormatBytesPerPixel(format: TextureFormat): number {\n  const formatInfo = decodeTextureFormat(format);\n  return formatInfo.bytesPerPixel;\n}\n\n// DATA TYPE HELPERS\n\nexport function getWebGLPixelDataFormat(\n  channels: 'r' | 'rg' | 'rgb' | 'rgba' | 'bgra',\n  integer: boolean,\n  normalized: boolean,\n  format: GL\n): GLTexelDataFormat {\n  // WebGL1 formats use same internalFormat\n  if (format === GL.RGBA || format === GL.RGB) {\n    return format;\n  }\n  // prettier-ignore\n  switch (channels) {\n    case 'r': return integer && !normalized ? GL.RED_INTEGER : GL.RED;\n    case 'rg': return integer && !normalized ? GL.RG_INTEGER : GL.RG;\n    case 'rgb': return integer && !normalized ? GL.RGB_INTEGER : GL.RGB;\n    case 'rgba': return integer && !normalized ? GL.RGBA_INTEGER : GL.RGBA;\n    case 'bgra': throw new Error('bgra pixels not supported by WebGL');\n    default: return GL.RGBA;\n  }\n}\n\n/**\n * Map WebGPU style texture format strings to GL constants\n */\nfunction convertTextureFormatToGL(format: TextureFormat): GL | undefined {\n  const formatInfo = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = formatInfo?.gl;\n  if (webglFormat === undefined) {\n    throw new Error(`Unsupported texture format ${format}`);\n  }\n  return webglFormat;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}