{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** BufferLayoutHelper is a helper class that should not be used directly by applications */\nexport class BufferLayoutHelper {\n  bufferLayouts;\n  constructor(bufferLayouts) {\n    this.bufferLayouts = bufferLayouts;\n  }\n  getBufferLayout(name) {\n    return this.bufferLayouts.find(layout => layout.name === name) || null;\n  }\n  /** Get attribute names from a BufferLayout */\n  getAttributeNamesForBuffer(bufferLayout) {\n    return bufferLayout.attributes ? bufferLayout.attributes?.map(layout => layout.attribute) : [bufferLayout.name];\n  }\n  mergeBufferLayouts(bufferLayouts1, bufferLayouts2) {\n    const mergedLayouts = [...bufferLayouts1];\n    for (const attribute of bufferLayouts2) {\n      const index = mergedLayouts.findIndex(attribute2 => attribute2.name === attribute.name);\n      if (index < 0) {\n        mergedLayouts.push(attribute);\n      } else {\n        mergedLayouts[index] = attribute;\n      }\n    }\n    return mergedLayouts;\n  }\n}","map":{"version":3,"names":["BufferLayoutHelper","bufferLayouts","constructor","getBufferLayout","name","find","layout","getAttributeNamesForBuffer","bufferLayout","attributes","map","attribute","mergeBufferLayouts","bufferLayouts1","bufferLayouts2","mergedLayouts","index","findIndex","attribute2","push"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter-utils\\buffer-layout-helper.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {BufferLayout} from '../adapter/types/buffer-layout';\n\n/** BufferLayoutHelper is a helper class that should not be used directly by applications */\nexport class BufferLayoutHelper {\n  bufferLayouts: BufferLayout[];\n\n  constructor(bufferLayouts: BufferLayout[]) {\n    this.bufferLayouts = bufferLayouts;\n  }\n\n  getBufferLayout(name: string): BufferLayout | null {\n    return this.bufferLayouts.find(layout => layout.name === name) || null;\n  }\n\n  /** Get attribute names from a BufferLayout */\n  getAttributeNamesForBuffer(bufferLayout: BufferLayout): string[] {\n    return bufferLayout.attributes\n      ? bufferLayout.attributes?.map(layout => layout.attribute)\n      : [bufferLayout.name];\n  }\n\n  mergeBufferLayouts(\n    bufferLayouts1: BufferLayout[],\n    bufferLayouts2: BufferLayout[]\n  ): BufferLayout[] {\n    const mergedLayouts = [...bufferLayouts1];\n    for (const attribute of bufferLayouts2) {\n      const index = mergedLayouts.findIndex(attribute2 => attribute2.name === attribute.name);\n      if (index < 0) {\n        mergedLayouts.push(attribute);\n      } else {\n        mergedLayouts[index] = attribute;\n      }\n    }\n    return mergedLayouts;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;AACA,OAAM,MAAOA,kBAAkB;EAC7BC,aAAa;EAEbC,YAAYD,aAA6B;IACvC,IAAI,CAACA,aAAa,GAAGA,aAAa;EACpC;EAEAE,eAAeA,CAACC,IAAY;IAC1B,OAAO,IAAI,CAACH,aAAa,CAACI,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACF,IAAI,KAAKA,IAAI,CAAC,IAAI,IAAI;EACxE;EAEA;EACAG,0BAA0BA,CAACC,YAA0B;IACnD,OAAOA,YAAY,CAACC,UAAU,GAC1BD,YAAY,CAACC,UAAU,EAAEC,GAAG,CAACJ,MAAM,IAAIA,MAAM,CAACK,SAAS,CAAC,GACxD,CAACH,YAAY,CAACJ,IAAI,CAAC;EACzB;EAEAQ,kBAAkBA,CAChBC,cAA8B,EAC9BC,cAA8B;IAE9B,MAAMC,aAAa,GAAG,CAAC,GAAGF,cAAc,CAAC;IACzC,KAAK,MAAMF,SAAS,IAAIG,cAAc,EAAE;MACtC,MAAME,KAAK,GAAGD,aAAa,CAACE,SAAS,CAACC,UAAU,IAAIA,UAAU,CAACd,IAAI,KAAKO,SAAS,CAACP,IAAI,CAAC;MACvF,IAAIY,KAAK,GAAG,CAAC,EAAE;QACbD,aAAa,CAACI,IAAI,CAACR,SAAS,CAAC;MAC/B,CAAC,MAAM;QACLI,aAAa,CAACC,KAAK,CAAC,GAAGL,SAAS;MAClC;IACF;IACA,OAAOI,aAAa;EACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}