{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Parse a WebGL-format GLSL compilation log into an array of WebGPU style message records.\n * This follows documented WebGL conventions for compilation logs.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\nexport function parseShaderCompilerLog(errLog) {\n  // Parse the error - note: browser and driver dependent\n  const lines = errLog.split(/\\r?\\n/);\n  const messages = [];\n  for (const line of lines) {\n    if (line.length <= 1) {\n      continue; // eslint-disable-line no-continue\n    }\n    const segments = line.split(':');\n    // Check for messages with no line information `ERROR: unsupported shader version`\n    if (segments.length === 2) {\n      const [messageType, message] = segments;\n      messages.push({\n        message: message.trim(),\n        type: getMessageType(messageType),\n        lineNum: 0,\n        linePos: 0\n      });\n      continue; // eslint-disable-line no-continue\n    }\n    const [messageType, linePosition, lineNumber, ...rest] = segments;\n    let lineNum = parseInt(lineNumber, 10);\n    if (isNaN(lineNum)) {\n      lineNum = 0;\n    }\n    let linePos = parseInt(linePosition, 10);\n    if (isNaN(linePos)) {\n      linePos = 0;\n    }\n    messages.push({\n      message: rest.join(':').trim(),\n      type: getMessageType(messageType),\n      lineNum,\n      linePos // TODO\n    });\n  }\n  return messages;\n}\n/** Ensure supported type */\nfunction getMessageType(messageType) {\n  const MESSAGE_TYPES = ['warning', 'error', 'info'];\n  const lowerCaseType = messageType.toLowerCase();\n  return MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : 'info';\n}\n//# sourceMappingURL=parse-shader-compiler-log.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}