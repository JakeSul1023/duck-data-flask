{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Model } from '@luma.gl/engine';\nconst AGGREGATE_VS = `\\\n#version 300 es\n#define SHADER_NAME data-filter-vertex-shader\n\n#ifdef FLOAT_TARGET\n  in float filterIndices;\n  in float filterPrevIndices;\n#else\n  in vec2 filterIndices;\n  in vec2 filterPrevIndices;\n#endif\n\nout vec4 vColor;\nconst float component = 1.0 / 255.0;\n\nvoid main() {\n  #ifdef FLOAT_TARGET\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\n  #else\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\n    float col = filterIndices.x;\n    float row = filterIndices.y * 4.0;\n    float channel = floor(row);\n    row = fract(row);\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\n  #endif\n  gl_PointSize = 1.0;\n}\n`;\nconst AGGREGATE_FS = `\\\n#version 300 es\n#define SHADER_NAME data-filter-fragment-shader\nprecision highp float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main() {\n  if (dataFilter_value < 0.5) {\n    discard;\n  }\n  fragColor = vColor;\n}\n`;\nconst FLOAT_TARGET_FEATURES = ['float32-renderable-webgl',\n// ability to render to float texture\n'texture-blend-float-webgl' // ability to blend when rendering to float texture\n];\nexport function supportsFloatTarget(device) {\n  return FLOAT_TARGET_FEATURES.every(feature => device.features.has(feature));\n}\n// A 1x1 framebuffer object that encodes the total count of filtered items\nexport function getFramebuffer(device, useFloatTarget) {\n  if (useFloatTarget) {\n    return device.createFramebuffer({\n      width: 1,\n      height: 1,\n      colorAttachments: [device.createTexture({\n        format: 'rgba32float',\n        mipmaps: false\n      })]\n    });\n  }\n  return device.createFramebuffer({\n    width: 256,\n    height: 64,\n    colorAttachments: [device.createTexture({\n      format: 'rgba8unorm',\n      mipmaps: false\n    })]\n  });\n}\n// Increments the counter based on dataFilter_value\nexport function getModel(device, bufferLayout, shaderOptions, useFloatTarget) {\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\n  if (useFloatTarget) {\n    shaderOptions.defines.FLOAT_TARGET = 1;\n  }\n  return new Model(device, {\n    id: 'data-filter-aggregation-model',\n    vertexCount: 1,\n    isInstanced: false,\n    topology: 'point-list',\n    disableWarnings: true,\n    vs: AGGREGATE_VS,\n    fs: AGGREGATE_FS,\n    bufferLayout,\n    ...shaderOptions\n  });\n}\nexport const parameters = {\n  blend: true,\n  blendColorSrcFactor: 'one',\n  blendColorDstFactor: 'one',\n  blendAlphaSrcFactor: 'one',\n  blendAlphaDstFactor: 'one',\n  blendColorOperation: 'add',\n  blendAlphaOperation: 'add',\n  depthCompare: 'never'\n};\n//# sourceMappingURL=aggregator.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}