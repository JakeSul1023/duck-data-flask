{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { deduceTableSchema } from \"./table-schema.js\";\nexport function makeTableFromData(data) {\n  let table;\n  switch (getTableShapeFromData(data)) {\n    case 'array-row-table':\n      table = {\n        shape: 'array-row-table',\n        data: data\n      };\n      break;\n    case 'object-row-table':\n      table = {\n        shape: 'object-row-table',\n        data: data\n      };\n      break;\n    case 'columnar-table':\n      table = {\n        shape: 'columnar-table',\n        data: data\n      };\n      break;\n    default:\n      throw new Error('table');\n  }\n  const schema = deduceTableSchema(table);\n  return {\n    ...table,\n    schema\n  };\n}\n/** Helper function to get shape of data */\nfunction getTableShapeFromData(data) {\n  if (Array.isArray(data)) {\n    if (data.length === 0) {\n      throw new Error('cannot deduce type of empty table');\n    }\n    // Deduce the table shape from the first row\n    const firstRow = data[0];\n    if (Array.isArray(firstRow)) {\n      return 'array-row-table';\n    }\n    if (firstRow && typeof firstRow === 'object') {\n      return 'object-row-table';\n    }\n  }\n  if (data && typeof data === 'object') {\n    return 'columnar-table';\n  }\n  throw new Error('invalid table');\n}\n/** Convert any table into object row format *\nexport function makeColumnarTable(table: Table): ColumnarTable {\n  if (table.shape === 'columnar-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'columnar-table',\n    schema: table.schema,\n    data\n  };\n}\n\n\n/** Convert any table into array row format *\nexport function makeArrayRowTable(table: TableLike): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format *\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n*/","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}