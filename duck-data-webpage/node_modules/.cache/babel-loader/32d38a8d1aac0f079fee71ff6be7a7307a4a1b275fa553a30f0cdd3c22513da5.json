{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jakes\\\\Documents\\\\GitHub\\\\duck-data-flask\\\\duck-data-webpage\\\\src\\\\components\\\\DuckMapFunction.js\",\n  _s = $RefreshSig$();\n/*\r\n    Author: Jacob Sullivan \r\n    Status: Unfinished\r\n    About: \r\n      - Day-by-day map of duck presence.\r\n      - Each day, ducks that will remain the following day are colored red/yellow (example: orange).\r\n      - Ducks that won't be present the next day at this lat/lon are colored blue (leaving).\r\n      - If there's no duck data at a location, the map has no overlay there.\r\n      - A time slider + \"Play\" button animates day by day.\r\n*/\nimport React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport { DeckGL } from \"@deck.gl/react\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\nimport { BitmapLayer, ArcLayer, IconLayer } from \"@deck.gl/layers\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { Slider } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_VIEW = {\n  latitude: 36.28,\n  longitude: -89.42,\n  zoom: 5,\n  minZoom: 3,\n  maxZoom: 12,\n  pitch: 0,\n  bearing: 0\n};\nexport default function Duckmapfunction() {\n  _s();\n  const [allData, setAllData] = useState([]);\n  const [timeSteps, setTimeSteps] = useState([]);\n  const [currentTimeIndex, setCurrentTimeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [hoverInfo, setHoverInfo] = useState(null);\n  const [tooltipData, setTooltipData] = useState(null);\n  const deckRef = useRef(null);\n\n  //Fetch CSV data\n  useEffect(() => {\n    let isMounted = true;\n    fetch(`${process.env.PUBLIC_URL}/WaterdowlData1.csv`).then(res => res.text()).then(csvText => {\n      if (!isMounted) return;\n      const lines = csvText.trim().split(\"\\n\");\n      const header = lines[0].split(\",\");\n      const timeIndex = header.indexOf(\"timestamp\");\n      const duckIdIndex = header.indexOf(\"duck_id\");\n      const latIndex = header.indexOf(\"lat\");\n      const lonIndex = header.indexOf(\"lon\");\n      const speciesIndex = header.indexOf(\"species\");\n      const parsedData = lines.slice(1).map(row => {\n        const cols = row.split(\",\");\n        return {\n          timestamp: cols[timeIndex],\n          duckId: cols[duckIdIndex],\n          lat: parseFloat(cols[latIndex]),\n          lon: parseFloat(cols[lonIndex]),\n          species: speciesIndex !== -1 ? cols[speciesIndex] : \"unknown\"\n        };\n      });\n      setAllData(parsedData);\n\n      // Extract unique timestamps and sort them\n      const uniqueTimes = Array.from(new Set(parsedData.map(d => d.timestamp))).sort((a, b) => new Date(a) - new Date(b));\n      setTimeSteps(uniqueTimes);\n    }).catch(err => console.error(\"Error with CSV:\", err));\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  // Time slider\n  useEffect(() => {\n    let timerId;\n    if (isPlaying && timeSteps.length > 0) {\n      timerId = setInterval(() => {\n        setCurrentTimeIndex(prev => prev === timeSteps.length - 1 ? 0 : prev + 1);\n      }, 1000);\n    }\n    return () => timerId && clearInterval(timerId);\n  }, [isPlaying, timeSteps]);\n  const currentTime = timeSteps[currentTimeIndex] || null;\n  const dataAtTime = allData.filter(d => d.timestamp === currentTime);\n  const nextIndex = currentTimeIndex < timeSteps.length - 1 ? currentTimeIndex + 1 : currentTimeIndex;\n  const nextTime = timeSteps[nextIndex] || null;\n  const dataNextTime = allData.filter(d => d.timestamp === nextTime);\n\n  //Arrow function center\n  function getCentroid(points) {\n    if (!points.length) return null;\n    let sumLat = 0;\n    let sumLon = 0;\n    for (const p of points) {\n      sumLat += p.lat;\n      sumLon += p.lon;\n    }\n    const avgLat = sumLat / points.length;\n    const avgLon = sumLon / points.length;\n    return {\n      lat: avgLat,\n      lon: avgLon\n    };\n  }\n  const centroidT = useMemo(() => getCentroid(dataAtTime), [dataAtTime]);\n  const centroidT1 = useMemo(() => getCentroid(dataNextTime), [dataNextTime]);\n  const arcsData = useMemo(() => {\n    if (!centroidT || !centroidT1) return [];\n    return [{\n      source: [centroidT.lon, centroidT.lat],\n      target: [centroidT1.lon, centroidT1.lat]\n    }];\n  }, [centroidT, centroidT1]);\n\n  // Base map\n  const tileLayer = new TileLayer({\n    id: \"osm-tiles\",\n    data: \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    minZoom: 3,\n    maxZoom: 12,\n    tileSize: 256,\n    renderSubLayers: props => {\n      const {\n        bbox: {\n          west,\n          south,\n          east,\n          north\n        }\n      } = props.tile;\n      return new BitmapLayer(props, {\n        data: null,\n        image: props.data,\n        bounds: [west, south, east, north]\n      });\n    }\n  });\n\n  //Heatmap layer for \"leaving\" ducks \n  const leavingHeatmap = new HeatmapLayer({\n    id: \"heatmap-dayT\",\n    data: dataAtTime,\n    getPosition: d => [d.lon, d.lat],\n    getWeight: 1,\n    radiusPixels: 40,\n    intensity: 1,\n    threshold: 0.05,\n    opacity: 0.4,\n    colorRange: [[242, 240, 247, 40], [218, 218, 235, 90], [188, 189, 220, 120], [158, 154, 200, 150], [117, 107, 177, 180], [84, 39, 143, 200]],\n    pickable: true,\n    onHover: info => setHoverInfo(info)\n  });\n\n  //Heatmap layer for \"next day\" ducks\n  const nextDayHeatmap = new HeatmapLayer({\n    id: \"heatmap-dayT1\",\n    data: dataNextTime,\n    getPosition: d => [d.lon, d.lat],\n    getWeight: 1,\n    radiusPixels: 40,\n    intensity: 1,\n    threshold: 0.05,\n    opacity: 0.4,\n    colorRange: [[254, 229, 217, 40], [252, 187, 161, 80], [252, 146, 114, 120], [251, 106, 74, 150], [222, 45, 38, 180], [165, 15, 21, 200]],\n    pickable: true,\n    onHover: info => setHoverInfo(info)\n  });\n  const movementArc = new ArcLayer({\n    id: \"movement-arc\",\n    data: arcsData,\n    getSourcePosition: d => d.source,\n    getTargetPosition: d => d.target,\n    getSourceColor: [60, 60, 60],\n    getTargetColor: [200, 200, 200],\n    getWidth: 4,\n    greatCircle: false,\n    pickable: true,\n    onHover: info => setHoverInfo(info)\n  });\n\n  // Single arrow icon at centroid\n  const iconAtlas = `${process.env.PUBLIC_URL}/arrow.png`;\n  const iconMapping = {\n    arrow: {\n      x: 0,\n      y: 0,\n      width: 512,\n      height: 512,\n      mask: true\n    }\n  };\n  const arrowLayer = new IconLayer({\n    id: \"arrow-icon\",\n    data: arcsData,\n    iconAtlas,\n    iconMapping,\n    getIcon: () => \"arrow\",\n    getSize: 40,\n    getPosition: d => d.target,\n    getAngle: d => {\n      const [lon1, lat1] = d.source;\n      const [lon2, lat2] = d.target;\n      const dx = lon2 - lon1;\n      const dy = lat2 - lat1;\n      return Math.atan2(dy, dx) * 180 / Math.PI;\n    },\n    pickable: true,\n    onHover: info => setHoverInfo(info)\n  });\n  const layers = [tileLayer, leavingHeatmap, nextDayHeatmap, movementArc, arrowLayer];\n  useEffect(() => {\n    if (hoverInfo && hoverInfo.coordinate) {\n      const [lon, lat] = hoverInfo.coordinate;\n      const pointsUrl = `https://api.weather.gov/points/${lat},${lon}`;\n      fetch(pointsUrl).then(res => {\n        if (!res.ok) {\n          throw new Error(`NOAA points fetch error: ${res.status}`);\n        }\n        return res.json();\n      }).then(pointData => {\n        var _pointData$properties;\n        if (!((_pointData$properties = pointData.properties) !== null && _pointData$properties !== void 0 && _pointData$properties.forecast)) {\n          throw new Error(\"No forecast found.\");\n        }\n        return fetch(pointData.properties.forecast);\n      }).then(res => res.json()).then(forecastData => {\n        var _forecastData$propert, _forecastData$propert2;\n        const period = (_forecastData$propert = forecastData.properties) === null || _forecastData$propert === void 0 ? void 0 : (_forecastData$propert2 = _forecastData$propert.periods) === null || _forecastData$propert2 === void 0 ? void 0 : _forecastData$propert2[0];\n        if (!period) throw new Error(\"No forecast period data.\");\n        setTooltipData({\n          temperature: period.temperature,\n          temperatureUnit: period.temperatureUnit,\n          windSpeed: period.windSpeed,\n          windDirection: period.windDirection,\n          shortForecast: period.shortForecast\n        });\n      }).catch(err => {\n        console.error(\"Error grabbing NOAA data:\", err);\n        setTooltipData(null);\n      });\n    } else {\n      setTooltipData(null);\n    }\n  }, [hoverInfo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(DeckGL, {\n      ref: deckRef,\n      initialViewState: INITIAL_VIEW,\n      controller: true,\n      layers: layers,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), hoverInfo && hoverInfo.x !== undefined && hoverInfo.y !== undefined && tooltipData && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        zIndex: 1000,\n        pointerEvents: \"none\",\n        left: hoverInfo.x,\n        top: hoverInfo.y,\n        background: \"rgba(255,255,255,0.9)\",\n        padding: \"8px\",\n        borderRadius: \"4px\",\n        transform: \"translate(10px, 10px)\",\n        fontSize: \"12px\",\n        maxWidth: \"220px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: \"bold\",\n          marginBottom: \"4px\"\n        },\n        children: \"NOAA Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Temp: \", tooltipData.temperature, \"\\xB0\", tooltipData.temperatureUnit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Wind: \", tooltipData.windSpeed, \" \", tooltipData.windDirection]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: tooltipData.shortForecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        bottom: 20,\n        left: 20,\n        width: \"350px\",\n        background: \"rgba(255,255,255,0.8)\",\n        padding: \"10px\",\n        borderRadius: \"8px\",\n        zIndex: 999\n      },\n      children: [/*#__PURE__*/_jsxDEV(Slider, {\n        min: 0,\n        max: timeSteps.length - 1,\n        value: currentTimeIndex,\n        onChange: (e, val) => setCurrentTimeIndex(val),\n        step: 1,\n        valueLabelDisplay: \"auto\",\n        valueLabelFormat: idx => timeSteps[idx] || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"8px\"\n        },\n        children: [\"Current Time: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: currentTime || \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsPlaying(prev => !prev),\n        children: isPlaying ? \"Pause\" : \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n}\n_s(Duckmapfunction, \"tgvwlJJxRe1yGEplirUwx4umy4Q=\");\n_c = Duckmapfunction;\nvar _c;\n$RefreshReg$(_c, \"Duckmapfunction\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","DeckGL","TileLayer","BitmapLayer","ArcLayer","IconLayer","HeatmapLayer","Slider","jsxDEV","_jsxDEV","INITIAL_VIEW","latitude","longitude","zoom","minZoom","maxZoom","pitch","bearing","Duckmapfunction","_s","allData","setAllData","timeSteps","setTimeSteps","currentTimeIndex","setCurrentTimeIndex","isPlaying","setIsPlaying","hoverInfo","setHoverInfo","tooltipData","setTooltipData","deckRef","isMounted","fetch","process","env","PUBLIC_URL","then","res","text","csvText","lines","trim","split","header","timeIndex","indexOf","duckIdIndex","latIndex","lonIndex","speciesIndex","parsedData","slice","map","row","cols","timestamp","duckId","lat","parseFloat","lon","species","uniqueTimes","Array","from","Set","d","sort","a","b","Date","catch","err","console","error","timerId","length","setInterval","prev","clearInterval","currentTime","dataAtTime","filter","nextIndex","nextTime","dataNextTime","getCentroid","points","sumLat","sumLon","p","avgLat","avgLon","centroidT","centroidT1","arcsData","source","target","tileLayer","id","data","tileSize","renderSubLayers","props","bbox","west","south","east","north","tile","image","bounds","leavingHeatmap","getPosition","getWeight","radiusPixels","intensity","threshold","opacity","colorRange","pickable","onHover","info","nextDayHeatmap","movementArc","getSourcePosition","getTargetPosition","getSourceColor","getTargetColor","getWidth","greatCircle","iconAtlas","iconMapping","arrow","x","y","width","height","mask","arrowLayer","getIcon","getSize","getAngle","lon1","lat1","lon2","lat2","dx","dy","Math","atan2","PI","layers","coordinate","pointsUrl","ok","Error","status","json","pointData","_pointData$properties","properties","forecast","forecastData","_forecastData$propert","_forecastData$propert2","period","periods","temperature","temperatureUnit","windSpeed","windDirection","shortForecast","style","position","children","ref","initialViewState","controller","fileName","_jsxFileName","lineNumber","columnNumber","undefined","zIndex","pointerEvents","left","top","background","padding","borderRadius","transform","fontSize","maxWidth","fontWeight","marginBottom","bottom","min","max","value","onChange","e","val","step","valueLabelDisplay","valueLabelFormat","idx","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/src/components/DuckMapFunction.js"],"sourcesContent":["/*\r\n    Author: Jacob Sullivan \r\n    Status: Unfinished\r\n    About: \r\n      - Day-by-day map of duck presence.\r\n      - Each day, ducks that will remain the following day are colored red/yellow (example: orange).\r\n      - Ducks that won't be present the next day at this lat/lon are colored blue (leaving).\r\n      - If there's no duck data at a location, the map has no overlay there.\r\n      - A time slider + \"Play\" button animates day by day.\r\n*/\r\nimport React, { useState, useEffect, useRef, useMemo } from \"react\";\r\nimport { DeckGL } from \"@deck.gl/react\";\r\nimport { TileLayer } from \"@deck.gl/geo-layers\";\r\nimport { BitmapLayer, ArcLayer, IconLayer } from \"@deck.gl/layers\";\r\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\r\nimport { Slider } from \"@mui/material\";\r\n\r\nconst INITIAL_VIEW = {\r\n  latitude: 36.28,\r\n  longitude: -89.42,\r\n  zoom: 5,\r\n  minZoom: 3,\r\n  maxZoom: 12,\r\n  pitch: 0,\r\n  bearing: 0,\r\n};\r\n\r\nexport default function Duckmapfunction() {\r\n  const [allData, setAllData] = useState([]);\r\n  const [timeSteps, setTimeSteps] = useState([]);\r\n  const [currentTimeIndex, setCurrentTimeIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState(null);\r\n  const [tooltipData, setTooltipData] = useState(null);\r\n  const deckRef = useRef(null);\r\n\r\n  //Fetch CSV data\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    fetch(`${process.env.PUBLIC_URL}/WaterdowlData1.csv`)\r\n      .then((res) => res.text())\r\n      .then((csvText) => {\r\n        if (!isMounted) return;\r\n        const lines = csvText.trim().split(\"\\n\");\r\n        const header = lines[0].split(\",\");\r\n        const timeIndex = header.indexOf(\"timestamp\");\r\n        const duckIdIndex = header.indexOf(\"duck_id\");\r\n        const latIndex = header.indexOf(\"lat\");\r\n        const lonIndex = header.indexOf(\"lon\");\r\n        const speciesIndex = header.indexOf(\"species\");\r\n\r\n        const parsedData = lines.slice(1).map((row) => {\r\n          const cols = row.split(\",\");\r\n          return {\r\n            timestamp: cols[timeIndex],\r\n            duckId: cols[duckIdIndex],\r\n            lat: parseFloat(cols[latIndex]),\r\n            lon: parseFloat(cols[lonIndex]),\r\n            species: speciesIndex !== -1 ? cols[speciesIndex] : \"unknown\",\r\n          };\r\n        });\r\n        setAllData(parsedData);\r\n        \r\n        // Extract unique timestamps and sort them\r\n        const uniqueTimes = Array.from(\r\n          new Set(parsedData.map((d) => d.timestamp))\r\n        ).sort((a, b) => new Date(a) - new Date(b));\r\n        setTimeSteps(uniqueTimes);\r\n      })\r\n      .catch((err) => console.error(\"Error with CSV:\", err));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n  // Time slider\r\n  useEffect(() => {\r\n    let timerId;\r\n    if (isPlaying && timeSteps.length > 0) {\r\n      timerId = setInterval(() => {\r\n        setCurrentTimeIndex((prev) =>\r\n          prev === timeSteps.length - 1 ? 0 : prev + 1\r\n        );\r\n      }, 1000);\r\n    }\r\n    return () => timerId && clearInterval(timerId);\r\n  }, [isPlaying, timeSteps]);\r\n\r\n  const currentTime = timeSteps[currentTimeIndex] || null;\r\n  const dataAtTime = allData.filter((d) => d.timestamp === currentTime);\r\n\r\n  const nextIndex =\r\n    currentTimeIndex < timeSteps.length - 1\r\n      ? currentTimeIndex + 1\r\n      : currentTimeIndex;\r\n  const nextTime = timeSteps[nextIndex] || null;\r\n  const dataNextTime = allData.filter((d) => d.timestamp === nextTime);\r\n\r\n  //Arrow function center\r\n  function getCentroid(points) {\r\n    if (!points.length) return null;\r\n    let sumLat = 0;\r\n    let sumLon = 0;\r\n    for (const p of points) {\r\n      sumLat += p.lat;\r\n      sumLon += p.lon;\r\n    }\r\n    const avgLat = sumLat / points.length;\r\n    const avgLon = sumLon / points.length;\r\n    return { lat: avgLat, lon: avgLon };\r\n  }\r\n\r\n  const centroidT = useMemo(() => getCentroid(dataAtTime), [dataAtTime]);\r\n  const centroidT1 = useMemo(() => getCentroid(dataNextTime), [dataNextTime]);\r\n\r\n  const arcsData = useMemo(() => {\r\n    if (!centroidT || !centroidT1) return [];\r\n    return [\r\n      {\r\n        source: [centroidT.lon, centroidT.lat],\r\n        target: [centroidT1.lon, centroidT1.lat],\r\n      },\r\n    ];\r\n  }, [centroidT, centroidT1]);\r\n\r\n  // Base map\r\n  const tileLayer = new TileLayer({\r\n    id: \"osm-tiles\",\r\n    data: \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n    minZoom: 3,\r\n    maxZoom: 12,\r\n    tileSize: 256,\r\n    renderSubLayers: (props) => {\r\n      const {\r\n        bbox: { west, south, east, north },\r\n      } = props.tile;\r\n      return new BitmapLayer(props, {\r\n        data: null,\r\n        image: props.data,\r\n        bounds: [west, south, east, north],\r\n      });\r\n    },\r\n  });\r\n\r\n  //Heatmap layer for \"leaving\" ducks \r\n  const leavingHeatmap = new HeatmapLayer({\r\n    id: \"heatmap-dayT\",\r\n    data: dataAtTime,\r\n    getPosition: (d) => [d.lon, d.lat],\r\n    getWeight: 1,\r\n    radiusPixels: 40,\r\n    intensity: 1,\r\n    threshold: 0.05,\r\n    opacity: 0.4,\r\n    colorRange: [\r\n      [242, 240, 247, 40],\r\n      [218, 218, 235, 90],\r\n      [188, 189, 220, 120],\r\n      [158, 154, 200, 150],\r\n      [117, 107, 177, 180],\r\n      [84, 39, 143, 200],\r\n    ],\r\n    pickable: true,\r\n    onHover: (info) => setHoverInfo(info),\r\n  });\r\n\r\n  //Heatmap layer for \"next day\" ducks\r\n  const nextDayHeatmap = new HeatmapLayer({\r\n    id: \"heatmap-dayT1\",\r\n    data: dataNextTime,\r\n    getPosition: (d) => [d.lon, d.lat],\r\n    getWeight: 1,\r\n    radiusPixels: 40,\r\n    intensity: 1,\r\n    threshold: 0.05,\r\n    opacity: 0.4,\r\n    colorRange: [\r\n      [254, 229, 217, 40],\r\n      [252, 187, 161, 80],\r\n      [252, 146, 114, 120],\r\n      [251, 106, 74, 150],\r\n      [222, 45, 38, 180],\r\n      [165, 15, 21, 200],\r\n    ],\r\n    pickable: true,\r\n    onHover: (info) => setHoverInfo(info),\r\n  });\r\n\r\n    const movementArc = new ArcLayer({\r\n    id: \"movement-arc\",\r\n    data: arcsData,\r\n    getSourcePosition: (d) => d.source,\r\n    getTargetPosition: (d) => d.target,\r\n    getSourceColor: [60, 60, 60],\r\n    getTargetColor: [200, 200, 200],\r\n    getWidth: 4,\r\n    greatCircle: false,\r\n    pickable: true,\r\n    onHover: (info) => setHoverInfo(info),\r\n  });\r\n\r\n  // Single arrow icon at centroid\r\n  const iconAtlas = `${process.env.PUBLIC_URL}/arrow.png`;\r\n  const iconMapping = {\r\n    arrow: { x: 0, y: 0, width: 512, height: 512, mask: true },\r\n  };\r\n\r\n  const arrowLayer = new IconLayer({\r\n    id: \"arrow-icon\",\r\n    data: arcsData,\r\n    iconAtlas,\r\n    iconMapping,\r\n    getIcon: () => \"arrow\",\r\n    getSize: 40,\r\n    getPosition: (d) => d.target,\r\n    getAngle: (d) => {\r\n      const [lon1, lat1] = d.source;\r\n      const [lon2, lat2] = d.target;\r\n      const dx = lon2 - lon1;\r\n      const dy = lat2 - lat1;\r\n      return (Math.atan2(dy, dx) * 180) / Math.PI;\r\n    },\r\n    pickable: true,\r\n    onHover: (info) => setHoverInfo(info),\r\n  });\r\n\r\n  const layers = [\r\n    tileLayer,\r\n    leavingHeatmap,\r\n    nextDayHeatmap,\r\n    movementArc,\r\n    arrowLayer,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (hoverInfo && hoverInfo.coordinate) {\r\n      const [lon, lat] = hoverInfo.coordinate;\r\n      const pointsUrl = `https://api.weather.gov/points/${lat},${lon}`;\r\n      fetch(pointsUrl)\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw new Error(`NOAA points fetch error: ${res.status}`);\r\n          }\r\n          return res.json();\r\n        })\r\n        .then((pointData) => {\r\n          if (!pointData.properties?.forecast) {\r\n            throw new Error(\"No forecast found.\");\r\n          }\r\n          return fetch(pointData.properties.forecast);\r\n        })\r\n        .then((res) => res.json())\r\n        .then((forecastData) => {\r\n          const period = forecastData.properties?.periods?.[0];\r\n          if (!period) throw new Error(\"No forecast period data.\");\r\n          setTooltipData({\r\n            temperature: period.temperature,\r\n            temperatureUnit: period.temperatureUnit,\r\n            windSpeed: period.windSpeed,\r\n            windDirection: period.windDirection,\r\n            shortForecast: period.shortForecast,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Error grabbing NOAA data:\", err);\r\n          setTooltipData(null);\r\n        });\r\n    } else {\r\n      setTooltipData(null);\r\n    }\r\n  }, [hoverInfo]);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\r\n      <DeckGL\r\n        ref={deckRef}\r\n        initialViewState={INITIAL_VIEW}\r\n        controller={true}\r\n        layers={layers}\r\n        style={{ width: \"100%\", height: \"100%\" }}\r\n      />\r\n      {hoverInfo && hoverInfo.x !== undefined && hoverInfo.y !== undefined && tooltipData && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 1000,\r\n            pointerEvents: \"none\",\r\n            left: hoverInfo.x,\r\n            top: hoverInfo.y,\r\n            background: \"rgba(255,255,255,0.9)\",\r\n            padding: \"8px\",\r\n            borderRadius: \"4px\",\r\n            transform: \"translate(10px, 10px)\",\r\n            fontSize: \"12px\",\r\n            maxWidth: \"220px\",\r\n          }}\r\n        >\r\n          <div style={{ fontWeight: \"bold\", marginBottom: \"4px\" }}>NOAA Forecast</div>\r\n          <div>\r\n            Temp: {tooltipData.temperature}°{tooltipData.temperatureUnit}\r\n          </div>\r\n          <div>\r\n            Wind: {tooltipData.windSpeed} {tooltipData.windDirection}\r\n          </div>\r\n          <div>{tooltipData.shortForecast}</div>\r\n        </div>\r\n      )}\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          bottom: 20,\r\n          left: 20,\r\n          width: \"350px\",\r\n          background: \"rgba(255,255,255,0.8)\",\r\n          padding: \"10px\",\r\n          borderRadius: \"8px\",\r\n          zIndex: 999,\r\n        }}\r\n      >\r\n        <Slider\r\n          min={0}\r\n          max={timeSteps.length - 1}\r\n          value={currentTimeIndex}\r\n          onChange={(e, val) => setCurrentTimeIndex(val)}\r\n          step={1}\r\n          valueLabelDisplay=\"auto\"\r\n          valueLabelFormat={(idx) => timeSteps[idx] || \"\"}\r\n        />\r\n        <div style={{ marginBottom: \"8px\" }}>\r\n          Current Time: <strong>{currentTime || \"Loading...\"}</strong>\r\n        </div>\r\n        <button onClick={() => setIsPlaying((prev) => !prev)}>\r\n          {isPlaying ? \"Pause\" : \"Play\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}