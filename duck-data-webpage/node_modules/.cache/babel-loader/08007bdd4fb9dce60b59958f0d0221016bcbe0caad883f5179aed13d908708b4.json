{"ast":null,"code":"import { TOUCH_ACTION_COMPUTE } from \"./touchaction-Consts.js\";\nimport cleanTouchActions from \"./clean-touch-actions.js\";\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n */\nexport class TouchAction {\n  constructor(manager, value) {\n    this.actions = '';\n    this.manager = manager;\n    this.set(value);\n  }\n  /**\n   * set the touchAction value on the element or enable the polyfill\n   */\n  set(value) {\n    // find out the touch-action by the event handlers\n    if (value === TOUCH_ACTION_COMPUTE) {\n      value = this.compute();\n    }\n    if (this.manager.element) {\n      this.manager.element.style.touchAction = value;\n      this.actions = value;\n    }\n  }\n  /**\n   * just re-set the touchAction value\n   */\n  update() {\n    this.set(this.manager.options.touchAction);\n  }\n  /**\n   * compute the value for the touchAction property based on the recognizer's settings\n   */\n  compute() {\n    let actions = [];\n    for (const recognizer of this.manager.recognizers) {\n      if (recognizer.options.enable) {\n        actions = actions.concat(recognizer.getTouchAction());\n      }\n    }\n    return cleanTouchActions(actions.join(' '));\n  }\n}","map":{"version":3,"names":["TOUCH_ACTION_COMPUTE","cleanTouchActions","TouchAction","constructor","manager","value","actions","set","compute","element","style","touchAction","update","options","recognizer","recognizers","enable","concat","getTouchAction","join"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\touchaction\\touchaction.ts"],"sourcesContent":["import {TOUCH_ACTION_COMPUTE} from './touchaction-Consts';\nimport cleanTouchActions from './clean-touch-actions';\n\nimport type {Manager} from '../manager';\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n */\nexport class TouchAction {\n  manager: Manager;\n  actions: string = '';\n\n  constructor(manager: Manager, value: string) {\n    this.manager = manager;\n    this.set(value);\n  }\n\n  /**\n   * set the touchAction value on the element or enable the polyfill\n   */\n  set(value: string) {\n    // find out the touch-action by the event handlers\n    if (value === TOUCH_ACTION_COMPUTE) {\n      value = this.compute();\n    }\n\n    if (this.manager.element) {\n      this.manager.element.style.touchAction = value;\n      this.actions = value;\n    }\n  }\n\n  /**\n   * just re-set the touchAction value\n   */\n  update() {\n    this.set(this.manager.options.touchAction);\n  }\n\n  /**\n   * compute the value for the touchAction property based on the recognizer's settings\n   */\n  compute(): string {\n    let actions: string[] = [];\n    for (const recognizer of this.manager.recognizers) {\n      if (recognizer.options.enable) {\n        actions = actions.concat(recognizer.getTouchAction());\n      }\n    }\n    return cleanTouchActions(actions.join(' '));\n  }\n}\n"],"mappings":"AAAA,SAAQA,oBAAoB,QAAC;AAC7B,OAAOC,iBAAiB;AAIxB;;;;AAIA,OAAM,MAAOC,WAAW;EAItBC,YAAYC,OAAgB,EAAEC,KAAa;IAF3C,KAAAC,OAAO,GAAW,EAAE;IAGlB,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,GAAG,CAACF,KAAK,CAAC;EACjB;EAEA;;;EAGAE,GAAGA,CAACF,KAAa;IACf;IACA,IAAIA,KAAK,KAAKL,oBAAoB,EAAE;MAClCK,KAAK,GAAG,IAAI,CAACG,OAAO,EAAE;IACxB;IAEA,IAAI,IAAI,CAACJ,OAAO,CAACK,OAAO,EAAE;MACxB,IAAI,CAACL,OAAO,CAACK,OAAO,CAACC,KAAK,CAACC,WAAW,GAAGN,KAAK;MAC9C,IAAI,CAACC,OAAO,GAAGD,KAAK;IACtB;EACF;EAEA;;;EAGAO,MAAMA,CAAA;IACJ,IAAI,CAACL,GAAG,CAAC,IAAI,CAACH,OAAO,CAACS,OAAO,CAACF,WAAW,CAAC;EAC5C;EAEA;;;EAGAH,OAAOA,CAAA;IACL,IAAIF,OAAO,GAAa,EAAE;IAC1B,KAAK,MAAMQ,UAAU,IAAI,IAAI,CAACV,OAAO,CAACW,WAAW,EAAE;MACjD,IAAID,UAAU,CAACD,OAAO,CAACG,MAAM,EAAE;QAC7BV,OAAO,GAAGA,OAAO,CAACW,MAAM,CAACH,UAAU,CAACI,cAAc,EAAE,CAAC;MACvD;IACF;IACA,OAAOjB,iBAAiB,CAACK,OAAO,CAACa,IAAI,CAAC,GAAG,CAAC,CAAC;EAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}