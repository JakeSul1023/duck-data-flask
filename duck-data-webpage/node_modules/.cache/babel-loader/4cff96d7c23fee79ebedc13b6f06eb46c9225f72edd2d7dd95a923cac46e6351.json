{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Buffer } from '@luma.gl/core';\nimport { getPassthroughFS } from '@luma.gl/shadertools';\nimport { Model } from \"../model/model.js\";\n/**\n * Manages a WebGL program (pipeline) for buffer→buffer transforms.\n * @note Only works under WebGL2.\n */\nexport class BufferTransform {\n  device;\n  model;\n  transformFeedback;\n  static defaultProps = {\n    ...Model.defaultProps,\n    outputs: undefined,\n    feedbackBuffers: undefined\n  };\n  static isSupported(device) {\n    return device?.info?.type === 'webgl';\n  }\n  constructor(device, props = BufferTransform.defaultProps) {\n    if (!BufferTransform.isSupported(device)) {\n      throw new Error('BufferTransform not yet implemented on WebGPU');\n    }\n    this.device = device;\n    this.model = new Model(this.device, {\n      id: props.id || 'buffer-transform-model',\n      fs: props.fs || getPassthroughFS(),\n      topology: props.topology || 'point-list',\n      varyings: props.outputs || props.varyings,\n      ...props\n    });\n    this.transformFeedback = this.device.createTransformFeedback({\n      layout: this.model.pipeline.shaderLayout,\n      // @ts-expect-error TODO\n      buffers: props.feedbackBuffers\n    });\n    this.model.setTransformFeedback(this.transformFeedback);\n    Object.seal(this);\n  }\n  /** Destroy owned resources. */\n  destroy() {\n    if (this.model) {\n      this.model.destroy();\n    }\n  }\n  /** @deprecated Use {@link destroy}. */\n  delete() {\n    this.destroy();\n  }\n  /** Run one transform loop. */\n  run(options) {\n    if (options?.inputBuffers) {\n      this.model.setAttributes(options.inputBuffers);\n    }\n    if (options?.outputBuffers) {\n      this.transformFeedback.setBuffers(options.outputBuffers);\n    }\n    const renderPass = this.device.beginRenderPass(options);\n    this.model.draw(renderPass);\n    renderPass.end();\n  }\n  // DEPRECATED METHODS\n  /** @deprecated App knows what buffers it is passing in - Returns the {@link Buffer} or {@link BufferRange} for given varying name. */\n  getBuffer(varyingName) {\n    return this.transformFeedback.getBuffer(varyingName);\n  }\n  /** @deprecated App knows what buffers it is passing in - Reads the {@link Buffer} or {@link BufferRange} for given varying name. */\n  readAsync(varyingName) {\n    const result = this.getBuffer(varyingName);\n    if (!result) {\n      throw new Error('BufferTransform#getBuffer');\n    }\n    if (result instanceof Buffer) {\n      return result.readAsync();\n    }\n    const {\n      buffer,\n      byteOffset = 0,\n      byteLength = buffer.byteLength\n    } = result;\n    return buffer.readAsync(byteOffset, byteLength);\n  }\n}","map":{"version":3,"names":["Buffer","getPassthroughFS","Model","BufferTransform","device","model","transformFeedback","defaultProps","outputs","undefined","feedbackBuffers","isSupported","info","type","constructor","props","Error","id","fs","topology","varyings","createTransformFeedback","layout","pipeline","shaderLayout","buffers","setTransformFeedback","Object","seal","destroy","delete","run","options","inputBuffers","setAttributes","outputBuffers","setBuffers","renderPass","beginRenderPass","draw","end","getBuffer","varyingName","readAsync","result","buffer","byteOffset","byteLength"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\compute\\buffer-transform.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device, Buffer, BufferRange, TransformFeedback, RenderPassProps} from '@luma.gl/core';\nimport {getPassthroughFS} from '@luma.gl/shadertools';\nimport {Model} from '../model/model';\nimport type {ModelProps} from '../model/model';\n\n/**\n * Properties for creating a {@link BufferTransform}\n * @note Only works under WebGL2.\n */\nexport type BufferTransformProps = Omit<ModelProps, 'fs'> & {\n  /** Optional fragment shader - normally not used in transforms */\n  fs?: ModelProps['fs']; // override as optional\n  /** A list of named outputs corresponding to shader declarations (varyings in WebGL) */\n  outputs?: string[];\n  /** @deprecated Use run({outputBuffers}) instead - Map of output buffers that the shaders will write results of computations to */\n  feedbackBuffers?: Record<string, Buffer | BufferRange>;\n};\n\n/**\n * Manages a WebGL program (pipeline) for buffer→buffer transforms.\n * @note Only works under WebGL2.\n */\nexport class BufferTransform {\n  readonly device: Device;\n  readonly model: Model;\n  readonly transformFeedback: TransformFeedback;\n\n  static defaultProps: Required<BufferTransformProps> = {\n    ...Model.defaultProps,\n    outputs: undefined!,\n    feedbackBuffers: undefined!\n  };\n\n  static isSupported(device: Device): boolean {\n    return device?.info?.type === 'webgl';\n  }\n\n  constructor(device: Device, props: BufferTransformProps = BufferTransform.defaultProps) {\n    if (!BufferTransform.isSupported(device)) {\n      throw new Error('BufferTransform not yet implemented on WebGPU');\n    }\n\n    this.device = device;\n\n    this.model = new Model(this.device, {\n      id: props.id || 'buffer-transform-model',\n      fs: props.fs || getPassthroughFS(),\n      topology: props.topology || 'point-list',\n      varyings: props.outputs || props.varyings,\n      ...props\n    });\n\n    this.transformFeedback = this.device.createTransformFeedback({\n      layout: this.model.pipeline.shaderLayout,\n      // @ts-expect-error TODO\n      buffers: props.feedbackBuffers\n    });\n\n    this.model.setTransformFeedback(this.transformFeedback);\n\n    Object.seal(this);\n  }\n\n  /** Destroy owned resources. */\n  destroy(): void {\n    if (this.model) {\n      this.model.destroy();\n    }\n  }\n\n  /** @deprecated Use {@link destroy}. */\n  delete(): void {\n    this.destroy();\n  }\n\n  /** Run one transform loop. */\n  run(\n    options?: RenderPassProps & {\n      inputBuffers?: Record<string, Buffer>;\n      outputBuffers?: Record<string, Buffer>;\n    }\n  ): void {\n    if (options?.inputBuffers) {\n      this.model.setAttributes(options.inputBuffers);\n    }\n    if (options?.outputBuffers) {\n      this.transformFeedback.setBuffers(options.outputBuffers);\n    }\n    const renderPass = this.device.beginRenderPass(options);\n    this.model.draw(renderPass);\n    renderPass.end();\n  }\n\n  // DEPRECATED METHODS\n\n  /** @deprecated App knows what buffers it is passing in - Returns the {@link Buffer} or {@link BufferRange} for given varying name. */\n  getBuffer(varyingName: string): Buffer | BufferRange | null {\n    return this.transformFeedback.getBuffer(varyingName);\n  }\n\n  /** @deprecated App knows what buffers it is passing in - Reads the {@link Buffer} or {@link BufferRange} for given varying name. */\n  readAsync(varyingName: string): Promise<Uint8Array> {\n    const result = this.getBuffer(varyingName);\n    if (!result) {\n      throw new Error('BufferTransform#getBuffer');\n    }\n    if (result instanceof Buffer) {\n      return result.readAsync();\n    }\n    const {buffer, byteOffset = 0, byteLength = buffer.byteLength} = result;\n    return buffer.readAsync(byteOffset, byteLength);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}