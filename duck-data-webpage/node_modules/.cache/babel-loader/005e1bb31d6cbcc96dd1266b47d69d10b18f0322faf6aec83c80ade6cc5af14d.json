{"ast":null,"code":"import { DracoLoader as DracoWorkerLoader } from \"./draco-loader.js\";\nimport DracoParser from \"./lib/draco-parser.js\";\nimport { loadDracoDecoderModule } from \"./lib/draco-module-loader.js\";\nimport { VERSION } from \"./lib/utils/version.js\";\n// Module constants\nexport { DRACO_EXTERNAL_LIBRARIES, DRACO_EXTERNAL_LIBRARY_URLS } from \"./lib/draco-module-loader.js\";\nexport { DracoWriter } from \"./draco-writer.js\";\n/**\n * Browser worker doesn't work because of issue during \"draco_encoder.js\" loading.\n * Refused to execute script from 'https://raw.githubusercontent.com/google/draco/1.4.1/javascript/draco_encoder.js' because its MIME type ('') is not executable.\n */\nexport const DracoWriterWorker = {\n  id: 'draco-writer',\n  name: 'Draco compressed geometry writer',\n  module: 'draco',\n  version: VERSION,\n  worker: true,\n  options: {\n    draco: {},\n    source: null\n  }\n};\nexport { DracoWorkerLoader };\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\nasync function parse(arrayBuffer, options) {\n  const {\n    draco\n  } = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}","map":{"version":3,"names":["DracoLoader","DracoWorkerLoader","DracoParser","loadDracoDecoderModule","VERSION","DRACO_EXTERNAL_LIBRARIES","DRACO_EXTERNAL_LIBRARY_URLS","DracoWriter","DracoWriterWorker","id","name","module","version","worker","options","draco","source","parse","arrayBuffer","dracoParser","parseSync","destroy"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/draco/dist/index.js"],"sourcesContent":["import { DracoLoader as DracoWorkerLoader } from \"./draco-loader.js\";\nimport DracoParser from \"./lib/draco-parser.js\";\nimport { loadDracoDecoderModule } from \"./lib/draco-module-loader.js\";\nimport { VERSION } from \"./lib/utils/version.js\";\n// Module constants\nexport { DRACO_EXTERNAL_LIBRARIES, DRACO_EXTERNAL_LIBRARY_URLS } from \"./lib/draco-module-loader.js\";\nexport { DracoWriter } from \"./draco-writer.js\";\n/**\n * Browser worker doesn't work because of issue during \"draco_encoder.js\" loading.\n * Refused to execute script from 'https://raw.githubusercontent.com/google/draco/1.4.1/javascript/draco_encoder.js' because its MIME type ('') is not executable.\n */\nexport const DracoWriterWorker = {\n    id: 'draco-writer',\n    name: 'Draco compressed geometry writer',\n    module: 'draco',\n    version: VERSION,\n    worker: true,\n    options: {\n        draco: {},\n        source: null\n    }\n};\nexport { DracoWorkerLoader };\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n    ...DracoWorkerLoader,\n    parse\n};\nasync function parse(arrayBuffer, options) {\n    const { draco } = await loadDracoDecoderModule(options);\n    const dracoParser = new DracoParser(draco);\n    try {\n        return dracoParser.parseSync(arrayBuffer, options?.draco);\n    }\n    finally {\n        dracoParser.destroy();\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,IAAIC,iBAAiB,QAAQ,mBAAmB;AACpE,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,SAASC,sBAAsB,QAAQ,8BAA8B;AACrE,SAASC,OAAO,QAAQ,wBAAwB;AAChD;AACA,SAASC,wBAAwB,EAAEC,2BAA2B,QAAQ,8BAA8B;AACpG,SAASC,WAAW,QAAQ,mBAAmB;AAC/C;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG;EAC7BC,EAAE,EAAE,cAAc;EAClBC,IAAI,EAAE,kCAAkC;EACxCC,MAAM,EAAE,OAAO;EACfC,OAAO,EAAER,OAAO;EAChBS,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;IACLC,KAAK,EAAE,CAAC,CAAC;IACTC,MAAM,EAAE;EACZ;AACJ,CAAC;AACD,SAASf,iBAAiB;AAC1B;AACA;AACA;AACA,OAAO,MAAMD,WAAW,GAAG;EACvB,GAAGC,iBAAiB;EACpBgB;AACJ,CAAC;AACD,eAAeA,KAAKA,CAACC,WAAW,EAAEJ,OAAO,EAAE;EACvC,MAAM;IAAEC;EAAM,CAAC,GAAG,MAAMZ,sBAAsB,CAACW,OAAO,CAAC;EACvD,MAAMK,WAAW,GAAG,IAAIjB,WAAW,CAACa,KAAK,CAAC;EAC1C,IAAI;IACA,OAAOI,WAAW,CAACC,SAAS,CAACF,WAAW,EAAEJ,OAAO,EAAEC,KAAK,CAAC;EAC7D,CAAC,SACO;IACJI,WAAW,CAACE,OAAO,CAAC,CAAC;EACzB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}