{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { isImageTypeSupported, getDefaultImageType } from \"../category-api/image-type.js\";\nimport { getImageData } from \"../category-api/parsed-image-api.js\";\nimport { parseToImage } from \"./parse-to-image.js\";\nimport { parseToImageBitmap } from \"./parse-to-image-bitmap.js\";\nimport { parseToNodeImage } from \"./parse-to-node-image.js\";\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n  const {\n    url\n  } = context || {};\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n  return image;\n}\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}","map":{"version":3,"names":["assert","isImageTypeSupported","getDefaultImageType","getImageData","parseToImage","parseToImageBitmap","parseToNodeImage","parseImage","arrayBuffer","options","context","imageOptions","image","imageType","type","url","loadType","getLoadableImageType"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/images/dist/lib/parsers/parse-image.js"],"sourcesContent":["import { assert } from '@loaders.gl/loader-utils';\nimport { isImageTypeSupported, getDefaultImageType } from \"../category-api/image-type.js\";\nimport { getImageData } from \"../category-api/parsed-image-api.js\";\nimport { parseToImage } from \"./parse-to-image.js\";\nimport { parseToImageBitmap } from \"./parse-to-image-bitmap.js\";\nimport { parseToNodeImage } from \"./parse-to-node-image.js\";\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport async function parseImage(arrayBuffer, options, context) {\n    options = options || {};\n    const imageOptions = options.image || {};\n    // The user can request a specific output format via `options.image.type`\n    const imageType = imageOptions.type || 'auto';\n    const { url } = context || {};\n    // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n    const loadType = getLoadableImageType(imageType);\n    let image;\n    switch (loadType) {\n        case 'imagebitmap':\n            image = await parseToImageBitmap(arrayBuffer, options, url);\n            break;\n        case 'image':\n            image = await parseToImage(arrayBuffer, options, url);\n            break;\n        case 'data':\n            // Node.js loads imagedata directly\n            image = await parseToNodeImage(arrayBuffer, options);\n            break;\n        default:\n            assert(false);\n    }\n    // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n    if (imageType === 'data') {\n        image = getImageData(image);\n    }\n    return image;\n}\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n    switch (type) {\n        case 'auto':\n        case 'data':\n            // Browser: For image data we need still need to load using an image format\n            // Node: the default image type is `data`.\n            return getDefaultImageType();\n        default:\n            // Throw an error if not supported\n            isImageTypeSupported(type);\n            return type;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,oBAAoB,EAAEC,mBAAmB,QAAQ,+BAA+B;AACzF,SAASC,YAAY,QAAQ,qCAAqC;AAClE,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,WAAW,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC5DD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,MAAME,YAAY,GAAGF,OAAO,CAACG,KAAK,IAAI,CAAC,CAAC;EACxC;EACA,MAAMC,SAAS,GAAGF,YAAY,CAACG,IAAI,IAAI,MAAM;EAC7C,MAAM;IAAEC;EAAI,CAAC,GAAGL,OAAO,IAAI,CAAC,CAAC;EAC7B;EACA,MAAMM,QAAQ,GAAGC,oBAAoB,CAACJ,SAAS,CAAC;EAChD,IAAID,KAAK;EACT,QAAQI,QAAQ;IACZ,KAAK,aAAa;MACdJ,KAAK,GAAG,MAAMP,kBAAkB,CAACG,WAAW,EAAEC,OAAO,EAAEM,GAAG,CAAC;MAC3D;IACJ,KAAK,OAAO;MACRH,KAAK,GAAG,MAAMR,YAAY,CAACI,WAAW,EAAEC,OAAO,EAAEM,GAAG,CAAC;MACrD;IACJ,KAAK,MAAM;MACP;MACAH,KAAK,GAAG,MAAMN,gBAAgB,CAACE,WAAW,EAAEC,OAAO,CAAC;MACpD;IACJ;MACIT,MAAM,CAAC,KAAK,CAAC;EACrB;EACA;EACA,IAAIa,SAAS,KAAK,MAAM,EAAE;IACtBD,KAAK,GAAGT,YAAY,CAACS,KAAK,CAAC;EAC/B;EACA,OAAOA,KAAK;AAChB;AACA;AACA,SAASK,oBAAoBA,CAACH,IAAI,EAAE;EAChC,QAAQA,IAAI;IACR,KAAK,MAAM;IACX,KAAK,MAAM;MACP;MACA;MACA,OAAOZ,mBAAmB,CAAC,CAAC;IAChC;MACI;MACAD,oBAAoB,CAACa,IAAI,CAAC;MAC1B,OAAOA,IAAI;EACnB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}