{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTableLength, getTableRowAsObject } from '@loaders.gl/schema';\nimport { getGeoMetadata } from \"../geo/geoparquet-metadata.js\";\n/** TODO - move to loaders.gl/gis? */\nexport function convertWKBTableToGeoJSON(table, schema, loaders) {\n  const geoMetadata = getGeoMetadata(schema);\n  const primaryColumn = geoMetadata?.primary_column;\n  if (!primaryColumn) {\n    throw new Error('no geometry column');\n  }\n  const columnMetadata = geoMetadata.columns[primaryColumn];\n  const features = [];\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    const row = getTableRowAsObject(table, rowIndex);\n    const geometry = parseGeometry(row[primaryColumn], columnMetadata, loaders);\n    delete row[primaryColumn];\n    const feature = {\n      type: 'Feature',\n      geometry: geometry,\n      properties: row\n    };\n    features.push(feature);\n  }\n  return {\n    shape: 'geojson-table',\n    schema,\n    type: 'FeatureCollection',\n    features\n  };\n}\nfunction parseGeometry(geometry, columnMetadata, loaders) {\n  switch (columnMetadata.encoding) {\n    case 'wkt':\n      const wktLoader = loaders.find(loader => loader.id === 'wkt');\n      return wktLoader?.parseTextSync?.(geometry) || null;\n    case 'wkb':\n    default:\n      const wkbLoader = loaders.find(loader => loader.id === 'wkb');\n      const arrayBuffer = ArrayBuffer.isView(geometry) ? geometry.buffer.slice(geometry.byteOffset, geometry.byteOffset + geometry.byteLength) : geometry;\n      const geojson = wkbLoader?.parseSync?.(arrayBuffer, {\n        wkb: {\n          shape: 'geojson-geometry'\n        }\n      });\n      return geojson;\n    // binaryGeometry ? binaryToGeometry(binaryGeometry) : null;\n    // const binaryGeometry = WKBLoader.parseSync?.(geometry);\n    // ts-ignore\n    // return binaryGeometry ? binaryToGeometry(binaryGeometry) : null;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}