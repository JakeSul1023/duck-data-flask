{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { deepEqual } from \"../utils/deep-equal.js\";\nimport log from \"../utils/log.js\";\nimport { flatten } from \"../utils/flatten.js\";\nexport default class ViewManager {\n  constructor(props) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n    Object.seal(this);\n    // Init with default map viewport\n    this.setProps(props);\n  }\n  /** Remove all resources and event listeners */\n  finalize() {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n  /** Check if a redraw is needed */\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n  /** Checks each viewport for transition updates */\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n  /** Get a map of all views */\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n  /** Resolves a viewId string to a View */\n  getView(viewId) {\n    return this.views.find(view => view.id === viewId);\n  }\n  /** Returns the viewState for a specific viewId. Matches the viewState by\n    1. view.viewStateId\n    2. view.id\n    3. root viewState\n    then applies the view's filter if any */\n  getViewState(viewOrViewId) {\n    const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    // Backward compatibility: view state for single view\n    const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {\n      x: xyz[0],\n      y: xyz[1]\n    };\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n  /** Update the manager with new Deck props */\n  setProps(props) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n  //\n  // PRIVATE METHODS\n  //\n  _update() {\n    this._isUpdating = true;\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n    this._isUpdating = false;\n  }\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n    this.views = views;\n  }\n  _setViewState(viewState) {\n    if (viewState) {\n      // depth = 3 when comparing viewStates: viewId.position.0\n      const viewStateChanged = !deepEqual(viewState, this.viewState, 3);\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n  _createController(view, props) {\n    const Controller = props.type;\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._eventCallbacks.onViewStateChange,\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState => this.getView(view.id)?.makeViewport({\n        viewState,\n        width: this.width,\n        height: this.height\n      })\n    });\n    return controller;\n  }\n  _updateController(view, viewState, viewport, controller) {\n    const controllerProps = view.controller;\n    if (controllerProps && viewport) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n      // Create controller if not already existing or if the type of the\n      // controller has changed.\n      if (!controller || controller.constructor !== controllerProps.type) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {\n      views\n    } = this;\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--;) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({\n        viewState,\n        width: this.width,\n        height: this.height\n      });\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n      if (viewport) {\n        this._viewports.unshift(viewport);\n      }\n    }\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n    this._buildViewportMap();\n  }\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n//# sourceMappingURL=view-manager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}