{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { _LayersPass as LayersPass } from '@deck.gl/core';\nconst MASK_BLENDING = {\n  blendColorOperation: 'subtract',\n  blendColorSrcFactor: 'zero',\n  blendColorDstFactor: 'one',\n  blendAlphaOperation: 'subtract',\n  blendAlphaSrcFactor: 'zero',\n  blendAlphaDstFactor: 'one'\n};\nexport default class MaskPass extends LayersPass {\n  constructor(device, props) {\n    super(device, props);\n    const {\n      mapSize = 2048\n    } = props;\n    this.maskMap = device.createTexture({\n      format: 'rgba8unorm',\n      width: mapSize,\n      height: mapSize,\n      sampler: {\n        minFilter: 'linear',\n        magFilter: 'linear',\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge'\n      }\n    });\n    this.fbo = device.createFramebuffer({\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      colorAttachments: [this.maskMap]\n    });\n  }\n  render(options) {\n    const colorMask = 2 ** options.channel;\n    const clearColor = [255, 255, 255, 255];\n    super.render({\n      ...options,\n      clearColor,\n      colorMask,\n      target: this.fbo,\n      pass: 'mask'\n    });\n  }\n  getLayerParameters(layer, layerIndex, viewport) {\n    return {\n      ...layer.props.parameters,\n      blend: true,\n      depthCompare: 'always',\n      ...MASK_BLENDING\n    };\n  }\n  shouldDrawLayer(layer) {\n    return layer.props.operation.includes('mask');\n  }\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n}","map":{"version":3,"names":["_LayersPass","LayersPass","MASK_BLENDING","blendColorOperation","blendColorSrcFactor","blendColorDstFactor","blendAlphaOperation","blendAlphaSrcFactor","blendAlphaDstFactor","MaskPass","constructor","device","props","mapSize","maskMap","createTexture","format","width","height","sampler","minFilter","magFilter","addressModeU","addressModeV","fbo","createFramebuffer","id","colorAttachments","render","options","colorMask","channel","clearColor","target","pass","getLayerParameters","layer","layerIndex","viewport","parameters","blend","depthCompare","shouldDrawLayer","operation","includes","delete"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\extensions\\src\\mask\\mask-pass.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  Device,\n  Framebuffer,\n  Parameters,\n  RenderPipelineParameters,\n  Texture\n} from '@luma.gl/core';\nimport {Layer, _LayersPass as LayersPass, LayersPassRenderOptions, Viewport} from '@deck.gl/core';\n\ntype MaskPassRenderOptions = LayersPassRenderOptions & {\n  /** The channel to render into, 0:red, 1:green, 2:blue, 3:alpha */\n  channel: 0 | 1 | 2 | 3;\n};\n\nconst MASK_BLENDING: RenderPipelineParameters = {\n  blendColorOperation: 'subtract',\n  blendColorSrcFactor: 'zero',\n  blendColorDstFactor: 'one',\n  blendAlphaOperation: 'subtract',\n  blendAlphaSrcFactor: 'zero',\n  blendAlphaDstFactor: 'one'\n};\n\nexport default class MaskPass extends LayersPass {\n  maskMap: Texture;\n  fbo: Framebuffer;\n\n  constructor(device: Device, props: {id: string; mapSize?: number}) {\n    super(device, props);\n\n    const {mapSize = 2048} = props;\n\n    this.maskMap = device.createTexture({\n      format: 'rgba8unorm',\n      width: mapSize,\n      height: mapSize,\n      sampler: {\n        minFilter: 'linear',\n        magFilter: 'linear',\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge'\n      }\n    });\n\n    this.fbo = device.createFramebuffer({\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      colorAttachments: [this.maskMap]\n    });\n  }\n\n  render(options: MaskPassRenderOptions) {\n    const colorMask = 2 ** options.channel;\n    const clearColor = [255, 255, 255, 255];\n    super.render({...options, clearColor, colorMask, target: this.fbo, pass: 'mask'});\n  }\n\n  protected getLayerParameters(\n    layer: Layer<{}>,\n    layerIndex: number,\n    viewport: Viewport\n  ): Parameters {\n    return {\n      ...layer.props.parameters,\n      blend: true,\n      depthCompare: 'always',\n      ...MASK_BLENDING\n    };\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.operation.includes('mask');\n  }\n\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AASA,SAAeA,WAAW,IAAIC,UAAU,QAA0C,eAAe;AAOjG,MAAMC,aAAa,GAA6B;EAC9CC,mBAAmB,EAAE,UAAU;EAC/BC,mBAAmB,EAAE,MAAM;EAC3BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,UAAU;EAC/BC,mBAAmB,EAAE,MAAM;EAC3BC,mBAAmB,EAAE;CACtB;AAED,eAAc,MAAOC,QAAS,SAAQR,UAAU;EAI9CS,YAAYC,MAAc,EAAEC,KAAqC;IAC/D,KAAK,CAACD,MAAM,EAAEC,KAAK,CAAC;IAEpB,MAAM;MAACC,OAAO,GAAG;IAAI,CAAC,GAAGD,KAAK;IAE9B,IAAI,CAACE,OAAO,GAAGH,MAAM,CAACI,aAAa,CAAC;MAClCC,MAAM,EAAE,YAAY;MACpBC,KAAK,EAAEJ,OAAO;MACdK,MAAM,EAAEL,OAAO;MACfM,OAAO,EAAE;QACPC,SAAS,EAAE,QAAQ;QACnBC,SAAS,EAAE,QAAQ;QACnBC,YAAY,EAAE,eAAe;QAC7BC,YAAY,EAAE;;KAEjB,CAAC;IAEF,IAAI,CAACC,GAAG,GAAGb,MAAM,CAACc,iBAAiB,CAAC;MAClCC,EAAE,EAAE,SAAS;MACbT,KAAK,EAAEJ,OAAO;MACdK,MAAM,EAAEL,OAAO;MACfc,gBAAgB,EAAE,CAAC,IAAI,CAACb,OAAO;KAChC,CAAC;EACJ;EAEAc,MAAMA,CAACC,OAA8B;IACnC,MAAMC,SAAS,GAAG,CAAC,IAAID,OAAO,CAACE,OAAO;IACtC,MAAMC,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACvC,KAAK,CAACJ,MAAM,CAAC;MAAC,GAAGC,OAAO;MAAEG,UAAU;MAAEF,SAAS;MAAEG,MAAM,EAAE,IAAI,CAACT,GAAG;MAAEU,IAAI,EAAE;IAAM,CAAC,CAAC;EACnF;EAEUC,kBAAkBA,CAC1BC,KAAgB,EAChBC,UAAkB,EAClBC,QAAkB;IAElB,OAAO;MACL,GAAGF,KAAK,CAACxB,KAAK,CAAC2B,UAAU;MACzBC,KAAK,EAAE,IAAI;MACXC,YAAY,EAAE,QAAQ;MACtB,GAAGvC;KACJ;EACH;EAEAwC,eAAeA,CAACN,KAAK;IACnB,OAAOA,KAAK,CAACxB,KAAK,CAAC+B,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC;EAC/C;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACrB,GAAG,CAACqB,MAAM,EAAE;IACjB,IAAI,CAAC/B,OAAO,CAAC+B,MAAM,EAAE;EACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}