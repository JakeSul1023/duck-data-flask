{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { DeviceLimits } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\n// prettier-ignore\nexport class WebGLDeviceLimits extends DeviceLimits {\n  get maxTextureDimension1D() {\n    return 0;\n  } // WebGL does not support 1D textures\n  get maxTextureDimension2D() {\n    return this.getParameter(3379);\n  }\n  get maxTextureDimension3D() {\n    return this.getParameter(32883);\n  }\n  get maxTextureArrayLayers() {\n    return this.getParameter(35071);\n  }\n  get maxBindGroups() {\n    return 0;\n  }\n  get maxDynamicUniformBuffersPerPipelineLayout() {\n    return 0;\n  } // TBD\n  get maxDynamicStorageBuffersPerPipelineLayout() {\n    return 0;\n  } // TBD\n  get maxSampledTexturesPerShaderStage() {\n    return this.getParameter(35660);\n  } // ) TBD\n  get maxSamplersPerShaderStage() {\n    return this.getParameter(35661);\n  }\n  get maxStorageBuffersPerShaderStage() {\n    return 0;\n  } // TBD\n  get maxStorageTexturesPerShaderStage() {\n    return 0;\n  } // TBD\n  get maxUniformBuffersPerShaderStage() {\n    return this.getParameter(35375);\n  }\n  get maxUniformBufferBindingSize() {\n    return this.getParameter(35376);\n  }\n  get maxStorageBufferBindingSize() {\n    return 0;\n  }\n  get minUniformBufferOffsetAlignment() {\n    return this.getParameter(35380);\n  }\n  get minStorageBufferOffsetAlignment() {\n    return 0;\n  }\n  get maxVertexBuffers() {\n    return 16;\n  } // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284\n  get maxVertexAttributes() {\n    return this.getParameter(34921);\n  }\n  get maxVertexBufferArrayStride() {\n    return 2048;\n  } // TBD, this is just the default value from WebGPU\n  get maxInterStageShaderComponents() {\n    return this.getParameter(35659);\n  }\n  get maxComputeWorkgroupStorageSize() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeInvocationsPerWorkgroup() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeX() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeY() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeZ() {\n    return 0;\n  } // WebGL does not support compute shaders\n  get maxComputeWorkgroupsPerDimension() {\n    return 0;\n  } // WebGL does not support compute shaders\n  // PRIVATE\n  gl;\n  limits = {};\n  constructor(gl) {\n    super();\n    this.gl = gl;\n  }\n  getParameter(parameter) {\n    if (this.limits[parameter] === undefined) {\n      this.limits[parameter] = this.gl.getParameter(parameter);\n    }\n    return this.limits[parameter] || 0;\n  }\n}\n//# sourceMappingURL=webgl-device-limits.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}