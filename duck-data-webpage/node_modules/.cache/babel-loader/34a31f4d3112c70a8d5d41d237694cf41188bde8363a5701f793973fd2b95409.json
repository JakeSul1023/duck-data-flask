{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport Resource from \"./resource.js\";\nexport default class ResourceManager {\n  constructor(props) {\n    this.protocol = props.protocol || 'resource://';\n    this._context = {\n      device: props.device,\n      // @ts-expect-error\n      gl: props.device?.gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n    this._pruneRequest = null;\n  }\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n  add({\n    resourceId,\n    data,\n    forceUpdate = false,\n    persistent = true\n  }) {\n    let res = this._resources[resourceId];\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n  unsubscribe({\n    consumerId\n  }) {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n  subscribe({\n    resourceId,\n    onChange,\n    consumerId,\n    requestId = 'default'\n  }) {\n    const {\n      _resources: resources,\n      protocol\n    } = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({\n          resourceId,\n          data: null,\n          persistent: false\n        });\n      }\n    }\n    const res = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n    return undefined;\n  }\n  prune() {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      // @ts-ignore setTimeout returns NodeJS.Timeout in node\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = consumers[consumerId] = consumers[consumerId] || {};\n    let request = consumer[requestId];\n    const oldResource = request && request.resourceId && this._resources[request.resourceId];\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n    if (resource) {\n      if (request) {\n        request.onChange = onChange;\n        request.resourceId = resource.id;\n      } else {\n        request = {\n          onChange,\n          resourceId: resource.id\n        };\n      }\n      consumer[requestId] = request;\n      resource.subscribe(request);\n    }\n  }\n  _prune() {\n    this._pruneRequest = null;\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}","map":{"version":3,"names":["Resource","ResourceManager","constructor","props","protocol","_context","device","gl","resourceManager","_resources","_consumers","_pruneRequest","contains","resourceId","startsWith","add","data","forceUpdate","persistent","res","setData","remove","delete","unsubscribe","consumerId","consumer","requestId","request","resource","prune","subscribe","onChange","resources","replace","_track","getData","undefined","setTimeout","_prune","finalize","key","consumers","oldResource","id","Object","keys","inUse"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\lib\\resource\\resource-manager.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* global setTimeout */\nimport {Device} from '@luma.gl/core';\nimport Resource from './resource';\nimport type {ResourceSubscriber} from './resource';\n\nexport type ResourceManagerContext = {\n  device: Device;\n  resourceManager: ResourceManager;\n  /** @deprecated */\n  gl: WebGL2RenderingContext;\n};\n\ntype Consumer = Record<string, ResourceSubscriber & {resourceId: string}>;\n\nexport default class ResourceManager {\n  protocol: string;\n\n  private _context: ResourceManagerContext;\n  private _resources: Record<string, Resource>;\n  private _consumers: Record<string, Consumer>;\n  private _pruneRequest: number | null;\n\n  constructor(props: {device: Device; protocol?: string}) {\n    this.protocol = props.protocol || 'resource://';\n\n    this._context = {\n      device: props.device,\n      // @ts-expect-error\n      gl: props.device?.gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId: string): boolean {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({\n    resourceId,\n    data,\n    forceUpdate = false,\n    persistent = true\n  }: {\n    resourceId: string;\n    data: any;\n    forceUpdate?: boolean;\n    persistent?: boolean;\n  }) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId: string): void {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}: {consumerId: string}): void {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe<T>({\n    resourceId,\n    onChange,\n    consumerId,\n    requestId = 'default'\n  }: {\n    resourceId: string;\n    onChange: (data: T | Promise<T>) => void;\n    consumerId: string;\n    requestId: string;\n  }): T | Promise<T> | undefined {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res: Resource<T> = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune(): void {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      // @ts-ignore setTimeout returns NodeJS.Timeout in node\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize(): void {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  private _track(\n    consumerId: string,\n    requestId: string,\n    resource: Resource,\n    onChange: (data: any) => void\n  ) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    let request = consumer[requestId];\n\n    const oldResource = request && request.resourceId && this._resources[request.resourceId];\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n    if (resource) {\n      if (request) {\n        request.onChange = onChange;\n        request.resourceId = resource.id;\n      } else {\n        request = {\n          onChange,\n          resourceId: resource.id\n        };\n      }\n      consumer[requestId] = request;\n      resource.subscribe(request);\n    }\n  }\n\n  private _prune(): void {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}