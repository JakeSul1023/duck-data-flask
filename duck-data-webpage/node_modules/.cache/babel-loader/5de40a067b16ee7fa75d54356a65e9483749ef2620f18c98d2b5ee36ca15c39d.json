{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst BASE32_CODES = '0123456789bcdefghjkmnpqrstuvwxyz';\nconst BASE32_CODES_DICT = {};\nfor (let i = 0; i < BASE32_CODES.length; i++) {\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\n}\nconst MIN_LAT = -90;\nconst MAX_LAT = 90;\nconst MIN_LON = -180;\nconst MAX_LON = 180;\n// Adapted from ngeohash decode_bbox\nexport function getGeohashBounds(geohash) {\n  let isLon = true;\n  let maxLat = MAX_LAT;\n  let minLat = MIN_LAT;\n  let maxLon = MAX_LON;\n  let minLon = MIN_LON;\n  let mid;\n  let hashValue = 0;\n  for (let i = 0, l = geohash.length; i < l; i++) {\n    const code = geohash[i].toLowerCase();\n    hashValue = BASE32_CODES_DICT[code];\n    for (let bits = 4; bits >= 0; bits--) {\n      const bit = hashValue >> bits & 1;\n      if (isLon) {\n        mid = (maxLon + minLon) / 2;\n        if (bit === 1) {\n          minLon = mid;\n        } else {\n          maxLon = mid;\n        }\n      } else {\n        mid = (maxLat + minLat) / 2;\n        if (bit === 1) {\n          minLat = mid;\n        } else {\n          maxLat = mid;\n        }\n      }\n      isLon = !isLon;\n    }\n  }\n  return [minLat, minLon, maxLat, maxLon];\n}\nexport function getGeohashPolygon(geohash) {\n  const [s, w, n, e] = getGeohashBounds(geohash);\n  return [e, n, e, s, w, s, w, n, e, n];\n}","map":{"version":3,"names":["BASE32_CODES","BASE32_CODES_DICT","i","length","charAt","MIN_LAT","MAX_LAT","MIN_LON","MAX_LON","getGeohashBounds","geohash","isLon","maxLat","minLat","maxLon","minLon","mid","hashValue","l","code","toLowerCase","bits","bit","getGeohashPolygon","s","w","n","e"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\geohash-layer\\geohash-utils.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst BASE32_CODES = '0123456789bcdefghjkmnpqrstuvwxyz';\nconst BASE32_CODES_DICT = {};\nfor (let i = 0; i < BASE32_CODES.length; i++) {\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\n}\n\nconst MIN_LAT = -90;\nconst MAX_LAT = 90;\nconst MIN_LON = -180;\nconst MAX_LON = 180;\n\n// Adapted from ngeohash decode_bbox\nexport function getGeohashBounds(geohash: string): number[] {\n  let isLon = true;\n  let maxLat = MAX_LAT;\n  let minLat = MIN_LAT;\n  let maxLon = MAX_LON;\n  let minLon = MIN_LON;\n  let mid: number;\n\n  let hashValue = 0;\n  for (let i = 0, l = geohash.length; i < l; i++) {\n    const code = geohash[i].toLowerCase();\n    hashValue = BASE32_CODES_DICT[code];\n\n    for (let bits = 4; bits >= 0; bits--) {\n      const bit = (hashValue >> bits) & 1;\n      if (isLon) {\n        mid = (maxLon + minLon) / 2;\n        if (bit === 1) {\n          minLon = mid;\n        } else {\n          maxLon = mid;\n        }\n      } else {\n        mid = (maxLat + minLat) / 2;\n        if (bit === 1) {\n          minLat = mid;\n        } else {\n          maxLat = mid;\n        }\n      }\n      isLon = !isLon;\n    }\n  }\n\n  return [minLat, minLon, maxLat, maxLon];\n}\n\nexport function getGeohashPolygon(geohash: string): number[] {\n  const [s, w, n, e] = getGeohashBounds(geohash);\n\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,YAAY,GAAG,kCAAkC;AACvD,MAAMC,iBAAiB,GAAG,EAAE;AAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,YAAY,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;EAC5CD,iBAAiB,CAACD,YAAY,CAACI,MAAM,CAACF,CAAC,CAAC,CAAC,GAAGA,CAAC;AAC/C;AAEA,MAAMG,OAAO,GAAG,CAAC,EAAE;AACnB,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,OAAO,GAAG,CAAC,GAAG;AACpB,MAAMC,OAAO,GAAG,GAAG;AAEnB;AACA,OAAM,SAAUC,gBAAgBA,CAACC,OAAe;EAC9C,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,MAAM,GAAGN,OAAO;EACpB,IAAIO,MAAM,GAAGR,OAAO;EACpB,IAAIS,MAAM,GAAGN,OAAO;EACpB,IAAIO,MAAM,GAAGR,OAAO;EACpB,IAAIS,GAAW;EAEf,IAAIC,SAAS,GAAG,CAAC;EACjB,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEgB,CAAC,GAAGR,OAAO,CAACP,MAAM,EAAED,CAAC,GAAGgB,CAAC,EAAEhB,CAAC,EAAE,EAAE;IAC9C,MAAMiB,IAAI,GAAGT,OAAO,CAACR,CAAC,CAAC,CAACkB,WAAW,EAAE;IACrCH,SAAS,GAAGhB,iBAAiB,CAACkB,IAAI,CAAC;IAEnC,KAAK,IAAIE,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,CAAC,EAAEA,IAAI,EAAE,EAAE;MACpC,MAAMC,GAAG,GAAIL,SAAS,IAAII,IAAI,GAAI,CAAC;MACnC,IAAIV,KAAK,EAAE;QACTK,GAAG,GAAG,CAACF,MAAM,GAAGC,MAAM,IAAI,CAAC;QAC3B,IAAIO,GAAG,KAAK,CAAC,EAAE;UACbP,MAAM,GAAGC,GAAG;QACd,CAAC,MAAM;UACLF,MAAM,GAAGE,GAAG;QACd;MACF,CAAC,MAAM;QACLA,GAAG,GAAG,CAACJ,MAAM,GAAGC,MAAM,IAAI,CAAC;QAC3B,IAAIS,GAAG,KAAK,CAAC,EAAE;UACbT,MAAM,GAAGG,GAAG;QACd,CAAC,MAAM;UACLJ,MAAM,GAAGI,GAAG;QACd;MACF;MACAL,KAAK,GAAG,CAACA,KAAK;IAChB;EACF;EAEA,OAAO,CAACE,MAAM,EAAEE,MAAM,EAAEH,MAAM,EAAEE,MAAM,CAAC;AACzC;AAEA,OAAM,SAAUS,iBAAiBA,CAACb,OAAe;EAC/C,MAAM,CAACc,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGlB,gBAAgB,CAACC,OAAO,CAAC;EAE9C,OAAO,CAACiB,CAAC,EAAED,CAAC,EAAEC,CAAC,EAAEH,CAAC,EAAEC,CAAC,EAAED,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAED,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}