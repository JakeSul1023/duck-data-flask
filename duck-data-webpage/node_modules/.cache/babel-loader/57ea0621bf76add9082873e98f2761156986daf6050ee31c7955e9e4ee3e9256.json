{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nexport class Accessor {\n  offset;\n  stride;\n  type;\n  size;\n  divisor;\n  normalized;\n  integer;\n  buffer;\n  index;\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  static getBytesPerVertex(accessor) {\n    // assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n  constructor(...accessors) {\n    log.warn('Accessor will be removed in next minor release');\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  // ACCESSORS\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n  // PRIVATE\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    if (props.type !== undefined) {\n      this.type = props.type;\n      // Auto-deduce integer type?\n      if (props.type === 5124 || props.type === 5125) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    // @ts-expect-error\n    if (props.normalize !== undefined) {\n      // @ts-expect-error\n      this.normalized = props.normalize;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n    // DEPRECATED\n    // @ts-expect-error\n    if (props.instanced !== undefined) {\n      // @ts-expect-error\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    // @ts-expect-error\n    if (props.isInstanced !== undefined) {\n      // @ts-expect-error\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n    if (this.offset === undefined) delete this.offset;\n    if (this.stride === undefined) delete this.stride;\n    if (this.type === undefined) delete this.type;\n    if (this.size === undefined) delete this.size;\n    if (this.divisor === undefined) delete this.divisor;\n    if (this.normalized === undefined) delete this.normalized;\n    if (this.integer === undefined) delete this.integer;\n    if (this.buffer === undefined) delete this.buffer;\n    if (this.index === undefined) delete this.index;\n    return this;\n  }\n}\n/**\n * Converts GL constant to corresponding TYPED ARRAY\n * Used to auto deduce gl parameter types\n * @deprecated Use getTypedArrayFromDataType\n * @param glType\n * @param param1\n * @returns\n */\n// eslint-disable-next-line complexity\nfunction getTypedArrayFromGLType(glType, options) {\n  const {\n    clamped = true\n  } = options || {};\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case 5126:\n      return Float32Array;\n    case 5123:\n    case 33635:\n    case 32819:\n    case 32820:\n      return Uint16Array;\n    case 5125:\n      return Uint32Array;\n    case 5121:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case 5120:\n      return Int8Array;\n    case 5122:\n      return Int16Array;\n    case 5124:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n// TEST EXPORTS\nexport { DEFAULT_ACCESSOR_VALUES };\n//# sourceMappingURL=accessor.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}