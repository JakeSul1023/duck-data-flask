{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { Matrix } from \"./base/matrix.js\";\nimport { checkVector } from \"../lib/validators.js\";\n/* eslint-disable camelcase */\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from \"../lib/gl-matrix-extras.js\";\n// @ts-ignore gl-matrix types...\nimport { fromQuat as mat4_fromQuat, frustum as mat4_frustum, lookAt as mat4_lookAt, ortho as mat4_ortho, perspective as mat4_perspective, determinant as mat4_determinant, transpose as mat4_transpose, invert as mat4_invert, multiply as mat4_multiply, rotateX as mat4_rotateX, rotateY as mat4_rotateY, rotateZ as mat4_rotateZ, rotate as mat4_rotate, scale as mat4_scale, translate as mat4_translate } from \"../gl-matrix/mat4.js\";\nimport { transformMat4 as vec2_transformMat4 } from \"../gl-matrix/vec2.js\";\nimport { transformMat4 as vec3_transformMat4 } from \"../gl-matrix/vec3.js\";\nimport { transformMat4 as vec4_transformMat4 } from \"../gl-matrix/vec4.js\";\n// eslint-disable-next-line no-shadow\nvar INDICES;\n(function (INDICES) {\n  INDICES[INDICES[\"COL0ROW0\"] = 0] = \"COL0ROW0\";\n  INDICES[INDICES[\"COL0ROW1\"] = 1] = \"COL0ROW1\";\n  INDICES[INDICES[\"COL0ROW2\"] = 2] = \"COL0ROW2\";\n  INDICES[INDICES[\"COL0ROW3\"] = 3] = \"COL0ROW3\";\n  INDICES[INDICES[\"COL1ROW0\"] = 4] = \"COL1ROW0\";\n  INDICES[INDICES[\"COL1ROW1\"] = 5] = \"COL1ROW1\";\n  INDICES[INDICES[\"COL1ROW2\"] = 6] = \"COL1ROW2\";\n  INDICES[INDICES[\"COL1ROW3\"] = 7] = \"COL1ROW3\";\n  INDICES[INDICES[\"COL2ROW0\"] = 8] = \"COL2ROW0\";\n  INDICES[INDICES[\"COL2ROW1\"] = 9] = \"COL2ROW1\";\n  INDICES[INDICES[\"COL2ROW2\"] = 10] = \"COL2ROW2\";\n  INDICES[INDICES[\"COL2ROW3\"] = 11] = \"COL2ROW3\";\n  INDICES[INDICES[\"COL3ROW0\"] = 12] = \"COL3ROW0\";\n  INDICES[INDICES[\"COL3ROW1\"] = 13] = \"COL3ROW1\";\n  INDICES[INDICES[\"COL3ROW2\"] = 14] = \"COL3ROW2\";\n  INDICES[INDICES[\"COL3ROW3\"] = 15] = \"COL3ROW3\";\n})(INDICES || (INDICES = {}));\nconst DEFAULT_FOVY = 45 * Math.PI / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n/**\n * A 4x4 matrix with common linear algebra operations\n * Subclass of Array<number> meaning that it is highly compatible with other libraries\n */\nexport class Matrix4 extends Matrix {\n  static get IDENTITY() {\n    return getIdentityMatrix();\n  }\n  static get ZERO() {\n    return getZeroMatrix();\n  }\n  get ELEMENTS() {\n    return 16;\n  }\n  get RANK() {\n    return 4;\n  }\n  get INDICES() {\n    return INDICES;\n  }\n  constructor(array) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n  // eslint-disable-next-line max-params\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n  toRowMajor(result) {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n  // Constructors\n  /** Set to identity matrix */\n  identity() {\n    return this.copy(IDENTITY_MATRIX);\n  }\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object) {\n    return this.check();\n  }\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @param quaternion Quaternion to create matrix from\n   * @returns self\n   */\n  fromQuaternion(quaternion) {\n    mat4_fromQuat(this, quaternion);\n    return this.check();\n  }\n  /**\n   * Generates a frustum matrix with the given bounds\n   * @param view.left - Left bound of the frustum\n   * @param view.right - Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top - Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far - Far bound of the frustum. Can be set to Infinity.\n   * @returns self\n   */\n  frustum(view) {\n    const {\n      left,\n      right,\n      bottom,\n      top,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4_frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n  /**\n   * Generates a look-at matrix with the given eye position, focal point,\n   * and up axis\n   * @param view.eye - (vector) Position of the viewer\n   * @param view.center - (vector) Point the viewer is looking at\n   * @param view.up - (vector) Up axis\n   * @returns self\n   */\n  lookAt(view) {\n    const {\n      eye,\n      center = [0, 0, 0],\n      up = [0, 1, 0]\n    } = view;\n    mat4_lookAt(this, eye, center, up);\n    return this.check();\n  }\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   * from \"traditional\" view space parameters\n   * @param view.left - Left bound of the frustum\n   * @param view.right number  Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top number  Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far number  Far bound of the frustum\n   * @returns self\n   */\n  ortho(view) {\n    const {\n      left,\n      right,\n      bottom,\n      top,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    mat4_ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n  /**\n   * Generates an orthogonal projection matrix with the same parameters\n   * as a perspective matrix (plus focalDistance)\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. Typically viewport width / viewport height\n   * @param view.focalDistance Distance in the view frustum used for extent calculations\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  orthographic(view) {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    checkRadians(fovy);\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. typically viewport width/height\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  perspective(view) {\n    const {\n      fovy = 45 * Math.PI / 180,\n      aspect = 1,\n      near = 0.1,\n      far = 500\n    } = view;\n    checkRadians(fovy);\n    mat4_perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n  // Accessors\n  determinant() {\n    return mat4_determinant(this);\n  }\n  /**\n   * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n   * The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n   * @param result\n   * @returns self\n   */\n  getScale(result = [-0, -0, -0]) {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n  /**\n   * Gets the translation portion, assuming the matrix is a affine transformation matrix.\n   * @param result\n   * @returns self\n   */\n  getTranslation(result = [-0, -0, -0]) {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n  /**\n   * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotation(result, scaleResult) {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n  /**\n   *\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotationMatrix3(result, scaleResult) {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n  // Modifiers\n  transpose() {\n    mat4_transpose(this, this);\n    return this.check();\n  }\n  invert() {\n    mat4_invert(this, this);\n    return this.check();\n  }\n  // Operations\n  multiplyLeft(a) {\n    mat4_multiply(this, a, this);\n    return this.check();\n  }\n  multiplyRight(a) {\n    mat4_multiply(this, this, a);\n    return this.check();\n  }\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians) {\n    mat4_rotateX(this, this, radians);\n    // mat4_rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians) {\n    mat4_rotateY(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n  /**\n   * Rotates a matrix by the given angle around the Z axis.\n   * @param radians\n   * @returns self\n   */\n  rotateZ(radians) {\n    mat4_rotateZ(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n  /**\n   *\n   * @param param0\n   * @returns self\n   */\n  rotateXYZ(angleXYZ) {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n  /**\n   *\n   * @param radians\n   * @param axis\n   * @returns self\n   */\n  rotateAxis(radians, axis) {\n    mat4_rotate(this, this, radians, axis);\n    return this.check();\n  }\n  /**\n   *\n   * @param factor\n   * @returns self\n   */\n  scale(factor) {\n    mat4_scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n  /**\n   *\n   * @param vec\n   * @returns self\n   */\n  translate(vector) {\n    mat4_translate(this, this, vector);\n    return this.check();\n  }\n  // Transforms\n  /**\n   * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transform(vector, result) {\n    if (vector.length === 4) {\n      result = vec4_transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n  /**\n   * Transforms any 2 or 3 element array as point (w implicitly 1)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsPoint(vector, result) {\n    const {\n      length\n    } = vector;\n    let out;\n    switch (length) {\n      case 2:\n        out = vec2_transformMat4(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n  /**\n   * Transforms any 2 or 3 element array as vector (w implicitly 0)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsVector(vector, result) {\n    let out;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n  /** @deprecated */\n  transformPoint(vector, result) {\n    return this.transformAsPoint(vector, result);\n  }\n  /** @deprecated */\n  transformVector(vector, result) {\n    return this.transformAsPoint(vector, result);\n  }\n  /** @deprecated */\n  transformDirection(vector, result) {\n    return this.transformAsVector(vector, result);\n  }\n  // three.js math API compatibility\n  makeRotationX(radians) {\n    return this.identity().rotateX(radians);\n  }\n  makeTranslation(x, y, z) {\n    return this.identity().translate([x, y, z]);\n  }\n}\n// TODO initializing static members directly is an option, but make sure no tree-shaking issues\nlet ZERO;\nlet IDENTITY;\nfunction getZeroMatrix() {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n  return ZERO;\n}\nfunction getIdentityMatrix() {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n  return IDENTITY;\n}\n// HELPER FUNCTIONS\nfunction checkRadians(possiblyDegrees) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\n// eslint-disable-next-line max-params\nfunction computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n  const column0Row0 = 2 * near / (right - left);\n  const column1Row1 = 2 * near / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}","map":{"version":3,"names":["Matrix","checkVector","vec2_transformMat4AsVector","vec3_transformMat4AsVector","fromQuat","mat4_fromQuat","frustum","mat4_frustum","lookAt","mat4_lookAt","ortho","mat4_ortho","perspective","mat4_perspective","determinant","mat4_determinant","transpose","mat4_transpose","invert","mat4_invert","multiply","mat4_multiply","rotateX","mat4_rotateX","rotateY","mat4_rotateY","rotateZ","mat4_rotateZ","rotate","mat4_rotate","scale","mat4_scale","translate","mat4_translate","transformMat4","vec2_transformMat4","vec3_transformMat4","vec4_transformMat4","INDICES","DEFAULT_FOVY","Math","PI","DEFAULT_ASPECT","DEFAULT_NEAR","DEFAULT_FAR","IDENTITY_MATRIX","Object","freeze","Matrix4","IDENTITY","getIdentityMatrix","ZERO","getZeroMatrix","ELEMENTS","RANK","constructor","array","arguments","length","Array","isArray","copy","identity","check","set","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","setRowMajor","toRowMajor","result","fromObject","object","fromQuaternion","quaternion","view","left","right","bottom","top","near","far","Infinity","computeInfinitePerspectiveOffCenter","eye","center","up","orthographic","fovy","aspect","focalDistance","checkRadians","halfY","tan","getScale","sqrt","getTranslation","getRotation","scaleResult","inverseScale0","inverseScale1","inverseScale2","getRotationMatrix3","multiplyLeft","a","multiplyRight","radians","rotateXYZ","angleXYZ","rotateAxis","axis","factor","vector","transform","transformAsPoint","out","Error","transformAsVector","transformPoint","transformVector","transformDirection","makeRotationX","makeTranslation","x","y","z","possiblyDegrees","column0Row0","column1Row1","column2Row0","column2Row1","column2Row2","column2Row3","column3Row2"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\classes\\matrix4.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {NumericArray, NumericArray16} from '@math.gl/types';\nimport {Matrix} from './base/matrix';\nimport {checkVector} from '../lib/validators';\n\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n// @ts-ignore gl-matrix types...\nimport {\n  fromQuat as mat4_fromQuat,\n  frustum as mat4_frustum,\n  lookAt as mat4_lookAt,\n  ortho as mat4_ortho,\n  perspective as mat4_perspective,\n  determinant as mat4_determinant,\n  transpose as mat4_transpose,\n  invert as mat4_invert,\n  multiply as mat4_multiply,\n  rotateX as mat4_rotateX,\n  rotateY as mat4_rotateY,\n  rotateZ as mat4_rotateZ,\n  rotate as mat4_rotate,\n  scale as mat4_scale,\n  translate as mat4_translate\n} from '../gl-matrix/mat4';\nimport {transformMat4 as vec2_transformMat4} from '../gl-matrix/vec2';\nimport {transformMat4 as vec3_transformMat4} from '../gl-matrix/vec3';\nimport {transformMat4 as vec4_transformMat4} from '../gl-matrix/vec4';\n\n// eslint-disable-next-line no-shadow\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL0ROW3 = 3,\n  COL1ROW0 = 4,\n  COL1ROW1 = 5,\n  COL1ROW2 = 6,\n  COL1ROW3 = 7,\n  COL2ROW0 = 8,\n  COL2ROW1 = 9,\n  COL2ROW2 = 10,\n  COL2ROW3 = 11,\n  COL3ROW0 = 12,\n  COL3ROW1 = 13,\n  COL3ROW2 = 14,\n  COL3ROW3 = 15\n}\n\nconst DEFAULT_FOVY = (45 * Math.PI) / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n/** Helper type that captures array length for a 4x4 matrix */\nexport type Matrix4Like = Matrix4 | NumericArray16;\n\n/**\n * A 4x4 matrix with common linear algebra operations\n * Subclass of Array<number> meaning that it is highly compatible with other libraries\n */\nexport class Matrix4 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix4> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix4> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 16;\n  }\n\n  get RANK(): number {\n    return 4;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m30: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m31: number,\n    m02: number,\n    m12: number,\n    m22: number,\n    m32: number,\n    m03: number,\n    m13: number,\n    m23: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m03: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m13: number,\n    m20: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m30: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result: NumericArray): NumericArray {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  /** Set to identity matrix */\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @param quaternion Quaternion to create matrix from\n   * @returns self\n   */\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    mat4_fromQuat(this, quaternion);\n    return this.check();\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * @param view.left - Left bound of the frustum\n   * @param view.right - Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top - Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far - Far bound of the frustum. Can be set to Infinity.\n   * @returns self\n   */\n  frustum(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4_frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point,\n   * and up axis\n   * @param view.eye - (vector) Position of the viewer\n   * @param view.center - (vector) Point the viewer is looking at\n   * @param view.up - (vector) Up axis\n   * @returns self\n   */\n  lookAt(view: {\n    eye: Readonly<NumericArray>;\n    center?: Readonly<NumericArray>;\n    up?: Readonly<NumericArray>;\n  }): this {\n    const {eye, center = [0, 0, 0], up = [0, 1, 0]} = view;\n    mat4_lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   * from \"traditional\" view space parameters\n   * @param view.left - Left bound of the frustum\n   * @param view.right number  Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top number  Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far number  Far bound of the frustum\n   * @returns self\n   */\n  ortho(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    mat4_ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  /**\n   * Generates an orthogonal projection matrix with the same parameters\n   * as a perspective matrix (plus focalDistance)\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. Typically viewport width / viewport height\n   * @param view.focalDistance Distance in the view frustum used for extent calculations\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  orthographic(view: {\n    fovy?: number;\n    aspect?: number;\n    focalDistance?: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n\n    checkRadians(fovy);\n\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. typically viewport width/height\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  perspective(view: {fovy: number; aspect?: number; near?: number; far?: number}): this {\n    const {fovy = (45 * Math.PI) / 180, aspect = 1, near = 0.1, far = 500} = view;\n    checkRadians(fovy);\n    mat4_perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat4_determinant(this);\n  }\n\n  /**\n   * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n   * The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n   * @param result\n   * @returns self\n   */\n  getScale(result: NumericArray = [-0, -0, -0]): NumericArray {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  /**\n   * Gets the translation portion, assuming the matrix is a affine transformation matrix.\n   * @param result\n   * @returns self\n   */\n  getTranslation(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  /**\n   * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotation(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  /**\n   *\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotationMatrix3(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose(): this {\n    mat4_transpose(this, this);\n    return this.check();\n  }\n\n  invert(): this {\n    mat4_invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    mat4_multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: Readonly<NumericArray>): this {\n    mat4_multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians: number): this {\n    mat4_rotateX(this, this, radians);\n    // mat4_rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians: number): this {\n    mat4_rotateY(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis.\n   * @param radians\n   * @returns self\n   */\n  rotateZ(radians: number): this {\n    mat4_rotateZ(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param param0\n   * @returns self\n   */\n  rotateXYZ(angleXYZ: Readonly<NumericArray>): this {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n\n  /**\n   *\n   * @param radians\n   * @param axis\n   * @returns self\n   */\n  rotateAxis(radians: number, axis: Readonly<NumericArray>): this {\n    mat4_rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param factor\n   * @returns self\n   */\n  override scale(factor: number | Readonly<NumericArray>): this {\n    mat4_scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param vec\n   * @returns self\n   */\n  translate(vector: Readonly<NumericArray>): this {\n    mat4_translate(this, this, vector);\n    return this.check();\n  }\n\n  // Transforms\n\n  /**\n   * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    if (vector.length === 4) {\n      result = vec4_transformMat4(result || [-0, -0, -0, -0], vector, this) as NumericArray;\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as point (w implicitly 1)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    const {length} = vector;\n    let out: NumericArray;\n    switch (length) {\n      case 2:\n        out = vec2_transformMat4(result || [-0, -0], vector, this) as NumericArray;\n        break;\n      case 3:\n        out = vec3_transformMat4(result || [-0, -0, -0], vector, this) as NumericArray;\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as vector (w implicitly 0)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformDirection(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsVector(vector, result);\n  }\n\n  // three.js math API compatibility\n\n  makeRotationX(radians: number): this {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x: number, y: number, z: number): this {\n    return this.identity().translate([x, y, z]);\n  }\n}\n\n// TODO initializing static members directly is an option, but make sure no tree-shaking issues\nlet ZERO: Matrix4;\nlet IDENTITY: Matrix4;\n\nfunction getZeroMatrix(): Readonly<Matrix4> {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n  return ZERO;\n}\n\nfunction getIdentityMatrix(): Matrix4 {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n  return IDENTITY;\n}\n\n// HELPER FUNCTIONS\n\nfunction checkRadians(possiblyDegrees: number) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\n\n// eslint-disable-next-line max-params\nfunction computeInfinitePerspectiveOffCenter(\n  result: NumericArray,\n  left: number,\n  right: number,\n  bottom: number,\n  top: number,\n  near: number\n): NumericArray {\n  const column0Row0 = (2 * near) / (right - left);\n  const column1Row1 = (2 * near) / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}