{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/engine';\nimport { iconUniforms } from \"./icon-layer-uniforms.js\";\nimport vs from \"./icon-layer-vertex.glsl.js\";\nimport fs from \"./icon-layer-fragment.glsl.js\";\nimport IconManager from \"./icon-manager.js\";\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  iconAtlas: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  iconMapping: {\n    type: 'object',\n    value: {},\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  //  min point radius in pixels\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  // max point radius in pixels\n  alphaCutoff: {\n    type: 'number',\n    value: 0.05,\n    min: 0,\n    max: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getIcon: {\n    type: 'accessor',\n    value: x => x.icon\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  onIconError: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  textureParameters: {\n    type: 'object',\n    ignore: true,\n    value: null\n  }\n};\n/** Render raster icons at given coordinates. */\nclass IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking, iconUniforms]\n    });\n  }\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.device, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: 'uint8',\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n  /* eslint-disable max-statements, complexity */\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const attributeManager = this.getAttributeManager();\n    const {\n      iconAtlas,\n      iconMapping,\n      data,\n      getIcon,\n      textureParameters\n    } = props;\n    const {\n      iconManager\n    } = this.state;\n    if (typeof iconAtlas === 'string') {\n      return;\n    }\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? iconMapping : null,\n      textureParameters\n    });\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager.invalidate('getIcon');\n      }\n    } else if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon);\n    }\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n  finalizeState(context) {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      sizeUnits,\n      billboard,\n      alphaCutoff\n    } = this.props;\n    const {\n      iconManager\n    } = this.state;\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      const model = this.state.model;\n      const iconProps = {\n        iconsTexture,\n        iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels,\n        billboard,\n        alphaCutoff\n      };\n      model.shaderInputs.setProps({\n        icon: iconProps\n      });\n      model.draw(this.context.renderPass);\n    }\n  }\n  _getModel() {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: in vec2 positions;\n    const positions = [-1, -1, 1, -1, -1, 1, 1, 1];\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n  _onError(evt) {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n  getInstanceOffset(icon) {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n  getInstanceIconFrame(icon) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\nIconLayer.defaultProps = defaultProps;\nIconLayer.layerName = 'IconLayer';\nexport default IconLayer;","map":{"version":3,"names":["Layer","project32","picking","log","UNIT","Model","Geometry","iconUniforms","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","optional","textureParameters","ignore","IconLayer","getShaders","modules","initializeState","state","iconManager","context","device","onUpdate","_onUpdate","bind","onError","_onError","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","instanceAngles","instancePixelOffset","updateState","params","oldProps","changeFlags","data","prePacked","internalState","isAsyncPropLoading","setProps","loadOptions","autoPacking","invalidate","dataChanged","updateTriggersChanged","all","packIcons","extensionsChanged","model","destroy","_getModel","invalidateAll","isLoaded","finalizeState","finalize","draw","uniforms","iconsTexture","getTexture","iconProps","iconsTextureDim","width","height","shaderInputs","renderPass","positions","id","bufferLayout","getBufferLayouts","geometry","topology","attributes","Float32Array","isInstanced","setNeedsRedraw","evt","getCurrentLayer","error","message","anchorX","anchorY","getIconMapping","mapping","mask","y","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\icon-layer\\icon-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport {SamplerProps, Texture} from '@luma.gl/core';\nimport {Model, Geometry} from '@luma.gl/engine';\n\nimport {iconUniforms, IconProps} from './icon-layer-uniforms';\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  AccessorFunction,\n  Position,\n  Color,\n  Unit,\n  UpdateParameters,\n  LayerContext,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport type {UnpackedIcon, IconMapping, LoadIconErrorContext} from './icon-manager';\n\ntype _IconLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** A prepacked image that contains all icons. */\n  iconAtlas?: string | Texture;\n  /** Icon names mapped to icon definitions, or a URL to load such mapping from a JSON file. */\n  iconMapping?: string | IconMapping;\n\n  /** Icon size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the icon size, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   */\n  sizeMaxPixels?: number;\n  /** If `true`, the icon always faces camera. Otherwise the icon faces up (z)\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Discard pixels whose opacity is below this threshold.\n   * A discarded pixel would create a \"hole\" in the icon that is not considered part of the object.\n   * @default 0.05\n   */\n  alphaCutoff?: number;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Icon definition accessor.\n   * Should return the icon id if using pre-packed icons (`iconAtlas` + `iconMapping`).\n   * Return an object that defines the icon if using auto-packing.\n   */\n  getIcon?: AccessorFunction<DataT, string> | AccessorFunction<DataT, UnpackedIcon>;\n  /** Icon color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /** Icon size accessor.\n   * @default 1\n   */\n  getSize?: Accessor<DataT, number>;\n  /** Icon rotation accessor, in degrees.\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Icon offsest accessor, in pixels.\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * Callback called if the attempt to fetch an icon returned by `getIcon` fails.\n   */\n  onIconError?: ((context: LoadIconErrorContext) => void) | null;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: SamplerProps | null;\n};\n\nexport type IconLayerProps<DataT = unknown> = _IconLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<IconLayerProps> = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getIcon: {type: 'accessor', value: (x: any) => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, optional: true},\n\n  textureParameters: {type: 'object', ignore: true, value: null}\n};\n\n/** Render raster icons at given coordinates. */\nexport default class IconLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_IconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'IconLayer';\n\n  state!: {\n    model?: Model;\n    iconManager: IconManager;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, iconUniforms]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.device, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: 'uint8',\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 'unorm8',\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon, textureParameters} = props;\n    const {iconManager} = this.state;\n\n    if (typeof iconAtlas === 'string') {\n      return;\n    }\n\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState!.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? (iconMapping as IconMapping) : null,\n      textureParameters\n    });\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager!.invalidate('getIcon');\n      }\n    } else if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon as AccessorFunction<any, UnpackedIcon>);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      attributeManager!.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded(): boolean {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}): void {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      const model = this.state.model!;\n      const iconProps: IconProps = {\n        iconsTexture,\n        iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels,\n        billboard,\n        alphaCutoff\n      };\n\n      model.shaderInputs.setProps({icon: iconProps});\n      model.draw(this.context.renderPass);\n    }\n  }\n\n  protected _getModel(): Model {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: in vec2 positions;\n    const positions = [-1, -1, 1, -1, -1, 1, 1, 1];\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  private _onUpdate(): void {\n    this.setNeedsRedraw();\n  }\n\n  private _onError(evt: LoadIconErrorContext): void {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  protected getInstanceOffset(icon: string): number[] {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  protected getInstanceColorMode(icon: string): number {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  protected getInstanceIconFrame(icon: string): number[] {\n    const {x, y, width, height} = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}