{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Texture } from '@luma.gl/core';\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  minFilter: 'linear',\n  mipmapFilter: 'linear',\n  magFilter: 'linear',\n  addressModeU: 'clamp-to-edge',\n  addressModeV: 'clamp-to-edge'\n};\n// Track the textures that are created by us. They need to be released when they are no longer used.\nconst internalTextures = {};\n/**\n *\n * @param owner\n * @param device\n * @param image could be one of:\n *   - Texture\n *   - Browser object: Image, ImageData, ImageData, HTMLCanvasElement, HTMLVideoElement, ImageBitmap\n *   - Plain object: {width: <number>, height: <number>, data: <Uint8Array>}\n * @param parameters\n * @returns\n */\nexport function createTexture(owner, device, image, sampler) {\n  if (image instanceof Texture) {\n    return image;\n  } else if (image.constructor && image.constructor.name !== 'Object') {\n    // Browser object\n    image = {\n      data: image\n    };\n  }\n  let samplerParameters = null;\n  if (image.compressed) {\n    samplerParameters = {\n      minFilter: 'linear',\n      mipmapFilter: image.data.length > 1 ? 'nearest' : 'linear'\n    };\n  }\n  const texture = device.createTexture({\n    ...image,\n    sampler: {\n      ...DEFAULT_TEXTURE_PARAMETERS,\n      ...samplerParameters,\n      ...sampler\n    },\n    mipmaps: true\n  });\n  // Track this texture\n  internalTextures[texture.id] = owner;\n  return texture;\n}\nexport function destroyTexture(owner, texture) {\n  if (!texture || !(texture instanceof Texture)) {\n    return;\n  }\n  // Only delete the texture if requested by the same layer that created it\n  if (internalTextures[texture.id] === owner) {\n    texture.delete();\n    delete internalTextures[texture.id];\n  }\n}","map":{"version":3,"names":["Texture","DEFAULT_TEXTURE_PARAMETERS","minFilter","mipmapFilter","magFilter","addressModeU","addressModeV","internalTextures","createTexture","owner","device","image","sampler","constructor","name","data","samplerParameters","compressed","length","texture","mipmaps","id","destroyTexture","delete"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\utils\\texture.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device, Texture, SamplerProps} from '@luma.gl/core';\n\nconst DEFAULT_TEXTURE_PARAMETERS: SamplerProps = {\n  minFilter: 'linear',\n  mipmapFilter: 'linear',\n  magFilter: 'linear',\n  addressModeU: 'clamp-to-edge',\n  addressModeV: 'clamp-to-edge'\n};\n\n// Track the textures that are created by us. They need to be released when they are no longer used.\nconst internalTextures: Record<string, string> = {};\n\n/**\n *\n * @param owner\n * @param device\n * @param image could be one of:\n *   - Texture\n *   - Browser object: Image, ImageData, ImageData, HTMLCanvasElement, HTMLVideoElement, ImageBitmap\n *   - Plain object: {width: <number>, height: <number>, data: <Uint8Array>}\n * @param parameters\n * @returns\n */\nexport function createTexture(\n  owner: string,\n  device: Device,\n  image: any,\n  sampler: SamplerProps\n): Texture | null {\n  if (image instanceof Texture) {\n    return image;\n  } else if (image.constructor && image.constructor.name !== 'Object') {\n    // Browser object\n    image = {data: image};\n  }\n\n  let samplerParameters: SamplerProps | null = null;\n  if (image.compressed) {\n    samplerParameters = {\n      minFilter: 'linear',\n      mipmapFilter: image.data.length > 1 ? 'nearest' : 'linear'\n    };\n  }\n\n  const texture = device.createTexture({\n    ...image,\n    sampler: {\n      ...DEFAULT_TEXTURE_PARAMETERS,\n      ...samplerParameters,\n      ...sampler\n    },\n    mipmaps: true\n  });\n  // Track this texture\n  internalTextures[texture.id] = owner;\n  return texture;\n}\n\nexport function destroyTexture(owner: string, texture: Texture) {\n  if (!texture || !(texture instanceof Texture)) {\n    return;\n  }\n  // Only delete the texture if requested by the same layer that created it\n  if (internalTextures[texture.id] === owner) {\n    texture.delete();\n    delete internalTextures[texture.id];\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAgBA,OAAO,QAAqB,eAAe;AAE3D,MAAMC,0BAA0B,GAAiB;EAC/CC,SAAS,EAAE,QAAQ;EACnBC,YAAY,EAAE,QAAQ;EACtBC,SAAS,EAAE,QAAQ;EACnBC,YAAY,EAAE,eAAe;EAC7BC,YAAY,EAAE;CACf;AAED;AACA,MAAMC,gBAAgB,GAA2B,EAAE;AAEnD;;;;;;;;;;;AAWA,OAAM,SAAUC,aAAaA,CAC3BC,KAAa,EACbC,MAAc,EACdC,KAAU,EACVC,OAAqB;EAErB,IAAID,KAAK,YAAYX,OAAO,EAAE;IAC5B,OAAOW,KAAK;EACd,CAAC,MAAM,IAAIA,KAAK,CAACE,WAAW,IAAIF,KAAK,CAACE,WAAW,CAACC,IAAI,KAAK,QAAQ,EAAE;IACnE;IACAH,KAAK,GAAG;MAACI,IAAI,EAAEJ;IAAK,CAAC;EACvB;EAEA,IAAIK,iBAAiB,GAAwB,IAAI;EACjD,IAAIL,KAAK,CAACM,UAAU,EAAE;IACpBD,iBAAiB,GAAG;MAClBd,SAAS,EAAE,QAAQ;MACnBC,YAAY,EAAEQ,KAAK,CAACI,IAAI,CAACG,MAAM,GAAG,CAAC,GAAG,SAAS,GAAG;KACnD;EACH;EAEA,MAAMC,OAAO,GAAGT,MAAM,CAACF,aAAa,CAAC;IACnC,GAAGG,KAAK;IACRC,OAAO,EAAE;MACP,GAAGX,0BAA0B;MAC7B,GAAGe,iBAAiB;MACpB,GAAGJ;KACJ;IACDQ,OAAO,EAAE;GACV,CAAC;EACF;EACAb,gBAAgB,CAACY,OAAO,CAACE,EAAE,CAAC,GAAGZ,KAAK;EACpC,OAAOU,OAAO;AAChB;AAEA,OAAM,SAAUG,cAAcA,CAACb,KAAa,EAAEU,OAAgB;EAC5D,IAAI,CAACA,OAAO,IAAI,EAAEA,OAAO,YAAYnB,OAAO,CAAC,EAAE;IAC7C;EACF;EACA;EACA,IAAIO,gBAAgB,CAACY,OAAO,CAACE,EAAE,CAAC,KAAKZ,KAAK,EAAE;IAC1CU,OAAO,CAACI,MAAM,EAAE;IAChB,OAAOhB,gBAAgB,CAACY,OAAO,CAACE,EAAE,CAAC;EACrC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}