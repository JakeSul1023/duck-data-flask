{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Goal is to make WebGL2 contexts look like WebGL1\n// @note Partly inspired by with some older code from the `regl` library\n/* eslint-disable camelcase */\nimport { GL } from '@luma.gl/constants';\n// webgl1 extensions natively supported by webgl2\nconst WEBGL1_STATIC_EXTENSIONS = {\n  WEBGL_depth_texture: {\n    UNSIGNED_INT_24_8_WEBGL: 34042\n  },\n  OES_element_index_uint: {},\n  OES_texture_float: {},\n  OES_texture_half_float: {\n    // @ts-expect-error different numbers?\n    HALF_FLOAT_OES: 5131\n  },\n  EXT_color_buffer_float: {},\n  OES_standard_derivatives: {\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 35723\n  },\n  EXT_frag_depth: {},\n  EXT_blend_minmax: {\n    MIN_EXT: 32775,\n    MAX_EXT: 32776\n  },\n  EXT_shader_texture_lod: {}\n};\nconst getWEBGL_draw_buffers = gl => ({\n  drawBuffersWEBGL(buffers) {\n    return gl.drawBuffers(buffers);\n  },\n  COLOR_ATTACHMENT0_WEBGL: 36064,\n  COLOR_ATTACHMENT1_WEBGL: 36065,\n  COLOR_ATTACHMENT2_WEBGL: 36066,\n  COLOR_ATTACHMENT3_WEBGL: 36067\n}); // - too many fields\nconst getOES_vertex_array_object = gl => ({\n  VERTEX_ARRAY_BINDING_OES: 34229,\n  createVertexArrayOES() {\n    return gl.createVertexArray();\n  },\n  deleteVertexArrayOES(vertexArray) {\n    return gl.deleteVertexArray(vertexArray);\n  },\n  isVertexArrayOES(vertexArray) {\n    return gl.isVertexArray(vertexArray);\n  },\n  bindVertexArrayOES(vertexArray) {\n    return gl.bindVertexArray(vertexArray);\n  }\n});\nconst getANGLE_instanced_arrays = gl => ({\n  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n  drawArraysInstancedANGLE() {\n    return gl.drawArraysInstanced(...arguments);\n  },\n  drawElementsInstancedANGLE() {\n    return gl.drawElementsInstanced(...arguments);\n  },\n  vertexAttribDivisorANGLE() {\n    return gl.vertexAttribDivisor(...arguments);\n  }\n});\n/**\n * Make browser return WebGL2 contexts even if WebGL1 contexts are requested\n * @param enforce\n * @returns\n */\nexport function enforceWebGL2() {\n  let enforce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const prototype = HTMLCanvasElement.prototype;\n  if (!enforce && prototype.originalGetContext) {\n    // Reset the original getContext function\n    prototype.getContext = prototype.originalGetContext;\n    prototype.originalGetContext = undefined;\n    return;\n  }\n  // Store the original getContext function\n  prototype.originalGetContext = prototype.getContext;\n  // Override the getContext function\n  prototype.getContext = function (contextId, options) {\n    // Attempt to force WebGL2 for all WebGL1 contexts\n    if (contextId === 'webgl' || contextId === 'experimental-webgl') {\n      const context = this.originalGetContext('webgl2', options);\n      // Work around test mocking\n      if (context instanceof HTMLElement) {\n        polyfillWebGL1Extensions(context);\n      }\n      return context;\n    }\n    // For any other type, return the original context\n    return this.originalGetContext(contextId, options);\n  };\n}\n/** Install WebGL1-only extensions on WebGL2 contexts */\nexport function polyfillWebGL1Extensions(gl) {\n  // Enable, to support float and half-float textures\n  gl.getExtension('EXT_color_buffer_float');\n  // WebGL1 extensions implemented using WebGL2 APIs\n  const boundExtensions = {\n    ...WEBGL1_STATIC_EXTENSIONS,\n    WEBGL_disjoint_timer_query: gl.getExtension('EXT_disjoint_timer_query_webgl2'),\n    WEBGL_draw_buffers: getWEBGL_draw_buffers(gl),\n    OES_vertex_array_object: getOES_vertex_array_object(gl),\n    ANGLE_instanced_arrays: getANGLE_instanced_arrays(gl)\n  };\n  // Override gl.getExtension\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetExtension = gl.getExtension;\n  gl.getExtension = function (extensionName) {\n    const ext = originalGetExtension.call(gl, extensionName);\n    if (ext) {\n      return ext;\n    }\n    // Injected extensions\n    if (extensionName in boundExtensions) {\n      return boundExtensions[extensionName];\n    }\n    return null;\n  };\n  // Override gl.getSupportedExtensions\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetSupportedExtensions = gl.getSupportedExtensions;\n  gl.getSupportedExtensions = function () {\n    const extensions = originalGetSupportedExtensions.apply(gl) || [];\n    return extensions?.concat(Object.keys(boundExtensions));\n  };\n}\n// Update unsized WebGL1 formats to sized WebGL2 formats\n// todo move to texture format file\n// export function getInternalFormat(gl: WebGL2RenderingContext, format: GL, type: GL): GL {\n//   // webgl2 texture formats\n//   // https://webgl2fundamentals.org/webgl/lessons/webgl-data-textures.html\n//   switch (format) {\n//     case GL.DEPTH_COMPONENT:\n//       return GL.DEPTH_COMPONENT24;\n//     case GL.DEPTH_STENCIL:\n//       return GL.DEPTH24_STENCIL8;\n//     case GL.RGBA:\n//       return type === GL.HALF_FLOAT ? GL.RGBA16F : GL.RGBA32F;\n//     case GL.RGB:\n//       return type === GL.HALF_FLOAT ? GL.RGB16F : GL.RGB32F;\n//     default:\n//       return format;\n//   }\n// }\n/*\n// texture type to update on the fly\nexport function getTextureType(gl: WebGL2RenderingContext, type: GL): GL {\n  if (type === HALF_FLOAT_OES) {\n    return GL.HALF_FLOAT;\n  }\n  return type;\n}\n\n  // And texImage2D to convert the internalFormat to webgl2.\n  const webgl2 = this;\n  const origTexImage = gl.texImage2D;\n  gl.texImage2D = function (target, miplevel, iformat, a, typeFor6, c, d, typeFor9, f) {\n    if (arguments.length == 6) {\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor6);\n      origTexImage.apply(gl, [target, miplevel, ifmt, a, webgl.getTextureType(gl, typeFor6), c]);\n    } else {\n      // arguments.length == 9\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor9);\n      origTexImage.apply(gl, [\n        target,\n        miplevel,\n        ifmt,\n        a,\n        typeFor6,\n        c,\n        d,\n        webgl2.getTextureType(gl, typeFor9),\n        f\n      ]);\n    }\n  };\n};\n*/\n//# sourceMappingURL=polyfill-webgl1-extensions.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}