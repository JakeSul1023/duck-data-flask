{"ast":null,"code":"// GLTF 1.0 extensions (decode only)\n// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';\n// GLTF 2.0 Vendor extensions\nimport * as EXT_mesh_features from \"../extensions/EXT_mesh_features.js\";\nimport * as EXT_structural_metadata from \"../extensions/EXT_structural_metadata.js\";\n// GLTF 2.0 Khronos extensions (decode/encode)\nimport * as EXT_meshopt_compression from \"../extensions/EXT_meshopt_compression.js\";\nimport * as EXT_texture_webp from \"../extensions/EXT_texture_webp.js\";\nimport * as KHR_texture_basisu from \"../extensions/KHR_texture_basisu.js\";\nimport * as KHR_draco_mesh_compression from \"../extensions/KHR_draco_mesh_compression.js\";\nimport * as KHR_texture_transform from \"../extensions/KHR_texture_transform.js\";\n// Deprecated. These should be handled by rendering library (e.g. luma.gl), not the loader.\nimport * as KHR_lights_punctual from \"../extensions/deprecated/KHR_lights_punctual.js\";\nimport * as KHR_materials_unlit from \"../extensions/deprecated/KHR_materials_unlit.js\";\nimport * as KHR_techniques_webgl from \"../extensions/deprecated/KHR_techniques_webgl.js\";\nimport * as EXT_feature_metadata from \"../extensions/deprecated/EXT_feature_metadata.js\";\n/**\n * List of extensions processed by the GLTFLoader\n * Note that may extensions can only be handled on the rendering stage and are left out here\n * These are just extensions that can be handled fully or partially during loading.\n */\nexport const EXTENSIONS = [\n// 1.0\n// KHR_binary_gltf is handled separately - must be processed before other parsing starts\n// KHR_binary_gltf,\n// 2.0\nEXT_structural_metadata, EXT_mesh_features, EXT_meshopt_compression, EXT_texture_webp,\n// Basisu should come after webp, we want basisu to be preferred if both are provided\nKHR_texture_basisu, KHR_draco_mesh_compression, KHR_lights_punctual, KHR_materials_unlit, KHR_techniques_webgl, KHR_texture_transform, EXT_feature_metadata];\n/**\n * List of extensions processed by the GLTFWriter\n */\nconst EXTENSIONS_ENCODING = [EXT_structural_metadata, EXT_mesh_features];\n/** Call before any resource loading starts */\nexport function preprocessExtensions(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let context = arguments.length > 2 ? arguments[2] : undefined;\n  const extensions = EXTENSIONS.filter(extension => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    extension.preprocess?.(gltf, options, context);\n  }\n}\n/** Call after resource loading */\nexport async function decodeExtensions(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let context = arguments.length > 2 ? arguments[2] : undefined;\n  const extensions = EXTENSIONS.filter(extension => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    // Note: We decode async extensions sequentially, this might not be necessary\n    // Currently we only have Draco, but when we add Basis we may revisit\n    await extension.decode?.(gltf, options, context);\n  }\n}\n/** Call before resource writing */\nexport function encodeExtensions(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  for (const extension of EXTENSIONS_ENCODING) {\n    gltf = extension.encode?.(gltf, options) ?? gltf;\n  }\n  return gltf;\n}\nfunction useExtension(extensionName, options) {\n  const excludes = options?.gltf?.excludeExtensions || {};\n  const exclude = extensionName in excludes && !excludes[extensionName];\n  return !exclude;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}