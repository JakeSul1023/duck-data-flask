{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\nimport { createProtoFeature } from \"./proto-feature.js\";\nimport { clipFeatures } from \"./clip-features.js\";\n/**\n * Wrap across antemeridian, by clipping into two tiles, shifting the overflowing x coordinates\n * @param list of features to be wrapped\n * @param options buffer and extent\n * @returns\n */\nexport function wrapFeatures(features, options) {\n  const buffer = options.buffer / options.extent;\n  let merged = features;\n  const left = clipFeatures(features, 1, -1 - buffer, buffer, 0, -1, 2, options); // left world copy\n  const right = clipFeatures(features, 1, 1 - buffer, 2 + buffer, 0, -1, 2, options); // right world copy\n  if (left || right) {\n    merged = clipFeatures(features, 1, -buffer, 1 + buffer, 0, -1, 2, options) || []; // center world copy\n    if (left) {\n      merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center\n    }\n    if (right) {\n      merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center\n    }\n  }\n  return merged;\n}\n/**\n * Shift the x coordinates of a list of features\n * @param features list of features to shift x coordinates for\n * @param offset\n * @returns\n */\nfunction shiftFeatureCoords(features, offset) {\n  const newFeatures = [];\n  for (let i = 0; i < features.length; i++) {\n    const feature = features[i];\n    const type = feature.type;\n    let newGeometry;\n    switch (type) {\n      case 'Point':\n      case 'MultiPoint':\n      case 'LineString':\n        newGeometry = shiftCoords(feature.geometry, offset);\n        break;\n      case 'MultiLineString':\n      case 'Polygon':\n        newGeometry = [];\n        for (const line of feature.geometry) {\n          newGeometry.push(shiftCoords(line, offset));\n        }\n        break;\n      case 'MultiPolygon':\n        newGeometry = [];\n        for (const polygon of feature.geometry) {\n          const newPolygon = [];\n          for (const line of polygon) {\n            // @ts-expect-error TODO\n            newPolygon.push(shiftCoords(line, offset));\n          }\n          newGeometry.push(newPolygon);\n        }\n        break;\n      default:\n        throw new Error(String(type));\n    }\n    newFeatures.push(createProtoFeature(feature.id, type, newGeometry, feature.tags));\n  }\n  return newFeatures;\n}\nclass Points extends Array {\n  size;\n  start;\n  end;\n}\n/**\n * Shift the x coordinate of every point\n * @param points\n * @param offset\n * @returns\n */\nfunction shiftCoords(points, offset) {\n  const newPoints = [];\n  newPoints.size = points.size;\n  if (points.start !== undefined) {\n    newPoints.start = points.start;\n    newPoints.end = points.end;\n  }\n  for (let i = 0; i < points.length; i += 3) {\n    newPoints.push(points[i] + offset, points[i + 1], points[i + 2]);\n  }\n  return newPoints;\n}","map":{"version":3,"names":["createProtoFeature","clipFeatures","wrapFeatures","features","options","buffer","extent","merged","left","right","shiftFeatureCoords","concat","offset","newFeatures","i","length","feature","type","newGeometry","shiftCoords","geometry","line","push","polygon","newPolygon","Error","String","id","tags","Points","Array","size","start","end","points","newPoints","undefined"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/mvt/dist/lib/vector-tiler/features/wrap-features.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\nimport { createProtoFeature } from \"./proto-feature.js\";\nimport { clipFeatures } from \"./clip-features.js\";\n/**\n * Wrap across antemeridian, by clipping into two tiles, shifting the overflowing x coordinates\n * @param list of features to be wrapped\n * @param options buffer and extent\n * @returns\n */\nexport function wrapFeatures(features, options) {\n    const buffer = options.buffer / options.extent;\n    let merged = features;\n    const left = clipFeatures(features, 1, -1 - buffer, buffer, 0, -1, 2, options); // left world copy\n    const right = clipFeatures(features, 1, 1 - buffer, 2 + buffer, 0, -1, 2, options); // right world copy\n    if (left || right) {\n        merged = clipFeatures(features, 1, -buffer, 1 + buffer, 0, -1, 2, options) || []; // center world copy\n        if (left) {\n            merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center\n        }\n        if (right) {\n            merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center\n        }\n    }\n    return merged;\n}\n/**\n * Shift the x coordinates of a list of features\n * @param features list of features to shift x coordinates for\n * @param offset\n * @returns\n */\nfunction shiftFeatureCoords(features, offset) {\n    const newFeatures = [];\n    for (let i = 0; i < features.length; i++) {\n        const feature = features[i];\n        const type = feature.type;\n        let newGeometry;\n        switch (type) {\n            case 'Point':\n            case 'MultiPoint':\n            case 'LineString':\n                newGeometry = shiftCoords(feature.geometry, offset);\n                break;\n            case 'MultiLineString':\n            case 'Polygon':\n                newGeometry = [];\n                for (const line of feature.geometry) {\n                    newGeometry.push(shiftCoords(line, offset));\n                }\n                break;\n            case 'MultiPolygon':\n                newGeometry = [];\n                for (const polygon of feature.geometry) {\n                    const newPolygon = [];\n                    for (const line of polygon) {\n                        // @ts-expect-error TODO\n                        newPolygon.push(shiftCoords(line, offset));\n                    }\n                    newGeometry.push(newPolygon);\n                }\n                break;\n            default:\n                throw new Error(String(type));\n        }\n        newFeatures.push(createProtoFeature(feature.id, type, newGeometry, feature.tags));\n    }\n    return newFeatures;\n}\nclass Points extends Array {\n    size;\n    start;\n    end;\n}\n/**\n * Shift the x coordinate of every point\n * @param points\n * @param offset\n * @returns\n */\nfunction shiftCoords(points, offset) {\n    const newPoints = [];\n    newPoints.size = points.size;\n    if (points.start !== undefined) {\n        newPoints.start = points.start;\n        newPoints.end = points.end;\n    }\n    for (let i = 0; i < points.length; i += 3) {\n        newPoints.push(points[i] + offset, points[i + 1], points[i + 2]);\n    }\n    return newPoints;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}