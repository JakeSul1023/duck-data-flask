{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { convertXMLFieldToArrayInPlace, XMLLoader } from '@loaders.gl/xml';\nimport { parseExceptionReport } from \"./parse-exception-report.js\";\n/**\n * Parses a typed data structure from raw XML for `GetRecords` response\n * @note Error handlings is fairly weak\n */\nexport function parseCSWRecords(text, options) {\n  const parsedXML = XMLLoader.parseTextSync?.(text, {\n    ...options,\n    xml: {\n      ...options?.xml,\n      removeNSPrefix: true,\n      uncapitalizeKeys: true,\n      arrayPaths: [],\n      _fastXML: {\n        ...options?.xml?._fastXML,\n        parseAttributeValue: true\n      }\n    }\n  });\n  parseExceptionReport(parsedXML);\n  const xmlRecords = parsedXML.getRecordsResponse;\n  // Move results to top\n  const elementSet = xmlRecords.searchResults.elementSet;\n  const recordsFieldName = `${elementSet}Record`;\n  xmlRecords.records = xmlRecords.searchResults[recordsFieldName];\n  delete xmlRecords.searchResults[recordsFieldName];\n  convertXMLFieldToArrayInPlace(xmlRecords, 'records');\n  for (const record of xmlRecords.records) {\n    record.boundingBoxes = record.boundingBox;\n    delete record.boundingBox;\n    convertXMLFieldToArrayInPlace(record, 'boundingBoxes');\n    for (const boundingBox of record.boundingBoxes) {\n      boundingBox.value = [boundingBox.upperCorner[0], boundingBox.upperCorner[1], boundingBox.lowerCorner[0], boundingBox.lowerCorner[1]];\n      delete boundingBox.upperCorner;\n      delete boundingBox.lowerCorner;\n    }\n  }\n  return xmlRecords;\n}\nexport function renameXMLTags(xml, renameKeys) {\n  for (const [oldKey, newKey] of Object.entries(renameKeys)) {\n    xml[newKey] = xml[oldKey];\n    delete xml[oldKey];\n  }\n}","map":{"version":3,"names":["convertXMLFieldToArrayInPlace","XMLLoader","parseExceptionReport","parseCSWRecords","text","options","parsedXML","parseTextSync","xml","removeNSPrefix","uncapitalizeKeys","arrayPaths","_fastXML","parseAttributeValue","xmlRecords","getRecordsResponse","elementSet","searchResults","recordsFieldName","records","record","boundingBoxes","boundingBox","value","upperCorner","lowerCorner","renameXMLTags","renameKeys","oldKey","newKey","Object","entries"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/wms/dist/lib/parsers/csw/parse-csw-records.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { convertXMLFieldToArrayInPlace, XMLLoader } from '@loaders.gl/xml';\nimport { parseExceptionReport } from \"./parse-exception-report.js\";\n/**\n * Parses a typed data structure from raw XML for `GetRecords` response\n * @note Error handlings is fairly weak\n */\nexport function parseCSWRecords(text, options) {\n    const parsedXML = XMLLoader.parseTextSync?.(text, {\n        ...options,\n        xml: {\n            ...options?.xml,\n            removeNSPrefix: true,\n            uncapitalizeKeys: true,\n            arrayPaths: [],\n            _fastXML: {\n                ...options?.xml?._fastXML,\n                parseAttributeValue: true\n            }\n        }\n    });\n    parseExceptionReport(parsedXML);\n    const xmlRecords = parsedXML.getRecordsResponse;\n    // Move results to top\n    const elementSet = xmlRecords.searchResults.elementSet;\n    const recordsFieldName = `${elementSet}Record`;\n    xmlRecords.records = xmlRecords.searchResults[recordsFieldName];\n    delete xmlRecords.searchResults[recordsFieldName];\n    convertXMLFieldToArrayInPlace(xmlRecords, 'records');\n    for (const record of xmlRecords.records) {\n        record.boundingBoxes = record.boundingBox;\n        delete record.boundingBox;\n        convertXMLFieldToArrayInPlace(record, 'boundingBoxes');\n        for (const boundingBox of record.boundingBoxes) {\n            boundingBox.value = [\n                boundingBox.upperCorner[0],\n                boundingBox.upperCorner[1],\n                boundingBox.lowerCorner[0],\n                boundingBox.lowerCorner[1]\n            ];\n            delete boundingBox.upperCorner;\n            delete boundingBox.lowerCorner;\n        }\n    }\n    return xmlRecords;\n}\nexport function renameXMLTags(xml, renameKeys) {\n    for (const [oldKey, newKey] of Object.entries(renameKeys)) {\n        xml[newKey] = xml[oldKey];\n        delete xml[oldKey];\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,6BAA6B,EAAEC,SAAS,QAAQ,iBAAiB;AAC1E,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC3C,MAAMC,SAAS,GAAGL,SAAS,CAACM,aAAa,GAAGH,IAAI,EAAE;IAC9C,GAAGC,OAAO;IACVG,GAAG,EAAE;MACD,GAAGH,OAAO,EAAEG,GAAG;MACfC,cAAc,EAAE,IAAI;MACpBC,gBAAgB,EAAE,IAAI;MACtBC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE;QACN,GAAGP,OAAO,EAAEG,GAAG,EAAEI,QAAQ;QACzBC,mBAAmB,EAAE;MACzB;IACJ;EACJ,CAAC,CAAC;EACFX,oBAAoB,CAACI,SAAS,CAAC;EAC/B,MAAMQ,UAAU,GAAGR,SAAS,CAACS,kBAAkB;EAC/C;EACA,MAAMC,UAAU,GAAGF,UAAU,CAACG,aAAa,CAACD,UAAU;EACtD,MAAME,gBAAgB,GAAG,GAAGF,UAAU,QAAQ;EAC9CF,UAAU,CAACK,OAAO,GAAGL,UAAU,CAACG,aAAa,CAACC,gBAAgB,CAAC;EAC/D,OAAOJ,UAAU,CAACG,aAAa,CAACC,gBAAgB,CAAC;EACjDlB,6BAA6B,CAACc,UAAU,EAAE,SAAS,CAAC;EACpD,KAAK,MAAMM,MAAM,IAAIN,UAAU,CAACK,OAAO,EAAE;IACrCC,MAAM,CAACC,aAAa,GAAGD,MAAM,CAACE,WAAW;IACzC,OAAOF,MAAM,CAACE,WAAW;IACzBtB,6BAA6B,CAACoB,MAAM,EAAE,eAAe,CAAC;IACtD,KAAK,MAAME,WAAW,IAAIF,MAAM,CAACC,aAAa,EAAE;MAC5CC,WAAW,CAACC,KAAK,GAAG,CAChBD,WAAW,CAACE,WAAW,CAAC,CAAC,CAAC,EAC1BF,WAAW,CAACE,WAAW,CAAC,CAAC,CAAC,EAC1BF,WAAW,CAACG,WAAW,CAAC,CAAC,CAAC,EAC1BH,WAAW,CAACG,WAAW,CAAC,CAAC,CAAC,CAC7B;MACD,OAAOH,WAAW,CAACE,WAAW;MAC9B,OAAOF,WAAW,CAACG,WAAW;IAClC;EACJ;EACA,OAAOX,UAAU;AACrB;AACA,OAAO,SAASY,aAAaA,CAAClB,GAAG,EAAEmB,UAAU,EAAE;EAC3C,KAAK,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,UAAU,CAAC,EAAE;IACvDnB,GAAG,CAACqB,MAAM,CAAC,GAAGrB,GAAG,CAACoB,MAAM,CAAC;IACzB,OAAOpB,GAAG,CAACoB,MAAM,CAAC;EACtB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}