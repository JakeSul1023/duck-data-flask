{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parsePosition, getPosition } from \"../utils/positions.js\";\nimport { deepEqual } from \"../utils/deep-equal.js\";\nexport default class View {\n  constructor(props) {\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null\n    } = props;\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n    this.props = {\n      ...props,\n      id: this.id\n    };\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n    // To correctly compare padding use depth=2\n    return this.constructor === view.constructor && deepEqual(this.props, view.props, 2);\n  }\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport({\n    width,\n    height,\n    viewState\n  }) {\n    viewState = this.filterViewState(viewState);\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({\n      width,\n      height\n    });\n    if (!viewportDimensions.height || !viewportDimensions.width) {\n      return null;\n    }\n    const ViewportType = this.getViewportType(viewState);\n    return new ViewportType({\n      ...viewState,\n      ...this.props,\n      ...viewportDimensions\n    });\n  }\n  getViewStateId() {\n    const {\n      viewState\n    } = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n      // Merge in all props from View's viewState, except id\n      const newViewState = {\n        ...viewState\n      };\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n    return viewState;\n  }\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions({\n    width,\n    height\n  }) {\n    const dimensions = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n  // Used by sub classes to resolve controller props\n  get controller() {\n    const opts = this.props.controller;\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {\n        type: this.ControllerType\n      };\n    }\n    if (typeof opts === 'function') {\n      return {\n        type: opts\n      };\n    }\n    return {\n      type: this.ControllerType,\n      ...opts\n    };\n  }\n}","map":{"version":3,"names":["parsePosition","getPosition","deepEqual","View","constructor","props","id","x","y","width","height","padding","displayName","_x","_y","_width","_height","_padding","left","right","top","bottom","equals","bind","Object","seal","view","makeViewport","viewState","filterViewState","viewportDimensions","getDimensions","ViewportType","getViewportType","getViewStateId","newViewState","key","dimensions","controller","opts","type","ControllerType"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\views\\view.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition, Position} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport type Controller from '../controllers/controller';\nimport type {ControllerOptions} from '../controllers/controller';\nimport type {TransitionProps} from '../controllers/transition-manager';\nimport type {Padding} from '../viewports/viewport';\nimport type {ConstructorOf} from '../types/types';\n\nexport type CommonViewState = TransitionProps;\n\nexport type CommonViewProps<ViewState> = {\n  /** A unique id of the view. In a multi-view use case, this is important for matching view states and place contents into this view. */\n  id?: string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  x?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  y?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  width?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  height?: number | string;\n  /** Padding around the view, expressed in either relative (e.g. `'50%'`) or absolute pixels. Default `null`. */\n  padding?: {\n    left?: number | string;\n    right?: number | string;\n    top?: number | string;\n    bottom?: number | string;\n  } | null;\n  /** When using multiple views, set this flag to wipe the pixels drawn by other overlaping views */\n  clear?: boolean;\n  /** State of the view */\n  viewState?:\n    | string\n    | ({\n        id?: string;\n      } & Partial<ViewState>);\n  /** Options for viewport interactivity. */\n  controller?:\n    | null\n    | boolean\n    | ConstructorOf<Controller<any>>\n    | (ControllerOptions & {\n        type?: ConstructorOf<Controller<any>>;\n      });\n};\n\nexport default abstract class View<\n  ViewState extends CommonViewState = CommonViewState,\n  ViewProps extends CommonViewProps<ViewState> = CommonViewProps<ViewState>\n> {\n  id: string;\n  abstract getViewportType(viewState: ViewState): ConstructorOf<Viewport>;\n  protected abstract get ControllerType(): ConstructorOf<Controller<any>>;\n\n  private _x: Position;\n  private _y: Position;\n  private _width: Position;\n  private _height: Position;\n  private _padding: {\n    left: Position;\n    right: Position;\n    top: Position;\n    bottom: Position;\n  } | null;\n\n  readonly props: ViewProps;\n\n  constructor(props: ViewProps) {\n    const {id, x = 0, y = 0, width = '100%', height = '100%', padding = null} = props;\n\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view: this): boolean {\n    if (this === view) {\n      return true;\n    }\n\n    // To correctly compare padding use depth=2\n    return this.constructor === view.constructor && deepEqual(this.props, view.props, 2);\n  }\n\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport({width, height, viewState}: {width: number; height: number; viewState: ViewState}) {\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    if (!viewportDimensions.height || !viewportDimensions.width) {\n      return null;\n    }\n    const ViewportType = this.getViewportType(viewState);\n    return new ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  getViewStateId(): string {\n    const {viewState} = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState: ViewState): ViewState {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState as ViewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions({width, height}: {width: number; height: number}): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    padding?: Padding;\n  } {\n    const dimensions: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      padding?: Padding;\n    } = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n\n  // Used by sub classes to resolve controller props\n  get controller(): (ControllerOptions & {type: ConstructorOf<Controller<any>>}) | null {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {type: this.ControllerType};\n    }\n    if (typeof opts === 'function') {\n      return {type: opts};\n    }\n    return {type: this.ControllerType, ...opts};\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}