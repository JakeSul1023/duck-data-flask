{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { encodeGLBSync } from \"./lib/encoders/encode-glb.js\";\nimport { VERSION } from \"./lib/utils/version.js\";\n/**\n * GLB exporter\n * GLB is the binary container format for GLTF\n */\nexport const GLBWriter = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  options: {\n    glb: {}\n  },\n  encode: async (glb, options = {}) => encodeSync(glb, options),\n  encodeSync\n};\nfunction encodeSync(glb, options) {\n  const {\n    byteOffset = 0\n  } = options ?? {};\n  // Calculate length and allocate buffer\n  const byteLength = encodeGLBSync(glb, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  // Encode into buffer\n  const dataView = new DataView(arrayBuffer);\n  encodeGLBSync(glb, dataView, byteOffset, options);\n  return arrayBuffer;\n}","map":{"version":3,"names":["encodeGLBSync","VERSION","GLBWriter","name","id","module","version","extensions","mimeTypes","binary","options","glb","encode","encodeSync","byteOffset","byteLength","arrayBuffer","ArrayBuffer","dataView","DataView"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/glb-writer.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { encodeGLBSync } from \"./lib/encoders/encode-glb.js\";\nimport { VERSION } from \"./lib/utils/version.js\";\n/**\n * GLB exporter\n * GLB is the binary container format for GLTF\n */\nexport const GLBWriter = {\n    name: 'GLB',\n    id: 'glb',\n    module: 'gltf',\n    version: VERSION,\n    extensions: ['glb'],\n    mimeTypes: ['model/gltf-binary'],\n    binary: true,\n    options: {\n        glb: {}\n    },\n    encode: async (glb, options = {}) => encodeSync(glb, options),\n    encodeSync\n};\nfunction encodeSync(glb, options) {\n    const { byteOffset = 0 } = options ?? {};\n    // Calculate length and allocate buffer\n    const byteLength = encodeGLBSync(glb, null, byteOffset, options);\n    const arrayBuffer = new ArrayBuffer(byteLength);\n    // Encode into buffer\n    const dataView = new DataView(arrayBuffer);\n    encodeGLBSync(glb, dataView, byteOffset, options);\n    return arrayBuffer;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,OAAO,QAAQ,wBAAwB;AAChD;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG;EACrBC,IAAI,EAAE,KAAK;EACXC,EAAE,EAAE,KAAK;EACTC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAEL,OAAO;EAChBM,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,SAAS,EAAE,CAAC,mBAAmB,CAAC;EAChCC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;IACLC,GAAG,EAAE,CAAC;EACV,CAAC;EACDC,MAAM,EAAE,MAAAA,CAAOD,GAAG,EAAED,OAAO,GAAG,CAAC,CAAC,KAAKG,UAAU,CAACF,GAAG,EAAED,OAAO,CAAC;EAC7DG;AACJ,CAAC;AACD,SAASA,UAAUA,CAACF,GAAG,EAAED,OAAO,EAAE;EAC9B,MAAM;IAAEI,UAAU,GAAG;EAAE,CAAC,GAAGJ,OAAO,IAAI,CAAC,CAAC;EACxC;EACA,MAAMK,UAAU,GAAGf,aAAa,CAACW,GAAG,EAAE,IAAI,EAAEG,UAAU,EAAEJ,OAAO,CAAC;EAChE,MAAMM,WAAW,GAAG,IAAIC,WAAW,CAACF,UAAU,CAAC;EAC/C;EACA,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAACH,WAAW,CAAC;EAC1ChB,aAAa,CAACW,GAAG,EAAEO,QAAQ,EAAEJ,UAAU,EAAEJ,OAAO,CAAC;EACjD,OAAOM,WAAW;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}