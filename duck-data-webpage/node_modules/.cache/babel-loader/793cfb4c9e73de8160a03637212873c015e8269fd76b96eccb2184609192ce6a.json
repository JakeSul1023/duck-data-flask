{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { MathArray } from \"./base/math-array.js\";\nimport { checkNumber, checkVector } from \"../lib/validators.js\";\nimport { Vector4 } from \"./vector4.js\";\n// @ts-ignore gl-matrix types...\nimport { fromMat3 as quat_fromMat3, setAxisAngle as quat_setAxisAngle, identity as quat_identity, length as quat_length, squaredLength as quat_squaredLength, dot as quat_dot,\n// getAxisAngle as quat_getAxisAngle,\nrotationTo as quat_rotationTo, add as quat_add, calculateW as quat_calculateW, conjugate as quat_conjugate, invert as quat_invert, lerp as quat_lerp, multiply as quat_multiply, rotateX as quat_rotateX, rotateY as quat_rotateY, rotateZ as quat_rotateZ, scale as quat_scale, slerp as quat_slerp } from \"../gl-matrix/quat.js\";\n// @ts-ignore gl-matrix types...\nimport { transformQuat as vec4_transformQuat } from \"../gl-matrix/vec4.js\";\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\nexport class Quaternion extends MathArray {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n  set(x, y, z, w) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n  fromObject(object) {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * NOTE: The resultant quaternion is not normalized, so you should\n   * be sure to renormalize the quaternion yourself where necessary.\n   * @param m\n   * @returns\n   */\n  fromMatrix3(m) {\n    quat_fromMat3(this, m);\n    return this.check();\n  }\n  fromAxisRotation(axis, rad) {\n    quat_setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n  /** Set a quat to the identity quaternion */\n  identity() {\n    quat_identity(this);\n    return this.check();\n  }\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat_set(this, i, j, k, l);\n  //   return this.check();\n  // }\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    return this.fromAxisRotation(axis, rad);\n  }\n  // Getters/setters\n  get ELEMENTS() {\n    return 4;\n  }\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n  get w() {\n    return this[3];\n  }\n  set w(value) {\n    this[3] = checkNumber(value);\n  }\n  // Calculates the length of a quat\n  len() {\n    return quat_length(this);\n  }\n  // Calculates the squared length of a quat\n  lengthSquared() {\n    return quat_squaredLength(this);\n  }\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a) {\n    return quat_dot(this, a);\n  }\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  // //   const angle = quat_getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n  // MODIFIERS\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat_rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n  // Adds two quat's\n  add(a) {\n    quat_add(this, this, a);\n    return this.check();\n  }\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat_calculateW(this, this);\n    return this.check();\n  }\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat_invert and produces the same result.\n  conjugate() {\n    quat_conjugate(this, this);\n    return this.check();\n  }\n  // Calculates the inverse of a quat\n  invert() {\n    quat_invert(this, this);\n    return this.check();\n  }\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    if (t === undefined) {\n      return this.lerp(this, a, b);\n    }\n    quat_lerp(this, a, b, t);\n    return this.check();\n  }\n  // Multiplies two quat's\n  multiplyRight(a) {\n    quat_multiply(this, this, a);\n    return this.check();\n  }\n  multiplyLeft(a) {\n    quat_multiply(this, a, this);\n    return this.check();\n  }\n  // Normalize a quat\n  normalize() {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat_rotateX(this, this, rad);\n    return this.check();\n  }\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat_rotateY(this, this, rad);\n    return this.check();\n  }\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat_rotateZ(this, this, rad);\n    return this.check();\n  }\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat_scale(this, this, b);\n    return this.check();\n  }\n  // Performs a spherical linear interpolation between two quat\n  slerp(arg0, arg1, arg2) {\n    let start;\n    let target;\n    let ratio;\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1:\n        // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0);\n        break;\n      case 2:\n        // THREE.js compatibility signature (target, ration)\n        start = this; // eslint-disable-line\n        target = arg0;\n        ratio = arg1;\n        break;\n      default:\n        // Default signature: (start, target, ratio)\n        start = arg0;\n        target = arg1;\n        ratio = arg2;\n    }\n    quat_slerp(this, start, target, ratio);\n    return this.check();\n  }\n  transformVector4(vector, result = new Vector4()) {\n    vec4_transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n  // THREE.js Math API compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n  setFromAxisAngle(axis, rad) {\n    return this.setAxisAngle(axis, rad);\n  }\n  premultiply(a) {\n    return this.multiplyLeft(a);\n  }\n  multiply(a) {\n    return this.multiplyRight(a);\n  }\n}\n//# sourceMappingURL=quaternion.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}