{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\n/**\n * A compiled and linked shader program for compute\n */\nexport class ComputePipeline extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    shader: undefined,\n    entryPoint: undefined,\n    constants: {},\n    shaderLayout: undefined\n  };\n  get [Symbol.toStringTag]() {\n    return 'ComputePipeline';\n  }\n  hash = '';\n  /** The merged shader layout */\n  shaderLayout;\n  constructor(device, props) {\n    super(device, props, ComputePipeline.defaultProps);\n    this.shaderLayout = props.shaderLayout;\n  }\n}","map":{"version":3,"names":["Resource","ComputePipeline","defaultProps","shader","undefined","entryPoint","constants","shaderLayout","Symbol","toStringTag","hash","constructor","device","props"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\compute-pipeline.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Resource, ResourceProps} from './resource';\nimport type {ComputeShaderLayout, Binding} from '../types/shader-layout';\nimport type {Device} from '../device';\nimport type {Shader} from './shader';\n\n/**\n * Properties for a compute pipeline\n */\nexport type ComputePipelineProps = ResourceProps & {\n  handle?: unknown;\n  /** Compiled shader object */\n  shader: Shader;\n  /** The entry point, defaults to main */\n  entryPoint?: string;\n  /** These are WGSL constant values - different from GLSL defines in that shader does not need to be recompiled */\n  constants?: Record<string, number>;\n  /** Describes the attributes and bindings exposed by the pipeline shader(s). */\n  shaderLayout?: ComputeShaderLayout | null;\n};\n\n/**\n * A compiled and linked shader program for compute\n */\nexport abstract class ComputePipeline extends Resource<ComputePipelineProps> {\n  static override defaultProps: Required<ComputePipelineProps> = {\n    ...Resource.defaultProps,\n    shader: undefined!,\n    entryPoint: undefined!,\n    constants: {},\n    shaderLayout: undefined!\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'ComputePipeline';\n  }\n\n  hash: string = '';\n  /** The merged shader layout */\n  shaderLayout: ComputeShaderLayout;\n\n  constructor(device: Device, props: ComputePipelineProps) {\n    super(device, props, ComputePipeline.defaultProps);\n    this.shaderLayout = props.shaderLayout!;\n  }\n\n  /**\n   * @todo Use renderpass.setBindings() ?\n   * @todo Do we want to expose BindGroups in the API and remove this?\n   */\n  abstract setBindings(bindings: Record<string, Binding>): void;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,QAAQ,QAAgB;AAoBhC;;;AAGA,OAAM,MAAgBC,eAAgB,SAAQD,QAA8B;EAC1E,OAAgBE,YAAY,GAAmC;IAC7D,GAAGF,QAAQ,CAACE,YAAY;IACxBC,MAAM,EAAEC,SAAU;IAClBC,UAAU,EAAED,SAAU;IACtBE,SAAS,EAAE,EAAE;IACbC,YAAY,EAAEH;GACf;EAED,KAAcI,MAAM,CAACC,WAAW,IAAC;IAC/B,OAAO,iBAAiB;EAC1B;EAEAC,IAAI,GAAW,EAAE;EACjB;EACAH,YAAY;EAEZI,YAAYC,MAAc,EAAEC,KAA2B;IACrD,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEZ,eAAe,CAACC,YAAY,CAAC;IAClD,IAAI,CAACK,YAAY,GAAGM,KAAK,CAACN,YAAa;EACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}