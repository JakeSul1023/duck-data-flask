{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { luma } from '@luma.gl/core';\nimport { AnimationLoop } from \"./animation-loop.js\";\n/** Instantiates and runs the render loop */\nexport function makeAnimationLoop(AnimationLoopTemplateCtor, props) {\n  let renderLoop = null;\n  const device = props?.device || luma.createDevice({\n    id: 'animation-loop',\n    adapters: props?.adapters,\n    createCanvasContext: true\n  });\n  // Create an animation loop;\n  const animationLoop = new AnimationLoop({\n    ...props,\n    device,\n    async onInitialize(animationProps) {\n      // @ts-expect-error abstract to prevent instantiation\n      renderLoop = new AnimationLoopTemplateCtor(animationProps);\n      // Any async loading can be handled here\n      return await renderLoop?.onInitialize(animationProps);\n    },\n    onRender: animationProps => renderLoop?.onRender(animationProps),\n    onFinalize: animationProps => renderLoop?.onFinalize(animationProps)\n  });\n  // @ts-expect-error Hack: adds info for the website to find\n  animationLoop.getInfo = () => {\n    // @ts-ignore\n    // eslint-disable-next-line no-invalid-this\n    return this.AnimationLoopTemplateCtor.info;\n  };\n  // Start the loop automatically\n  // animationLoop.start();\n  return animationLoop;\n}\n//# sourceMappingURL=make-animation-loop.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}