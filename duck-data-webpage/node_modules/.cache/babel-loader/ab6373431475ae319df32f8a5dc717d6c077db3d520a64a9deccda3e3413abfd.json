{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Default color for auto highlight, a cyan color */\nconst DEFAULT_HIGHLIGHT_COLOR = [0, 1, 1, 1];\nexport const INVALID_INDEX = -1;\n// GLSL_UNIFORMS\nconst uniformTypes = {\n  isActive: 'i32',\n  indexMode: 'i32',\n  batchIndex: 'i32',\n  isHighlightActive: 'i32',\n  highlightedBatchIndex: 'i32',\n  highlightedObjectIndex: 'i32',\n  highlightColor: 'vec4<f32>'\n};\nexport const GLSL_UNIFORMS = /* glsl */`\\\nprecision highp float;\nprecision highp int;\n\nuniform pickingUniforms {\n  int isActive;\n  int indexMode;\n  int batchIndex;\n\n  int isHighlightActive;\n  int highlightedBatchIndex;\n  int highlightedObjectIndex;\n  vec4 highlightColor;\n} picking;\n`;\nexport const WGSL_UNIFORMS = /* wgsl */`\\\nstruct pickingUniforms {\n  isActive: int32;\n  indexMode: int32;\n  batchIndex: int32;\n\n  isHighlightActive: int32;\n  highlightedBatchIndex: int32;\n  highlightedObjectIndex: int32;\n  highlightColor: vec4<f32>;\n} picking;\n`;\nfunction getUniforms(props = {}, prevUniforms) {\n  const uniforms = {\n    ...prevUniforms\n  };\n  // picking\n  if (props.isActive !== undefined) {\n    uniforms.isActive = Boolean(props.isActive);\n  }\n  switch (props.indexMode) {\n    case 'instance':\n      uniforms.indexMode = 0;\n      break;\n    case 'custom':\n      uniforms.indexMode = 1;\n      break;\n    case undefined:\n      // no change\n      break;\n  }\n  switch (props.highlightedObjectIndex) {\n    case undefined:\n      // Unless highlightedObjectColor explicitly null or set, do not update state\n      break;\n    case null:\n      // Clear highlight\n      uniforms.isHighlightActive = false;\n      uniforms.highlightedObjectIndex = INVALID_INDEX;\n      break;\n    default:\n      uniforms.isHighlightActive = true;\n      uniforms.highlightedObjectIndex = props.highlightedObjectIndex;\n  }\n  if (typeof props.highlightedBatchIndex === 'number') {\n    uniforms.highlightedBatchIndex = props.highlightedBatchIndex;\n  }\n  if (props.highlightColor) {\n    uniforms.highlightColor = props.highlightColor;\n  }\n  return uniforms;\n}\n/**\n * Provides support for color-based picking and highlighting.\n *\n * In particular, supports picking a specific instance in an instanced\n * draw call and highlighting an instance based on its picking color,\n * and correspondingly, supports picking and highlighting groups of\n * primitives with the same picking color in non-instanced draw-calls\n *\n * @note Color based picking has the significant advantage in that it can be added to any\n * existing shader without requiring any additional picking logic.\n */\nexport const pickingUniforms = {\n  props: {},\n  uniforms: {},\n  name: 'picking',\n  uniformTypes,\n  defaultUniforms: {\n    isActive: false,\n    indexMode: 0,\n    batchIndex: 0,\n    isHighlightActive: true,\n    highlightedBatchIndex: INVALID_INDEX,\n    highlightedObjectIndex: INVALID_INDEX,\n    highlightColor: DEFAULT_HIGHLIGHT_COLOR\n  },\n  getUniforms\n};","map":{"version":3,"names":["DEFAULT_HIGHLIGHT_COLOR","INVALID_INDEX","uniformTypes","isActive","indexMode","batchIndex","isHighlightActive","highlightedBatchIndex","highlightedObjectIndex","highlightColor","GLSL_UNIFORMS","WGSL_UNIFORMS","getUniforms","props","prevUniforms","uniforms","undefined","Boolean","pickingUniforms","name","defaultUniforms"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\modules\\picking\\picking-uniforms.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumberArray4} from '@math.gl/types';\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\n/** Default color for auto highlight, a cyan color */\nconst DEFAULT_HIGHLIGHT_COLOR: NumberArray4 = [0, 1, 1, 1];\n\nexport const INVALID_INDEX = -1;\n\n/**\n * Props for the picking module, which depending on mode renders picking colors or highlighted item.\n * When active, renders picking colors, assumed to be rendered to off-screen \"picking\" buffer.\n * When inactive, renders normal colors, with the exception of selected object which is rendered with highlight\n * can distinguish between 2^32 different objects in each of 2^32 different batches.\n */\nexport type PickingProps = {\n  /** Are we picking? I.e. rendering picking colors? */\n  isActive?: boolean;\n  /** Whether to use instance_index (built-in) or a custom application supplied index (usually from an attribute) */\n  indexMode?: 'instance' | 'custom';\n  /** Batch index (used when rendering multiple models to identify which model was picked), defaults to 0 */\n  batchIndex?: number;\n\n  /** Index of the highlighted batch, defaults to 0 */\n  highlightedBatchIndex?: number | null;\n  /** Set an index to highlight that item, or `null` to explicitly clear **/\n  highlightedObjectIndex?: number | null;\n  /** Color of visual highlight of \"selected\" item () */\n  highlightColor?: NumberArray4;\n};\n\n/**\n * Uniforms for the picking module, which renders picking colors and highlighted item.\n * When active, renders picking colors, assumed to be rendered to off-screen \"picking\" buffer.\n * When inactive, renders normal colors, with the exception of selected object which is rendered with highlight\n */\nexport type PickingUniforms = {\n  /**\n   * When true, renders picking colors. Set when rendering to off-screen \"picking\" buffer.\n   * When false, renders normal colors, with the exception of selected object which is rendered with highlight\n   */\n  isActive: boolean;\n  /** Set to true when picking an attribute value instead of object index */\n  indexMode: 0 | 1;\n  /** Index of batch currently being rendered */\n  batchIndex: number;\n\n  /** Do we have a highlighted item? */\n  isHighlightActive: boolean;\n  /** Color of visual highlight of \"selected\" item. Note: RGBA components must in the range 0-1 */\n  highlightColor: NumberArray4;\n  /** Indicates which batch to visually highlight an item in (defaults to 0) */\n  highlightedBatchIndex: number;\n  /** Indicates which index in the batch to highlight an item in */\n  highlightedObjectIndex: number;\n};\n\nexport type PickingBindings = {};\n\n// GLSL_UNIFORMS\n\nconst uniformTypes: Required<ShaderModule<PickingProps, PickingUniforms>>['uniformTypes'] = {\n  isActive: 'i32',\n  indexMode: 'i32',\n  batchIndex: 'i32',\n\n  isHighlightActive: 'i32',\n  highlightedBatchIndex: 'i32',\n  highlightedObjectIndex: 'i32',\n  highlightColor: 'vec4<f32>'\n};\n\nexport const GLSL_UNIFORMS = /* glsl */ `\\\nprecision highp float;\nprecision highp int;\n\nuniform pickingUniforms {\n  int isActive;\n  int indexMode;\n  int batchIndex;\n\n  int isHighlightActive;\n  int highlightedBatchIndex;\n  int highlightedObjectIndex;\n  vec4 highlightColor;\n} picking;\n`;\n\nexport const WGSL_UNIFORMS = /* wgsl */ `\\\nstruct pickingUniforms {\n  isActive: int32;\n  indexMode: int32;\n  batchIndex: int32;\n\n  isHighlightActive: int32;\n  highlightedBatchIndex: int32;\n  highlightedObjectIndex: int32;\n  highlightColor: vec4<f32>;\n} picking;\n`;\n\nfunction getUniforms(props: PickingProps = {}, prevUniforms?: PickingUniforms): PickingUniforms {\n  const uniforms = {...prevUniforms} as PickingUniforms;\n\n  // picking\n  if (props.isActive !== undefined) {\n    uniforms.isActive = Boolean(props.isActive);\n  }\n\n  switch (props.indexMode) {\n    case 'instance':\n      uniforms.indexMode = 0;\n      break;\n    case 'custom':\n      uniforms.indexMode = 1;\n      break;\n    case undefined:\n      // no change\n      break;\n  }\n\n  switch (props.highlightedObjectIndex) {\n    case undefined:\n      // Unless highlightedObjectColor explicitly null or set, do not update state\n      break;\n    case null:\n      // Clear highlight\n      uniforms.isHighlightActive = false;\n      uniforms.highlightedObjectIndex = INVALID_INDEX;\n      break;\n    default:\n      uniforms.isHighlightActive = true;\n      uniforms.highlightedObjectIndex = props.highlightedObjectIndex;\n  }\n\n  if (typeof props.highlightedBatchIndex === 'number') {\n    uniforms.highlightedBatchIndex = props.highlightedBatchIndex;\n  }\n\n  if (props.highlightColor) {\n    uniforms.highlightColor = props.highlightColor;\n  }\n\n  return uniforms;\n}\n\n/**\n * Provides support for color-based picking and highlighting.\n *\n * In particular, supports picking a specific instance in an instanced\n * draw call and highlighting an instance based on its picking color,\n * and correspondingly, supports picking and highlighting groups of\n * primitives with the same picking color in non-instanced draw-calls\n *\n * @note Color based picking has the significant advantage in that it can be added to any\n * existing shader without requiring any additional picking logic.\n */\nexport const pickingUniforms = {\n  props: {} as PickingProps,\n  uniforms: {} as PickingUniforms,\n\n  name: 'picking',\n\n  uniformTypes,\n  defaultUniforms: {\n    isActive: false,\n    indexMode: 0,\n    batchIndex: 0,\n    isHighlightActive: true,\n    highlightedBatchIndex: INVALID_INDEX,\n    highlightedObjectIndex: INVALID_INDEX,\n    highlightColor: DEFAULT_HIGHLIGHT_COLOR\n  },\n\n  getUniforms\n} as const satisfies ShaderModule<PickingProps, PickingUniforms, PickingBindings>;\n"],"mappings":"AAAA;AACA;AACA;AAKA;AACA,MAAMA,uBAAuB,GAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAE1D,OAAO,MAAMC,aAAa,GAAG,CAAC,CAAC;AAoD/B;AAEA,MAAMC,YAAY,GAA0E;EAC1FC,QAAQ,EAAE,KAAK;EACfC,SAAS,EAAE,KAAK;EAChBC,UAAU,EAAE,KAAK;EAEjBC,iBAAiB,EAAE,KAAK;EACxBC,qBAAqB,EAAE,KAAK;EAC5BC,sBAAsB,EAAE,KAAK;EAC7BC,cAAc,EAAE;CACjB;AAED,OAAO,MAAMC,aAAa,GAAG,UAAW;;;;;;;;;;;;;;CAcvC;AAED,OAAO,MAAMC,aAAa,GAAG,UAAW;;;;;;;;;;;CAWvC;AAED,SAASC,WAAWA,CAACC,KAAA,GAAsB,EAAE,EAAEC,YAA8B;EAC3E,MAAMC,QAAQ,GAAG;IAAC,GAAGD;EAAY,CAAoB;EAErD;EACA,IAAID,KAAK,CAACV,QAAQ,KAAKa,SAAS,EAAE;IAChCD,QAAQ,CAACZ,QAAQ,GAAGc,OAAO,CAACJ,KAAK,CAACV,QAAQ,CAAC;EAC7C;EAEA,QAAQU,KAAK,CAACT,SAAS;IACrB,KAAK,UAAU;MACbW,QAAQ,CAACX,SAAS,GAAG,CAAC;MACtB;IACF,KAAK,QAAQ;MACXW,QAAQ,CAACX,SAAS,GAAG,CAAC;MACtB;IACF,KAAKY,SAAS;MACZ;MACA;EACJ;EAEA,QAAQH,KAAK,CAACL,sBAAsB;IAClC,KAAKQ,SAAS;MACZ;MACA;IACF,KAAK,IAAI;MACP;MACAD,QAAQ,CAACT,iBAAiB,GAAG,KAAK;MAClCS,QAAQ,CAACP,sBAAsB,GAAGP,aAAa;MAC/C;IACF;MACEc,QAAQ,CAACT,iBAAiB,GAAG,IAAI;MACjCS,QAAQ,CAACP,sBAAsB,GAAGK,KAAK,CAACL,sBAAsB;EAClE;EAEA,IAAI,OAAOK,KAAK,CAACN,qBAAqB,KAAK,QAAQ,EAAE;IACnDQ,QAAQ,CAACR,qBAAqB,GAAGM,KAAK,CAACN,qBAAqB;EAC9D;EAEA,IAAIM,KAAK,CAACJ,cAAc,EAAE;IACxBM,QAAQ,CAACN,cAAc,GAAGI,KAAK,CAACJ,cAAc;EAChD;EAEA,OAAOM,QAAQ;AACjB;AAEA;;;;;;;;;;;AAWA,OAAO,MAAMG,eAAe,GAAG;EAC7BL,KAAK,EAAE,EAAkB;EACzBE,QAAQ,EAAE,EAAqB;EAE/BI,IAAI,EAAE,SAAS;EAEfjB,YAAY;EACZkB,eAAe,EAAE;IACfjB,QAAQ,EAAE,KAAK;IACfC,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE,CAAC;IACbC,iBAAiB,EAAE,IAAI;IACvBC,qBAAqB,EAAEN,aAAa;IACpCO,sBAAsB,EAAEP,aAAa;IACrCQ,cAAc,EAAET;GACjB;EAEDY;CAC+E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}