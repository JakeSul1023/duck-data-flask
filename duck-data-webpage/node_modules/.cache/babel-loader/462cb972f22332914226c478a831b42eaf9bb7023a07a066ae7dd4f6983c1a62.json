{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Gets fragment shader source for a shader pass sub pass\n * @param options\n * @returns\n */\nexport function getFragmentShaderForRenderPass(options) {\n  const {\n    shaderPass,\n    action,\n    shadingLanguage\n  } = options;\n  switch (action) {\n    case 'filter':\n      const filterFunc = `${shaderPass.name}_filterColor_ext`;\n      return shadingLanguage === 'wgsl' ? getFilterShaderWGSL(filterFunc) : getFilterShaderGLSL(filterFunc);\n    case 'sample':\n      const samplerFunc = `${shaderPass.name}_sampleColor`;\n      return shadingLanguage === 'wgsl' ? getSamplerShaderWGSL(samplerFunc) : getSamplerShaderGLSL(samplerFunc);\n    default:\n      throw new Error(`${shaderPass.name} no fragment shader generated for shader pass`);\n  }\n}\n/** Get a filtering WGSL fragment shader */\nfunction getFilterShaderWGSL(func) {\n  return /* wgsl */`\\\n// Binding 0:1 is reserved for shader passes\n@group(0) @binding(0) var<uniform> brightnessContrast : brightnessContrastUniforms;\n@group(0) @binding(1) var texture: texture_2d<f32>;\n@group(0) @binding(2) var sampler: sampler;\n\nstruct FragmentInputs = {\n  @location(0) fragUV: vec2f,\n  @location(1) fragPosition: vec4f,\n  @location(2) fragCoordinate: vec4f\n};\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {\n  let texSize = textureDimensions(texture, 0);\n  var fragColor = textureSample(texture, sampler, fragUV);\n  fragColor = ${func}(gl_FragColor, texSize, texCoord);\n  return fragColor;\n}\n`;\n}\n/** Get a sampling WGSL fragment shader */\nfunction getSamplerShaderWGSL(func) {\n  return /* wgsl */`\\\n// Binding 0:1 is reserved for shader passes\n@group(0) @binding(0) var<uniform> brightnessContrast : brightnessContrastUniforms;\n@group(0) @binding(1) var texture: texture_2d<f32>;\n@group(0) @binding(2) var sampler: sampler;\n\nstruct FragmentInputs = {\n  @location(0) fragUV: vec2f,\n  @location(1) fragPosition: vec4f,\n  @location(2) fragCoordinate: vec4f\n};\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {\n  let texSize = textureDimensions(texture, 0);\n  var fragColor = textureSample(texture, sampler, fragUV);\n  fragColor = ${func}(gl_FragColor, texSize, texCoord);\n  return fragColor;\n}\n`;\n}\n/** Get a filtering GLSL fragment shader */\nfunction getFilterShaderGLSL(func) {\n  return /* glsl */`\\\n#version 300 es\n\nuniform sampler2D sourceTexture;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n  ivec2 iTexSize = textureSize(sourceTexture, 0);\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n\n  fragColor = texture(sourceTexture, texCoord);\n  fragColor = ${func}(fragColor, texSize, texCoord);\n}\n`;\n}\n/** Get a sampling GLSL fragment shader */\nfunction getSamplerShaderGLSL(func) {\n  return /* glsl */`\\\n#version 300 es\n\nuniform sampler2D sourceTexture;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n  ivec2 iTexSize = textureSize(sourceTexture, 0);\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n\n  fragColor = ${func}(sourceTexture, texSize, texCoord);\n}\n`;\n}\n//# sourceMappingURL=get-fragment-shader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}