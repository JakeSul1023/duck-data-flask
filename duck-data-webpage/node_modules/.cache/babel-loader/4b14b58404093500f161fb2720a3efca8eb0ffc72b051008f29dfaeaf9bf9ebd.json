{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTableLength } from \"./table-accessors.js\";\n/**\n * Returns an iterator that yields a single table as a sequence of batches.\n * @note Currently only a single batch is yielded.\n * @note All batches will have the same shape and schema as the original table.\n * @returns\n */\nexport function* makeBatchesFromTable(table) {\n  yield makeBatchFromTable(table);\n}\n/**\n * Returns a table packaged as a single table batch\n * @note The batch will have the same shape and schema as the original table.\n * @returns `null` if no batches are yielded by the async iterator\n */\nexport function makeBatchFromTable(table) {\n  return {\n    ...table,\n    length: getTableLength(table),\n    batchType: 'data'\n  };\n}\n/**\n * Assembles all batches from an async iterator into a single table.\n * @note All batches must have the same shape and schema\n * @param batchIterator\n * @returns `null` if no batches are yielded by the async iterator\n */\n// eslint-disable-next-line complexity\nexport async function makeTableFromBatches(batchIterator) {\n  let arrayRows;\n  let objectRows;\n  let features;\n  let shape = null;\n  let schema;\n  for await (const batch of batchIterator) {\n    shape = shape || batch.shape;\n    schema = schema || batch.schema;\n    switch (batch.shape) {\n      case 'array-row-table':\n        arrayRows = arrayRows || [];\n        for (let rowIndex = 0; rowIndex < getTableLength(batch); rowIndex++) {\n          const row = batch.data[rowIndex];\n          arrayRows.push(row);\n        }\n        break;\n      case 'object-row-table':\n        objectRows = objectRows || [];\n        for (let rowIndex = 0; rowIndex < getTableLength(batch); rowIndex++) {\n          const row = batch.data[rowIndex];\n          objectRows.push(row);\n        }\n        break;\n      case 'geojson-table':\n        features = features || [];\n        for (let rowIndex = 0; rowIndex < getTableLength(batch); rowIndex++) {\n          const row = batch.features[rowIndex];\n          features.push(row);\n        }\n        break;\n      case 'columnar-table':\n      case 'arrow-table':\n      default:\n        throw new Error('shape');\n    }\n  }\n  if (!shape) {\n    return null;\n  }\n  switch (shape) {\n    case 'array-row-table':\n      return {\n        shape: 'array-row-table',\n        data: arrayRows,\n        schema\n      };\n    case 'object-row-table':\n      return {\n        shape: 'object-row-table',\n        data: objectRows,\n        schema\n      };\n    case 'geojson-table':\n      return {\n        shape: 'geojson-table',\n        type: 'FeatureCollection',\n        features: features,\n        schema\n      };\n    default:\n      return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}