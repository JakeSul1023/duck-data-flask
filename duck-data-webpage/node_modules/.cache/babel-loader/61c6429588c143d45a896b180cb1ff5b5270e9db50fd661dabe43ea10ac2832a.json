{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport class Tile2DHeader {\n  constructor(index) {\n    this.index = index;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._loader = undefined;\n    this._abortController = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n  /** @deprecated use `boundingBox` instead */\n  get bbox() {\n    return this._bbox;\n  }\n  // TODO - remove in v9\n  set bbox(value) {\n    // Only set once from `Tileset2D.getTileMetadata`\n    if (this._bbox) return;\n    this._bbox = value;\n    if ('west' in value) {\n      this.boundingBox = [[value.west, value.south], [value.east, value.north]];\n    } else {\n      this.boundingBox = [[value.left, value.top], [value.right, value.bottom]];\n    }\n  }\n  get data() {\n    return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;\n  }\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      // eslint-disable-next-line no-console\n      console.error('byteLength not defined in tile data');\n    }\n    return result;\n  }\n  /* eslint-disable max-statements */\n  async _loadData({\n    getData,\n    requestScheduler,\n    onLoad,\n    onError\n  }) {\n    const {\n      index,\n      id,\n      bbox,\n      userData,\n      zoom\n    } = this;\n    const loaderId = this._loaderId;\n    this._abortController = new AbortController();\n    const {\n      signal\n    } = this._abortController;\n    // @ts-expect-error (2345) Argument of type '(tile: any) => 1 | -1' is not assignable ...\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n    let tileData = null;\n    let error;\n    try {\n      tileData = await getData({\n        index,\n        id,\n        bbox,\n        userData,\n        zoom,\n        signal\n      });\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n    this._isCancelled = true;\n    this._abortController?.abort();\n  }\n}","map":{"version":3,"names":["Tile2DHeader","constructor","index","isVisible","isSelected","parent","children","content","_loader","undefined","_abortController","_loaderId","_isLoaded","_isCancelled","_needsReload","bbox","_bbox","value","boundingBox","west","south","east","north","left","top","right","bottom","data","isLoading","then","isLoaded","Boolean","needsReload","byteLength","result","Number","isFinite","console","error","_loadData","getData","requestScheduler","onLoad","onError","id","userData","zoom","loaderId","AbortController","signal","requestToken","scheduleRequest","tile","done","tileData","err","loadData","opts","setNeedsReload","abort"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\tileset-2d\\tile-2d-header.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-env browser */\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {TileBoundingBox, TileIndex, TileLoadProps} from './types';\nimport type {Layer} from '@deck.gl/core';\n\nexport type TileLoadDataProps<DataT = any> = {\n  requestScheduler: RequestScheduler;\n  getData: (props: TileLoadProps) => Promise<DataT>;\n  onLoad: (tile: Tile2DHeader<DataT>) => void;\n  onError: (error: any, tile: Tile2DHeader<DataT>) => void;\n};\n\nexport class Tile2DHeader<DataT = any> {\n  index: TileIndex;\n  isVisible: boolean;\n  isSelected: boolean;\n  parent: Tile2DHeader | null;\n  children: Tile2DHeader[] | null;\n  content: DataT | null;\n  state?: number;\n  layers?: Layer[] | null;\n\n  id!: string; // assigned _always_ with result of `getTileId`\n  zoom!: number; // assigned _always_ with result of `getTileZoom`\n  userData?: Record<string, any>; // _may be_ assigned with result of `getTileMetadata`\n  boundingBox!: [min: number[], max: number[]]; // assigned _always_ with bbox from `getTileMetadata`\n\n  private _abortController: AbortController | null;\n  private _loader: Promise<void> | undefined;\n  private _loaderId: number;\n  private _isLoaded: boolean;\n  private _isCancelled: boolean;\n  private _needsReload: boolean;\n  private _bbox!: TileBoundingBox;\n\n  constructor(index: TileIndex) {\n    this.index = index;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loader = undefined;\n    this._abortController = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  /** @deprecated use `boundingBox` instead */\n  get bbox(): TileBoundingBox {\n    return this._bbox;\n  }\n\n  // TODO - remove in v9\n  set bbox(value: TileBoundingBox) {\n    // Only set once from `Tileset2D.getTileMetadata`\n    if (this._bbox) return;\n\n    this._bbox = value;\n    if ('west' in value) {\n      this.boundingBox = [\n        [value.west, value.south],\n        [value.east, value.north]\n      ];\n    } else {\n      this.boundingBox = [\n        [value.left, value.top],\n        [value.right, value.bottom]\n      ];\n    }\n  }\n\n  get data(): Promise<DataT | null> | DataT | null {\n    return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded(): boolean {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading(): boolean {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload(): boolean {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength(): number {\n    const result = this.content ? (this.content as any).byteLength : 0;\n    if (!Number.isFinite(result)) {\n      // eslint-disable-next-line no-console\n      console.error('byteLength not defined in tile data');\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  private async _loadData({\n    getData,\n    requestScheduler,\n    onLoad,\n    onError\n  }: TileLoadDataProps<DataT>): Promise<void> {\n    const {index, id, bbox, userData, zoom} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController();\n    const {signal} = this._abortController;\n\n    // @ts-expect-error (2345) Argument of type '(tile: any) => 1 | -1' is not assignable ...\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData: DataT | null = null;\n    let error;\n    try {\n      tileData = await getData({index, id, bbox, userData, zoom, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n\n  loadData(opts: TileLoadDataProps): Promise<void> {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload(): void {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort(): void {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController?.abort();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}