{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst UNIFORM_FORMATS = {\n  f32: {\n    type: 'f32',\n    components: 1\n  },\n  i32: {\n    type: 'i32',\n    components: 1\n  },\n  u32: {\n    type: 'u32',\n    components: 1\n  },\n  // 'bool-webgl': {type: 'bool-webgl', components: 1},\n  'vec2<f32>': {\n    type: 'f32',\n    components: 2\n  },\n  'vec3<f32>': {\n    type: 'f32',\n    components: 3\n  },\n  'vec4<f32>': {\n    type: 'f32',\n    components: 4\n  },\n  'vec2<i32>': {\n    type: 'i32',\n    components: 2\n  },\n  'vec3<i32>': {\n    type: 'i32',\n    components: 3\n  },\n  'vec4<i32>': {\n    type: 'i32',\n    components: 4\n  },\n  'vec2<u32>': {\n    type: 'u32',\n    components: 2\n  },\n  'vec3<u32>': {\n    type: 'u32',\n    components: 3\n  },\n  'vec4<u32>': {\n    type: 'u32',\n    components: 4\n  },\n  'mat2x2<f32>': {\n    type: 'f32',\n    components: 4\n  },\n  'mat2x3<f32>': {\n    type: 'f32',\n    components: 6\n  },\n  'mat2x4<f32>': {\n    type: 'f32',\n    components: 8\n  },\n  'mat3x2<f32>': {\n    type: 'f32',\n    components: 6\n  },\n  'mat3x3<f32>': {\n    type: 'f32',\n    components: 9\n  },\n  'mat3x4<f32>': {\n    type: 'f32',\n    components: 12\n  },\n  'mat4x2<f32>': {\n    type: 'f32',\n    components: 8\n  },\n  'mat4x3<f32>': {\n    type: 'f32',\n    components: 12\n  },\n  'mat4x4<f32>': {\n    type: 'f32',\n    components: 16\n  }\n};\n/** Split a uniform type string into type and components */\nexport function decodeShaderUniformType(format) {\n  const decoded = UNIFORM_FORMATS[format];\n  return decoded;\n}\n/** Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes) */\nexport function alignTo(size, count) {\n  // prettier-ignore\n  switch (count) {\n    case 1:\n      return size;\n    // Pad upwards to even multiple of 2\n    case 2:\n      return size + size % 2;\n    // Pad upwards to even multiple of 2\n    default:\n      return size + (4 - size % 4) % 4;\n    // Pad upwards to even multiple of 4\n  }\n}","map":{"version":3,"names":["UNIFORM_FORMATS","f32","type","components","i32","u32","decodeShaderUniformType","format","decoded","alignTo","size","count"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\gpu-type-utils\\decode-shader-types.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {ShaderUniformType, ShaderDataType} from './shader-types';\n\nconst UNIFORM_FORMATS: Record<ShaderUniformType, {type: ShaderDataType; components: number}> = {\n  f32: {type: 'f32', components: 1},\n  i32: {type: 'i32', components: 1},\n  u32: {type: 'u32', components: 1},\n  // 'bool-webgl': {type: 'bool-webgl', components: 1},\n  'vec2<f32>': {type: 'f32', components: 2},\n  'vec3<f32>': {type: 'f32', components: 3},\n  'vec4<f32>': {type: 'f32', components: 4},\n  'vec2<i32>': {type: 'i32', components: 2},\n  'vec3<i32>': {type: 'i32', components: 3},\n  'vec4<i32>': {type: 'i32', components: 4},\n  'vec2<u32>': {type: 'u32', components: 2},\n  'vec3<u32>': {type: 'u32', components: 3},\n  'vec4<u32>': {type: 'u32', components: 4},\n  'mat2x2<f32>': {type: 'f32', components: 4},\n  'mat2x3<f32>': {type: 'f32', components: 6},\n  'mat2x4<f32>': {type: 'f32', components: 8},\n  'mat3x2<f32>': {type: 'f32', components: 6},\n  'mat3x3<f32>': {type: 'f32', components: 9},\n  'mat3x4<f32>': {type: 'f32', components: 12},\n  'mat4x2<f32>': {type: 'f32', components: 8},\n  'mat4x3<f32>': {type: 'f32', components: 12},\n  'mat4x4<f32>': {type: 'f32', components: 16}\n};\n\n/** Split a uniform type string into type and components */\nexport function decodeShaderUniformType(format: ShaderUniformType): {\n  type: ShaderDataType;\n  components: number;\n} {\n  const decoded = UNIFORM_FORMATS[format];\n  return decoded;\n}\n\n/** Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes) */\nexport function alignTo(size: number, count: number): number {\n  // prettier-ignore\n  switch (count) {\n    case 1: return size; // Pad upwards to even multiple of 2\n    case 2: return size + (size % 2); // Pad upwards to even multiple of 2\n    default: return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,MAAMA,eAAe,GAA0E;EAC7FC,GAAG,EAAE;IAACC,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACjCC,GAAG,EAAE;IAACF,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACjCE,GAAG,EAAE;IAACH,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACjC;EACA,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAE,CAAC;EAC5C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAE,CAAC;EAC5C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAE;CAC5C;AAED;AACA,OAAM,SAAUG,uBAAuBA,CAACC,MAAyB;EAI/D,MAAMC,OAAO,GAAGR,eAAe,CAACO,MAAM,CAAC;EACvC,OAAOC,OAAO;AAChB;AAEA;AACA,OAAM,SAAUC,OAAOA,CAACC,IAAY,EAAEC,KAAa;EACjD;EACA,QAAQA,KAAK;IACX,KAAK,CAAC;MAAE,OAAOD,IAAI;IAAE;IACrB,KAAK,CAAC;MAAE,OAAOA,IAAI,GAAIA,IAAI,GAAG,CAAE;IAAE;IAClC;MAAS,OAAOA,IAAI,GAAI,CAAC,CAAC,GAAIA,IAAI,GAAG,CAAE,IAAI,CAAE;IAAE;EACjD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}