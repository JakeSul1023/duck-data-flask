{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { getS2BoundaryFlatFromS2Cell } from \"./s2-to-boundary.js\";\nimport { getS2Cell } from \"../s2geometry/s2-cell-utils.js\";\n/**\n * Converts S2 cell to the 2D region\n * @param s2cell {S2Cell} S2 cell to convert to 2D region\n * @returns 2D region as an object containing: west, north, east, south in degrees\n */\nexport function getS2Region(s2cell) {\n  let region;\n  if (s2cell.face === 2 || s2cell.face === 5) {\n    //    let corners: Float64Array;\n    let corners = null;\n    let len = 0;\n    for (let i = 0; i < 4; i++) {\n      const key = `${s2cell.face}/${i}`;\n      const cell = getS2Cell(key);\n      const corns = getS2BoundaryFlatFromS2Cell(cell);\n      if (typeof corners === 'undefined' || corners === null) corners = new Float64Array(4 * corns.length);\n      corners.set(corns, len);\n      len += corns.length;\n    }\n    region = get2DRegionFromS2Corners(corners);\n  } else {\n    const corners = getS2BoundaryFlatFromS2Cell(s2cell);\n    region = get2DRegionFromS2Corners(corners);\n  }\n  return region;\n}\n/**\n * Converts the S2 cell defined by its corners to the 2D region\n * @param corners {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n * @returns 2D region as an object containing: west, north, east, south in degrees\n */\nfunction get2DRegionFromS2Corners(corners) {\n  if (corners.length % 2 !== 0) {\n    throw new Error('Invalid corners');\n  }\n  const longitudes = [];\n  const latitudes = [];\n  for (let i = 0; i < corners.length; i += 2) {\n    longitudes.push(corners[i]);\n    latitudes.push(corners[i + 1]);\n  }\n  longitudes.sort((a, b) => a - b);\n  latitudes.sort((a, b) => a - b);\n  // Return the region in degrees\n  return {\n    west: longitudes[0],\n    east: longitudes[longitudes.length - 1],\n    north: latitudes[latitudes.length - 1],\n    south: latitudes[0]\n  };\n}","map":{"version":3,"names":["getS2BoundaryFlatFromS2Cell","getS2Cell","getS2Region","s2cell","region","face","corners","len","i","key","cell","corns","Float64Array","length","set","get2DRegionFromS2Corners","Error","longitudes","latitudes","push","sort","a","b","west","east","north","south"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/converters/s2-to-region.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { getS2BoundaryFlatFromS2Cell } from \"./s2-to-boundary.js\";\nimport { getS2Cell } from \"../s2geometry/s2-cell-utils.js\";\n/**\n * Converts S2 cell to the 2D region\n * @param s2cell {S2Cell} S2 cell to convert to 2D region\n * @returns 2D region as an object containing: west, north, east, south in degrees\n */\nexport function getS2Region(s2cell) {\n    let region;\n    if (s2cell.face === 2 || s2cell.face === 5) {\n        //    let corners: Float64Array;\n        let corners = null;\n        let len = 0;\n        for (let i = 0; i < 4; i++) {\n            const key = `${s2cell.face}/${i}`;\n            const cell = getS2Cell(key);\n            const corns = getS2BoundaryFlatFromS2Cell(cell);\n            if (typeof corners === 'undefined' || corners === null)\n                corners = new Float64Array(4 * corns.length);\n            corners.set(corns, len);\n            len += corns.length;\n        }\n        region = get2DRegionFromS2Corners(corners);\n    }\n    else {\n        const corners = getS2BoundaryFlatFromS2Cell(s2cell);\n        region = get2DRegionFromS2Corners(corners);\n    }\n    return region;\n}\n/**\n * Converts the S2 cell defined by its corners to the 2D region\n * @param corners {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n * @returns 2D region as an object containing: west, north, east, south in degrees\n */\nfunction get2DRegionFromS2Corners(corners) {\n    if (corners.length % 2 !== 0) {\n        throw new Error('Invalid corners');\n    }\n    const longitudes = [];\n    const latitudes = [];\n    for (let i = 0; i < corners.length; i += 2) {\n        longitudes.push(corners[i]);\n        latitudes.push(corners[i + 1]);\n    }\n    longitudes.sort((a, b) => a - b);\n    latitudes.sort((a, b) => a - b);\n    // Return the region in degrees\n    return {\n        west: longitudes[0],\n        east: longitudes[longitudes.length - 1],\n        north: latitudes[latitudes.length - 1],\n        south: latitudes[0]\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,2BAA2B,QAAQ,qBAAqB;AACjE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAChC,IAAIC,MAAM;EACV,IAAID,MAAM,CAACE,IAAI,KAAK,CAAC,IAAIF,MAAM,CAACE,IAAI,KAAK,CAAC,EAAE;IACxC;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIC,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,MAAMC,GAAG,GAAG,GAAGN,MAAM,CAACE,IAAI,IAAIG,CAAC,EAAE;MACjC,MAAME,IAAI,GAAGT,SAAS,CAACQ,GAAG,CAAC;MAC3B,MAAME,KAAK,GAAGX,2BAA2B,CAACU,IAAI,CAAC;MAC/C,IAAI,OAAOJ,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,IAAI,EAClDA,OAAO,GAAG,IAAIM,YAAY,CAAC,CAAC,GAAGD,KAAK,CAACE,MAAM,CAAC;MAChDP,OAAO,CAACQ,GAAG,CAACH,KAAK,EAAEJ,GAAG,CAAC;MACvBA,GAAG,IAAII,KAAK,CAACE,MAAM;IACvB;IACAT,MAAM,GAAGW,wBAAwB,CAACT,OAAO,CAAC;EAC9C,CAAC,MACI;IACD,MAAMA,OAAO,GAAGN,2BAA2B,CAACG,MAAM,CAAC;IACnDC,MAAM,GAAGW,wBAAwB,CAACT,OAAO,CAAC;EAC9C;EACA,OAAOF,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,wBAAwBA,CAACT,OAAO,EAAE;EACvC,IAAIA,OAAO,CAACO,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;EACtC;EACA,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,SAAS,GAAG,EAAE;EACpB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACO,MAAM,EAAEL,CAAC,IAAI,CAAC,EAAE;IACxCS,UAAU,CAACE,IAAI,CAACb,OAAO,CAACE,CAAC,CAAC,CAAC;IAC3BU,SAAS,CAACC,IAAI,CAACb,OAAO,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;EAClC;EACAS,UAAU,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAChCJ,SAAS,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAC/B;EACA,OAAO;IACHC,IAAI,EAAEN,UAAU,CAAC,CAAC,CAAC;IACnBO,IAAI,EAAEP,UAAU,CAACA,UAAU,CAACJ,MAAM,GAAG,CAAC,CAAC;IACvCY,KAAK,EAAEP,SAAS,CAACA,SAAS,CAACL,MAAM,GAAG,CAAC,CAAC;IACtCa,KAAK,EAAER,SAAS,CAAC,CAAC;EACtB,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}