{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { StreamingXMLParser } from \"./streaming-xml-parser.js\";\nimport { uncapitalizeKeys } from \"../xml-utils/uncapitalize.js\";\nimport { XMLParser as FastXMLParser } from 'fast-xml-parser';\nexport function parseXMLSync(text, options) {\n  if (options?._parser && options._parser !== 'fast-xml-parser') {\n    throw new Error(options?._parser);\n  }\n  const fastXMLOptions = {\n    // Default FastXML options\n    // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#allowbooleanattributes\n    allowBooleanAttributes: true,\n    // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#ignoredeclaration\n    ignoreDeclaration: true,\n    // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#removensprefix\n    removeNSPrefix: options?.removeNSPrefix,\n    // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#textnodename\n    textNodeName: options?.textNodeName,\n    // Let's application specify keys that are always arrays\n    isArray: (name, jpath, isLeafNode, isAttribute) => {\n      const array = Boolean(options?.arrayPaths?.some(path => jpath === path));\n      return array;\n    },\n    // Application overrides\n    ...options?._fastXML\n  };\n  const xml = fastParseXML(text, fastXMLOptions);\n  // Note - could be done with FastXML tag processing\n  return options?.uncapitalizeKeys ? uncapitalizeKeys(xml) : xml;\n}\nexport function fastParseXML(text, options) {\n  const parser = new FastXMLParser({\n    ignoreAttributes: false,\n    attributeNamePrefix: '',\n    ...options\n  });\n  const parsedXML = parser.parse(text);\n  return parsedXML;\n}\n/**\n * @todo Build a streaming XML parser based on sax-js\n * @param text\n * @param options\n * @returns\n */\nexport function parseXMLInBatches(text, options = {}) {\n  const parser = new StreamingXMLParser({\n    ...options,\n    strict: true\n  });\n  parser.write(text);\n  parser.close();\n  return parser.result;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}