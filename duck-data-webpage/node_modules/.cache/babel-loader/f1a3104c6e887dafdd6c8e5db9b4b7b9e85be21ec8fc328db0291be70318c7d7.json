{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { registerJSModules, getJSModuleOrNull } from '@loaders.gl/loader-utils';\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nexport const BASIS_EXTERNAL_LIBRARIES = {\n  /** Basis transcoder, javascript wrapper part */\n  TRANSCODER: 'basis_transcoder.js',\n  /** Basis transcoder, compiled web assembly part */\n  TRANSCODER_WASM: 'basis_transcoder.wasm',\n  /** Basis encoder, javascript wrapper part */\n  ENCODER: 'basis_encoder.js',\n  /** Basis encoder, compiled web assembly part */\n  ENCODER_WASM: 'basis_encoder.wasm'\n};\nlet loadBasisTranscoderPromise;\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nexport async function loadBasisTranscoderModule(options) {\n  registerJSModules(options.modules);\n  const basis = getJSModuleOrNull('basis');\n  if (basis) {\n    return basis;\n  }\n  loadBasisTranscoderPromise ||= loadBasisTranscoder(options);\n  return await loadBasisTranscoderPromise;\n}\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nasync function loadBasisTranscoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n  [BASIS, wasmBinary] = await Promise.all([await loadLibrary(BASIS_EXTERNAL_LIBRARIES.TRANSCODER, 'textures', options), await loadLibrary(BASIS_EXTERNAL_LIBRARIES.TRANSCODER_WASM, 'textures', options)]);\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTranscoderModule(BASIS, wasmBinary);\n}\n/**\n * Initialize wasm transcoder module\n * @param BasisModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile} promise\n */\nfunction initializeBasisTranscoderModule(BasisModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then(module => {\n      const {\n        BasisFile,\n        initializeBasis\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile\n      });\n    });\n  });\n}\nlet loadBasisEncoderPromise;\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([await loadLibrary(BASIS_EXTERNAL_LIBRARIES.ENCODER, 'textures', options), await loadLibrary(BASIS_EXTERNAL_LIBRARIES.ENCODER_WASM, 'textures', options)]);\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n/**\n * Initialize wasm transcoder module\n * @param BasisEncoderModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile, KTX2File} promise\n */\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    // if you try to return BasisModule the browser crashes!\n    BasisEncoderModule(options).then(module => {\n      const {\n        BasisFile,\n        KTX2File,\n        initializeBasis,\n        BasisEncoder\n      } = module;\n      initializeBasis();\n      resolve({\n        BasisFile,\n        KTX2File,\n        BasisEncoder\n      });\n    });\n  });\n}","map":{"version":3,"names":["registerJSModules","getJSModuleOrNull","loadLibrary","BASIS_EXTERNAL_LIBRARIES","TRANSCODER","TRANSCODER_WASM","ENCODER","ENCODER_WASM","loadBasisTranscoderPromise","loadBasisTranscoderModule","options","modules","basis","loadBasisTranscoder","BASIS","wasmBinary","Promise","all","globalThis","initializeBasisTranscoderModule","BasisModule","resolve","then","module","BasisFile","initializeBasis","loadBasisEncoderPromise","loadBasisEncoderModule","basisEncoder","loadBasisEncoder","BASIS_ENCODER","initializeBasisEncoderModule","BasisEncoderModule","KTX2File","BasisEncoder"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/textures/dist/lib/parsers/basis-module-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { registerJSModules, getJSModuleOrNull } from '@loaders.gl/loader-utils';\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nexport const BASIS_EXTERNAL_LIBRARIES = {\n    /** Basis transcoder, javascript wrapper part */\n    TRANSCODER: 'basis_transcoder.js',\n    /** Basis transcoder, compiled web assembly part */\n    TRANSCODER_WASM: 'basis_transcoder.wasm',\n    /** Basis encoder, javascript wrapper part */\n    ENCODER: 'basis_encoder.js',\n    /** Basis encoder, compiled web assembly part */\n    ENCODER_WASM: 'basis_encoder.wasm'\n};\nlet loadBasisTranscoderPromise;\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nexport async function loadBasisTranscoderModule(options) {\n    registerJSModules(options.modules);\n    const basis = getJSModuleOrNull('basis');\n    if (basis) {\n        return basis;\n    }\n    loadBasisTranscoderPromise ||= loadBasisTranscoder(options);\n    return await loadBasisTranscoderPromise;\n}\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nasync function loadBasisTranscoder(options) {\n    let BASIS = null;\n    let wasmBinary = null;\n    [BASIS, wasmBinary] = await Promise.all([\n        await loadLibrary(BASIS_EXTERNAL_LIBRARIES.TRANSCODER, 'textures', options),\n        await loadLibrary(BASIS_EXTERNAL_LIBRARIES.TRANSCODER_WASM, 'textures', options)\n    ]);\n    // Depends on how import happened...\n    // @ts-ignore TS2339: Property does not exist on type\n    BASIS = BASIS || globalThis.BASIS;\n    return await initializeBasisTranscoderModule(BASIS, wasmBinary);\n}\n/**\n * Initialize wasm transcoder module\n * @param BasisModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile} promise\n */\nfunction initializeBasisTranscoderModule(BasisModule, wasmBinary) {\n    const options = {};\n    if (wasmBinary) {\n        options.wasmBinary = wasmBinary;\n    }\n    return new Promise((resolve) => {\n        // if you try to return BasisModule the browser crashes!\n        BasisModule(options).then((module) => {\n            const { BasisFile, initializeBasis } = module;\n            initializeBasis();\n            resolve({ BasisFile });\n        });\n    });\n}\nlet loadBasisEncoderPromise;\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nexport async function loadBasisEncoderModule(options) {\n    const modules = options.modules || {};\n    if (modules.basisEncoder) {\n        return modules.basisEncoder;\n    }\n    loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n    return await loadBasisEncoderPromise;\n}\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nasync function loadBasisEncoder(options) {\n    let BASIS_ENCODER = null;\n    let wasmBinary = null;\n    [BASIS_ENCODER, wasmBinary] = await Promise.all([\n        await loadLibrary(BASIS_EXTERNAL_LIBRARIES.ENCODER, 'textures', options),\n        await loadLibrary(BASIS_EXTERNAL_LIBRARIES.ENCODER_WASM, 'textures', options)\n    ]);\n    // Depends on how import happened...\n    // @ts-ignore TS2339: Property does not exist on type\n    BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n    return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n/**\n * Initialize wasm transcoder module\n * @param BasisEncoderModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile, KTX2File} promise\n */\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n    const options = {};\n    if (wasmBinary) {\n        options.wasmBinary = wasmBinary;\n    }\n    return new Promise((resolve) => {\n        // if you try to return BasisModule the browser crashes!\n        BasisEncoderModule(options).then((module) => {\n            const { BasisFile, KTX2File, initializeBasis, BasisEncoder } = module;\n            initializeBasis();\n            resolve({ BasisFile, KTX2File, BasisEncoder });\n        });\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}