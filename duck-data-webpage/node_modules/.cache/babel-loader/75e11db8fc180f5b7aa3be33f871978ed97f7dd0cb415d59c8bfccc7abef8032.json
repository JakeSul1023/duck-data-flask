{"ast":null,"code":"const DEGREES_TO_RADIANS = Math.PI / 180;\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n// This angle ε [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397°\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0° at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n/**\n * Calculate sun position\n * based on https://www.aa.quae.nl/en/reken/zonpositie.html\n * inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\n */\nexport function getSunPosition(timestamp, latitude, longitude) {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n  const c = getSunCoords(d);\n  // hour angle\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\nexport function getSunDirection(timestamp, latitude, longitude) {\n  const {\n    azimuth,\n    altitude\n  } = getSunPosition(timestamp, latitude, longitude);\n  // solar position to light direction\n  return [Math.sin(azimuth) * Math.cos(altitude), Math.cos(azimuth) * Math.cos(altitude), -Math.sin(altitude)];\n}\nfunction toJulianDay(timestamp) {\n  const ts = typeof timestamp === 'number' ? timestamp : timestamp.getTime();\n  return ts / DAY_IN_MS - 0.5 + JD1970;\n}\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\nfunction getRightAscension(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\nfunction getDeclination(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\nfunction getEclipticLongitude(meanAnomaly) {\n  const M = meanAnomaly;\n  // equation of center\n  const C = DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  // perihelion of the Earth\n  const P = DEGREES_TO_RADIANS * 102.9372;\n  return M + C + P + Math.PI;\n}\nfunction getSunCoords(dates) {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}","map":{"version":3,"names":["DEGREES_TO_RADIANS","Math","PI","DAY_IN_MS","JD1970","JD2000","e","M0","M1","THETA0","THETA1","getSunPosition","timestamp","latitude","longitude","longitudeWestInRadians","phi","d","toDays","c","getSunCoords","H","getSiderealTime","rightAscension","azimuth","getAzimuth","declination","altitude","getAltitude","getSunDirection","sin","cos","toJulianDay","ts","getTime","getRightAscension","eclipticLongitude","b","lambda","atan2","tan","getDeclination","asin","hourAngle","latitudeInRadians","delta","dates","getSolarMeanAnomaly","days","getEclipticLongitude","meanAnomaly","M","C","P","L"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\sun\\src\\suncalc.ts"],"sourcesContent":["const DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n\n// This angle ε [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397°\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\n\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0° at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n\n/**\n * A position in the sky defined by two angles\n * The altitude is 0° at the horizon, +90° in the zenith (straight over your head), and −90° in the nadir (straight down).\n * The azimuth is the direction along the horizon, which we measure from south to west.\n * South has azimuth 0°, west +90°, north +180°, and east +270° (or −90°, that's the same thing).\n */\nexport type CelestialPosition = {\n  azimuth: number;\n  altitude: number;\n};\n\n/**\n * Calculate sun position\n * based on https://www.aa.quae.nl/en/reken/zonpositie.html\n * inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\n */\nexport function getSunPosition(\n  timestamp: number | Date,\n  latitude: number,\n  longitude: number\n): CelestialPosition {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n\n  const c = getSunCoords(d);\n  // hour angle\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\n\nexport function getSunDirection(\n  timestamp: number | Date,\n  latitude: number,\n  longitude: number\n): number[] {\n  const {azimuth, altitude} = getSunPosition(timestamp, latitude, longitude);\n\n  // solar position to light direction\n  return [\n    Math.sin(azimuth) * Math.cos(altitude),\n    Math.cos(azimuth) * Math.cos(altitude),\n    -Math.sin(altitude)\n  ];\n}\n\nfunction toJulianDay(timestamp: number | Date): number {\n  const ts = typeof timestamp === 'number' ? timestamp : timestamp.getTime();\n  return ts / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp: number | Date): number {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude: number, b: number): number {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude: number, b: number): number {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle: number, latitudeInRadians: number, declination: number): number {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle: number, latitudeInRadians: number, declination: number): number {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates: number, longitudeWestInRadians: number): number {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days: number): number {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly: number): number {\n  const M = meanAnomaly;\n  // equation of center\n  const C =\n    DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  // perihelion of the Earth\n  const P = DEGREES_TO_RADIANS * 102.9372;\n\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates: number): {\n  declination: number;\n  rightAscension: number;\n} {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;AAExC,MAAMC,SAAS,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACrC,MAAMC,MAAM,GAAG,OAAO,CAAC,CAAC;AACxB,MAAMC,MAAM,GAAG,OAAO,CAAC,CAAC;AAExB;AACA,MAAMC,CAAC,GAAGN,kBAAkB,GAAG,OAAO,CAAC,CAAC;AAExC;AACA;AACA,MAAMO,EAAE,GAAG,QAAQ,CAAC,CAAC;AACrB,MAAMC,EAAE,GAAG,UAAU,CAAC,CAAC;AAEvB,MAAMC,MAAM,GAAG,OAAO,CAAC,CAAC;AACxB,MAAMC,MAAM,GAAG,WAAW,CAAC,CAAC;AAa5B;;;;;AAKA,OAAM,SAAUC,cAAcA,CAC5BC,SAAwB,EACxBC,QAAgB,EAChBC,SAAiB;EAEjB,MAAMC,sBAAsB,GAAGf,kBAAkB,GAAG,CAACc,SAAS;EAC9D,MAAME,GAAG,GAAGhB,kBAAkB,GAAGa,QAAQ;EACzC,MAAMI,CAAC,GAAGC,MAAM,CAACN,SAAS,CAAC;EAE3B,MAAMO,CAAC,GAAGC,YAAY,CAACH,CAAC,CAAC;EACzB;EACA,MAAMI,CAAC,GAAGC,eAAe,CAACL,CAAC,EAAEF,sBAAsB,CAAC,GAAGI,CAAC,CAACI,cAAc;EAEvE,OAAO;IACLC,OAAO,EAAEC,UAAU,CAACJ,CAAC,EAAEL,GAAG,EAAEG,CAAC,CAACO,WAAW,CAAC;IAC1CC,QAAQ,EAAEC,WAAW,CAACP,CAAC,EAAEL,GAAG,EAAEG,CAAC,CAACO,WAAW;GAC5C;AACH;AAEA,OAAM,SAAUG,eAAeA,CAC7BjB,SAAwB,EACxBC,QAAgB,EAChBC,SAAiB;EAEjB,MAAM;IAACU,OAAO;IAAEG;EAAQ,CAAC,GAAGhB,cAAc,CAACC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,CAAC;EAE1E;EACA,OAAO,CACLb,IAAI,CAAC6B,GAAG,CAACN,OAAO,CAAC,GAAGvB,IAAI,CAAC8B,GAAG,CAACJ,QAAQ,CAAC,EACtC1B,IAAI,CAAC8B,GAAG,CAACP,OAAO,CAAC,GAAGvB,IAAI,CAAC8B,GAAG,CAACJ,QAAQ,CAAC,EACtC,CAAC1B,IAAI,CAAC6B,GAAG,CAACH,QAAQ,CAAC,CACpB;AACH;AAEA,SAASK,WAAWA,CAACpB,SAAwB;EAC3C,MAAMqB,EAAE,GAAG,OAAOrB,SAAS,KAAK,QAAQ,GAAGA,SAAS,GAAGA,SAAS,CAACsB,OAAO,EAAE;EAC1E,OAAOD,EAAE,GAAG9B,SAAS,GAAG,GAAG,GAAGC,MAAM;AACtC;AAEA,SAASc,MAAMA,CAACN,SAAwB;EACtC,OAAOoB,WAAW,CAACpB,SAAS,CAAC,GAAGP,MAAM;AACxC;AAEA,SAAS8B,iBAAiBA,CAACC,iBAAyB,EAAEC,CAAS;EAC7D,MAAMC,MAAM,GAAGF,iBAAiB;EAChC,OAAOnC,IAAI,CAACsC,KAAK,CAACtC,IAAI,CAAC6B,GAAG,CAACQ,MAAM,CAAC,GAAGrC,IAAI,CAAC8B,GAAG,CAACzB,CAAC,CAAC,GAAGL,IAAI,CAACuC,GAAG,CAACH,CAAC,CAAC,GAAGpC,IAAI,CAAC6B,GAAG,CAACxB,CAAC,CAAC,EAAEL,IAAI,CAAC8B,GAAG,CAACO,MAAM,CAAC,CAAC;AACjG;AAEA,SAASG,cAAcA,CAACL,iBAAyB,EAAEC,CAAS;EAC1D,MAAMC,MAAM,GAAGF,iBAAiB;EAChC,OAAOnC,IAAI,CAACyC,IAAI,CAACzC,IAAI,CAAC6B,GAAG,CAACO,CAAC,CAAC,GAAGpC,IAAI,CAAC8B,GAAG,CAACzB,CAAC,CAAC,GAAGL,IAAI,CAAC8B,GAAG,CAACM,CAAC,CAAC,GAAGpC,IAAI,CAAC6B,GAAG,CAACxB,CAAC,CAAC,GAAGL,IAAI,CAAC6B,GAAG,CAACQ,MAAM,CAAC,CAAC;AAC5F;AAEA,SAASb,UAAUA,CAACkB,SAAiB,EAAEC,iBAAyB,EAAElB,WAAmB;EACnF,MAAML,CAAC,GAAGsB,SAAS;EACnB,MAAM3B,GAAG,GAAG4B,iBAAiB;EAC7B,MAAMC,KAAK,GAAGnB,WAAW;EACzB,OAAOzB,IAAI,CAACsC,KAAK,CAACtC,IAAI,CAAC6B,GAAG,CAACT,CAAC,CAAC,EAAEpB,IAAI,CAAC8B,GAAG,CAACV,CAAC,CAAC,GAAGpB,IAAI,CAAC6B,GAAG,CAACd,GAAG,CAAC,GAAGf,IAAI,CAACuC,GAAG,CAACK,KAAK,CAAC,GAAG5C,IAAI,CAAC8B,GAAG,CAACf,GAAG,CAAC,CAAC;AAC/F;AAEA,SAASY,WAAWA,CAACe,SAAiB,EAAEC,iBAAyB,EAAElB,WAAmB;EACpF,MAAML,CAAC,GAAGsB,SAAS;EACnB,MAAM3B,GAAG,GAAG4B,iBAAiB;EAC7B,MAAMC,KAAK,GAAGnB,WAAW;EACzB,OAAOzB,IAAI,CAACyC,IAAI,CAACzC,IAAI,CAAC6B,GAAG,CAACd,GAAG,CAAC,GAAGf,IAAI,CAAC6B,GAAG,CAACe,KAAK,CAAC,GAAG5C,IAAI,CAAC8B,GAAG,CAACf,GAAG,CAAC,GAAGf,IAAI,CAAC8B,GAAG,CAACc,KAAK,CAAC,GAAG5C,IAAI,CAAC8B,GAAG,CAACV,CAAC,CAAC,CAAC;AACnG;AAEA;AACA;AACA,SAASC,eAAeA,CAACwB,KAAa,EAAE/B,sBAA8B;EACpE,OAAOf,kBAAkB,IAAIS,MAAM,GAAGC,MAAM,GAAGoC,KAAK,CAAC,GAAG/B,sBAAsB;AAChF;AAEA,SAASgC,mBAAmBA,CAACC,IAAY;EACvC,OAAOhD,kBAAkB,IAAIO,EAAE,GAAGC,EAAE,GAAGwC,IAAI,CAAC;AAC9C;AAEA,SAASC,oBAAoBA,CAACC,WAAmB;EAC/C,MAAMC,CAAC,GAAGD,WAAW;EACrB;EACA,MAAME,CAAC,GACLpD,kBAAkB,IAAI,MAAM,GAAGC,IAAI,CAAC6B,GAAG,CAACqB,CAAC,CAAC,GAAG,IAAI,GAAGlD,IAAI,CAAC6B,GAAG,CAAC,CAAC,GAAGqB,CAAC,CAAC,GAAG,MAAM,GAAGlD,IAAI,CAAC6B,GAAG,CAAC,CAAC,GAAGqB,CAAC,CAAC,CAAC;EACjG;EACA,MAAME,CAAC,GAAGrD,kBAAkB,GAAG,QAAQ;EAEvC,OAAOmD,CAAC,GAAGC,CAAC,GAAGC,CAAC,GAAGpD,IAAI,CAACC,EAAE;AAC5B;AAEA,SAASkB,YAAYA,CAAC0B,KAAa;EAIjC,MAAMK,CAAC,GAAGJ,mBAAmB,CAACD,KAAK,CAAC;EACpC,MAAMQ,CAAC,GAAGL,oBAAoB,CAACE,CAAC,CAAC;EAEjC,OAAO;IACLzB,WAAW,EAAEe,cAAc,CAACa,CAAC,EAAE,CAAC,CAAC;IACjC/B,cAAc,EAAEY,iBAAiB,CAACmB,CAAC,EAAE,CAAC;GACvC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}