{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { MathArray } from \"./math-array.js\";\nimport { checkNumber } from \"../../lib/validators.js\";\nimport { assert } from \"../../lib/assert.js\";\n/** Base class for vectors with at least 2 elements */\nexport class Vector extends MathArray {\n  // ACCESSORS\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   *\n   * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements\n   * Instead we provide `len` and `magnitude`\n   */\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   */\n  magnitude() {\n    return this.len();\n  }\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n  // MODIFIERS\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n  addScaledVector(a, b) {\n    // @ts-expect-error error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}","map":{"version":3,"names":["MathArray","checkNumber","assert","Vector","x","value","y","len","Math","sqrt","lengthSquared","magnitude","length","i","ELEMENTS","magnitudeSquared","distance","mathArray","distanceSquared","dist","dot","product","normalize","check","multiply","vectors","vector","divide","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","a","b","copy","add","subVectors","subtract","multiplyVectors","addScaledVector","constructor","multiplyScalar"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\classes\\base\\vector.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {NumericArray} from '@math.gl/types';\nimport {MathArray} from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {assert} from '../../lib/assert';\n\n/** Base class for vectors with at least 2 elements */\nexport abstract class Vector extends MathArray {\n  // ACCESSORS\n\n  get x(): number {\n    return this[0];\n  }\n\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   *\n   * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements\n   * Instead we provide `len` and `magnitude`\n   */\n  len(): number {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   */\n  magnitude(): number {\n    return this.len();\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  lengthSquared(): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  magnitudeSquared(): number {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray: Readonly<NumericArray>): number {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray: Readonly<NumericArray>): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray: Readonly<NumericArray>): number {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize(): this {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  multiply(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n  distanceTo(vector: Readonly<NumericArray>): number {\n    return this.distance(vector);\n  }\n  distanceToSquared(vector: Readonly<NumericArray>): number {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i: number): number {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i: number, value: number): this {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a: Readonly<NumericArray>, b: number): this {\n    // @ts-expect-error error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add((new this.constructor(a) as this).multiplyScalar(b));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}