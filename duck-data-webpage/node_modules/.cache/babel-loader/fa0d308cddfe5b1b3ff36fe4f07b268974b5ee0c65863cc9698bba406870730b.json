{"ast":null,"code":"// @eslint-disable\n// @ts-nocheck\nimport * as glMatrix from './common.js';\nimport * as mat3 from './mat3.js';\nimport * as vec3 from './vec3.js';\nimport * as vec4 from './vec4.js';\n// const glMatrix: {EPSILON = 0.000001};\n/**\n * Quaternion in the format XYZW\n * @module quat\n */\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  const s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  const rad = Math.acos(q[3]) * 2.0;\n  const s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\nexport function getAngle(a, b) {\n  const dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = Math.sin(rad);\n  const bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const by = Math.sin(rad);\n  const bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bz = Math.sin(rad);\n  const bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function exp(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const et = Math.exp(w);\n  const s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function ln(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n  let cosom;\n  let omega;\n  let scale0;\n  let scale1;\n  let sinom;\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n// export function random(out) {\n//   // Implementation of http://planning.cs.uiuc.edu/node198.html\n//   // TODO: Calling random 3 times is probably not the fastest solution\n//   let u1 = glMatrix.RANDOM();\n//   let u2 = glMatrix.RANDOM();\n//   let u3 = glMatrix.RANDOM();\n//   let sqrt1MinusU1 = Math.sqrt(1 - u1);\n//   let sqrtU1 = Math.sqrt(u1);\n//   out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n//   out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n//   out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n//   out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n//   return out;\n// }\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1.0 / dot : 0;\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x Angle to rotate around X axis in degrees.\n * @param {Number} y Angle to rotate around Y axis in degrees.\n * @param {Number} z Angle to rotate around Z axis in degrees.\n * @param {'zyx'|'xyz'|'yxz'|'yzx'|'zxy'|'zyx'} order Intrinsic order for conversion, default is zyx.\n * @returns {quat} out\n * @function\n */\n// export function fromEuler(out, x, y, z, order = glMatrix.ANGLE_ORDER) {\n//   let halfToRad = Math.PI / 360;\n//   x *= halfToRad;\n//   z *= halfToRad;\n//   y *= halfToRad;\n//   let sx = Math.sin(x);\n//   let cx = Math.cos(x);\n//   let sy = Math.sin(y);\n//   let cy = Math.cos(y);\n//   let sz = Math.sin(z);\n//   let cz = Math.cos(z);\n//   switch (order) {\n//     case \"xyz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n//     case \"xzy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n//     case \"yxz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n//     case \"yzx\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n//     case \"zxy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n//     case \"zyx\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n//     default:\n//       throw new Error('Unknown angle order ' + order);\n//   }\n//   return out;\n// }\n/**\n * Returns a string representation of a quaternion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `quat(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions point approximately to the same direction.\n *\n * Both quaternions are assumed to be unit length.\n *\n * @param {ReadonlyQuat} a The first unit quaternion.\n * @param {ReadonlyQuat} b The second unit quaternion.\n * @returns {Boolean} True if the quaternions are equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(vec4.dot(a, b)) >= 1 - glMatrix.EPSILON;\n}\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = function () {\n  const tmpvec3 = vec3.create();\n  const xUnitVec3 = vec3.fromValues(1, 0, 0);\n  const yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    const dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    }\n    vec3.cross(tmpvec3, a, b);\n    out[0] = tmpvec3[0];\n    out[1] = tmpvec3[1];\n    out[2] = tmpvec3[2];\n    out[3] = 1 + dot;\n    return normalize(out, out);\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = function () {\n  const temp1 = create();\n  const temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = function () {\n  const matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","map":{"version":3,"names":["glMatrix","mat3","vec3","vec4","create","out","ARRAY_TYPE","Float32Array","identity","setAxisAngle","axis","rad","s","Math","sin","cos","getAxisAngle","out_axis","q","acos","EPSILON","getAngle","a","b","dotproduct","dot","multiply","ax","ay","az","aw","bx","by","bz","bw","rotateX","rotateY","rotateZ","calculateW","x","y","z","sqrt","abs","exp","w","r","et","ln","t","atan2","log","pow","scale","slerp","cosom","omega","scale0","scale1","sinom","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","m","fTrace","fRoot","i","j","k","str","clone","fromValues","copy","set","add","mul","lerp","length","len","squaredLength","sqrLen","normalize","exactEquals","equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","cross","PI","sqlerp","temp1","temp2","c","d","setAxes","matr","view","right","up"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\gl-matrix\\quat.ts"],"sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\nimport * as mat3 from './mat3.js';\nimport * as vec3 from './vec3.js';\nimport * as vec4 from './vec4.js';\n\n// const glMatrix: {EPSILON = 0.000001};\n\n/**\n * Quaternion in the format XYZW\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  const s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  const rad = Math.acos(q[3]) * 2.0;\n  const s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\nexport function getAngle(a, b) {\n  const dotproduct = dot(a, b);\n\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const by = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bz = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function exp(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const et = Math.exp(w);\n  const s = r > 0 ? (et * Math.sin(r)) / r : 0;\n\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n\n  return out;\n}\n\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function ln(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const t = r > 0 ? Math.atan2(r, w) / r : 0;\n\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n\n  return out;\n}\n\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosom;\n  let omega;\n  let scale0;\n  let scale1;\n  let sinom;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n// export function random(out) {\n//   // Implementation of http://planning.cs.uiuc.edu/node198.html\n//   // TODO: Calling random 3 times is probably not the fastest solution\n//   let u1 = glMatrix.RANDOM();\n//   let u2 = glMatrix.RANDOM();\n//   let u3 = glMatrix.RANDOM();\n\n//   let sqrt1MinusU1 = Math.sqrt(1 - u1);\n//   let sqrtU1 = Math.sqrt(u1);\n\n//   out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n//   out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n//   out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n//   out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n//   return out;\n// }\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x Angle to rotate around X axis in degrees.\n * @param {Number} y Angle to rotate around Y axis in degrees.\n * @param {Number} z Angle to rotate around Z axis in degrees.\n * @param {'zyx'|'xyz'|'yxz'|'yzx'|'zxy'|'zyx'} order Intrinsic order for conversion, default is zyx.\n * @returns {quat} out\n * @function\n */\n// export function fromEuler(out, x, y, z, order = glMatrix.ANGLE_ORDER) {\n//   let halfToRad = Math.PI / 360;\n//   x *= halfToRad;\n//   z *= halfToRad;\n//   y *= halfToRad;\n\n//   let sx = Math.sin(x);\n//   let cx = Math.cos(x);\n//   let sy = Math.sin(y);\n//   let cy = Math.cos(y);\n//   let sz = Math.sin(z);\n//   let cz = Math.cos(z);\n\n//   switch (order) {\n//     case \"xyz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"xzy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yxz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yzx\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zxy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zyx\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     default:\n//       throw new Error('Unknown angle order ' + order);\n//   }\n\n//   return out;\n// }\n\n/**\n * Returns a string representation of a quaternion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `quat(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions point approximately to the same direction.\n *\n * Both quaternions are assumed to be unit length.\n *\n * @param {ReadonlyQuat} a The first unit quaternion.\n * @param {ReadonlyQuat} b The second unit quaternion.\n * @returns {Boolean} True if the quaternions are equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(vec4.dot(a, b)) >= 1 - glMatrix.EPSILON;\n}\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function () {\n  const tmpvec3 = vec3.create();\n  const xUnitVec3 = vec3.fromValues(1, 0, 0);\n  const yUnitVec3 = vec3.fromValues(0, 1, 0);\n\n  return function (out, a, b) {\n    const dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    }\n    vec3.cross(tmpvec3, a, b);\n    out[0] = tmpvec3[0];\n    out[1] = tmpvec3[1];\n    out[2] = tmpvec3[2];\n    out[3] = 1 + dot;\n    return normalize(out, out);\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  const temp1 = create();\n  const temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function () {\n  const matr = mat3.create();\n\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}