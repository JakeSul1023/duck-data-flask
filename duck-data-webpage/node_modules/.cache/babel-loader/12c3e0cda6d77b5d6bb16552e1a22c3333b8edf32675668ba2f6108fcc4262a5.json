{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ClipSpace } from '@luma.gl/engine';\nimport Pass from \"./pass.js\";\nimport { screenUniforms } from \"./screen-pass-uniforms.js\";\n/** A base render pass. */\nexport default class ScreenPass extends Pass {\n  constructor(device, props) {\n    super(device, props);\n    const {\n      module,\n      fs,\n      id\n    } = props;\n    const parameters = {\n      depthWriteEnabled: false,\n      depthCompare: 'always'\n    };\n    this.model = new ClipSpace(device, {\n      id,\n      fs,\n      modules: [module, screenUniforms],\n      parameters\n    });\n  }\n  render(params) {\n    this._renderPass(this.device, params);\n  }\n  delete() {\n    this.model.destroy();\n    this.model = null;\n  }\n  // Private methods\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass(device, options) {\n    const {\n      clearCanvas,\n      inputBuffer,\n      outputBuffer\n    } = options;\n    const texSize = [inputBuffer.width, inputBuffer.height];\n    const screenProps = {\n      texSrc: inputBuffer.colorAttachments[0],\n      texSize\n    };\n    this.model.shaderInputs.setProps({\n      screen: screenProps,\n      ...options.moduleProps\n    });\n    const renderPass = this.device.beginRenderPass({\n      framebuffer: outputBuffer,\n      parameters: {\n        viewport: [0, 0, ...texSize]\n      },\n      clearColor: clearCanvas ? [0, 0, 0, 0] : false,\n      clearDepth: 1\n    });\n    this.model.draw(renderPass);\n    renderPass.end();\n  }\n}","map":{"version":3,"names":["ClipSpace","Pass","screenUniforms","ScreenPass","constructor","device","props","module","fs","id","parameters","depthWriteEnabled","depthCompare","model","modules","render","params","_renderPass","delete","destroy","options","clearCanvas","inputBuffer","outputBuffer","texSize","width","height","screenProps","texSrc","colorAttachments","shaderInputs","setProps","screen","moduleProps","renderPass","beginRenderPass","framebuffer","viewport","clearColor","clearDepth","draw","end"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\passes\\screen-pass.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport type {Device, Framebuffer} from '@luma.gl/core';\nimport {ClipSpace} from '@luma.gl/engine';\nimport type {ShaderModule} from '@luma.gl/shadertools';\nimport Pass from './pass';\nimport {ScreenProps, screenUniforms} from './screen-pass-uniforms';\n\ntype ScreenPassProps = {\n  module: ShaderModule;\n  fs: string;\n  id: string;\n};\n\ntype ScreenPassRenderOptions = {\n  clearCanvas?: boolean;\n  inputBuffer: Framebuffer;\n  outputBuffer: Framebuffer | null;\n  moduleProps: ShaderModule['props'];\n};\n\n/** A base render pass. */\nexport default class ScreenPass extends Pass {\n  model: ClipSpace;\n\n  constructor(device: Device, props: ScreenPassProps) {\n    super(device, props);\n    const {module, fs, id} = props;\n    const parameters = {depthWriteEnabled: false, depthCompare: 'always' as const};\n    this.model = new ClipSpace(device, {id, fs, modules: [module, screenUniforms], parameters});\n  }\n\n  render(params: ScreenPassRenderOptions): void {\n    this._renderPass(this.device, params);\n  }\n\n  delete() {\n    this.model.destroy();\n    this.model = null!;\n  }\n\n  // Private methods\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param outputBuffer - Frame buffer that serves as the output render target\n   */\n  protected _renderPass(device: Device, options: ScreenPassRenderOptions) {\n    const {clearCanvas, inputBuffer, outputBuffer} = options;\n    const texSize: [number, number] = [inputBuffer.width, inputBuffer.height];\n    const screenProps: ScreenProps = {\n      texSrc: inputBuffer.colorAttachments[0],\n      texSize\n    };\n    this.model.shaderInputs.setProps({\n      screen: screenProps,\n      ...options.moduleProps\n    });\n    const renderPass = this.device.beginRenderPass({\n      framebuffer: outputBuffer,\n      parameters: {viewport: [0, 0, ...texSize]},\n      clearColor: clearCanvas ? [0, 0, 0, 0] : false,\n      clearDepth: 1\n    });\n\n    this.model.draw(renderPass);\n    renderPass.end();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAMA,SAAQA,SAAS,QAAO,iBAAiB;AAEzC,OAAOC,IAAI;AACX,SAAqBC,cAAc,QAAC;AAepC;AACA,eAAc,MAAOC,UAAW,SAAQF,IAAI;EAG1CG,YAAYC,MAAc,EAAEC,KAAsB;IAChD,KAAK,CAACD,MAAM,EAAEC,KAAK,CAAC;IACpB,MAAM;MAACC,MAAM;MAAEC,EAAE;MAAEC;IAAE,CAAC,GAAGH,KAAK;IAC9B,MAAMI,UAAU,GAAG;MAACC,iBAAiB,EAAE,KAAK;MAAEC,YAAY,EAAE;IAAiB,CAAC;IAC9E,IAAI,CAACC,KAAK,GAAG,IAAIb,SAAS,CAACK,MAAM,EAAE;MAACI,EAAE;MAAED,EAAE;MAAEM,OAAO,EAAE,CAACP,MAAM,EAAEL,cAAc,CAAC;MAAEQ;IAAU,CAAC,CAAC;EAC7F;EAEAK,MAAMA,CAACC,MAA+B;IACpC,IAAI,CAACC,WAAW,CAAC,IAAI,CAACZ,MAAM,EAAEW,MAAM,CAAC;EACvC;EAEAE,MAAMA,CAAA;IACJ,IAAI,CAACL,KAAK,CAACM,OAAO,EAAE;IACpB,IAAI,CAACN,KAAK,GAAG,IAAK;EACpB;EAEA;EAEA;;;;;;EAMUI,WAAWA,CAACZ,MAAc,EAAEe,OAAgC;IACpE,MAAM;MAACC,WAAW;MAAEC,WAAW;MAAEC;IAAY,CAAC,GAAGH,OAAO;IACxD,MAAMI,OAAO,GAAqB,CAACF,WAAW,CAACG,KAAK,EAAEH,WAAW,CAACI,MAAM,CAAC;IACzE,MAAMC,WAAW,GAAgB;MAC/BC,MAAM,EAAEN,WAAW,CAACO,gBAAgB,CAAC,CAAC,CAAC;MACvCL;KACD;IACD,IAAI,CAACX,KAAK,CAACiB,YAAY,CAACC,QAAQ,CAAC;MAC/BC,MAAM,EAAEL,WAAW;MACnB,GAAGP,OAAO,CAACa;KACZ,CAAC;IACF,MAAMC,UAAU,GAAG,IAAI,CAAC7B,MAAM,CAAC8B,eAAe,CAAC;MAC7CC,WAAW,EAAEb,YAAY;MACzBb,UAAU,EAAE;QAAC2B,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGb,OAAO;MAAC,CAAC;MAC1Cc,UAAU,EAAEjB,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;MAC9CkB,UAAU,EAAE;KACb,CAAC;IAEF,IAAI,CAAC1B,KAAK,CAAC2B,IAAI,CAACN,UAAU,CAAC;IAC3BA,UAAU,CAACO,GAAG,EAAE;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}