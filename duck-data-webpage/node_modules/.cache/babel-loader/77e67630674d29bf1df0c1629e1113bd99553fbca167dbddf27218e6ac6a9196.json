{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\nconst SIZEOF_UINT32 = 4;\n/* PARSE FIXED HEADER:\nPopulates\n  magic, // identifies type of tile\n  type, // String version of magic\n  version,\n  byteLength\n */\nexport function parse3DTileHeaderSync(tile, arrayBuffer, byteOffset = 0) {\n  const view = new DataView(arrayBuffer);\n  tile.magic = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.version = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.byteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  // TODO - move version check into each tile parser?\n  if (tile.version !== 1) {\n    throw new Error(`3D Tile Version ${tile.version} not supported`);\n  }\n  return byteOffset; // Indicates where the parsing ended\n}","map":{"version":3,"names":["SIZEOF_UINT32","parse3DTileHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","magic","getUint32","version","byteLength","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-tile-header.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\nconst SIZEOF_UINT32 = 4;\n/* PARSE FIXED HEADER:\nPopulates\n  magic, // identifies type of tile\n  type, // String version of magic\n  version,\n  byteLength\n */\nexport function parse3DTileHeaderSync(tile, arrayBuffer, byteOffset = 0) {\n    const view = new DataView(arrayBuffer);\n    tile.magic = view.getUint32(byteOffset, true);\n    byteOffset += SIZEOF_UINT32;\n    tile.version = view.getUint32(byteOffset, true);\n    byteOffset += SIZEOF_UINT32;\n    tile.byteLength = view.getUint32(byteOffset, true);\n    byteOffset += SIZEOF_UINT32;\n    // TODO - move version check into each tile parser?\n    if (tile.version !== 1) {\n        throw new Error(`3D Tile Version ${tile.version} not supported`);\n    }\n    return byteOffset; // Indicates where the parsing ended\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,aAAa,GAAG,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,IAAI,EAAEC,WAAW,EAAEC,UAAU,GAAG,CAAC,EAAE;EACrE,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,WAAW,CAAC;EACtCD,IAAI,CAACK,KAAK,GAAGF,IAAI,CAACG,SAAS,CAACJ,UAAU,EAAE,IAAI,CAAC;EAC7CA,UAAU,IAAIJ,aAAa;EAC3BE,IAAI,CAACO,OAAO,GAAGJ,IAAI,CAACG,SAAS,CAACJ,UAAU,EAAE,IAAI,CAAC;EAC/CA,UAAU,IAAIJ,aAAa;EAC3BE,IAAI,CAACQ,UAAU,GAAGL,IAAI,CAACG,SAAS,CAACJ,UAAU,EAAE,IAAI,CAAC;EAClDA,UAAU,IAAIJ,aAAa;EAC3B;EACA,IAAIE,IAAI,CAACO,OAAO,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIE,KAAK,CAAC,mBAAmBT,IAAI,CAACO,OAAO,gBAAgB,CAAC;EACpE;EACA,OAAOL,UAAU,CAAC,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}