{"ast":null,"code":"import getHiResTimestamp from \"../utils/hi-res-timestamp.js\";\nexport default class Stat {\n  constructor(name, type) {\n    this.sampleSize = 1;\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    return this;\n  }\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n    return this;\n  }\n  /** Call to increment count (+1) */\n  incrementCount() {\n    this.addCount(1);\n    return this;\n  }\n  /** Call to decrement count (-1) */\n  decrementCount() {\n    this.subtractCount(1);\n    return this;\n  }\n  /** Increase count */\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  /** Decrease count */\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  /** Add an arbitrary timing and bump the count */\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  /** Start a timer */\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n    return this;\n  }\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n    return this;\n  }\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n  /** Calculate counts per second for the previous window */\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n  /** Calculate average time / count */\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n  /** Calculate counts per second */\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}","map":{"version":3,"names":["getHiResTimestamp","Stat","constructor","name","type","sampleSize","time","count","samples","lastTiming","lastSampleTime","lastSampleCount","_count","_time","_samples","_startTime","_timerPending","reset","setSampleSize","incrementCount","addCount","decrementCount","subtractCount","value","_checkSampling","addTime","timeStart","timeEnd","getSampleAverageCount","getSampleAverageTime","getSampleHz","getAverageCount","getAverageTime","getHz"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@probe.gl\\stats\\src\\lib\\stat.ts"],"sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string | undefined;\n  sampleSize: number = 1;\n  time: number = 0;\n  count: number = 0;\n  samples: number = 0;\n  lastTiming: number = 0;\n  lastSampleTime: number = 0;\n  lastSampleCount: number = 0;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}