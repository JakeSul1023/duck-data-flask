{"ast":null,"code":"import { jsx as _jsx } from \"preact/jsx-runtime\";\n// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* global document */\nimport { _deepEqual as deepEqual, _applyStyles as applyStyles, _removeStyles as removeStyles } from '@deck.gl/core';\nimport { render } from 'preact';\nimport { IconButton } from \"./components.js\";\nexport class FullscreenWidget {\n  constructor(props) {\n    this.id = 'fullscreen';\n    this.placement = 'top-left';\n    this.fullscreen = false;\n    this.id = props.id ?? this.id;\n    this.placement = props.placement ?? this.placement;\n    this.props = {\n      ...props,\n      enterLabel: props.enterLabel ?? 'Enter Fullscreen',\n      exitLabel: props.exitLabel ?? 'Exit Fullscreen',\n      style: props.style ?? {}\n    };\n  }\n  onAdd(_ref) {\n    let {\n      deck\n    } = _ref;\n    const {\n      style,\n      className\n    } = this.props;\n    const el = document.createElement('div');\n    el.classList.add('deck-widget', 'deck-widget-fullscreen');\n    if (className) el.classList.add(className);\n    applyStyles(el, style);\n    this.deck = deck;\n    this.element = el;\n    this.update();\n    document.addEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n    return el;\n  }\n  onRemove() {\n    this.deck = undefined;\n    this.element = undefined;\n    document.removeEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n  }\n  update() {\n    const {\n      enterLabel,\n      exitLabel\n    } = this.props;\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n    const ui = _jsx(IconButton, {\n      onClick: this.handleClick.bind(this),\n      label: this.fullscreen ? exitLabel : enterLabel,\n      className: this.fullscreen ? 'deck-widget-fullscreen-exit' : 'deck-widget-fullscreen-enter'\n    });\n    render(ui, element);\n  }\n  setProps(props) {\n    this.placement = props.placement ?? this.placement;\n    const oldProps = this.props;\n    const el = this.element;\n    if (el) {\n      if (oldProps.className !== props.className) {\n        if (oldProps.className) el.classList.remove(oldProps.className);\n        if (props.className) el.classList.add(props.className);\n      }\n      if (!deepEqual(oldProps.style, props.style, 1)) {\n        removeStyles(el, oldProps.style);\n        applyStyles(el, props.style);\n      }\n    }\n    Object.assign(this.props, props);\n    this.update();\n  }\n  getContainer() {\n    return this.props.container || this.deck?.getCanvas()?.parentElement;\n  }\n  onFullscreenChange() {\n    const prevFullscreen = this.fullscreen;\n    const fullscreen = document.fullscreenElement === this.getContainer();\n    if (prevFullscreen !== fullscreen) {\n      this.fullscreen = !this.fullscreen;\n    }\n    this.update();\n  }\n  async handleClick() {\n    if (this.fullscreen) {\n      await this.exitFullscreen();\n    } else {\n      await this.requestFullscreen();\n    }\n    this.update();\n  }\n  async requestFullscreen() {\n    const container = this.getContainer();\n    if (container?.requestFullscreen) {\n      await container.requestFullscreen({\n        navigationUI: 'hide'\n      });\n    } else {\n      this.togglePseudoFullscreen();\n    }\n  }\n  async exitFullscreen() {\n    if (document.exitFullscreen) {\n      await document.exitFullscreen();\n    } else {\n      this.togglePseudoFullscreen();\n    }\n  }\n  togglePseudoFullscreen() {\n    this.getContainer()?.classList.toggle('deck-pseudo-fullscreen');\n  }\n}\n//# sourceMappingURL=fullscreen-widget.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}