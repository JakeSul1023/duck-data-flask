{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport { MapState } from \"./map-controller.js\";\nimport { mod } from \"../utils/math-utils.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nimport { MAX_LATITUDE } from '@math.gl/web-mercator';\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      longitude,\n      latitude\n    } = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -MAX_LATITUDE, MAX_LATITUDE);\n    return props;\n  }\n}\nexport default class GlobeController extends Controller {\n  constructor() {\n    super(...arguments);\n    this.ControllerState = GlobeState;\n    this.transition = {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['longitude', 'latitude', 'zoom'])\n    };\n    this.dragMode = 'pan';\n  }\n  setProps(props) {\n    super.setProps(props);\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n}\n//# sourceMappingURL=globe-controller.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}