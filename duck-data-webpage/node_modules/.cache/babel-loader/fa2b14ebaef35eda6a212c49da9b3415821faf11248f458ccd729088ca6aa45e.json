{"ast":null,"code":"// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\nimport { createMat4, transformVector, clamp, log2 } from \"./math-utils.js\";\nimport { mat4, vec2, vec3 } from '@math.gl/core';\nimport { assert } from \"./assert.js\";\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat) {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = TILE_SIZE * (lambda2 + PI) / (2 * PI);\n  const y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy) {\n  const [x, y] = xy;\n  const lambda2 = x / TILE_SIZE * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options) {\n  const {\n    latitude\n  } = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n/**\n * Calculate the conversion from meter to common units at a given latitude\n * This is a cheaper version of `getDistanceScales`\n * @param latitude center latitude in degrees\n * @returns common units per meter\n */\nexport function unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options) {\n  const {\n    latitude,\n    longitude,\n    highPrecision = false\n  } = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  const result = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;\n    const altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n  // eslint-disable-next-line no-shadow\n  const {\n    unitsPerMeter,\n    unitsPerMeter2\n  } = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options) {\n  const {\n    // Viewport props\n    height,\n    pitch,\n    bearing,\n    altitude,\n    // Pre-calculated parameters\n    scale,\n    center\n  } = options;\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n  return vm;\n}\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options) {\n  const {\n    width,\n    height,\n    altitude,\n    pitch = 0,\n    offset,\n    center,\n    scale,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = options;\n  let {\n    fovy = altitudeToFovy(DEFAULT_ALTITUDE)\n  } = options;\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n  const fovRadians = fovy * DEGREES_TO_RADIANS;\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  // Distance from camera to the target\n  const focalDistance = fovyToAltitude(fovy);\n  let cameraToSeaLevelDistance = focalDistance;\n  if (center) {\n    cameraToSeaLevelDistance += center[2] * scale / Math.cos(pitchRadians) / height;\n  }\n  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const topHalfSurfaceDistance = Math.sin(fovAboveCenter) * cameraToSeaLevelDistance / Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n  // Calculate z distance of the farthest fragment that should be rendered.\n  const furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  // Matches mapbox limit\n  const horizonDistance = cameraToSeaLevelDistance * 10;\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options) {\n  const {\n    fov,\n    aspect,\n    near,\n    far\n  } = getProjectionParameters(options);\n  const projectionMatrix = mat4.perspective([], fov,\n  // fov in radians\n  aspect,\n  // aspect ratio\n  near,\n  // near plane\n  far // far plane\n  );\n  return projectionMatrix;\n}\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"names":["createMat4","transformVector","clamp","log2","mat4","vec2","vec3","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","MAX_LATITUDE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","lngLatToWorld","lngLat","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","xy","atan","exp","getMeterZoom","options","latitude","latCosine","cos","unitsPerMeter","getDistanceScales","longitude","highPrecision","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","result","metersPerUnit","unitsPerDegree","degreesPerUnit","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerDegree2","unitsPerMeter2","addMetersToLngLat","lngLatZ","xyz","z0","z","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","vm","translate","rotateX","rotateZ","relativeScale","negate","getProjectionParameters","width","offset","nearZMultiplier","farZMultiplier","fovy","altitudeToFovy","undefined","fovRadians","pitchRadians","focalDistance","fovyToAltitude","cameraToSeaLevelDistance","fovAboveCenter","topHalfSurfaceDistance","sin","furthestDistance","horizonDistance","farZ","min","fov","aspect","near","far","getProjectionMatrix","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z1","t","lerp"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\web-mercator\\src\\web-mercator-utils.ts"],"sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, clamp, log2} from './math-utils';\n\nimport {mat4, vec2, vec3} from '@math.gl/core';\nimport {assert} from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\nexport type DistanceScales = {\n  unitsPerMeter: number[];\n  metersPerUnit: number[];\n  unitsPerMeter2?: number[];\n  unitsPerDegree: number[];\n  degreesPerUnit: number[];\n  unitsPerDegree2?: number[];\n};\n\n/**\n * PROJECTION MATRIX PARAMETERS\n *\n * TODO how to document mebers\n * @param fov in radians. fov is variable, depends on pitch and altitude\n * @param aspect width/height\n * @param focalDistance distance at which visual scale factor is 1\n * @param near near clipping plane\n * @param far far clipping plane\n */\ntype ProjectionParameters = {\n  fov: number;\n  aspect: number;\n  focalDistance: number;\n  near: number;\n  far: number;\n};\n\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom: number): number {\n  return Math.pow(2, zoom);\n}\n\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale: number): number {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat: number[]): [number, number] {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy: number[]): [number, number] {\n  const [x, y] = xy;\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options: {latitude: number}): number {\n  const {latitude} = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate the conversion from meter to common units at a given latitude\n * This is a cheaper version of `getDistanceScales`\n * @param latitude center latitude in degrees\n * @returns common units per meter\n */\nexport function unitsPerMeter(latitude: number): number {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options: {\n  latitude: number;\n  longitude: number;\n  highPrecision?: boolean;\n}): DistanceScales {\n  const {latitude, longitude, highPrecision = false} = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  const result: DistanceScales = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  // eslint-disable-next-line no-shadow\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options: {\n  // Viewport props\n  height: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  // Pre-calculated parameters\n  scale: number;\n  center?: number[];\n}): number[] {\n  const {\n    // Viewport props\n    height,\n    pitch,\n    bearing,\n    altitude,\n    // Pre-calculated parameters\n    scale,\n    center\n  } = options;\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options: {\n  width: number;\n  height: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  pitch?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n}): ProjectionParameters {\n  const {\n    width,\n    height,\n    altitude,\n    pitch = 0,\n    offset,\n    center,\n    scale,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = options;\n  let {fovy = altitudeToFovy(DEFAULT_ALTITUDE)} = options;\n\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  const fovRadians = fovy * DEGREES_TO_RADIANS;\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n\n  // Distance from camera to the target\n  const focalDistance = fovyToAltitude(fovy);\n\n  let cameraToSeaLevelDistance = focalDistance;\n\n  if (center) {\n    cameraToSeaLevelDistance += (center[2] * scale) / Math.cos(pitchRadians) / height;\n  }\n\n  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const topHalfSurfaceDistance =\n    (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /\n    Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n\n  // Calculate z distance of the farthest fragment that should be rendered.\n  const furthestDistance =\n    Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  // Matches mapbox limit\n  const horizonDistance = cameraToSeaLevelDistance * 10;\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\n\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options: {\n  width: number;\n  height: number;\n  pitch: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  nearZMultiplier: number;\n  farZMultiplier: number;\n}): number[] {\n  const {fov, aspect, near, far} = getProjectionParameters(options);\n\n  const projectionMatrix = mat4.perspective(\n    [] as number[],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude: number): number {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy: number): number {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param pixelProjectionMatrix - projection matrix 4x4\n * @return [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[];\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[] {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(\n  xyz: number[],\n  pixelUnprojectionMatrix: number[],\n  targetZ: number = 0\n): number[] {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([] as number[], coord0, coord1, t);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}