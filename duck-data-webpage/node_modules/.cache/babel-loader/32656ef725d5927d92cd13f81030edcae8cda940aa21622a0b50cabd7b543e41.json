{"ast":null,"code":"// mjolnir.js\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Input } from \"./input.js\";\nconst KEY_EVENTS = ['keydown', 'keyup'];\nexport class KeyInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, {\n      enable: true,\n      tabIndex: 0,\n      ...options\n    });\n    this.handleEvent = event => {\n      // Ignore if focused on text input\n      const targetElement = event.target || event.srcElement;\n      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n        return;\n      }\n      if (this.enableDownEvent && event.type === 'keydown') {\n        this.callback({\n          type: 'keydown',\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n      if (this.enableUpEvent && event.type === 'keyup') {\n        this.callback({\n          type: 'keyup',\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n    };\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n    element.tabIndex = this.options.tabIndex;\n    element.style.outline = 'none';\n    KEY_EVENTS.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n  destroy() {\n    KEY_EVENTS.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === 'keydown') {\n      this.enableDownEvent = enabled;\n    }\n    if (eventType === 'keyup') {\n      this.enableUpEvent = enabled;\n    }\n  }\n}","map":{"version":3,"names":["Input","KEY_EVENTS","KeyInput","constructor","element","callback","options","enable","tabIndex","handleEvent","event","targetElement","target","srcElement","tagName","type","enableDownEvent","srcEvent","key","enableUpEvent","style","outline","forEach","addEventListener","destroy","removeEventListener","enableEventType","eventType","enabled"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\inputs\\key-input.ts"],"sourcesContent":["// mjolnir.js\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {MjolnirKeyEventRaw} from '../types';\nimport {Input, InputOptions} from './input';\n\nconst KEY_EVENTS = ['keydown', 'keyup'] as const;\n\ntype KeyInputOptions = InputOptions & {\n  tabIndex?: number;\n};\n\nexport class KeyInput extends Input<MjolnirKeyEventRaw, Required<KeyInputOptions>> {\n  enableDownEvent: boolean;\n  enableUpEvent: boolean;\n\n  constructor(\n    element: HTMLElement,\n    callback: (event: MjolnirKeyEventRaw) => void,\n    options: KeyInputOptions\n  ) {\n    super(element, callback, {enable: true, tabIndex: 0, ...options});\n\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n\n    element.tabIndex = this.options.tabIndex;\n    element.style.outline = 'none';\n    KEY_EVENTS.forEach((event) => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    KEY_EVENTS.forEach((event) => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType: string, enabled: boolean) {\n    if (eventType === 'keydown') {\n      this.enableDownEvent = enabled;\n    }\n    if (eventType === 'keyup') {\n      this.enableUpEvent = enabled;\n    }\n  }\n\n  handleEvent = (event: KeyboardEvent) => {\n    // Ignore if focused on text input\n    const targetElement = (event.target || event.srcElement) as HTMLElement;\n    if (\n      (targetElement.tagName === 'INPUT' && (targetElement as HTMLInputElement).type === 'text') ||\n      targetElement.tagName === 'TEXTAREA'\n    ) {\n      return;\n    }\n\n    if (this.enableDownEvent && event.type === 'keydown') {\n      this.callback({\n        type: 'keydown',\n        srcEvent: event,\n        key: event.key,\n        target: event.target as HTMLElement\n      });\n    }\n\n    if (this.enableUpEvent && event.type === 'keyup') {\n      this.callback({\n        type: 'keyup',\n        srcEvent: event,\n        key: event.key,\n        target: event.target as HTMLElement\n      });\n    }\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,KAAK,QAAe;AAE5B,MAAMC,UAAU,GAAG,CAAC,SAAS,EAAE,OAAO,CAAU;AAMhD,OAAM,MAAOC,QAAS,SAAQF,KAAoD;EAIhFG,YACEC,OAAoB,EACpBC,QAA6C,EAC7CC,OAAwB;IAExB,KAAK,CAACF,OAAO,EAAEC,QAAQ,EAAE;MAACE,MAAM,EAAE,IAAI;MAAEC,QAAQ,EAAE,CAAC;MAAE,GAAGF;IAAO,CAAC,CAAC;IA2BnE,KAAAG,WAAW,GAAIC,KAAoB,IAAI;MACrC;MACA,MAAMC,aAAa,GAAID,KAAK,CAACE,MAAM,IAAIF,KAAK,CAACG,UAA0B;MACvE,IACGF,aAAa,CAACG,OAAO,KAAK,OAAO,IAAKH,aAAkC,CAACI,IAAI,KAAK,MAAM,IACzFJ,aAAa,CAACG,OAAO,KAAK,UAAU,EACpC;QACA;MACF;MAEA,IAAI,IAAI,CAACE,eAAe,IAAIN,KAAK,CAACK,IAAI,KAAK,SAAS,EAAE;QACpD,IAAI,CAACV,QAAQ,CAAC;UACZU,IAAI,EAAE,SAAS;UACfE,QAAQ,EAAEP,KAAK;UACfQ,GAAG,EAAER,KAAK,CAACQ,GAAG;UACdN,MAAM,EAAEF,KAAK,CAACE;SACf,CAAC;MACJ;MAEA,IAAI,IAAI,CAACO,aAAa,IAAIT,KAAK,CAACK,IAAI,KAAK,OAAO,EAAE;QAChD,IAAI,CAACV,QAAQ,CAAC;UACZU,IAAI,EAAE,OAAO;UACbE,QAAQ,EAAEP,KAAK;UACfQ,GAAG,EAAER,KAAK,CAACQ,GAAG;UACdN,MAAM,EAAEF,KAAK,CAACE;SACf,CAAC;MACJ;IACF,CAAC;IApDC,IAAI,CAACI,eAAe,GAAG,IAAI,CAACV,OAAO,CAACC,MAAM;IAC1C,IAAI,CAACY,aAAa,GAAG,IAAI,CAACb,OAAO,CAACC,MAAM;IAExCH,OAAO,CAACI,QAAQ,GAAG,IAAI,CAACF,OAAO,CAACE,QAAQ;IACxCJ,OAAO,CAACgB,KAAK,CAACC,OAAO,GAAG,MAAM;IAC9BpB,UAAU,CAACqB,OAAO,CAAEZ,KAAK,IAAKN,OAAO,CAACmB,gBAAgB,CAACb,KAAK,EAAE,IAAI,CAACD,WAAW,CAAC,CAAC;EAClF;EAEAe,OAAOA,CAAA;IACLvB,UAAU,CAACqB,OAAO,CAAEZ,KAAK,IAAK,IAAI,CAACN,OAAO,CAACqB,mBAAmB,CAACf,KAAK,EAAE,IAAI,CAACD,WAAW,CAAC,CAAC;EAC1F;EAEA;;;;EAIAiB,eAAeA,CAACC,SAAiB,EAAEC,OAAgB;IACjD,IAAID,SAAS,KAAK,SAAS,EAAE;MAC3B,IAAI,CAACX,eAAe,GAAGY,OAAO;IAChC;IACA,IAAID,SAAS,KAAK,OAAO,EAAE;MACzB,IAAI,CAACR,aAAa,GAAGS,OAAO;IAC9B;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}