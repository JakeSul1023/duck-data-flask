{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { convertXMLFieldToArrayInPlace, XMLLoader } from '@loaders.gl/xml';\nimport { parseExceptionReport } from \"./parse-exception-report.js\";\n/**\n * Parses a typed data structure from raw XML for `GetRecords` response\n * @note Error handlings is fairly weak\n */\nexport function parseCSWRecords(text, options) {\n  const parsedXML = XMLLoader.parseTextSync?.(text, {\n    ...options,\n    xml: {\n      ...options?.xml,\n      removeNSPrefix: true,\n      uncapitalizeKeys: true,\n      arrayPaths: [],\n      _fastXML: {\n        ...options?.xml?._fastXML,\n        parseAttributeValue: true\n      }\n    }\n  });\n  parseExceptionReport(parsedXML);\n  const xmlRecords = parsedXML.getRecordsResponse;\n  // Move results to top\n  const elementSet = xmlRecords.searchResults.elementSet;\n  const recordsFieldName = `${elementSet}Record`;\n  xmlRecords.records = xmlRecords.searchResults[recordsFieldName];\n  delete xmlRecords.searchResults[recordsFieldName];\n  convertXMLFieldToArrayInPlace(xmlRecords, 'records');\n  for (const record of xmlRecords.records) {\n    record.boundingBoxes = record.boundingBox;\n    delete record.boundingBox;\n    convertXMLFieldToArrayInPlace(record, 'boundingBoxes');\n    for (const boundingBox of record.boundingBoxes) {\n      boundingBox.value = [boundingBox.upperCorner[0], boundingBox.upperCorner[1], boundingBox.lowerCorner[0], boundingBox.lowerCorner[1]];\n      delete boundingBox.upperCorner;\n      delete boundingBox.lowerCorner;\n    }\n  }\n  return xmlRecords;\n}\nexport function renameXMLTags(xml, renameKeys) {\n  for (const [oldKey, newKey] of Object.entries(renameKeys)) {\n    xml[newKey] = xml[oldKey];\n    delete xml[oldKey];\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}