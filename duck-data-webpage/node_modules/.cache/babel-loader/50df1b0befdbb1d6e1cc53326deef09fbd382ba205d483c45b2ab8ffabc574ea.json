{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { GL } from '@luma.gl/constants';\nimport { convertCompareFunction } from \"./device-parameters.js\";\n/**\n * Convert WebGPU-style sampler props to WebGL\n * @param props\n * @returns\n */\nexport function convertSamplerParametersToWebGL(props) {\n  const params = {};\n  if (props.addressModeU) {\n    params[10242] = convertAddressMode(props.addressModeU);\n  }\n  if (props.addressModeV) {\n    params[10243] = convertAddressMode(props.addressModeV);\n  }\n  if (props.addressModeW) {\n    params[32882] = convertAddressMode(props.addressModeW);\n  }\n  if (props.magFilter) {\n    params[10240] = convertMaxFilterMode(props.magFilter);\n  }\n  if (props.minFilter || props.mipmapFilter) {\n    // TODO - arbitrary choice of linear?\n    params[10241] = convertMinFilterMode(props.minFilter || 'linear', props.mipmapFilter);\n  }\n  if (props.lodMinClamp !== undefined) {\n    params[33082] = props.lodMinClamp;\n  }\n  if (props.lodMaxClamp !== undefined) {\n    params[33083] = props.lodMaxClamp;\n  }\n  if (props.type === 'comparison-sampler') {\n    // Setting prop.compare turns this into a comparison sampler\n    params[34892] = 34894;\n  }\n  if (props.compare) {\n    params[34893] = convertCompareFunction('compare', props.compare);\n  }\n  // Note depends on WebGL extension\n  if (props.maxAnisotropy) {\n    params[34046] = props.maxAnisotropy;\n  }\n  return params;\n}\n// HELPERS\n/** Convert address more */\nfunction convertAddressMode(addressMode) {\n  switch (addressMode) {\n    case 'clamp-to-edge':\n      return 33071;\n    case 'repeat':\n      return 10497;\n    case 'mirror-repeat':\n      return 33648;\n  }\n}\nfunction convertMaxFilterMode(maxFilter) {\n  switch (maxFilter) {\n    case 'nearest':\n      return 9728;\n    case 'linear':\n      return 9729;\n  }\n}\n/**\n * WebGPU has separate min filter and mipmap filter,\n * WebGL is combined and effectively offers 6 options\n */\nfunction convertMinFilterMode(minFilter) {\n  let mipmapFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'none';\n  if (!mipmapFilter) {\n    return convertMaxFilterMode(minFilter);\n  }\n  switch (mipmapFilter) {\n    case 'none':\n      return convertMaxFilterMode(minFilter);\n    case 'nearest':\n      return minFilter === 'nearest' ? 9984 : 9986;\n    case 'linear':\n      return minFilter === 'nearest' ? 9985 : 9987;\n  }\n}\n//# sourceMappingURL=sampler-parameters.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}