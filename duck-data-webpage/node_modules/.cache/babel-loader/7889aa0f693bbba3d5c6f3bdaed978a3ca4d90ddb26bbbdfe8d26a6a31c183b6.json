{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { uid } from \"../../utils/uid.js\";\n/**\n * Base class for GPU (WebGPU/WebGL) Resources\n */\nexport class Resource {\n  /** Default properties for resource */\n  static defaultProps = {\n    id: 'undefined',\n    handle: undefined,\n    userData: undefined\n  };\n  toString() {\n    return `${this[Symbol.toStringTag] || this.constructor.name}:\"${this.id}\"`;\n  }\n  /** props.id, for debugging. */\n  id;\n  props;\n  userData = {};\n  _device;\n  /** Whether this resource has been destroyed */\n  destroyed = false;\n  /** For resources that allocate GPU memory */\n  allocatedBytes = 0;\n  /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created \"sub\" resources. */\n  _attachedResources = new Set();\n  /**\n   * Create a new Resource. Called from Subclass\n   */\n  constructor(device, props, defaultProps) {\n    if (!device) {\n      throw new Error('no device');\n    }\n    this._device = device;\n    this.props = selectivelyMerge(props, defaultProps);\n    const id = this.props.id !== 'undefined' ? this.props.id : uid(this[Symbol.toStringTag]);\n    this.props.id = id;\n    this.id = id;\n    this.userData = this.props.userData || {};\n    this.addStats();\n  }\n  /**\n   * destroy can be called on any resource to release it before it is garbage collected.\n   */\n  destroy() {\n    this.destroyResource();\n  }\n  /** @deprecated Use destroy() */\n  delete() {\n    this.destroy();\n    return this;\n  }\n  /**\n   * Combines a map of user props and default props, only including props from defaultProps\n   * @returns returns a map of overridden default props\n   */\n  getProps() {\n    return this.props;\n  }\n  // ATTACHED RESOURCES\n  /**\n   * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed\n   * Called automatically when sub resources are auto created but can be called by application\n   */\n  attachResource(resource) {\n    this._attachedResources.add(resource);\n  }\n  /**\n   * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.\n   */\n  detachResource(resource) {\n    this._attachedResources.delete(resource);\n  }\n  /**\n   * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.\n   */\n  destroyAttachedResource(resource) {\n    if (this._attachedResources.delete(resource)) {\n      resource.destroy();\n    }\n  }\n  /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */\n  destroyAttachedResources() {\n    for (const resource of Object.values(this._attachedResources)) {\n      resource.destroy();\n    }\n    // don't remove while we are iterating\n    this._attachedResources = new Set();\n  }\n  // PROTECTED METHODS\n  /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */\n  destroyResource() {\n    this.destroyAttachedResources();\n    this.removeStats();\n    this.destroyed = true;\n  }\n  /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */\n  removeStats() {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get(`${name}s Active`).decrementCount();\n  }\n  /** Called by subclass to track memory allocations */\n  trackAllocatedMemory(bytes, name = this[Symbol.toStringTag]) {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.allocatedBytes = bytes;\n  }\n  /** Called by subclass to track memory deallocations */\n  trackDeallocatedMemory(name = this[Symbol.toStringTag]) {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').subtractCount(this.allocatedBytes);\n    stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);\n    this.allocatedBytes = 0;\n  }\n  /** Called by resource constructor to track object creation */\n  addStats() {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n}\n/**\n * Combines a map of user props and default props, only including props from defaultProps\n * @param props\n * @param defaultProps\n * @returns returns a map of overridden default props\n */\nfunction selectivelyMerge(props, defaultProps) {\n  const mergedProps = {\n    ...defaultProps\n  };\n  for (const key in props) {\n    if (props[key] !== undefined) {\n      mergedProps[key] = props[key];\n    }\n  }\n  return mergedProps;\n}","map":{"version":3,"names":["uid","Resource","defaultProps","id","handle","undefined","userData","toString","Symbol","toStringTag","constructor","name","props","_device","destroyed","allocatedBytes","_attachedResources","Set","device","Error","selectivelyMerge","addStats","destroy","destroyResource","delete","getProps","attachResource","resource","add","detachResource","destroyAttachedResource","destroyAttachedResources","Object","values","removeStats","stats","statsManager","getStats","get","decrementCount","trackAllocatedMemory","bytes","addCount","trackDeallocatedMemory","subtractCount","incrementCount","mergedProps","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\resource.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {uid} from '../../utils/uid';\n\nexport type ResourceProps = {\n  /** Name of resource, mainly for debugging purposes. A unique name will be assigned if not provided */\n  id?: string;\n  /** Handle for the underlying resources (WebGL object or WebGPU handle) */\n  handle?: any;\n  /** User provided data stored on this resource  */\n  userData?: {[key: string]: any};\n};\n\n/**\n * Base class for GPU (WebGPU/WebGL) Resources\n */\nexport abstract class Resource<Props extends ResourceProps> {\n  /** Default properties for resource */\n  static defaultProps: Required<ResourceProps> = {\n    id: 'undefined',\n    handle: undefined,\n    userData: undefined!\n  };\n\n  abstract get [Symbol.toStringTag](): string;\n\n  toString(): string {\n    return `${this[Symbol.toStringTag] || this.constructor.name}:\"${this.id}\"`;\n  }\n\n  /** props.id, for debugging. */\n  id: string;\n  readonly props: Required<Props>;\n  readonly userData: Record<string, unknown> = {};\n  abstract readonly device: Device;\n  private _device: Device;\n\n  /** Whether this resource has been destroyed */\n  destroyed: boolean = false;\n  /** For resources that allocate GPU memory */\n  private allocatedBytes: number = 0;\n  /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created \"sub\" resources. */\n  private _attachedResources = new Set<Resource<ResourceProps>>();\n\n  /**\n   * Create a new Resource. Called from Subclass\n   */\n  constructor(device: Device, props: Props, defaultProps: Required<Props>) {\n    if (!device) {\n      throw new Error('no device');\n    }\n    this._device = device;\n    this.props = selectivelyMerge<Props>(props, defaultProps);\n\n    const id =\n      this.props.id !== 'undefined' ? (this.props.id as string) : uid(this[Symbol.toStringTag]);\n    this.props.id = id;\n    this.id = id;\n    this.userData = this.props.userData || {};\n\n    this.addStats();\n  }\n\n  /**\n   * destroy can be called on any resource to release it before it is garbage collected.\n   */\n  destroy(): void {\n    this.destroyResource();\n  }\n\n  /** @deprecated Use destroy() */\n  delete(): this {\n    this.destroy();\n    return this;\n  }\n\n  /**\n   * Combines a map of user props and default props, only including props from defaultProps\n   * @returns returns a map of overridden default props\n   */\n  getProps(): object {\n    return this.props;\n  }\n\n  // ATTACHED RESOURCES\n\n  /**\n   * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed\n   * Called automatically when sub resources are auto created but can be called by application\n   */\n  attachResource(resource: Resource<ResourceProps>): void {\n    this._attachedResources.add(resource);\n  }\n\n  /**\n   * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.\n   */\n  detachResource(resource: Resource<ResourceProps>): void {\n    this._attachedResources.delete(resource);\n  }\n\n  /**\n   * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.\n   */\n  destroyAttachedResource(resource: Resource<ResourceProps>): void {\n    if (this._attachedResources.delete(resource)) {\n      resource.destroy();\n    }\n  }\n\n  /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */\n  destroyAttachedResources(): void {\n    for (const resource of Object.values(this._attachedResources)) {\n      resource.destroy();\n    }\n    // don't remove while we are iterating\n    this._attachedResources = new Set<Resource<ResourceProps>>();\n  }\n\n  // PROTECTED METHODS\n\n  /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */\n  protected destroyResource(): void {\n    this.destroyAttachedResources();\n    this.removeStats();\n    this.destroyed = true;\n  }\n\n  /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */\n  protected removeStats(): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  /** Called by subclass to track memory allocations */\n  protected trackAllocatedMemory(bytes: number, name = this[Symbol.toStringTag]): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.allocatedBytes = bytes;\n  }\n\n  /** Called by subclass to track memory deallocations */\n  protected trackDeallocatedMemory(name = this[Symbol.toStringTag]): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').subtractCount(this.allocatedBytes);\n    stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);\n    this.allocatedBytes = 0;\n  }\n\n  /** Called by resource constructor to track object creation */\n  private addStats(): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n}\n\n/**\n * Combines a map of user props and default props, only including props from defaultProps\n * @param props\n * @param defaultProps\n * @returns returns a map of overridden default props\n */\nfunction selectivelyMerge<Props>(props: Props, defaultProps: Required<Props>): Required<Props> {\n  const mergedProps = {...defaultProps};\n  for (const key in props) {\n    if (props[key] !== undefined) {\n      mergedProps[key] = props[key];\n    }\n  }\n  return mergedProps;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}