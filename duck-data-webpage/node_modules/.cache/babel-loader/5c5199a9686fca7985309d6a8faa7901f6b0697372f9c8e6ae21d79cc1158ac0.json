{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ArrowLikeField } from \"./arrow-like-field.js\";\nexport class ArrowLikeSchema {\n  fields;\n  metadata;\n  constructor(fields, metadata = new Map()) {\n    // checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields.map(field => new ArrowLikeField(field.name, field.type, field.nullable, field.metadata));\n    this.metadata = metadata instanceof Map ? metadata : new Map(Object.entries(metadata));\n  }\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other) {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  select(...columnNames) {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter(field => nameMap[field.name]);\n    return new ArrowLikeSchema(selectedFields, this.metadata);\n  }\n  selectAt(...columnIndices) {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map(index => this.fields[index]).filter(Boolean);\n    return new ArrowLikeSchema(selectedFields, this.metadata);\n  }\n  assign(schemaOrFields) {\n    let fields;\n    let metadata = this.metadata;\n    if (schemaOrFields instanceof ArrowLikeSchema) {\n      const otherArrowLikeSchema = schemaOrFields;\n      fields = otherArrowLikeSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherArrowLikeSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap = Object.create(null);\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n    const mergedFields = Object.values(fieldMap);\n    return new ArrowLikeSchema(mergedFields, metadata);\n  }\n}\n// Warn if any duplicated field names\n// function checkNames(fields: Field[]): void {\n//   const usedNames: Record<string, boolean> = {};\n//   for (const field of fields) {\n//     if (usedNames[field.name]) {\n//       // eslint-disable-next-line\n//       console.warn('ArrowLikeSchema: duplicated field name', field.name, field);\n//     }\n//     usedNames[field.name] = true;\n//   }\n// }\nfunction mergeMaps(m1, m2) {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}