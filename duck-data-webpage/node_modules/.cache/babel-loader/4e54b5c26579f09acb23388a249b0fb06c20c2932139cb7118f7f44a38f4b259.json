{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { setGLParameters } from \"../parameters/unified-parameter-api.js\";\nimport { WebGLStateTracker } from \"./webgl-state-tracker.js\";\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withGLParameters(gl, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n  const {\n    nocatch = true\n  } = parameters;\n  const webglState = WebGLStateTracker.get(gl);\n  webglState.push();\n  setGLParameters(gl, parameters);\n  // Setup is done, call the function\n  let value;\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    webglState.pop();\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      webglState.pop();\n    }\n  }\n  return value;\n}\n// Helpers\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(object) {\n  // @ts-ignore - dummy key variable\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["setGLParameters","WebGLStateTracker","withGLParameters","gl","parameters","func","isObjectEmpty","nocatch","webglState","get","push","value","pop","object","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\context\\state-tracker\\with-parameters.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GLParameters, setGLParameters} from '../parameters/unified-parameter-api';\nimport {WebGLStateTracker} from './webgl-state-tracker';\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withGLParameters(\n  gl: WebGL2RenderingContext,\n  parameters: GLParameters & {nocatch?: boolean},\n  func: any\n): any {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  const webglState = WebGLStateTracker.get(gl);\n  webglState.push();\n  setGLParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    webglState.pop();\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      webglState.pop();\n    }\n  }\n\n  return value;\n}\n\n// Helpers\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(object) {\n  // @ts-ignore - dummy key variable\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAsBA,eAAe,QAAC;AACtC,SAAQC,iBAAiB,QAAC;AAE1B;;;;;;;;AAQA,OAAM,SAAUC,gBAAgBA,CAC9BC,EAA0B,EAC1BC,UAA8C,EAC9CC,IAAS;EAET,IAAIC,aAAa,CAACF,UAAU,CAAC,EAAE;IAC7B;IACA,OAAOC,IAAI,CAACF,EAAE,CAAC;EACjB;EAEA,MAAM;IAACI,OAAO,GAAG;EAAI,CAAC,GAAGH,UAAU;EAEnC,MAAMI,UAAU,GAAGP,iBAAiB,CAACQ,GAAG,CAACN,EAAE,CAAC;EAC5CK,UAAU,CAACE,IAAI,EAAE;EACjBV,eAAe,CAACG,EAAE,EAAEC,UAAU,CAAC;EAE/B;EACA,IAAIO,KAAK;EAET,IAAIJ,OAAO,EAAE;IACX;IACAI,KAAK,GAAGN,IAAI,CAACF,EAAE,CAAC;IAChBK,UAAU,CAACI,GAAG,EAAE;EAClB,CAAC,MAAM;IACL;IACA,IAAI;MACFD,KAAK,GAAGN,IAAI,CAACF,EAAE,CAAC;IAClB,CAAC,SAAS;MACRK,UAAU,CAACI,GAAG,EAAE;IAClB;EACF;EAEA,OAAOD,KAAK;AACd;AAEA;AAEA;AACA,SAASL,aAAaA,CAACO,MAAM;EAC3B;EACA,KAAK,MAAMC,GAAG,IAAID,MAAM,EAAE;IACxB,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}