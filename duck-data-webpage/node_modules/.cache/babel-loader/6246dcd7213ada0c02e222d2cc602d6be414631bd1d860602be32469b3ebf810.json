{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// import {normalizeAttributeMap} from '../helpers/attribute-bindings';\nimport { Resource } from \"./resource.js\";\n/**\n * A compiled and linked shader program\n */\nexport class RenderPipeline extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    vs: null,\n    vertexEntryPoint: 'vertexMain',\n    vsConstants: {},\n    fs: null,\n    fragmentEntryPoint: 'fragmentMain',\n    fsConstants: {},\n    shaderLayout: null,\n    bufferLayout: [],\n    topology: 'triangle-list',\n    parameters: {},\n    // isInstanced: false,\n    // instanceCount: 0,\n    // vertexCount: 0,\n    bindings: {},\n    uniforms: {}\n  };\n  get [Symbol.toStringTag]() {\n    return 'RenderPipeline';\n  }\n  /** The merged layout */\n  shaderLayout;\n  /** Buffer map describing buffer interleaving etc */\n  bufferLayout;\n  /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */\n  linkStatus = 'pending';\n  /** The hash of the pipeline */\n  hash = '';\n  constructor(device, props) {\n    super(device, props, RenderPipeline.defaultProps);\n    this.shaderLayout = this.props.shaderLayout;\n    this.bufferLayout = this.props.bufferLayout || [];\n  }\n  // DEPRECATED METHODS\n  /**\n   * Uniforms\n   * @deprecated Use uniforms buffers\n   * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.\n   * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.\n   */\n  setUniformsWebGL(uniforms) {\n    throw new Error('Use uniform blocks');\n  }\n}","map":{"version":3,"names":["Resource","RenderPipeline","defaultProps","vs","vertexEntryPoint","vsConstants","fs","fragmentEntryPoint","fsConstants","shaderLayout","bufferLayout","topology","parameters","bindings","uniforms","Symbol","toStringTag","linkStatus","hash","constructor","device","props","setUniformsWebGL","Error"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\render-pipeline.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport type {UniformValue} from '../types/uniforms';\nimport type {PrimitiveTopology, RenderPipelineParameters} from '../types/parameters';\nimport type {ShaderLayout, Binding} from '../types/shader-layout';\nimport type {BufferLayout} from '../types/buffer-layout';\n// import {normalizeAttributeMap} from '../helpers/attribute-bindings';\nimport {Resource, ResourceProps} from './resource';\nimport type {Shader} from './shader';\nimport type {RenderPass} from './render-pass';\nimport {VertexArray} from './vertex-array';\nimport {TransformFeedback} from './transform-feedback';\n\nexport type RenderPipelineProps = ResourceProps & {\n  // Shaders and shader layout\n\n  /** Compiled vertex shader */\n  vs?: Shader | null;\n  /** Name of vertex shader stage main function (defaults to 'main'). WGSL only */\n  vertexEntryPoint?: string; //\n  /** Constant values to apply to compiled vertex shader. Do not require re-compilation. (WGSL only) */\n  vsConstants?: Record<string, number>; // WGSL only\n  /** Compiled fragment shader */\n  fs?: Shader | null;\n  /** Name of fragment shader stage main function (defaults to 'main'). WGSL only */\n  fragmentEntryPoint?: string; // WGSL only\n  /** Constant values to apply to compiled fragment shader. Do not require re-compilation. (WGSL only) */\n  fsConstants?: Record<string, number>;\n\n  /** Describes the attributes and bindings exposed by the pipeline shader(s). */\n  shaderLayout?: ShaderLayout | null;\n  /** Describes the buffers accepted by this pipeline and how they are mapped to shader attributes. */\n  bufferLayout?: BufferLayout[]; // Record<string, Omit<BufferLayout, 'name'>\n\n  /** Determines how vertices are read from the 'vertex' attributes */\n  topology?: PrimitiveTopology;\n  /** Parameters that are controlled by pipeline */\n  parameters?: RenderPipelineParameters;\n\n  // /** Use instanced rendering? */\n  // isInstanced?: boolean;\n  // /** Number of instances */\n  // instanceCount?: number;\n  // /** Number of vertices */\n  // vertexCount?: number;\n\n  /** Buffers, Textures, Samplers for the shader bindings */\n  bindings?: Record<string, Binding>;\n  /** @deprecated uniforms (WebGL only) */\n  uniforms?: Record<string, UniformValue>;\n};\n\n/**\n * A compiled and linked shader program\n */\nexport abstract class RenderPipeline extends Resource<RenderPipelineProps> {\n  static override defaultProps: Required<RenderPipelineProps> = {\n    ...Resource.defaultProps,\n\n    vs: null,\n    vertexEntryPoint: 'vertexMain',\n    vsConstants: {},\n\n    fs: null,\n    fragmentEntryPoint: 'fragmentMain',\n    fsConstants: {},\n\n    shaderLayout: null,\n    bufferLayout: [],\n    topology: 'triangle-list',\n    parameters: {},\n\n    // isInstanced: false,\n    // instanceCount: 0,\n    // vertexCount: 0,\n\n    bindings: {},\n    uniforms: {}\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'RenderPipeline';\n  }\n\n  abstract readonly vs: Shader;\n  abstract readonly fs: Shader | null;\n\n  /** The merged layout */\n  shaderLayout: ShaderLayout;\n  /** Buffer map describing buffer interleaving etc */\n  readonly bufferLayout: BufferLayout[];\n  /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */\n  linkStatus: 'pending' | 'success' | 'error' = 'pending';\n  /** The hash of the pipeline */\n  hash: string = '';\n\n  constructor(device: Device, props: RenderPipelineProps) {\n    super(device, props, RenderPipeline.defaultProps);\n    this.shaderLayout = this.props.shaderLayout!;\n    this.bufferLayout = this.props.bufferLayout || [];\n  }\n\n  /** Set bindings (stored on pipeline and set before each call) */\n  abstract setBindings(\n    bindings: Record<string, Binding>,\n    options?: {disableWarnings?: boolean}\n  ): void;\n\n  /** Draw call. Returns false if the draw call was aborted (due to resources still initializing) */\n  abstract draw(options: {\n    /** Render pass to draw into (targeting screen or framebuffer) */\n    renderPass?: RenderPass;\n    /** Parameters to be set during draw call. Note that most parameters can only be overridden in WebGL. */\n    parameters?: RenderPipelineParameters;\n    /** Topology. Note can only be overridden in WebGL. */\n    topology?: PrimitiveTopology;\n    /** vertex attributes */\n    vertexArray: VertexArray;\n    /** Use instanced rendering? */\n    isInstanced?: boolean;\n    /** Number of \"rows\" in 'instance' buffers */\n    instanceCount?: number;\n    /** Number of \"rows\" in 'vertex' buffers */\n    vertexCount?: number;\n    /** Number of \"rows\" in index buffer */\n    indexCount?: number;\n    /** First vertex to draw from */\n    firstVertex?: number;\n    /** First index to draw from */\n    firstIndex?: number;\n    /** First instance to draw from */\n    firstInstance?: number;\n    baseVertex?: number;\n    /** Transform feedback. WebGL only. */\n    transformFeedback?: TransformFeedback;\n  }): boolean;\n\n  // DEPRECATED METHODS\n\n  /**\n   * Uniforms\n   * @deprecated Use uniforms buffers\n   * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.\n   * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.\n   */\n  setUniformsWebGL(uniforms: Record<string, UniformValue>): void {\n    throw new Error('Use uniform blocks');\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAOA;AACA,SAAQA,QAAQ,QAAgB;AA6ChC;;;AAGA,OAAM,MAAgBC,cAAe,SAAQD,QAA6B;EACxE,OAAgBE,YAAY,GAAkC;IAC5D,GAAGF,QAAQ,CAACE,YAAY;IAExBC,EAAE,EAAE,IAAI;IACRC,gBAAgB,EAAE,YAAY;IAC9BC,WAAW,EAAE,EAAE;IAEfC,EAAE,EAAE,IAAI;IACRC,kBAAkB,EAAE,cAAc;IAClCC,WAAW,EAAE,EAAE;IAEfC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,eAAe;IACzBC,UAAU,EAAE,EAAE;IAEd;IACA;IACA;IAEAC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;GACX;EAED,KAAcC,MAAM,CAACC,WAAW,IAAC;IAC/B,OAAO,gBAAgB;EACzB;EAKA;EACAP,YAAY;EACZ;EACSC,YAAY;EACrB;EACAO,UAAU,GAAoC,SAAS;EACvD;EACAC,IAAI,GAAW,EAAE;EAEjBC,YAAYC,MAAc,EAAEC,KAA0B;IACpD,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEpB,cAAc,CAACC,YAAY,CAAC;IACjD,IAAI,CAACO,YAAY,GAAG,IAAI,CAACY,KAAK,CAACZ,YAAa;IAC5C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACW,KAAK,CAACX,YAAY,IAAI,EAAE;EACnD;EAqCA;EAEA;;;;;;EAMAY,gBAAgBA,CAACR,QAAsC;IACrD,MAAM,IAAIS,KAAK,CAAC,oBAAoB,CAAC;EACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}