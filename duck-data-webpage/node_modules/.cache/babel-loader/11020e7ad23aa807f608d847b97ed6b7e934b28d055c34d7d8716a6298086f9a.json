{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Array containing all encodings */\nconst GEOARROW_ENCODINGS = ['geoarrow.multipolygon', 'geoarrow.polygon', 'geoarrow.multilinestring', 'geoarrow.linestring', 'geoarrow.multipoint', 'geoarrow.point', 'geoarrow.wkb', 'geoarrow.wkt'];\nconst GEOARROW_COLUMN_METADATA_ENCODING = 'ARROW:extension:name';\nconst GEOARROW_COLUMN_METADATA_METADATA = 'ARROW:extension:metadata';\n/**\n * get geometry columns from arrow table\n */\nexport function getGeometryColumnsFromSchema(schema) {\n  const geometryColumns = {};\n  for (const field of schema.fields) {\n    const metadata = getGeometryMetadataForField(field);\n    if (metadata) {\n      geometryColumns[field.name] = metadata;\n    }\n  }\n  return geometryColumns;\n}\n/**\n * Extracts GeoArrow metadata from a field\n * @param field\n * @returns\n * @see https://github.com/geoarrow/geoarrow/blob/d2f56704414d9ae71e8a5170a8671343ed15eefe/extension-types.md\n */\nexport function getGeometryMetadataForField(field) {\n  let metadata = null;\n  // Check for GeoArrow column encoding\n  let geoEncoding = field.metadata?.[GEOARROW_COLUMN_METADATA_ENCODING];\n  if (geoEncoding) {\n    geoEncoding = geoEncoding.toLowerCase();\n    // at time of testing, ogr2ogr uses WKB/WKT for encoding.\n    if (geoEncoding === 'wkb') {\n      geoEncoding = 'geoarrow.wkb';\n    }\n    if (geoEncoding === 'wkt') {\n      geoEncoding = 'geoarrow.wkt';\n    }\n    if (!GEOARROW_ENCODINGS.includes(geoEncoding)) {\n      // eslint-disable-next-line no-console\n      console.warn(`Invalid GeoArrow encoding: ${geoEncoding}`);\n    } else {\n      metadata = metadata || {};\n      metadata.encoding = geoEncoding;\n    }\n  }\n  // Check for GeoArrow metadata\n  const columnMetadata = field.metadata?.[GEOARROW_COLUMN_METADATA_METADATA];\n  if (columnMetadata) {\n    try {\n      metadata = JSON.parse(columnMetadata);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn('Failed to parse GeoArrow metadata', error);\n    }\n  }\n  return metadata || null;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}