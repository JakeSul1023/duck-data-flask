{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\n/** Immutable TextureView object */\nexport class TextureView extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    format: undefined,\n    dimension: undefined,\n    aspect: 'all',\n    baseMipLevel: 0,\n    mipLevelCount: undefined,\n    baseArrayLayer: 0,\n    arrayLayerCount: undefined\n  };\n  get [Symbol.toStringTag]() {\n    return 'TextureView';\n  }\n  /** Should not be constructed directly. Use `texture.createView(props)` */\n  constructor(device, props) {\n    super(device, props, TextureView.defaultProps);\n  }\n}","map":{"version":3,"names":["Resource","TextureView","defaultProps","format","undefined","dimension","aspect","baseMipLevel","mipLevelCount","baseArrayLayer","arrayLayerCount","Symbol","toStringTag","constructor","device","props"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\texture-view.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport type {Texture} from './texture';\nimport type {TextureFormat} from '../../gpu-type-utils/texture-formats';\nimport {Resource, ResourceProps} from './resource';\n\n/** Properties for initializing a texture view */\nexport type TextureViewProps = ResourceProps & {\n  /** The format of the texture view. Must be either the format of the texture or one of the viewFormats specified during its creation. */\n  format?: TextureFormat;\n  /** The dimension to view the texture as. */\n  dimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  /** Which aspect(s) of the texture are accessible to the texture view. default \"all\"*/\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n  /** The first (most detailed) mipmap level accessible to the texture view.  default 0*/\n  baseMipLevel?: number;\n  /** How many mipmap levels, starting with baseMipLevel, are accessible to the texture view. */\n  mipLevelCount: number;\n  /** The index of the first array layer accessible to the texture view. default 0 */\n  baseArrayLayer?: number;\n  /** How many array layers, starting with baseArrayLayer, are accessible to the texture view. */\n  arrayLayerCount: number;\n};\n\n/** Immutable TextureView object */\nexport abstract class TextureView extends Resource<TextureViewProps> {\n  static override defaultProps: Required<TextureViewProps> = {\n    ...Resource.defaultProps,\n    format: undefined!,\n    dimension: undefined!,\n    aspect: 'all',\n    baseMipLevel: 0,\n    mipLevelCount: undefined!,\n    baseArrayLayer: 0,\n    arrayLayerCount: undefined!\n  };\n\n  abstract texture: Texture;\n\n  override get [Symbol.toStringTag](): string {\n    return 'TextureView';\n  }\n\n  /** Should not be constructed directly. Use `texture.createView(props)` */\n  constructor(device: Device, props: TextureViewProps & {texture: Texture}) {\n    super(device, props, TextureView.defaultProps);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAKA,SAAQA,QAAQ,QAAgB;AAoBhC;AACA,OAAM,MAAgBC,WAAY,SAAQD,QAA0B;EAClE,OAAgBE,YAAY,GAA+B;IACzD,GAAGF,QAAQ,CAACE,YAAY;IACxBC,MAAM,EAAEC,SAAU;IAClBC,SAAS,EAAED,SAAU;IACrBE,MAAM,EAAE,KAAK;IACbC,YAAY,EAAE,CAAC;IACfC,aAAa,EAAEJ,SAAU;IACzBK,cAAc,EAAE,CAAC;IACjBC,eAAe,EAAEN;GAClB;EAID,KAAcO,MAAM,CAACC,WAAW,IAAC;IAC/B,OAAO,aAAa;EACtB;EAEA;EACAC,YAAYC,MAAc,EAAEC,KAA4C;IACtE,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEd,WAAW,CAACC,YAAY,CAAC;EAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}