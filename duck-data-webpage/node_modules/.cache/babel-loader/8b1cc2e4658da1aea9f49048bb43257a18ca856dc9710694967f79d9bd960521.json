{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport WorkerFarm from \"../worker-farm/worker-farm.js\";\nimport { getWorkerURL, getWorkerName } from \"./get-worker-url.js\";\nimport { getTransferListForWriter } from \"../worker-utils/get-transfer-list.js\";\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  return worker.worker && options?.worker;\n}\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(worker, data, options = {}, context = {}) {\n  const name = getWorkerName(worker);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {\n    source\n  } = options;\n  const workerPoolProps = {\n    name,\n    source\n  };\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(jobName,\n  // eslint-disable-next-line\n  onMessage.bind(null, context));\n  // Kick off the processing in the worker\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {\n    input: data,\n    options: transferableOptions\n  });\n  const result = await job.result;\n  return result.result;\n}\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(context, job, type, payload) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {\n        id,\n        input,\n        options\n      } = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {\n            id,\n            error: 'Worker not set up to process on main thread'\n          });\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n      break;\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}","map":{"version":3,"names":["WorkerFarm","getWorkerURL","getWorkerName","getTransferListForWriter","canProcessOnWorker","worker","options","isSupported","processOnWorker","data","context","name","workerFarm","getWorkerFarm","source","workerPoolProps","url","workerPool","getWorkerPool","jobName","job","startJob","onMessage","bind","transferableOptions","postMessage","input","result","type","payload","done","error","Error","id","process","message","console","warn"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/process-on-worker.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport WorkerFarm from \"../worker-farm/worker-farm.js\";\nimport { getWorkerURL, getWorkerName } from \"./get-worker-url.js\";\nimport { getTransferListForWriter } from \"../worker-utils/get-transfer-list.js\";\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker, options) {\n    if (!WorkerFarm.isSupported()) {\n        return false;\n    }\n    return worker.worker && options?.worker;\n}\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(worker, data, options = {}, context = {}) {\n    const name = getWorkerName(worker);\n    const workerFarm = WorkerFarm.getWorkerFarm(options);\n    const { source } = options;\n    const workerPoolProps = { name, source };\n    if (!source) {\n        workerPoolProps.url = getWorkerURL(worker, options);\n    }\n    const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n    const jobName = options.jobName || worker.name;\n    const job = await workerPool.startJob(jobName, \n    // eslint-disable-next-line\n    onMessage.bind(null, context));\n    // Kick off the processing in the worker\n    const transferableOptions = getTransferListForWriter(options);\n    job.postMessage('process', { input: data, options: transferableOptions });\n    const result = await job.result;\n    return result.result;\n}\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(context, job, type, payload) {\n    switch (type) {\n        case 'done':\n            // Worker is done\n            job.done(payload);\n            break;\n        case 'error':\n            // Worker encountered an error\n            job.error(new Error(payload.error));\n            break;\n        case 'process':\n            // Worker is asking for us (main thread) to process something\n            const { id, input, options } = payload;\n            try {\n                if (!context.process) {\n                    job.postMessage('error', { id, error: 'Worker not set up to process on main thread' });\n                    return;\n                }\n                const result = await context.process(input, options);\n                job.postMessage('done', { id, result });\n            }\n            catch (error) {\n                const message = error instanceof Error ? error.message : 'unknown error';\n                job.postMessage('error', { id, error: message });\n            }\n            break;\n        default:\n            // eslint-disable-next-line\n            console.warn(`process-on-worker: unknown message ${type}`);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}