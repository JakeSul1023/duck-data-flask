{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ShaderAssembler } from '@luma.gl/shadertools';\nimport { gouraudLighting, phongLighting } from '@luma.gl/shadertools';\nimport { layerUniforms } from \"./misc/layer-uniforms.js\";\nimport geometry from \"./misc/geometry.js\";\nimport project from \"./project/project.js\";\nimport project32 from \"./project32/project32.js\";\nimport shadow from \"./shadow/shadow.js\";\nimport picking from \"./picking/picking.js\";\nconst DEFAULT_MODULES = [geometry];\nconst SHADER_HOOKS_GLSL = ['vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)', 'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)', 'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)', 'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'];\nconst SHADER_HOOKS_WGSL = [\n  // Not yet supported\n];\nexport function getShaderAssembler(language) {\n  const shaderAssembler = ShaderAssembler.getDefaultShaderAssembler();\n  for (const shaderModule of DEFAULT_MODULES) {\n    shaderAssembler.addDefaultModule(shaderModule);\n  }\n  // Add shader hooks based on language\n  // TODO(ibgreen) - should the luma shader assembler support both sets of hooks?\n  const shaderHooks = language === 'glsl' ? SHADER_HOOKS_GLSL : SHADER_HOOKS_WGSL;\n  for (const shaderHook of shaderHooks) {\n    shaderAssembler.addShaderHook(shaderHook);\n  }\n  return shaderAssembler;\n}\nexport { layerUniforms, picking, project, project32, gouraudLighting, phongLighting, shadow };","map":{"version":3,"names":["ShaderAssembler","gouraudLighting","phongLighting","layerUniforms","geometry","project","project32","shadow","picking","DEFAULT_MODULES","SHADER_HOOKS_GLSL","SHADER_HOOKS_WGSL","getShaderAssembler","language","shaderAssembler","getDefaultShaderAssembler","shaderModule","addDefaultModule","shaderHooks","shaderHook","addShaderHook"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\shaderlib\\index.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {ShaderAssembler} from '@luma.gl/shadertools';\n\nimport {gouraudLighting, phongLighting} from '@luma.gl/shadertools';\nimport {layerUniforms} from './misc/layer-uniforms';\nimport geometry from './misc/geometry';\nimport project from './project/project';\nimport project32 from './project32/project32';\nimport shadow from './shadow/shadow';\nimport picking from './picking/picking';\n\nconst DEFAULT_MODULES = [geometry];\n\nconst SHADER_HOOKS_GLSL = [\n  'vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)',\n  'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)',\n  'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)',\n  'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'\n];\n\nconst SHADER_HOOKS_WGSL = [\n  // Not yet supported\n];\n\nexport function getShaderAssembler(language: 'glsl' | 'wgsl'): ShaderAssembler {\n  const shaderAssembler = ShaderAssembler.getDefaultShaderAssembler();\n\n  for (const shaderModule of DEFAULT_MODULES) {\n    shaderAssembler.addDefaultModule(shaderModule);\n  }\n\n  // Add shader hooks based on language\n  // TODO(ibgreen) - should the luma shader assembler support both sets of hooks?\n  const shaderHooks = language === 'glsl' ? SHADER_HOOKS_GLSL : SHADER_HOOKS_WGSL;\n  for (const shaderHook of shaderHooks) {\n    shaderAssembler.addShaderHook(shaderHook);\n  }\n\n  return shaderAssembler;\n}\n\nexport {layerUniforms, picking, project, project32, gouraudLighting, phongLighting, shadow};\n\n// Useful for custom shader modules\nexport type {ProjectProps, ProjectUniforms} from './project/viewport-uniforms';\n\n// TODO - these should be imported from luma.gl\n/* eslint-disable camelcase */\nexport type PickingUniforms = {\n  picking_uActive: boolean;\n  picking_uAttribute: boolean;\n  picking_uSelectedColor: [number, number, number];\n  picking_uSelectedColorValid: boolean;\n  picking_uHighlightColor: [number, number, number, number];\n};\n\nexport type LightingModuleSettings = {\n  material:\n    | boolean\n    | {\n        ambient?: number;\n        diffuse?: number;\n        shininess?: number;\n        specularColor?: [number, number, number];\n      };\n};\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,eAAe,QAAO,sBAAsB;AAEpD,SAAQC,eAAe,EAAEC,aAAa,QAAO,sBAAsB;AACnE,SAAQC,aAAa,QAAC;AACtB,OAAOC,QAAQ;AACf,OAAOC,OAAO;AACd,OAAOC,SAAS;AAChB,OAAOC,MAAM;AACb,OAAOC,OAAO;AAEd,MAAMC,eAAe,GAAG,CAACL,QAAQ,CAAC;AAElC,MAAMM,iBAAiB,GAAG,CACxB,iEAAiE,EACjE,4EAA4E,EAC5E,mEAAmE,EACnE,qEAAqE,CACtE;AAED,MAAMC,iBAAiB,GAAG;EACxB;AAAA,CACD;AAED,OAAM,SAAUC,kBAAkBA,CAACC,QAAyB;EAC1D,MAAMC,eAAe,GAAGd,eAAe,CAACe,yBAAyB,EAAE;EAEnE,KAAK,MAAMC,YAAY,IAAIP,eAAe,EAAE;IAC1CK,eAAe,CAACG,gBAAgB,CAACD,YAAY,CAAC;EAChD;EAEA;EACA;EACA,MAAME,WAAW,GAAGL,QAAQ,KAAK,MAAM,GAAGH,iBAAiB,GAAGC,iBAAiB;EAC/E,KAAK,MAAMQ,UAAU,IAAID,WAAW,EAAE;IACpCJ,eAAe,CAACM,aAAa,CAACD,UAAU,CAAC;EAC3C;EAEA,OAAOL,eAAe;AACxB;AAEA,SAAQX,aAAa,EAAEK,OAAO,EAAEH,OAAO,EAAEC,SAAS,EAAEL,eAAe,EAAEC,aAAa,EAAEK,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}