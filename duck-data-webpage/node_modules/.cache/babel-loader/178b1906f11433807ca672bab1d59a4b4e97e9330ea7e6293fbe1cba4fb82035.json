{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ClipSpace } from \"./clip-space.js\";\nconst BACKGROUND_FS_WGSL = /* wgsl */`\\\n@group(0) @binding(0) var backgroundTexture: texture_2d<f32>;\n@group(0) @binding(1) var backgroundTextureSampler: sampler;\n\nfn billboardTexture_getTextureUV(coordinates: vec2<f32>) -> vec2<f32> {\n\tlet iTexSize: vec2<u32> = textureDimensions(backgroundTexture, 0) * 2;\n\tlet texSize: vec2<f32> = vec2<f32>(f32(iTexSize.x), f32(iTexSize.y));\n\tvar position: vec2<f32> = coordinates.xy / texSize;\n\treturn position;\n} \n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n\tlet position: vec2<f32> = billboardTexture_getTextureUV(inputs.coordinate);\n\treturn textureSample(backgroundTexture, backgroundTextureSampler, position);\n}\n`;\nconst BACKGROUND_FS = /* glsl */`\\\n#version 300 es\nprecision highp float;\n\nuniform sampler2D backgroundTexture;\nout vec4 fragColor;\n\nvec2 billboardTexture_getTextureUV() {\n  ivec2 iTexSize = textureDimensions(backgroundTexture, 0) * 2;\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n  vec2 position = gl_FragCoord.xy / texSize;\n  return position;\n}\n\nvoid main(void) {\n  vec2 position = billboardTexture_getTextureUV();\n  fragColor = texture(backgroundTexture, position);\n}\n`;\n/**\n * Model that renders a bitmap into the \"background\", i.e covering the screen\n */\nexport class BackgroundTextureModel extends ClipSpace {\n  constructor(device, props) {\n    super(device, {\n      id: props.id || 'background-texture-model',\n      source: BACKGROUND_FS_WGSL,\n      fs: BACKGROUND_FS,\n      parameters: {\n        depthWriteEnabled: false,\n        depthCompare: 'always',\n        ...(props.blend ? {\n          blend: true,\n          blendColorOperation: 'add',\n          blendAlphaOperation: 'add',\n          blendColorSrcFactor: 'one',\n          blendColorDstFactor: 'one-minus-src-color',\n          blendAlphaSrcFactor: 'one',\n          blendAlphaDstFactor: 'one-minus-src-alpha'\n        } : {})\n      }\n    });\n    this.setTexture(props.backgroundTexture);\n  }\n  setTexture(backgroundTexture) {\n    this.setBindings({\n      backgroundTexture\n    });\n  }\n  predraw() {\n    this.shaderInputs.setProps({});\n    super.predraw();\n  }\n}\n//# sourceMappingURL=billboard-texture-model.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}