{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport GeoCellLayer from \"../geo-cell-layer/GeoCellLayer.js\";\nimport { getS2Polygon } from \"./s2-utils.js\";\nconst defaultProps = {\n  getS2Token: {\n    type: 'accessor',\n    value: d => d.token\n  }\n};\n/** Render filled and/or stroked polygons based on the [S2](http://s2geometry.io/) geospatial indexing system. */\nclass S2Layer extends GeoCellLayer {\n  indexToBounds() {\n    const {\n      data,\n      getS2Token\n    } = this.props;\n    return {\n      data,\n      _normalize: false,\n      positionFormat: 'XY',\n      getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n    };\n  }\n}\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\nexport default S2Layer;","map":{"version":3,"names":["GeoCellLayer","getS2Polygon","defaultProps","getS2Token","type","value","d","token","S2Layer","indexToBounds","data","props","_normalize","positionFormat","getPolygon","x","objectInfo","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\s2-layer\\s2-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {AccessorFunction, DefaultProps} from '@deck.gl/core';\nimport GeoCellLayer, {GeoCellLayerProps} from '../geo-cell-layer/GeoCellLayer';\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps: DefaultProps<S2LayerProps> = {\n  getS2Token: {type: 'accessor', value: (d: any) => d.token}\n};\n\n/** All properties supported by S2Layer. */\nexport type S2LayerProps<DataT = unknown> = _S2LayerProps<DataT> & GeoCellLayerProps<DataT>;\n\n/** Properties added by S2Layer. */\ntype _S2LayerProps<DataT> = {\n  /**\n   * Called for each data object to retrieve the quadkey string identifier.\n   *\n   * By default, it reads `token` property of data object.\n   */\n  getS2Token?: AccessorFunction<DataT, string>;\n};\n\n/** Render filled and/or stroked polygons based on the [S2](http://s2geometry.io/) geospatial indexing system. */\nexport default class S2Layer<DataT = any, ExtraProps extends {} = {}> extends GeoCellLayer<\n  DataT,\n  Required<_S2LayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'S2Layer';\n  static defaultProps = defaultProps;\n\n  indexToBounds(): Partial<GeoCellLayer['props']> | null {\n    const {data, getS2Token} = this.props;\n\n    return {\n      data,\n      _normalize: false,\n      positionFormat: 'XY',\n      getPolygon: (x: DataT, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n    };\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,OAAOA,YAAiC;AACxC,SAAQC,YAAY,QAAC;AAErB,MAAMC,YAAY,GAA+B;EAC/CC,UAAU,EAAE;IAACC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAGC,CAAM,IAAKA,CAAC,CAACC;EAAK;CAC1D;AAeD;AACA,MAAqBC,OAAiD,SAAQR,YAG7E;EAICS,aAAaA,CAAA;IACX,MAAM;MAACC,IAAI;MAAEP;IAAU,CAAC,GAAG,IAAI,CAACQ,KAAK;IAErC,OAAO;MACLD,IAAI;MACJE,UAAU,EAAE,KAAK;MACjBC,cAAc,EAAE,IAAI;MACpBC,UAAU,EAAEA,CAACC,CAAQ,EAAEC,UAAU,KAAKf,YAAY,CAACE,UAAU,CAACY,CAAC,EAAEC,UAAU,CAAC;KAC7E;EACH;;AAZOR,OAAA,CAAAS,SAAS,GAAG,SAAS;AACrBT,OAAA,CAAAN,YAAY,GAAGA,YAAY;eALfM,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}