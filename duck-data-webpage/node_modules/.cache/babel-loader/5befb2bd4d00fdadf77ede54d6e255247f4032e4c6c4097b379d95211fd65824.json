{"ast":null,"code":"// @eslint-disable\n// @ts-nocheck\nimport * as glMatrix from './common.js';\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * symmetric round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  out[3] = glMatrix.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\nexport function cross(out, u, v, w) {\n  const A = v[0] * w[1] - v[1] * w[0];\n  const B = v[0] * w[2] - v[2] * w[0];\n  const C = v[0] * w[3] - v[3] * w[0];\n  const D = v[1] * w[2] - v[2] * w[1];\n  const E = v[1] * w[3] - v[3] * w[1];\n  const F = v[2] * w[3] - v[3] * w[2];\n  const G = u[0];\n  const H = u[1];\n  const I = u[2];\n  const J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  let v1;\n  let v2;\n  let v3;\n  let v4;\n  let s1;\n  let s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n  const d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n  // calculate quat * vec\n  const ix = qw * x + qy * z - qz * y;\n  const iy = qw * y + qz * x - qx * z;\n  const iz = qw * z + qx * y - qy * x;\n  const iw = -qx * x - qy * y - qz * z;\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = function () {\n  const vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 4;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n    return a;\n  };\n}();","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","z","w","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","sqrt","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","cross","u","v","A","B","C","D","E","F","G","H","I","J","lerp","t","ax","ay","az","aw","random","undefined","v1","v2","v3","v4","s1","s2","RANDOM","d","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","zero","str","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\gl-matrix\\vec4.ts"],"sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  out[3] = glMatrix.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\nexport function cross(out, u, v, w) {\n  const A = v[0] * w[1] - v[1] * w[0];\n  const B = v[0] * w[2] - v[2] * w[0];\n  const C = v[0] * w[3] - v[3] * w[0];\n  const D = v[1] * w[2] - v[2] * w[1];\n  const E = v[1] * w[3] - v[3] * w[1];\n  const F = v[2] * w[3] - v[3] * w[2];\n  const G = u[0];\n  const H = u[1];\n  const I = u[2];\n  const J = u[3];\n\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  let v1;\n  let v2;\n  let v3;\n  let v4;\n  let s1;\n  let s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  const d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  // calculate quat * vec\n  const ix = qw * x + qy * z - qz * y;\n  const iy = qw * y + qz * x - qx * z;\n  const iz = qw * z + qx * y - qy * x;\n  const iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n  );\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}