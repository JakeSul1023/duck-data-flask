{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { _LayersPass as LayersPass } from '@deck.gl/core';\nconst MASK_BLENDING = {\n  blendColorOperation: 'subtract',\n  blendColorSrcFactor: 'zero',\n  blendColorDstFactor: 'one',\n  blendAlphaOperation: 'subtract',\n  blendAlphaSrcFactor: 'zero',\n  blendAlphaDstFactor: 'one'\n};\nexport default class MaskPass extends LayersPass {\n  constructor(device, props) {\n    super(device, props);\n    const {\n      mapSize = 2048\n    } = props;\n    this.maskMap = device.createTexture({\n      format: 'rgba8unorm',\n      width: mapSize,\n      height: mapSize,\n      sampler: {\n        minFilter: 'linear',\n        magFilter: 'linear',\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge'\n      }\n    });\n    this.fbo = device.createFramebuffer({\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      colorAttachments: [this.maskMap]\n    });\n  }\n  render(options) {\n    const colorMask = 2 ** options.channel;\n    const clearColor = [255, 255, 255, 255];\n    super.render({\n      ...options,\n      clearColor,\n      colorMask,\n      target: this.fbo,\n      pass: 'mask'\n    });\n  }\n  getLayerParameters(layer, layerIndex, viewport) {\n    return {\n      ...layer.props.parameters,\n      blend: true,\n      depthCompare: 'always',\n      ...MASK_BLENDING\n    };\n  }\n  shouldDrawLayer(layer) {\n    return layer.props.operation.includes('mask');\n  }\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n}\n//# sourceMappingURL=mask-pass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}