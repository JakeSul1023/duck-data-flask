{"ast":null,"code":"/**\n * Provides file data using range requests to the server\n * @deprecated - will be replaced with ReadableFile\n */\nexport class FileProvider {\n  /** The File object from which data is provided */\n  file;\n  size;\n  /** Create a new BrowserFile */\n  constructor(file, size) {\n    this.file = file;\n    this.size = BigInt(size);\n  }\n  static async create(file) {\n    let size = 0n;\n    if (file.bigsize > 0n) {\n      size = file.bigsize;\n    } else if (file.size > 0) {\n      size = file.size;\n    } else {\n      const stats = await file.stat?.();\n      size = stats?.bigsize ?? 0n;\n    }\n    return new FileProvider(file, size);\n  }\n  /**\n   * Truncates the file descriptor.\n   * @param length desired file lenght\n   */\n  async truncate(length) {\n    throw new Error('file loaded via range requests cannot be changed');\n  }\n  /**\n   * Append data to a file.\n   * @param buffer data to append\n   */\n  async append(buffer) {\n    throw new Error('file loaded via range requests cannot be changed');\n  }\n  /** Close file */\n  async destroy() {\n    throw new Error('file loaded via range requests cannot be changed');\n  }\n  /**\n   * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint8(offset) {\n    const arrayBuffer = await this.file.read(offset, 1);\n    const val = new Uint8Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 16-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint16(offset) {\n    const arrayBuffer = await this.file.read(offset, 2);\n    const val = new Uint16Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint32(offset) {\n    const arrayBuffer = await this.file.read(offset, 4);\n    const val = new Uint32Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getBigUint64(offset) {\n    const arrayBuffer = await this.file.read(offset, 8);\n    const val = new BigInt64Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in byte, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  async slice(startOffset, endOffset) {\n    const bigLength = BigInt(endOffset) - BigInt(startOffset);\n    if (bigLength > Number.MAX_SAFE_INTEGER) {\n      throw new Error('too big slice');\n    }\n    const length = Number(bigLength);\n    return await this.file.read(startOffset, length);\n  }\n  /**\n   * the length (in bytes) of the data.\n   */\n  get length() {\n    return this.size;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}