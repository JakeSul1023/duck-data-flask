{"ast":null,"code":"// The MIT License (MIT)\n//\n// Copyright (c) 2016 Zhipeng Jia\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n'use strict';\n\nvar WORD_MASK = [0, 0xff, 0xffff, 0xffffff, 0xffffffff];\nfunction copyBytes(fromArray, fromPos, toArray, toPos, length) {\n  var i;\n  for (i = 0; i < length; i++) {\n    toArray[toPos + i] = fromArray[fromPos + i];\n  }\n}\nfunction selfCopyBytes(array, pos, offset, length) {\n  var i;\n  for (i = 0; i < length; i++) {\n    array[pos + i] = array[pos - offset + i];\n  }\n}\nfunction SnappyDecompressor(compressed) {\n  this.array = compressed;\n  this.pos = 0;\n}\nSnappyDecompressor.prototype.readUncompressedLength = function () {\n  var result = 0;\n  var shift = 0;\n  var c, val;\n  while (shift < 32 && this.pos < this.array.length) {\n    c = this.array[this.pos];\n    this.pos += 1;\n    val = c & 0x7f;\n    if (val << shift >>> shift !== val) {\n      return -1;\n    }\n    result |= val << shift;\n    if (c < 128) {\n      return result;\n    }\n    shift += 7;\n  }\n  return -1;\n};\nSnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {\n  var array = this.array;\n  var arrayLength = array.length;\n  var pos = this.pos;\n  var outPos = 0;\n  var c, len, smallLen;\n  var offset;\n  while (pos < array.length) {\n    c = array[pos];\n    pos += 1;\n    if ((c & 0x3) === 0) {\n      // Literal\n      len = (c >>> 2) + 1;\n      if (len > 60) {\n        if (pos + 3 >= arrayLength) {\n          return false;\n        }\n        smallLen = len - 60;\n        len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24);\n        len = (len & WORD_MASK[smallLen]) + 1;\n        pos += smallLen;\n      }\n      if (pos + len > arrayLength) {\n        return false;\n      }\n      copyBytes(array, pos, outBuffer, outPos, len);\n      pos += len;\n      outPos += len;\n    } else {\n      switch (c & 0x3) {\n        case 1:\n          len = (c >>> 2 & 0x7) + 4;\n          offset = array[pos] + (c >>> 5 << 8);\n          pos += 1;\n          break;\n        case 2:\n          if (pos + 1 >= arrayLength) {\n            return false;\n          }\n          len = (c >>> 2) + 1;\n          offset = array[pos] + (array[pos + 1] << 8);\n          pos += 2;\n          break;\n        case 3:\n          if (pos + 3 >= arrayLength) {\n            return false;\n          }\n          len = (c >>> 2) + 1;\n          offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24);\n          pos += 4;\n          break;\n        default:\n          break;\n      }\n      if (offset === 0 || offset > outPos) {\n        return false;\n      }\n      selfCopyBytes(outBuffer, outPos, offset, len);\n      outPos += len;\n    }\n  }\n  return true;\n};\nexports.SnappyDecompressor = SnappyDecompressor;","map":{"version":3,"names":["WORD_MASK","copyBytes","fromArray","fromPos","toArray","toPos","length","i","selfCopyBytes","array","pos","offset","SnappyDecompressor","compressed","prototype","readUncompressedLength","result","shift","c","val","uncompressToBuffer","outBuffer","arrayLength","outPos","len","smallLen","exports"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/snappyjs/snappy_decompressor.js"],"sourcesContent":["// The MIT License (MIT)\n//\n// Copyright (c) 2016 Zhipeng Jia\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n'use strict'\n\nvar WORD_MASK = [0, 0xff, 0xffff, 0xffffff, 0xffffffff]\n\nfunction copyBytes (fromArray, fromPos, toArray, toPos, length) {\n  var i\n  for (i = 0; i < length; i++) {\n    toArray[toPos + i] = fromArray[fromPos + i]\n  }\n}\n\nfunction selfCopyBytes (array, pos, offset, length) {\n  var i\n  for (i = 0; i < length; i++) {\n    array[pos + i] = array[pos - offset + i]\n  }\n}\n\nfunction SnappyDecompressor (compressed) {\n  this.array = compressed\n  this.pos = 0\n}\n\nSnappyDecompressor.prototype.readUncompressedLength = function () {\n  var result = 0\n  var shift = 0\n  var c, val\n  while (shift < 32 && this.pos < this.array.length) {\n    c = this.array[this.pos]\n    this.pos += 1\n    val = c & 0x7f\n    if (((val << shift) >>> shift) !== val) {\n      return -1\n    }\n    result |= val << shift\n    if (c < 128) {\n      return result\n    }\n    shift += 7\n  }\n  return -1\n}\n\nSnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {\n  var array = this.array\n  var arrayLength = array.length\n  var pos = this.pos\n  var outPos = 0\n\n  var c, len, smallLen\n  var offset\n\n  while (pos < array.length) {\n    c = array[pos]\n    pos += 1\n    if ((c & 0x3) === 0) {\n      // Literal\n      len = (c >>> 2) + 1\n      if (len > 60) {\n        if (pos + 3 >= arrayLength) {\n          return false\n        }\n        smallLen = len - 60\n        len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\n        len = (len & WORD_MASK[smallLen]) + 1\n        pos += smallLen\n      }\n      if (pos + len > arrayLength) {\n        return false\n      }\n      copyBytes(array, pos, outBuffer, outPos, len)\n      pos += len\n      outPos += len\n    } else {\n      switch (c & 0x3) {\n        case 1:\n          len = ((c >>> 2) & 0x7) + 4\n          offset = array[pos] + ((c >>> 5) << 8)\n          pos += 1\n          break\n        case 2:\n          if (pos + 1 >= arrayLength) {\n            return false\n          }\n          len = (c >>> 2) + 1\n          offset = array[pos] + (array[pos + 1] << 8)\n          pos += 2\n          break\n        case 3:\n          if (pos + 3 >= arrayLength) {\n            return false\n          }\n          len = (c >>> 2) + 1\n          offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\n          pos += 4\n          break\n        default:\n          break\n      }\n      if (offset === 0 || offset > outPos) {\n        return false\n      }\n      selfCopyBytes(outBuffer, outPos, offset, len)\n      outPos += len\n    }\n  }\n  return true\n}\n\nexports.SnappyDecompressor = SnappyDecompressor\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC;AAEvD,SAASC,SAASA,CAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC9D,IAAIC,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC3BH,OAAO,CAACC,KAAK,GAAGE,CAAC,CAAC,GAAGL,SAAS,CAACC,OAAO,GAAGI,CAAC,CAAC;EAC7C;AACF;AAEA,SAASC,aAAaA,CAAEC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEL,MAAM,EAAE;EAClD,IAAIC,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC3BE,KAAK,CAACC,GAAG,GAAGH,CAAC,CAAC,GAAGE,KAAK,CAACC,GAAG,GAAGC,MAAM,GAAGJ,CAAC,CAAC;EAC1C;AACF;AAEA,SAASK,kBAAkBA,CAAEC,UAAU,EAAE;EACvC,IAAI,CAACJ,KAAK,GAAGI,UAAU;EACvB,IAAI,CAACH,GAAG,GAAG,CAAC;AACd;AAEAE,kBAAkB,CAACE,SAAS,CAACC,sBAAsB,GAAG,YAAY;EAChE,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,CAAC,EAAEC,GAAG;EACV,OAAOF,KAAK,GAAG,EAAE,IAAI,IAAI,CAACP,GAAG,GAAG,IAAI,CAACD,KAAK,CAACH,MAAM,EAAE;IACjDY,CAAC,GAAG,IAAI,CAACT,KAAK,CAAC,IAAI,CAACC,GAAG,CAAC;IACxB,IAAI,CAACA,GAAG,IAAI,CAAC;IACbS,GAAG,GAAGD,CAAC,GAAG,IAAI;IACd,IAAMC,GAAG,IAAIF,KAAK,KAAMA,KAAK,KAAME,GAAG,EAAE;MACtC,OAAO,CAAC,CAAC;IACX;IACAH,MAAM,IAAIG,GAAG,IAAIF,KAAK;IACtB,IAAIC,CAAC,GAAG,GAAG,EAAE;MACX,OAAOF,MAAM;IACf;IACAC,KAAK,IAAI,CAAC;EACZ;EACA,OAAO,CAAC,CAAC;AACX,CAAC;AAEDL,kBAAkB,CAACE,SAAS,CAACM,kBAAkB,GAAG,UAAUC,SAAS,EAAE;EACrE,IAAIZ,KAAK,GAAG,IAAI,CAACA,KAAK;EACtB,IAAIa,WAAW,GAAGb,KAAK,CAACH,MAAM;EAC9B,IAAII,GAAG,GAAG,IAAI,CAACA,GAAG;EAClB,IAAIa,MAAM,GAAG,CAAC;EAEd,IAAIL,CAAC,EAAEM,GAAG,EAAEC,QAAQ;EACpB,IAAId,MAAM;EAEV,OAAOD,GAAG,GAAGD,KAAK,CAACH,MAAM,EAAE;IACzBY,CAAC,GAAGT,KAAK,CAACC,GAAG,CAAC;IACdA,GAAG,IAAI,CAAC;IACR,IAAI,CAACQ,CAAC,GAAG,GAAG,MAAM,CAAC,EAAE;MACnB;MACAM,GAAG,GAAG,CAACN,CAAC,KAAK,CAAC,IAAI,CAAC;MACnB,IAAIM,GAAG,GAAG,EAAE,EAAE;QACZ,IAAId,GAAG,GAAG,CAAC,IAAIY,WAAW,EAAE;UAC1B,OAAO,KAAK;QACd;QACAG,QAAQ,GAAGD,GAAG,GAAG,EAAE;QACnBA,GAAG,GAAGf,KAAK,CAACC,GAAG,CAAC,IAAID,KAAK,CAACC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAID,KAAK,CAACC,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,IAAID,KAAK,CAACC,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QAC1Fc,GAAG,GAAG,CAACA,GAAG,GAAGxB,SAAS,CAACyB,QAAQ,CAAC,IAAI,CAAC;QACrCf,GAAG,IAAIe,QAAQ;MACjB;MACA,IAAIf,GAAG,GAAGc,GAAG,GAAGF,WAAW,EAAE;QAC3B,OAAO,KAAK;MACd;MACArB,SAAS,CAACQ,KAAK,EAAEC,GAAG,EAAEW,SAAS,EAAEE,MAAM,EAAEC,GAAG,CAAC;MAC7Cd,GAAG,IAAIc,GAAG;MACVD,MAAM,IAAIC,GAAG;IACf,CAAC,MAAM;MACL,QAAQN,CAAC,GAAG,GAAG;QACb,KAAK,CAAC;UACJM,GAAG,GAAG,CAAEN,CAAC,KAAK,CAAC,GAAI,GAAG,IAAI,CAAC;UAC3BP,MAAM,GAAGF,KAAK,CAACC,GAAG,CAAC,IAAKQ,CAAC,KAAK,CAAC,IAAK,CAAC,CAAC;UACtCR,GAAG,IAAI,CAAC;UACR;QACF,KAAK,CAAC;UACJ,IAAIA,GAAG,GAAG,CAAC,IAAIY,WAAW,EAAE;YAC1B,OAAO,KAAK;UACd;UACAE,GAAG,GAAG,CAACN,CAAC,KAAK,CAAC,IAAI,CAAC;UACnBP,MAAM,GAAGF,KAAK,CAACC,GAAG,CAAC,IAAID,KAAK,CAACC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;UAC3CA,GAAG,IAAI,CAAC;UACR;QACF,KAAK,CAAC;UACJ,IAAIA,GAAG,GAAG,CAAC,IAAIY,WAAW,EAAE;YAC1B,OAAO,KAAK;UACd;UACAE,GAAG,GAAG,CAACN,CAAC,KAAK,CAAC,IAAI,CAAC;UACnBP,MAAM,GAAGF,KAAK,CAACC,GAAG,CAAC,IAAID,KAAK,CAACC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAID,KAAK,CAACC,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,IAAID,KAAK,CAACC,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;UAC7FA,GAAG,IAAI,CAAC;UACR;QACF;UACE;MACJ;MACA,IAAIC,MAAM,KAAK,CAAC,IAAIA,MAAM,GAAGY,MAAM,EAAE;QACnC,OAAO,KAAK;MACd;MACAf,aAAa,CAACa,SAAS,EAAEE,MAAM,EAAEZ,MAAM,EAAEa,GAAG,CAAC;MAC7CD,MAAM,IAAIC,GAAG;IACf;EACF;EACA,OAAO,IAAI;AACb,CAAC;AAEDE,OAAO,CAACd,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}