{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* eslint-disable camelcase */\n// Define local device feature strings to optimize minification\nconst texture_compression_bc = 'texture-compression-bc';\nconst texture_compression_astc = 'texture-compression-astc';\nconst texture_compression_etc2 = 'texture-compression-etc2';\nconst texture_compression_etc1_webgl = 'texture-compression-etc1-webgl';\nconst texture_compression_pvrtc_webgl = 'texture-compression-pvrtc-webgl';\nconst texture_compression_atc_webgl = 'texture-compression-atc-webgl';\nconst float32_renderable = 'float32-renderable-webgl';\nconst float16_renderable = 'float16-renderable-webgl';\nconst rgb9e5ufloat_renderable = 'rgb9e5ufloat-renderable-webgl';\nconst snorm8_renderable = 'snorm8-renderable-webgl';\nconst norm16_renderable = 'norm16-renderable-webgl';\nconst snorm16_renderable = 'snorm16-renderable-webgl';\nconst float32_filterable = 'float32-filterable';\nconst float16_filterable = 'float16-filterable-webgl';\nexport function getTextureFormatDefinition(format) {\n  const info = TEXTURE_FORMAT_TABLE[format];\n  if (!info) {\n    throw new Error(`Unsupported texture format ${format}`);\n  }\n  return info;\n}\nexport function getTextureFormatTable() {\n  return TEXTURE_FORMAT_TABLE;\n}\n// prettier-ignore\nconst TEXTURE_FORMAT_TABLE = {\n  // 8-bit formats\n  'r8unorm': {},\n  'r8snorm': {\n    render: snorm8_renderable\n  },\n  'r8uint': {},\n  'r8sint': {},\n  // 16-bit formats\n  'rg8unorm': {},\n  'rg8snorm': {\n    render: snorm8_renderable\n  },\n  'rg8uint': {},\n  'rg8sint': {},\n  'r16uint': {},\n  'r16sint': {},\n  'r16float': {\n    render: float16_renderable,\n    filter: 'float16-filterable-webgl'\n  },\n  'r16unorm-webgl': {\n    f: norm16_renderable\n  },\n  'r16snorm-webgl': {\n    f: snorm16_renderable\n  },\n  // Packed 16-bit formats\n  'rgba4unorm-webgl': {\n    channels: 'rgba',\n    bitsPerChannel: [4, 4, 4, 4],\n    packed: true\n  },\n  'rgb565unorm-webgl': {\n    channels: 'rgb',\n    bitsPerChannel: [5, 6, 5, 0],\n    packed: true\n  },\n  'rgb5a1unorm-webgl': {\n    channels: 'rgba',\n    bitsPerChannel: [5, 5, 5, 1],\n    packed: true\n  },\n  // 24-bit formats\n  'rgb8unorm-webgl': {},\n  'rgb8snorm-webgl': {},\n  // 32-bit formats  \n  'rgba8unorm': {},\n  'rgba8unorm-srgb': {},\n  'rgba8snorm': {\n    render: snorm8_renderable\n  },\n  'rgba8uint': {},\n  'rgba8sint': {},\n  // 32-bit, reverse colors, webgpu only\n  'bgra8unorm': {},\n  'bgra8unorm-srgb': {},\n  'rg16uint': {},\n  'rg16sint': {},\n  'rg16float': {\n    render: float16_renderable,\n    filter: float16_filterable\n  },\n  'rg16unorm-webgl': {\n    render: norm16_renderable\n  },\n  'rg16snorm-webgl': {\n    render: snorm16_renderable\n  },\n  'r32uint': {},\n  'r32sint': {},\n  'r32float': {\n    render: float32_renderable,\n    filter: float32_filterable\n  },\n  // Packed 32 bit formats\n  'rgb9e5ufloat': {\n    channels: 'rgb',\n    packed: true,\n    render: rgb9e5ufloat_renderable\n  },\n  // , filter: true},\n  'rg11b10ufloat': {\n    channels: 'rgb',\n    bitsPerChannel: [11, 11, 10, 0],\n    packed: true,\n    p: 1,\n    render: float32_renderable\n  },\n  'rgb10a2unorm': {\n    channels: 'rgba',\n    bitsPerChannel: [10, 10, 10, 2],\n    packed: true,\n    p: 1\n  },\n  'rgb10a2uint-webgl': {\n    channels: 'rgba',\n    bitsPerChannel: [10, 10, 10, 2],\n    packed: true,\n    p: 1,\n    wgpu: false\n  },\n  // 48-bit formats\n  'rgb16unorm-webgl': {\n    f: norm16_renderable\n  },\n  // rgb not renderable\n  'rgb16snorm-webgl': {\n    f: norm16_renderable\n  },\n  // rgb not renderable\n  // 64-bit formats\n  'rg32uint': {},\n  'rg32sint': {},\n  'rg32float': {\n    render: false,\n    filter: float32_filterable\n  },\n  'rgba16uint': {},\n  'rgba16sint': {},\n  'rgba16float': {\n    render: float16_renderable,\n    filter: float16_filterable\n  },\n  'rgba16unorm-webgl': {\n    render: norm16_renderable\n  },\n  'rgba16snorm-webgl': {\n    render: snorm16_renderable\n  },\n  // 96-bit formats (deprecated!)\n  'rgb32float-webgl': {\n    render: float32_renderable,\n    filter: float32_filterable\n  },\n  // 128-bit formats\n  'rgba32uint': {},\n  'rgba32sint': {},\n  'rgba32float': {\n    render: float32_renderable,\n    filter: float32_filterable\n  },\n  // Depth/stencil\n  // Depth and stencil formats\n  stencil8: {\n    attachment: 'stencil',\n    bitsPerChannel: [8, 0, 0, 0],\n    dataType: 'uint8'\n  },\n  'depth16unorm': {\n    attachment: 'depth',\n    bitsPerChannel: [16, 0, 0, 0],\n    dataType: 'uint16'\n  },\n  'depth24plus': {\n    attachment: 'depth',\n    bitsPerChannel: [24, 0, 0, 0],\n    dataType: 'uint32'\n  },\n  'depth32float': {\n    attachment: 'depth',\n    bitsPerChannel: [32, 0, 0, 0],\n    dataType: 'float32'\n  },\n  // The depth component of the \"depth24plus\" and \"depth24plus-stencil8\" formats may be implemented as either a 24-bit depth value or a \"depth32float\" value.\n  'depth24plus-stencil8': {\n    attachment: 'depth-stencil',\n    bitsPerChannel: [24, 8, 0, 0],\n    packed: true\n  },\n  // \"depth32float-stencil8\" feature\n  'depth32float-stencil8': {\n    attachment: 'depth-stencil',\n    bitsPerChannel: [32, 8, 0, 0],\n    packed: true\n  },\n  // BC compressed formats: check device.features.has(\"texture-compression-bc\");\n  'bc1-rgb-unorm-webgl': {\n    f: texture_compression_bc\n  },\n  'bc1-rgb-unorm-srgb-webgl': {\n    f: texture_compression_bc\n  },\n  'bc1-rgba-unorm': {\n    f: texture_compression_bc\n  },\n  'bc1-rgba-unorm-srgb': {\n    f: texture_compression_bc\n  },\n  'bc2-rgba-unorm': {\n    f: texture_compression_bc\n  },\n  'bc2-rgba-unorm-srgb': {\n    f: texture_compression_bc\n  },\n  'bc3-rgba-unorm': {\n    f: texture_compression_bc\n  },\n  'bc3-rgba-unorm-srgb': {\n    f: texture_compression_bc\n  },\n  'bc4-r-unorm': {\n    f: texture_compression_bc\n  },\n  'bc4-r-snorm': {\n    f: texture_compression_bc\n  },\n  'bc5-rg-unorm': {\n    f: texture_compression_bc\n  },\n  'bc5-rg-snorm': {\n    f: texture_compression_bc\n  },\n  'bc6h-rgb-ufloat': {\n    f: texture_compression_bc\n  },\n  'bc6h-rgb-float': {\n    f: texture_compression_bc\n  },\n  'bc7-rgba-unorm': {\n    f: texture_compression_bc\n  },\n  'bc7-rgba-unorm-srgb': {\n    f: texture_compression_bc\n  },\n  // WEBGL_compressed_texture_etc: device.features.has(\"texture-compression-etc2\")\n  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression\n  'etc2-rgb8unorm': {\n    f: texture_compression_etc2\n  },\n  'etc2-rgb8unorm-srgb': {\n    f: texture_compression_etc2\n  },\n  'etc2-rgb8a1unorm': {\n    f: texture_compression_etc2\n  },\n  'etc2-rgb8a1unorm-srgb': {\n    f: texture_compression_etc2\n  },\n  'etc2-rgba8unorm': {\n    f: texture_compression_etc2\n  },\n  'etc2-rgba8unorm-srgb': {\n    f: texture_compression_etc2\n  },\n  'eac-r11unorm': {\n    f: texture_compression_etc2\n  },\n  'eac-r11snorm': {\n    f: texture_compression_etc2\n  },\n  'eac-rg11unorm': {\n    f: texture_compression_etc2\n  },\n  'eac-rg11snorm': {\n    f: texture_compression_etc2\n  },\n  // X_ASTC compressed formats: device.features.has(\"texture-compression-astc\")\n  'astc-4x4-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-4x4-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-5x4-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-5x4-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-5x5-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-5x5-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-6x5-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-6x5-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-6x6-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-6x6-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-8x5-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-8x5-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-8x6-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-8x6-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-8x8-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-8x8-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-10x5-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-10x5-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-10x6-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-10x6-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-10x8-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-10x8-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-10x10-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-10x10-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-12x10-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-12x10-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  'astc-12x12-unorm': {\n    f: texture_compression_astc\n  },\n  'astc-12x12-unorm-srgb': {\n    f: texture_compression_astc\n  },\n  // WEBGL_compressed_texture_pvrtc\n  'pvrtc-rgb4unorm-webgl': {\n    f: texture_compression_pvrtc_webgl\n  },\n  'pvrtc-rgba4unorm-webgl': {\n    f: texture_compression_pvrtc_webgl\n  },\n  'pvrtc-rbg2unorm-webgl': {\n    f: texture_compression_pvrtc_webgl\n  },\n  'pvrtc-rgba2unorm-webgl': {\n    f: texture_compression_pvrtc_webgl\n  },\n  // WEBGL_compressed_texture_etc1\n  'etc1-rbg-unorm-webgl': {\n    f: texture_compression_etc1_webgl\n  },\n  // WEBGL_compressed_texture_atc\n  'atc-rgb-unorm-webgl': {\n    f: texture_compression_atc_webgl\n  },\n  'atc-rgba-unorm-webgl': {\n    f: texture_compression_atc_webgl\n  },\n  'atc-rgbai-unorm-webgl': {\n    f: texture_compression_atc_webgl\n  }\n};\n//# sourceMappingURL=texture-format-table.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}