{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** A single element of an array is not represented as an array in XML */\nexport function getXMLArray(xmlValue) {\n  // Already an array, return as is\n  if (Array.isArray(xmlValue)) {\n    return xmlValue;\n  }\n  // Single value, wrap in array\n  if (xmlValue) {\n    return [xmlValue];\n  }\n  // nullish, return empty array\n  return [];\n}\n/** Get a list of strings from XML */\nexport function getXMLStringArray(xmlValue) {\n  const xmlArray = getXMLArray(xmlValue);\n  if (xmlArray.length > 0 && xmlArray.every(_ => typeof _ === 'string')) {\n    return xmlArray;\n  }\n  // TODO - error handling?\n  return [];\n}\n/** Get XML float */\nexport function getXMLFloat(xmlValue) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  switch (typeof xmlValue) {\n    case 'number':\n      return xmlValue;\n    case 'string':\n      return parseFloat(xmlValue);\n    default:\n      return undefined;\n  }\n}\n/** Get XML integer */\nexport function getXMLInteger(xmlValue) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  switch (typeof xmlValue) {\n    case 'number':\n      return xmlValue;\n    case 'string':\n      return parseInt(xmlValue, 10);\n    default:\n      return undefined;\n  }\n}\n/** Somewhat arbitrary boolean parsing */\nexport function getXMLBoolean(xmlValue) {\n  switch (xmlValue) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    case '1':\n      return true;\n    case '0':\n      return false;\n    default:\n      return false;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}