{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { cellsToMultiPolygon } from 'h3-js';\nimport { createIterable } from '@deck.gl/core';\nimport { default as H3HexagonLayer } from \"./h3-hexagon-layer.js\";\nimport GeoCellLayer from \"../geo-cell-layer/GeoCellLayer.js\";\nimport { normalizeLongitudes } from \"./h3-utils.js\";\nconst defaultProps = {\n  getHexagons: {\n    type: 'accessor',\n    value: d => d.hexagons\n  }\n};\nclass H3ClusterLayer extends GeoCellLayer {\n  initializeState() {\n    H3HexagonLayer._checkH3Lib();\n  }\n  updateState({\n    props,\n    changeFlags\n  }) {\n    if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons) {\n      const {\n        data,\n        getHexagons\n      } = props;\n      const polygons = [];\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = cellsToMultiPolygon(hexagons, true);\n        for (const polygon of multiPolygon) {\n          // Normalize polygons to prevent wrapping over the anti-meridian\n          for (const ring of polygon) {\n            normalizeLongitudes(ring);\n          }\n          polygons.push(this.getSubLayerRow({\n            polygon\n          }, object, objectInfo.index));\n        }\n      }\n      this.setState({\n        polygons\n      });\n    }\n  }\n  indexToBounds() {\n    const {\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n    return {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon,\n      getElevation: this.getSubLayerAccessor(getElevation),\n      getFillColor: this.getSubLayerAccessor(getFillColor),\n      getLineColor: this.getSubLayerAccessor(getLineColor),\n      getLineWidth: this.getSubLayerAccessor(getLineWidth)\n    };\n  }\n}\nH3ClusterLayer.layerName = 'H3ClusterLayer';\nH3ClusterLayer.defaultProps = defaultProps;\nexport default H3ClusterLayer;\n//# sourceMappingURL=h3-cluster-layer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}