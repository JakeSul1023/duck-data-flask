{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* eslint-disable max-statements, complexity */\nimport TransitionManager from \"./transition-manager.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  MULTI_PAN: ['multipanstart', 'multipanmove', 'multipanend'],\n  DOUBLE_CLICK: ['dblclick'],\n  KEYBOARD: ['keydown']\n};\nconst pinchEventWorkaround = {};\nexport default class Controller {\n  constructor(opts) {\n    this.state = {};\n    this._events = {};\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this._eventStartBlocked = null;\n    this._panMove = false;\n    this.invertPan = false;\n    this.dragMode = 'rotate';\n    this.inertia = 0;\n    this.scrollZoom = true;\n    this.dragPan = true;\n    this.dragRotate = true;\n    this.doubleClickZoom = true;\n    this.touchZoom = true;\n    this.touchRotate = false;\n    this.keyboard = true;\n    this.transitionManager = new TransitionManager({\n      ...opts,\n      getControllerState: props => new this.ControllerState(props),\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n    this.handleEvent = this.handleEvent.bind(this);\n    this.eventManager = opts.eventManager;\n    this.onViewStateChange = opts.onViewStateChange || (() => {});\n    this.onStateChange = opts.onStateChange || (() => {});\n    this.makeViewport = opts.makeViewport;\n  }\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    if (this.props) {\n      this.setProps(this.props);\n    }\n  }\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // @ts-ignore (2345) event type string cannot be assifned to enum\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager?.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n  /**\n   * Callback for events\n   */\n  handleEvent(event) {\n    // Force recalculate controller state\n    this._controllerState = undefined;\n    const eventStartBlocked = this._eventStartBlocked;\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'multipanstart':\n        return eventStartBlocked ? false : this._onMultiPanStart(event);\n      case 'multipanmove':\n        return this._onMultiPan(event);\n      case 'multipanend':\n        return this._onMultiPanEnd(event);\n      case 'dblclick':\n        return this._onDoubleClick(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  get controllerState() {\n    this._controllerState = this._controllerState || new this.ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.props,\n      ...this.state\n    });\n    return this._controllerState;\n  }\n  getCenter(event) {\n    const {\n      x,\n      y\n    } = this.props;\n    const {\n      offsetCenter\n    } = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n  isPointInBounds(pos, event) {\n    const {\n      width,\n      height\n    } = this.props;\n    if (event && event.handled) {\n      return false;\n    }\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n  isFunctionKeyPressed(event) {\n    const {\n      srcEvent\n    } = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n  isDragging() {\n    return this._interactionState.isDragging || false;\n  }\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if (props.dragMode) {\n      this.dragMode = props.dragMode;\n    }\n    this.props = props;\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n    this.transitionManager.processViewStateChange(props);\n    const {\n      inertia\n    } = props;\n    this.inertia = Number.isFinite(inertia) ? inertia : inertia === true ? DEFAULT_INERTIA : 0;\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    // We always need the pan events to set the correct isDragging state, even if dragPan & dragRotate are both false\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive);\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.MULTI_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_CLICK, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n  // Private Methods\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = null, interactionState = {}) {\n    const viewState = {\n      ...newControllerState.getViewportProps(),\n      ...extraProps\n    };\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n    this.state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n    if (changed) {\n      const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n      if (this.onViewStateChange) {\n        this.onViewStateChange({\n          viewState,\n          interactionState: this._interactionState,\n          oldViewState,\n          viewId: this.props.id\n        });\n      }\n    }\n  }\n  _onTransition(params) {\n    this.onViewStateChange({\n      ...params,\n      interactionState: this._interactionState,\n      viewId: this.props.id\n    });\n  }\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    this.onStateChange(this._interactionState);\n  }\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n  _onPanMoveEnd(event) {\n    const {\n      inertia\n    } = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.pan({\n        pos: endPos\n      }).panEnd();\n      this.updateViewport(newControllerState, {\n        ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: true\n      });\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n  _onPanRotateEnd(event) {\n    const {\n      inertia\n    } = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      }).rotateEnd();\n      this.updateViewport(newControllerState, {\n        ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    event.srcEvent.preventDefault();\n    const {\n      speed = 0.01,\n      smooth = false\n    } = this.scrollZoom === true ? {} : this.scrollZoom;\n    const {\n      delta\n    } = event;\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale\n    });\n    this.updateViewport(newControllerState, {\n      ...this._getTransitionProps({\n        around: pos\n      }),\n      transitionDuration: smooth ? 250 : 1\n    }, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n  _onMultiPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n  _onMultiPan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n  _onMultiPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {\n      inertia\n    } = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      });\n      this.updateViewport(newControllerState, {\n        ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.zoomStart({\n      pos\n    }).rotateStart({\n      pos\n    });\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    pinchEventWorkaround._startPinchRotation = event.rotation;\n    pinchEventWorkaround._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {\n        scale\n      } = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale\n      });\n    }\n    if (this.touchRotate) {\n      const {\n        rotation\n      } = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n      });\n    }\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    pinchEventWorkaround._lastPinchEvent = event;\n    return true;\n  }\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {\n      inertia\n    } = this;\n    const {\n      _lastPinchEvent\n    } = pinchEventWorkaround;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + velocityZ * inertia / 2);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale: endScale\n      }).zoomEnd();\n      this.updateViewport(newControllerState, {\n        ...this._getTransitionProps({\n          around: pos\n        }),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: false\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    pinchEventWorkaround._startPinchRotation = null;\n    pinchEventWorkaround._lastPinchEvent = null;\n    return true;\n  }\n  // Default handler for the `dblclick` event.\n  _onDoubleClick(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const isZoomOut = this.isFunctionKeyPressed(event);\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale: isZoomOut ? 0.5 : 2\n    });\n    this.updateViewport(newControllerState, this._getTransitionProps({\n      around: pos\n    }), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    // @ts-ignore\n    const {\n      zoomSpeed,\n      moveSpeed,\n      rotateSpeedX,\n      rotateSpeedY\n    } = this.keyboard === true ? {} : this.keyboard;\n    const {\n      controllerState\n    } = this;\n    let newControllerState;\n    const interactionState = {};\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n  _getTransitionProps(opts) {\n    const {\n      transition\n    } = this;\n    if (!transition || !transition.transitionInterpolator) {\n      return NO_TRANSITION_PROPS;\n    }\n    // Enables Transitions on double-tap and key-down events.\n    return opts ? {\n      ...transition,\n      transitionInterpolator: new LinearInterpolator({\n        ...opts,\n        ...transition.transitionInterpolator.opts,\n        makeViewport: this.controllerState.makeViewport\n      })\n    } : transition;\n  }\n}","map":{"version":3,"names":["TransitionManager","LinearInterpolator","NO_TRANSITION_PROPS","transitionDuration","DEFAULT_INERTIA","INERTIA_EASING","t","EVENT_TYPES","WHEEL","PAN","PINCH","MULTI_PAN","DOUBLE_CLICK","KEYBOARD","pinchEventWorkaround","Controller","constructor","opts","state","_events","_interactionState","isDragging","_customEvents","_eventStartBlocked","_panMove","invertPan","dragMode","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","transitionManager","getControllerState","props","ControllerState","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","handleEvent","eventManager","makeViewport","events","customEvents","toggleEvents","setProps","finalize","eventName","off","event","_controllerState","undefined","eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onMultiPanStart","_onMultiPan","_onMultiPanEnd","_onDoubleClick","_onWheel","_onKeyDown","controllerState","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","blockEvents","timeout","timer","setTimeout","transitionInterpolator","_getTransitionProps","processViewStateChange","Number","isFinite","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","getState","oldViewState","viewId","id","params","newStates","Object","assign","alternateMode","rightButton","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","transitionEasing","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","transition"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\controllers\\controller.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TransitionProps} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {IViewState} from './view-state';\nimport {ConstructorOf} from '../types/types';\n\nimport type Viewport from '../viewports/viewport';\n\nimport type {EventManager, MjolnirEvent, MjolnirGestureEvent, MjolnirWheelEvent, MjolnirKeyEvent} from 'mjolnir.js';\nimport type {Timeline} from '@luma.gl/engine';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n} as const;\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  MULTI_PAN: ['multipanstart', 'multipanmove', 'multipanend'],\n  DOUBLE_CLICK: ['dblclick'],\n  KEYBOARD: ['keydown']\n} as const;\n\n/** Configuration of how user input is handled */\nexport type ControllerOptions = {\n  /** Enable zooming with mouse wheel. Default `true`. */\n  scrollZoom?: boolean | {\n    /** Scaler that translates wheel delta to the change of viewport scale. Default `0.01`. */\n    speed?: number;\n    /** Smoothly transition to the new zoom. If enabled, will provide a slightly lagged but smoother experience. Default `false`. */\n    smooth?: boolean\n  };\n  /** Enable panning with pointer drag. Default `true` */\n  dragPan?: boolean;\n  /** Enable rotating with pointer drag. Default `true` */\n  dragRotate?: boolean;\n  /** Enable zooming with double click. Default `true` */\n  doubleClickZoom?: boolean;\n  /** Enable zooming with multi-touch. Default `true` */\n  touchZoom?: boolean;\n  /** Enable rotating with multi-touch. Use two-finger rotating gesture for horizontal and three-finger swiping gesture for vertical rotation. Default `false` */\n  touchRotate?: boolean;\n  /** Enable interaction with keyboard. Default `true`. */\n  keyboard?:\n    | boolean\n    | {\n        /** Speed of zoom using +/- keys. Default `2` */\n        zoomSpeed?: number;\n        /** Speed of movement using arrow keys, in pixels. */\n        moveSpeed?: number;\n        /** Speed of rotation using shift + left/right arrow keys, in degrees. Default 15. */\n        rotateSpeedX?: number;\n        /** Speed of rotation using shift + up/down arrow keys, in degrees. Default 10. */\n        rotateSpeedY?: number;\n      };\n  /** Drag behavior without pressing function keys, one of `pan` and `rotate`. */\n  dragMode?: 'pan' | 'rotate';\n  /** Enable inertia after panning/pinching. If a number is provided, indicates the duration of time over which the velocity reduces to zero, in milliseconds. Default `false`. */\n  inertia?: boolean | number;\n};\n\nexport type ControllerProps = {\n  /** Identifier of the controller */\n  id: string;\n  /** Viewport x position */\n  x: number;\n  /** Viewport y position */\n  y: number;\n  /** Viewport width */\n  width: number;\n  /** Viewport height */\n  height: number;\n} & ControllerOptions & TransitionProps;\n\n/** The state of a controller */\nexport type InteractionState = {\n  /** If the view state is in transition */\n  inTransition?: boolean;\n  /** If the user is dragging */\n  isDragging?: boolean;\n  /** If the view is being panned, either from user input or transition */\n  isPanning?: boolean;\n  /** If the view is being rotated, either from user input or transition */\n  isRotating?: boolean;\n  /** If the view is being zoomed, either from user input or transition */\n  isZooming?: boolean;\n}\n\n/** Parameters passed to the onViewStateChange callback */\nexport type ViewStateChangeParameters<ViewStateT = any> = {\n  viewId: string;\n  /** The next view state, either from user input or transition */\n  viewState: ViewStateT;\n  /** Object describing the nature of the view state change */\n  interactionState: InteractionState;\n  /** The current view state */\n  oldViewState?: ViewStateT;\n}\n\nconst pinchEventWorkaround: any = {};\n\nexport default abstract class Controller<ControllerState extends IViewState<ControllerState>> {\n  abstract get ControllerState(): ConstructorOf<ControllerState>;\n  abstract get transition(): TransitionProps;\n\n  // @ts-expect-error (2564) - not assigned in the constructor\n  protected props: ControllerProps;\n  protected state: Record<string, any> = {};\n\n  protected transitionManager: TransitionManager<ControllerState>;\n  protected eventManager: EventManager;\n  protected onViewStateChange: (params: ViewStateChangeParameters) => void;\n  protected onStateChange: (state: InteractionState) => void;\n  protected makeViewport: (opts: Record<string, any>) => Viewport\n\n  private _controllerState?: ControllerState;\n  private _events: Record<string, boolean> = {};\n  private _interactionState: InteractionState = {\n    isDragging: false\n  };\n  private _customEvents: string[] = [];\n  private _eventStartBlocked: any = null;\n  private _panMove: boolean = false;\n\n  protected invertPan: boolean = false;\n  protected dragMode: 'pan' | 'rotate' = 'rotate';\n  protected inertia: number = 0;\n  protected scrollZoom: boolean | {speed?: number; smooth?: boolean} = true;\n  protected dragPan: boolean = true;\n  protected dragRotate: boolean = true;\n  protected doubleClickZoom: boolean = true;\n  protected touchZoom: boolean = true;\n  protected touchRotate: boolean = false;\n  protected keyboard:\n    | boolean\n    | {\n        zoomSpeed?: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed?: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX?: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY?: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      } = true;\n\n  constructor(opts: {\n    timeline: Timeline,\n    eventManager: EventManager;\n    makeViewport: (opts: Record<string, any>) => Viewport;\n    onViewStateChange: (params: ViewStateChangeParameters) => void;\n    onStateChange: (state: InteractionState) => void;\n  }) {\n    this.transitionManager = new TransitionManager<ControllerState>({\n      ...opts,\n      getControllerState: props => new this.ControllerState(props),\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.eventManager = opts.eventManager;\n    this.onViewStateChange = opts.onViewStateChange || (() => {});\n    this.onStateChange = opts.onStateChange || (() => {});\n    this.makeViewport = opts.makeViewport;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    if (this.props) {\n      this.setProps(this.props);\n    }\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // @ts-ignore (2345) event type string cannot be assifned to enum\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager?.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   */\n  handleEvent(event: MjolnirEvent) {\n    // Force recalculate controller state\n    this._controllerState = undefined;\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'multipanstart':\n        return eventStartBlocked ? false : this._onMultiPanStart(event);\n      case 'multipanmove':\n        return this._onMultiPan(event);\n      case 'multipanend':\n        return this._onMultiPanEnd(event);\n      case 'dblclick':\n        return this._onDoubleClick(event);\n      case 'wheel':\n        return this._onWheel(event as MjolnirWheelEvent);\n      case 'keydown':\n        return this._onKeyDown(event as MjolnirKeyEvent);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  get controllerState(): ControllerState {\n    this._controllerState = this._controllerState || new this.ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.props,\n      ...this.state\n    });\n    return this._controllerState ;\n  }\n\n  getCenter(event: MjolnirGestureEvent | MjolnirWheelEvent) : [number, number] {\n    const {x, y} = this.props;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos: [number, number], event: MjolnirEvent): boolean {\n    const {width, height} = this.props;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging(): boolean {\n    return this._interactionState.isDragging || false;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout: number): void {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props: ControllerProps) {\n    if (props.dragMode) {\n      this.dragMode = props.dragMode;\n    }\n    this.props = props;\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    const {inertia} = props;\n    this.inertia = Number.isFinite(inertia) ? (inertia as number) : (inertia === true ? DEFAULT_INERTIA : 0);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    // We always need the pan events to set the correct isDragging state, even if dragPan & dragRotate are both false\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive);\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.MULTI_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_CLICK, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  protected updateViewport(newControllerState: ControllerState, extraProps: Record<string, any> | null = null, interactionState: InteractionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this.state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState, viewId: this.props.id});\n      }\n    }\n  }\n\n  private _onTransition(params: {viewState: Record<string, any>, oldViewState: Record<string, any>}) {\n    this.onViewStateChange({...params, interactionState: this._interactionState, viewId: this.props.id});\n  }\n\n  private _setInteractionState(newStates: InteractionState) {\n    Object.assign(this._interactionState, newStates);\n    this.onStateChange(this._interactionState);\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  protected _onPanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  protected _onPan(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  protected _onPanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  protected _onPanMove(event: MjolnirGestureEvent): boolean {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  protected _onPanMoveEnd(event: MjolnirGestureEvent): boolean {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  protected _onPanRotate(event: MjolnirGestureEvent): boolean {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onPanRotateEnd(event): boolean {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  protected _onWheel(event: MjolnirWheelEvent): boolean {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    event.srcEvent.preventDefault();\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom === true ? {} : this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  protected _onMultiPanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  protected _onMultiPan(event: MjolnirGestureEvent): boolean {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onMultiPanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  protected _onPinchStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    pinchEventWorkaround._startPinchRotation = event.rotation;\n    pinchEventWorkaround._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  protected _onPinch(event: MjolnirGestureEvent): boolean {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    pinchEventWorkaround._lastPinchEvent = event;\n    return true;\n  }\n\n  protected _onPinchEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    const {_lastPinchEvent} = pinchEventWorkaround;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    pinchEventWorkaround._startPinchRotation = null;\n    pinchEventWorkaround._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `dblclick` event.\n  protected _onDoubleClick(event: MjolnirGestureEvent): boolean {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  protected _onKeyDown(event: MjolnirKeyEvent): boolean {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    // @ts-ignore\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard === true ? {} : this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState: InteractionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  protected _getTransitionProps(opts?: any): TransitionProps {\n    const {transition} = this;\n\n    if (!transition || !transition.transitionInterpolator) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n        ...transition,\n        transitionInterpolator: new LinearInterpolator({\n          ...opts,\n          ...(transition.transitionInterpolator as LinearInterpolator).opts,\n          makeViewport: this.controllerState.makeViewport\n        })\n      }\n      : transition;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}