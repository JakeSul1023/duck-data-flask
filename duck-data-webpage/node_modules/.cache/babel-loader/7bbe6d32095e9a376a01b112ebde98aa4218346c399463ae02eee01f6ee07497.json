{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { project, fp64LowPart } from '@deck.gl/core';\nconst uniformBlock = /* glsl */`\\\nuniform fillUniforms {\n  vec2 patternTextureSize;\n  bool patternEnabled;\n  bool patternMask;\n  vec2 uvCoordinateOrigin;\n  vec2 uvCoordinateOrigin64Low;\n} fill;\n`;\n/*\n * fill pattern shader module\n */\nconst patternVs = /* glsl */`\nin vec4 fillPatternFrames;\nin float fillPatternScales;\nin vec2 fillPatternOffsets;\n\nout vec2 fill_uv;\nout vec4 fill_patternBounds;\nout vec4 fill_patternPlacement;\n`;\nconst vs = `\n${uniformBlock}\n${patternVs}\n`;\nconst patternFs = /* glsl */`\nuniform sampler2D fill_patternTexture;\n\nin vec4 fill_patternBounds;\nin vec4 fill_patternPlacement;\nin vec2 fill_uv;\n\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\n`;\nconst fs = `\n${uniformBlock}\n${patternFs}\n`;\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': /* glsl */`\n    fill_uv = geometry.position.xy;\n  `,\n  'vs:DECKGL_FILTER_COLOR': /* glsl */`\n    if (fill.patternEnabled) {\n      fill_patternBounds = fillPatternFrames / vec4(fill.patternTextureSize, fill.patternTextureSize);\n      fill_patternPlacement.xy = fillPatternOffsets;\n      fill_patternPlacement.zw = fillPatternScales * fillPatternFrames.zw;\n    }\n  `,\n  'fs:DECKGL_FILTER_COLOR': /* glsl */`\n    if (fill.patternEnabled) {\n      vec2 scale = FILL_UV_SCALE * fill_patternPlacement.zw;\n      vec2 patternUV = mod(mod(fill.uvCoordinateOrigin, scale) + fill.uvCoordinateOrigin64Low + fill_uv, scale) / scale;\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\n\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\n\n      vec4 patternColor = texture(fill_patternTexture, texCoords);\n      color.a *= patternColor.a;\n      if (!fill.patternMask) {\n        color.rgb = patternColor.rgb;\n      }\n    }\n  `\n};\n/* eslint-disable camelcase */\nfunction getPatternUniforms(opts) {\n  if (!opts) {\n    return {};\n  }\n  const uniforms = {};\n  if ('fillPatternTexture' in opts) {\n    const {\n      fillPatternTexture\n    } = opts;\n    uniforms.fill_patternTexture = fillPatternTexture;\n    uniforms.patternTextureSize = [fillPatternTexture.width, fillPatternTexture.height];\n  }\n  if ('project' in opts) {\n    const {\n      fillPatternMask = true,\n      fillPatternEnabled = true\n    } = opts;\n    const projectUniforms = project.getUniforms(opts.project);\n    const {\n      commonOrigin: coordinateOriginCommon\n    } = projectUniforms;\n    const coordinateOriginCommon64Low = [fp64LowPart(coordinateOriginCommon[0]), fp64LowPart(coordinateOriginCommon[1])];\n    uniforms.uvCoordinateOrigin = coordinateOriginCommon.slice(0, 2);\n    uniforms.uvCoordinateOrigin64Low = coordinateOriginCommon64Low;\n    uniforms.patternMask = fillPatternMask;\n    uniforms.patternEnabled = fillPatternEnabled;\n  }\n  return uniforms;\n}\nexport const patternShaders = {\n  name: 'fill',\n  vs,\n  fs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms,\n  uniformTypes: {\n    patternTextureSize: 'vec2<f32>',\n    patternEnabled: 'i32',\n    patternMask: 'i32',\n    uvCoordinateOrigin: 'vec2<f32>',\n    uvCoordinateOrigin64Low: 'vec2<f32>'\n  }\n};","map":{"version":3,"names":["project","fp64LowPart","uniformBlock","patternVs","vs","patternFs","fs","inject","getPatternUniforms","opts","uniforms","fillPatternTexture","fill_patternTexture","patternTextureSize","width","height","fillPatternMask","fillPatternEnabled","projectUniforms","getUniforms","commonOrigin","coordinateOriginCommon","coordinateOriginCommon64Low","uvCoordinateOrigin","slice","uvCoordinateOrigin64Low","patternMask","patternEnabled","patternShaders","name","dependencies","uniformTypes"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\extensions\\src\\fill-style\\shader-module.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderModule} from '@luma.gl/shadertools';\nimport {project, fp64LowPart} from '@deck.gl/core';\nimport type {ProjectProps, ProjectUniforms} from '@deck.gl/core';\n\nimport type {Texture} from '@luma.gl/core';\n\nconst uniformBlock = /* glsl */ `\\\nuniform fillUniforms {\n  vec2 patternTextureSize;\n  bool patternEnabled;\n  bool patternMask;\n  vec2 uvCoordinateOrigin;\n  vec2 uvCoordinateOrigin64Low;\n} fill;\n`;\n\n/*\n * fill pattern shader module\n */\nconst patternVs = /* glsl */ `\nin vec4 fillPatternFrames;\nin float fillPatternScales;\nin vec2 fillPatternOffsets;\n\nout vec2 fill_uv;\nout vec4 fill_patternBounds;\nout vec4 fill_patternPlacement;\n`;\n\nconst vs = `\n${uniformBlock}\n${patternVs}\n`;\n\nconst patternFs = /* glsl */ `\nuniform sampler2D fill_patternTexture;\n\nin vec4 fill_patternBounds;\nin vec4 fill_patternPlacement;\nin vec2 fill_uv;\n\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\n`;\n\nconst fs = `\n${uniformBlock}\n${patternFs}\n`;\n\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': /* glsl */ `\n    fill_uv = geometry.position.xy;\n  `,\n\n  'vs:DECKGL_FILTER_COLOR': /* glsl */ `\n    if (fill.patternEnabled) {\n      fill_patternBounds = fillPatternFrames / vec4(fill.patternTextureSize, fill.patternTextureSize);\n      fill_patternPlacement.xy = fillPatternOffsets;\n      fill_patternPlacement.zw = fillPatternScales * fillPatternFrames.zw;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': /* glsl */ `\n    if (fill.patternEnabled) {\n      vec2 scale = FILL_UV_SCALE * fill_patternPlacement.zw;\n      vec2 patternUV = mod(mod(fill.uvCoordinateOrigin, scale) + fill.uvCoordinateOrigin64Low + fill_uv, scale) / scale;\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\n\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\n\n      vec4 patternColor = texture(fill_patternTexture, texCoords);\n      color.a *= patternColor.a;\n      if (!fill.patternMask) {\n        color.rgb = patternColor.rgb;\n      }\n    }\n  `\n};\n\nexport type FillStyleModuleProps = {\n  project: ProjectProps;\n  fillPatternEnabled?: boolean;\n  fillPatternMask?: boolean;\n  fillPatternTexture: Texture;\n};\n\ntype FillStyleModuleUniforms = {\n  patternTextureSize?: [number, number];\n  patternEnabled?: boolean;\n  patternMask?: boolean;\n  uvCoordinateOrigin?: [number, number];\n  uvCoordinateOrigin64Low?: [number, number];\n};\n\ntype FillStyleModuleBindings = {\n  fill_patternTexture?: Texture;\n};\n\n/* eslint-disable camelcase */\nfunction getPatternUniforms(\n  opts?: FillStyleModuleProps | {}\n): FillStyleModuleBindings & FillStyleModuleUniforms {\n  if (!opts) {\n    return {};\n  }\n  const uniforms: FillStyleModuleBindings & FillStyleModuleUniforms = {};\n  if ('fillPatternTexture' in opts) {\n    const {fillPatternTexture} = opts;\n    uniforms.fill_patternTexture = fillPatternTexture;\n    uniforms.patternTextureSize = [fillPatternTexture.width, fillPatternTexture.height];\n  }\n  if ('project' in opts) {\n    const {fillPatternMask = true, fillPatternEnabled = true} = opts;\n    const projectUniforms = project.getUniforms(opts.project) as ProjectUniforms;\n    const {commonOrigin: coordinateOriginCommon} = projectUniforms;\n\n    const coordinateOriginCommon64Low: [number, number] = [\n      fp64LowPart(coordinateOriginCommon[0]),\n      fp64LowPart(coordinateOriginCommon[1])\n    ];\n\n    uniforms.uvCoordinateOrigin = coordinateOriginCommon.slice(0, 2) as [number, number];\n    uniforms.uvCoordinateOrigin64Low = coordinateOriginCommon64Low;\n    uniforms.patternMask = fillPatternMask;\n    uniforms.patternEnabled = fillPatternEnabled;\n  }\n  return uniforms;\n}\n\nexport const patternShaders = {\n  name: 'fill',\n  vs,\n  fs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms,\n  uniformTypes: {\n    patternTextureSize: 'vec2<f32>',\n    patternEnabled: 'i32',\n    patternMask: 'i32',\n    uvCoordinateOrigin: 'vec2<f32>',\n    uvCoordinateOrigin64Low: 'vec2<f32>'\n  }\n} as const satisfies ShaderModule<\n  FillStyleModuleProps,\n  FillStyleModuleUniforms,\n  FillStyleModuleBindings\n>;\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,OAAO,EAAEC,WAAW,QAAO,eAAe;AAKlD,MAAMC,YAAY,GAAG,UAAW;;;;;;;;CAQ/B;AAED;;;AAGA,MAAMC,SAAS,GAAG,UAAW;;;;;;;;CAQ5B;AAED,MAAMC,EAAE,GAAG;EACTF,YAAY;EACZC,SAAS;CACV;AAED,MAAME,SAAS,GAAG,UAAW;;;;;;;;CAQ5B;AAED,MAAMC,EAAE,GAAG;EACTJ,YAAY;EACZG,SAAS;CACV;AAED,MAAME,MAAM,GAAG;EACb,8BAA8B,EAAE,UAAW;;GAE1C;EAED,wBAAwB,EAAE,UAAW;;;;;;GAMpC;EAED,wBAAwB,EAAE,UAAW;;;;;;;;;;;;;;;CAetC;AAqBD;AACA,SAASC,kBAAkBA,CACzBC,IAAgC;EAEhC,IAAI,CAACA,IAAI,EAAE;IACT,OAAO,EAAE;EACX;EACA,MAAMC,QAAQ,GAAsD,EAAE;EACtE,IAAI,oBAAoB,IAAID,IAAI,EAAE;IAChC,MAAM;MAACE;IAAkB,CAAC,GAAGF,IAAI;IACjCC,QAAQ,CAACE,mBAAmB,GAAGD,kBAAkB;IACjDD,QAAQ,CAACG,kBAAkB,GAAG,CAACF,kBAAkB,CAACG,KAAK,EAAEH,kBAAkB,CAACI,MAAM,CAAC;EACrF;EACA,IAAI,SAAS,IAAIN,IAAI,EAAE;IACrB,MAAM;MAACO,eAAe,GAAG,IAAI;MAAEC,kBAAkB,GAAG;IAAI,CAAC,GAAGR,IAAI;IAChE,MAAMS,eAAe,GAAGlB,OAAO,CAACmB,WAAW,CAACV,IAAI,CAACT,OAAO,CAAoB;IAC5E,MAAM;MAACoB,YAAY,EAAEC;IAAsB,CAAC,GAAGH,eAAe;IAE9D,MAAMI,2BAA2B,GAAqB,CACpDrB,WAAW,CAACoB,sBAAsB,CAAC,CAAC,CAAC,CAAC,EACtCpB,WAAW,CAACoB,sBAAsB,CAAC,CAAC,CAAC,CAAC,CACvC;IAEDX,QAAQ,CAACa,kBAAkB,GAAGF,sBAAsB,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAqB;IACpFd,QAAQ,CAACe,uBAAuB,GAAGH,2BAA2B;IAC9DZ,QAAQ,CAACgB,WAAW,GAAGV,eAAe;IACtCN,QAAQ,CAACiB,cAAc,GAAGV,kBAAkB;EAC9C;EACA,OAAOP,QAAQ;AACjB;AAEA,OAAO,MAAMkB,cAAc,GAAG;EAC5BC,IAAI,EAAE,MAAM;EACZzB,EAAE;EACFE,EAAE;EACFC,MAAM;EACNuB,YAAY,EAAE,CAAC9B,OAAO,CAAC;EACvBmB,WAAW,EAAEX,kBAAkB;EAC/BuB,YAAY,EAAE;IACZlB,kBAAkB,EAAE,WAAW;IAC/Bc,cAAc,EAAE,KAAK;IACrBD,WAAW,EAAE,KAAK;IAClBH,kBAAkB,EAAE,WAAW;IAC/BE,uBAAuB,EAAE;;CAM5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}