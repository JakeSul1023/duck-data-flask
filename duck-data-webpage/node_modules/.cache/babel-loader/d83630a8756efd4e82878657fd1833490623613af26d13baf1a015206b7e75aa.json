{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { getS2BoundaryFlatFromS2Cell } from \"./converters/s2-to-boundary.js\";\nimport { getS2LngLatFromS2Cell } from \"./s2geometry/s2-geometry.js\";\nimport { getS2Cell } from \"./s2geometry/s2-cell-utils.js\";\n// GEOMETRY\n/**\n * Retrieve S2 geometry center\n * @param s2Token {string} A string that is the cell's hex token\n * @returns {[number, number]} Longitude and Latitude coordinates of the S2 cell's center\n */\nexport function getS2LngLat(s2Token) {\n  const s2cell = getS2Cell(s2Token);\n  return getS2LngLatFromS2Cell(s2cell);\n}\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @return {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2BoundaryFlat(tokenOrKey) {\n  const s2cell = getS2Cell(tokenOrKey);\n  return getS2BoundaryFlatFromS2Cell(s2cell);\n}","map":{"version":3,"names":["getS2BoundaryFlatFromS2Cell","getS2LngLatFromS2Cell","getS2Cell","getS2LngLat","s2Token","s2cell","getS2BoundaryFlat","tokenOrKey"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/s2-geometry-functions.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { getS2BoundaryFlatFromS2Cell } from \"./converters/s2-to-boundary.js\";\nimport { getS2LngLatFromS2Cell } from \"./s2geometry/s2-geometry.js\";\nimport { getS2Cell } from \"./s2geometry/s2-cell-utils.js\";\n// GEOMETRY\n/**\n * Retrieve S2 geometry center\n * @param s2Token {string} A string that is the cell's hex token\n * @returns {[number, number]} Longitude and Latitude coordinates of the S2 cell's center\n */\nexport function getS2LngLat(s2Token) {\n    const s2cell = getS2Cell(s2Token);\n    return getS2LngLatFromS2Cell(s2cell);\n}\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @return {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2BoundaryFlat(tokenOrKey) {\n    const s2cell = getS2Cell(tokenOrKey);\n    return getS2BoundaryFlatFromS2Cell(s2cell);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,2BAA2B,QAAQ,gCAAgC;AAC5E,SAASC,qBAAqB,QAAQ,6BAA6B;AACnE,SAASC,SAAS,QAAQ,+BAA+B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,OAAO,EAAE;EACjC,MAAMC,MAAM,GAAGH,SAAS,CAACE,OAAO,CAAC;EACjC,OAAOH,qBAAqB,CAACI,MAAM,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,UAAU,EAAE;EAC1C,MAAMF,MAAM,GAAGH,SAAS,CAACK,UAAU,CAAC;EACpC,OAAOP,2BAA2B,CAACK,MAAM,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}