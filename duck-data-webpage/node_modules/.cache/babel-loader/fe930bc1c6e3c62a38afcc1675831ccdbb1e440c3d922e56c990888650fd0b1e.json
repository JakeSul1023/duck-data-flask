{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { _LayersPass as LayersPass } from '@deck.gl/core';\nconst TERRAIN_BLENDING = {\n  blendColorOperation: 'max',\n  blendColorSrcFactor: 'one',\n  blendColorDstFactor: 'one',\n  blendAlphaOperation: 'max',\n  blendAlphaSrcFactor: 'one',\n  blendAlphaDstFactor: 'one'\n};\n/** Renders textures used by the TerrainEffect render pass */\nexport class TerrainPass extends LayersPass {\n  getRenderableLayers(viewport, opts) {\n    const {\n      layers\n    } = opts;\n    const result = [];\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts, true);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n      }\n    }\n    return result;\n  }\n  renderHeightMap(heightMap, opts) {\n    // console.log('Updating height map')\n    const target = heightMap.getRenderFramebuffer();\n    const viewport = heightMap.renderViewport;\n    if (!target || !viewport) {\n      return;\n    }\n    target.resize(viewport);\n    this.render({\n      ...opts,\n      target,\n      pass: 'terrain-height-map',\n      layers: opts.layers,\n      viewports: [viewport],\n      effects: [],\n      clearColor: [0, 0, 0, 0]\n    });\n  }\n  renderTerrainCover(terrainCover, opts) {\n    // console.log('Updating terrain cover ' + terrainCover.id)\n    const target = terrainCover.getRenderFramebuffer();\n    const viewport = terrainCover.renderViewport;\n    if (!target || !viewport) {\n      return;\n    }\n    const layers = terrainCover.filterLayers(opts.layers);\n    target.resize(viewport);\n    this.render({\n      ...opts,\n      target,\n      pass: `terrain-cover-${terrainCover.id}`,\n      layers,\n      effects: [],\n      viewports: [viewport],\n      clearColor: [0, 0, 0, 0]\n    });\n  }\n  getLayerParameters(layer, layerIndex, viewport) {\n    return {\n      ...layer.props.parameters,\n      blend: true,\n      depthCompare: 'always',\n      ...(layer.props.operation.includes('terrain') && TERRAIN_BLENDING)\n    };\n  }\n  getShaderModuleProps(layer, effects, otherShaderModuleProps) {\n    return {\n      terrain: {\n        project: otherShaderModuleProps.project\n      }\n    };\n  }\n}\n//# sourceMappingURL=terrain-pass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}