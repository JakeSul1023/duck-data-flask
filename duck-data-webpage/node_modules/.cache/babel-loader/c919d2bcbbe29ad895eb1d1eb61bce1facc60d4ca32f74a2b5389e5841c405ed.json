{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { MAGIC_ARRAY } from \"../constants.js\";\nimport { encode3DTileHeader, encode3DTileByteLength } from \"./helpers/encode-3d-tile-header.js\";\nimport { padStringToByteAlignment, copyStringToDataView, copyBinaryToDataView } from '@loaders.gl/loader-utils';\nconst DEFAULT_FEATURE_TABLE_JSON = {\n  POINTS_LENGTH: 1,\n  POSITIONS: {\n    byteOffset: 0\n  }\n};\nexport function encodePointCloud3DTile(tile, dataView, byteOffset, options) {\n  const {\n    featureTableJson = DEFAULT_FEATURE_TABLE_JSON\n  } = tile;\n  let featureTableJsonString = JSON.stringify(featureTableJson);\n  featureTableJsonString = padStringToByteAlignment(featureTableJsonString, 4);\n  const {\n    featureTableJsonByteLength = featureTableJsonString.length\n  } = tile;\n  const featureTableBinary = new ArrayBuffer(12); // Enough space to hold 3 floats\n  const featureTableBinaryByteLength = featureTableBinary.byteLength;\n  // Add default magic for this tile type\n  tile = {\n    magic: MAGIC_ARRAY.POINT_CLOUD,\n    ...tile\n  };\n  const byteOffsetStart = byteOffset;\n  byteOffset += encode3DTileHeader(tile, dataView, 0);\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, featureTableJsonByteLength, true); // featureTableJsonByteLength\n    dataView.setUint32(byteOffset + 4, featureTableBinaryByteLength, true); // featureTableBinaryByteLength\n    dataView.setUint32(byteOffset + 8, 0, true); // batchTableJsonByteLength\n    dataView.setUint32(byteOffset + 12, 0, true); // batchTableBinaryByteLength\n  }\n  byteOffset += 16;\n  byteOffset += copyStringToDataView(dataView, byteOffset, featureTableJsonString, featureTableJsonByteLength);\n  byteOffset += copyBinaryToDataView(dataView, byteOffset, featureTableBinary, featureTableBinaryByteLength);\n  // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n  return byteOffset;\n}","map":{"version":3,"names":["MAGIC_ARRAY","encode3DTileHeader","encode3DTileByteLength","padStringToByteAlignment","copyStringToDataView","copyBinaryToDataView","DEFAULT_FEATURE_TABLE_JSON","POINTS_LENGTH","POSITIONS","byteOffset","encodePointCloud3DTile","tile","dataView","options","featureTableJson","featureTableJsonString","JSON","stringify","featureTableJsonByteLength","length","featureTableBinary","ArrayBuffer","featureTableBinaryByteLength","byteLength","magic","POINT_CLOUD","byteOffsetStart","setUint32"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/encoders/encode-3d-tile-point-cloud.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { MAGIC_ARRAY } from \"../constants.js\";\nimport { encode3DTileHeader, encode3DTileByteLength } from \"./helpers/encode-3d-tile-header.js\";\nimport { padStringToByteAlignment, copyStringToDataView, copyBinaryToDataView } from '@loaders.gl/loader-utils';\nconst DEFAULT_FEATURE_TABLE_JSON = {\n    POINTS_LENGTH: 1,\n    POSITIONS: {\n        byteOffset: 0\n    }\n};\nexport function encodePointCloud3DTile(tile, dataView, byteOffset, options) {\n    const { featureTableJson = DEFAULT_FEATURE_TABLE_JSON } = tile;\n    let featureTableJsonString = JSON.stringify(featureTableJson);\n    featureTableJsonString = padStringToByteAlignment(featureTableJsonString, 4);\n    const { featureTableJsonByteLength = featureTableJsonString.length } = tile;\n    const featureTableBinary = new ArrayBuffer(12); // Enough space to hold 3 floats\n    const featureTableBinaryByteLength = featureTableBinary.byteLength;\n    // Add default magic for this tile type\n    tile = { magic: MAGIC_ARRAY.POINT_CLOUD, ...tile };\n    const byteOffsetStart = byteOffset;\n    byteOffset += encode3DTileHeader(tile, dataView, 0);\n    if (dataView) {\n        dataView.setUint32(byteOffset + 0, featureTableJsonByteLength, true); // featureTableJsonByteLength\n        dataView.setUint32(byteOffset + 4, featureTableBinaryByteLength, true); // featureTableBinaryByteLength\n        dataView.setUint32(byteOffset + 8, 0, true); // batchTableJsonByteLength\n        dataView.setUint32(byteOffset + 12, 0, true); // batchTableBinaryByteLength\n    }\n    byteOffset += 16;\n    byteOffset += copyStringToDataView(dataView, byteOffset, featureTableJsonString, featureTableJsonByteLength);\n    byteOffset += copyBinaryToDataView(dataView, byteOffset, featureTableBinary, featureTableBinaryByteLength);\n    // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n    encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n    return byteOffset;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,kBAAkB,EAAEC,sBAAsB,QAAQ,oCAAoC;AAC/F,SAASC,wBAAwB,EAAEC,oBAAoB,EAAEC,oBAAoB,QAAQ,0BAA0B;AAC/G,MAAMC,0BAA0B,GAAG;EAC/BC,aAAa,EAAE,CAAC;EAChBC,SAAS,EAAE;IACPC,UAAU,EAAE;EAChB;AACJ,CAAC;AACD,OAAO,SAASC,sBAAsBA,CAACC,IAAI,EAAEC,QAAQ,EAAEH,UAAU,EAAEI,OAAO,EAAE;EACxE,MAAM;IAAEC,gBAAgB,GAAGR;EAA2B,CAAC,GAAGK,IAAI;EAC9D,IAAII,sBAAsB,GAAGC,IAAI,CAACC,SAAS,CAACH,gBAAgB,CAAC;EAC7DC,sBAAsB,GAAGZ,wBAAwB,CAACY,sBAAsB,EAAE,CAAC,CAAC;EAC5E,MAAM;IAAEG,0BAA0B,GAAGH,sBAAsB,CAACI;EAAO,CAAC,GAAGR,IAAI;EAC3E,MAAMS,kBAAkB,GAAG,IAAIC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAMC,4BAA4B,GAAGF,kBAAkB,CAACG,UAAU;EAClE;EACAZ,IAAI,GAAG;IAAEa,KAAK,EAAExB,WAAW,CAACyB,WAAW;IAAE,GAAGd;EAAK,CAAC;EAClD,MAAMe,eAAe,GAAGjB,UAAU;EAClCA,UAAU,IAAIR,kBAAkB,CAACU,IAAI,EAAEC,QAAQ,EAAE,CAAC,CAAC;EACnD,IAAIA,QAAQ,EAAE;IACVA,QAAQ,CAACe,SAAS,CAAClB,UAAU,GAAG,CAAC,EAAES,0BAA0B,EAAE,IAAI,CAAC,CAAC,CAAC;IACtEN,QAAQ,CAACe,SAAS,CAAClB,UAAU,GAAG,CAAC,EAAEa,4BAA4B,EAAE,IAAI,CAAC,CAAC,CAAC;IACxEV,QAAQ,CAACe,SAAS,CAAClB,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7CG,QAAQ,CAACe,SAAS,CAAClB,UAAU,GAAG,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EAClD;EACAA,UAAU,IAAI,EAAE;EAChBA,UAAU,IAAIL,oBAAoB,CAACQ,QAAQ,EAAEH,UAAU,EAAEM,sBAAsB,EAAEG,0BAA0B,CAAC;EAC5GT,UAAU,IAAIJ,oBAAoB,CAACO,QAAQ,EAAEH,UAAU,EAAEW,kBAAkB,EAAEE,4BAA4B,CAAC;EAC1G;EACApB,sBAAsB,CAACU,QAAQ,EAAEc,eAAe,EAAEjB,UAAU,GAAGiB,eAAe,CAAC;EAC/E,OAAOjB,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}