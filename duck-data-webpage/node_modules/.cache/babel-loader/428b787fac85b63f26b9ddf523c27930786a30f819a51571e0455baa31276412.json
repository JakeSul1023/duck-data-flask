{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\n// Takes a number or a string of formats `50%`, `33.3%` or `200px`\nexport function parsePosition(value) {\n  switch (typeof value) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n    case 'string':\n      const match = PERCENT_OR_PIXELS_REGEX.exec(value);\n      if (match && match.length >= 3) {\n        const relative = match[2] === '%';\n        const position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative\n        };\n      }\n    // fallthrough\n    default:\n      // eslint-disable-line\n      throw new Error(`Could not parse position string ${value}`);\n  }\n}\nexport function getPosition(position, extent) {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}","map":{"version":3,"names":["PERCENT_OR_PIXELS_REGEX","parsePosition","value","position","relative","match","exec","length","parseFloat","Error","getPosition","extent","Math","round"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\utils\\positions.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\n\nexport type Position = {\n  position: number;\n  relative: boolean;\n};\n\n// Takes a number or a string of formats `50%`, `33.3%` or `200px`\nexport function parsePosition(value: number | string): Position {\n  switch (typeof value) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n\n    case 'string':\n      const match = PERCENT_OR_PIXELS_REGEX.exec(value);\n      if (match && match.length >= 3) {\n        const relative = match[2] === '%';\n        const position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative\n        };\n      }\n    // fallthrough\n\n    default:\n      // eslint-disable-line\n      throw new Error(`Could not parse position string ${value}`);\n  }\n}\n\nexport function getPosition(position: Position, extent: number): number {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,uBAAuB,GAAG,yBAAyB;AAOzD;AACA,OAAM,SAAUC,aAAaA,CAACC,KAAsB;EAClD,QAAQ,OAAOA,KAAK;IAClB,KAAK,QAAQ;MACX,OAAO;QACLC,QAAQ,EAAED,KAAK;QACfE,QAAQ,EAAE;OACX;IAEH,KAAK,QAAQ;MACX,MAAMC,KAAK,GAAGL,uBAAuB,CAACM,IAAI,CAACJ,KAAK,CAAC;MACjD,IAAIG,KAAK,IAAIA,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;QAC9B,MAAMH,QAAQ,GAAGC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG;QACjC,MAAMF,QAAQ,GAAGK,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,OAAO;UACLF,QAAQ,EAAEC,QAAQ,GAAGD,QAAQ,GAAG,GAAG,GAAGA,QAAQ;UAC9CC;SACD;MACH;IACF;IAEA;MACE;MACA,MAAM,IAAIK,KAAK,CAAC,mCAAmCP,KAAK,EAAE,CAAC;EAC/D;AACF;AAEA,OAAM,SAAUQ,WAAWA,CAACP,QAAkB,EAAEQ,MAAc;EAC5D,OAAOR,QAAQ,CAACC,QAAQ,GAAGQ,IAAI,CAACC,KAAK,CAACV,QAAQ,CAACA,QAAQ,GAAGQ,MAAM,CAAC,GAAGR,QAAQ,CAACA,QAAQ;AACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}