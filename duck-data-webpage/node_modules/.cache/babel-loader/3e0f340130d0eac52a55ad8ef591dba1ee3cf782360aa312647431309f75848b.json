{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Model } from '@luma.gl/engine';\nconst AGGREGATE_VS = `\\\n#version 300 es\n#define SHADER_NAME data-filter-vertex-shader\n\n#ifdef FLOAT_TARGET\n  in float filterIndices;\n  in float filterPrevIndices;\n#else\n  in vec2 filterIndices;\n  in vec2 filterPrevIndices;\n#endif\n\nout vec4 vColor;\nconst float component = 1.0 / 255.0;\n\nvoid main() {\n  #ifdef FLOAT_TARGET\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\n  #else\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\n    float col = filterIndices.x;\n    float row = filterIndices.y * 4.0;\n    float channel = floor(row);\n    row = fract(row);\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\n  #endif\n  gl_PointSize = 1.0;\n}\n`;\nconst AGGREGATE_FS = `\\\n#version 300 es\n#define SHADER_NAME data-filter-fragment-shader\nprecision highp float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main() {\n  if (dataFilter_value < 0.5) {\n    discard;\n  }\n  fragColor = vColor;\n}\n`;\nconst FLOAT_TARGET_FEATURES = ['float32-renderable-webgl',\n// ability to render to float texture\n'texture-blend-float-webgl' // ability to blend when rendering to float texture\n];\nexport function supportsFloatTarget(device) {\n  return FLOAT_TARGET_FEATURES.every(feature => device.features.has(feature));\n}\n// A 1x1 framebuffer object that encodes the total count of filtered items\nexport function getFramebuffer(device, useFloatTarget) {\n  if (useFloatTarget) {\n    return device.createFramebuffer({\n      width: 1,\n      height: 1,\n      colorAttachments: [device.createTexture({\n        format: 'rgba32float',\n        mipmaps: false\n      })]\n    });\n  }\n  return device.createFramebuffer({\n    width: 256,\n    height: 64,\n    colorAttachments: [device.createTexture({\n      format: 'rgba8unorm',\n      mipmaps: false\n    })]\n  });\n}\n// Increments the counter based on dataFilter_value\nexport function getModel(device, bufferLayout, shaderOptions, useFloatTarget) {\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\n  if (useFloatTarget) {\n    shaderOptions.defines.FLOAT_TARGET = 1;\n  }\n  return new Model(device, {\n    id: 'data-filter-aggregation-model',\n    vertexCount: 1,\n    isInstanced: false,\n    topology: 'point-list',\n    disableWarnings: true,\n    vs: AGGREGATE_VS,\n    fs: AGGREGATE_FS,\n    bufferLayout,\n    ...shaderOptions\n  });\n}\nexport const parameters = {\n  blend: true,\n  blendColorSrcFactor: 'one',\n  blendColorDstFactor: 'one',\n  blendAlphaSrcFactor: 'one',\n  blendAlphaDstFactor: 'one',\n  blendColorOperation: 'add',\n  blendAlphaOperation: 'add',\n  depthCompare: 'never'\n};","map":{"version":3,"names":["Model","AGGREGATE_VS","AGGREGATE_FS","FLOAT_TARGET_FEATURES","supportsFloatTarget","device","every","feature","features","has","getFramebuffer","useFloatTarget","createFramebuffer","width","height","colorAttachments","createTexture","format","mipmaps","getModel","bufferLayout","shaderOptions","defines","NON_INSTANCED_MODEL","FLOAT_TARGET","id","vertexCount","isInstanced","topology","disableWarnings","vs","fs","parameters","blend","blendColorSrcFactor","blendColorDstFactor","blendAlphaSrcFactor","blendAlphaDstFactor","blendColorOperation","blendAlphaOperation","depthCompare"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\extensions\\src\\data-filter\\aggregator.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device, DeviceFeature, Framebuffer, RenderPipelineParameters} from '@luma.gl/core';\nimport {Model, ModelProps} from '@luma.gl/engine';\n\nconst AGGREGATE_VS = `\\\n#version 300 es\n#define SHADER_NAME data-filter-vertex-shader\n\n#ifdef FLOAT_TARGET\n  in float filterIndices;\n  in float filterPrevIndices;\n#else\n  in vec2 filterIndices;\n  in vec2 filterPrevIndices;\n#endif\n\nout vec4 vColor;\nconst float component = 1.0 / 255.0;\n\nvoid main() {\n  #ifdef FLOAT_TARGET\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\n  #else\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\n    float col = filterIndices.x;\n    float row = filterIndices.y * 4.0;\n    float channel = floor(row);\n    row = fract(row);\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\n  #endif\n  gl_PointSize = 1.0;\n}\n`;\n\nconst AGGREGATE_FS = `\\\n#version 300 es\n#define SHADER_NAME data-filter-fragment-shader\nprecision highp float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main() {\n  if (dataFilter_value < 0.5) {\n    discard;\n  }\n  fragColor = vColor;\n}\n`;\n\nconst FLOAT_TARGET_FEATURES: DeviceFeature[] = [\n  'float32-renderable-webgl', // ability to render to float texture\n  'texture-blend-float-webgl' // ability to blend when rendering to float texture\n];\n\nexport function supportsFloatTarget(device: Device): boolean {\n  return FLOAT_TARGET_FEATURES.every(feature => device.features.has(feature));\n}\n\n// A 1x1 framebuffer object that encodes the total count of filtered items\nexport function getFramebuffer(device: Device, useFloatTarget: boolean): Framebuffer {\n  if (useFloatTarget) {\n    return device.createFramebuffer({\n      width: 1,\n      height: 1,\n      colorAttachments: [\n        device.createTexture({\n          format: 'rgba32float',\n          mipmaps: false\n        })\n      ]\n    });\n  }\n  return device.createFramebuffer({\n    width: 256,\n    height: 64,\n    colorAttachments: [device.createTexture({format: 'rgba8unorm', mipmaps: false})]\n  });\n}\n\n// Increments the counter based on dataFilter_value\nexport function getModel(\n  device: Device,\n  bufferLayout: ModelProps['bufferLayout'],\n  shaderOptions: any,\n  useFloatTarget: boolean\n): Model {\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\n  if (useFloatTarget) {\n    shaderOptions.defines.FLOAT_TARGET = 1;\n  }\n\n  return new Model(device, {\n    id: 'data-filter-aggregation-model',\n    vertexCount: 1,\n    isInstanced: false,\n    topology: 'point-list',\n    disableWarnings: true,\n    vs: AGGREGATE_VS,\n    fs: AGGREGATE_FS,\n    bufferLayout,\n    ...shaderOptions\n  });\n}\n\nexport const parameters: RenderPipelineParameters = {\n  blend: true,\n  blendColorSrcFactor: 'one',\n  blendColorDstFactor: 'one',\n  blendAlphaSrcFactor: 'one',\n  blendAlphaDstFactor: 'one',\n  blendColorOperation: 'add',\n  blendAlphaOperation: 'add',\n  depthCompare: 'never'\n} as const;\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,KAAK,QAAmB,iBAAiB;AAEjD,MAAMC,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCpB;AAED,MAAMC,YAAY,GAAG;;;;;;;;;;;;;;;CAepB;AAED,MAAMC,qBAAqB,GAAoB,CAC7C,0BAA0B;AAAE;AAC5B,2BAA2B,CAAC;AAAA,CAC7B;AAED,OAAM,SAAUC,mBAAmBA,CAACC,MAAc;EAChD,OAAOF,qBAAqB,CAACG,KAAK,CAACC,OAAO,IAAIF,MAAM,CAACG,QAAQ,CAACC,GAAG,CAACF,OAAO,CAAC,CAAC;AAC7E;AAEA;AACA,OAAM,SAAUG,cAAcA,CAACL,MAAc,EAAEM,cAAuB;EACpE,IAAIA,cAAc,EAAE;IAClB,OAAON,MAAM,CAACO,iBAAiB,CAAC;MAC9BC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,CAAC;MACTC,gBAAgB,EAAE,CAChBV,MAAM,CAACW,aAAa,CAAC;QACnBC,MAAM,EAAE,aAAa;QACrBC,OAAO,EAAE;OACV,CAAC;KAEL,CAAC;EACJ;EACA,OAAOb,MAAM,CAACO,iBAAiB,CAAC;IAC9BC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,EAAE;IACVC,gBAAgB,EAAE,CAACV,MAAM,CAACW,aAAa,CAAC;MAACC,MAAM,EAAE,YAAY;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;GAChF,CAAC;AACJ;AAEA;AACA,OAAM,SAAUC,QAAQA,CACtBd,MAAc,EACde,YAAwC,EACxCC,aAAkB,EAClBV,cAAuB;EAEvBU,aAAa,CAACC,OAAO,CAACC,mBAAmB,GAAG,CAAC;EAC7C,IAAIZ,cAAc,EAAE;IAClBU,aAAa,CAACC,OAAO,CAACE,YAAY,GAAG,CAAC;EACxC;EAEA,OAAO,IAAIxB,KAAK,CAACK,MAAM,EAAE;IACvBoB,EAAE,EAAE,+BAA+B;IACnCC,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,KAAK;IAClBC,QAAQ,EAAE,YAAY;IACtBC,eAAe,EAAE,IAAI;IACrBC,EAAE,EAAE7B,YAAY;IAChB8B,EAAE,EAAE7B,YAAY;IAChBkB,YAAY;IACZ,GAAGC;GACJ,CAAC;AACJ;AAEA,OAAO,MAAMW,UAAU,GAA6B;EAClDC,KAAK,EAAE,IAAI;EACXC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,KAAK;EAC1BC,YAAY,EAAE;CACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}