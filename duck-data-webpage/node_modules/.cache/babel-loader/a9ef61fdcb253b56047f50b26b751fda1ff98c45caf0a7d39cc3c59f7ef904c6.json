{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Utility to estimate binIdRange as expected by AggregatorProps */\nexport function getBinIdRange({\n  dataBounds,\n  getBinId,\n  padding = 0\n}) {\n  const corners = [dataBounds[0], dataBounds[1], [dataBounds[0][0], dataBounds[1][1]], [dataBounds[1][0], dataBounds[0][1]]].map(p => getBinId(p));\n  const minX = Math.min(...corners.map(p => p[0])) - padding;\n  const minY = Math.min(...corners.map(p => p[1])) - padding;\n  const maxX = Math.max(...corners.map(p => p[0])) + padding + 1;\n  const maxY = Math.max(...corners.map(p => p[1])) + padding + 1;\n  return [[minX, maxX], [minY, maxY]];\n}","map":{"version":3,"names":["getBinIdRange","dataBounds","getBinId","padding","corners","map","p","minX","Math","min","minY","maxX","max","maxY"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\common\\utils\\bounds-utils.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/** Utility to estimate binIdRange as expected by AggregatorProps */\nexport function getBinIdRange({\n  dataBounds,\n  getBinId,\n  padding = 0\n}: {\n  /** Bounds of the input data */\n  dataBounds: [min: number[], max: number[]];\n  /** Given a data point, returns the bin id that it belongs to */\n  getBinId: (p: number[]) => number[];\n  /** Add a border around the result to avoid clipping */\n  padding?: number;\n}): [number, number][] {\n  const corners = [\n    dataBounds[0],\n    dataBounds[1],\n    [dataBounds[0][0], dataBounds[1][1]],\n    [dataBounds[1][0], dataBounds[0][1]]\n  ].map(p => getBinId(p));\n\n  const minX = Math.min(...corners.map(p => p[0])) - padding;\n  const minY = Math.min(...corners.map(p => p[1])) - padding;\n  const maxX = Math.max(...corners.map(p => p[0])) + padding + 1;\n  const maxY = Math.max(...corners.map(p => p[1])) + padding + 1;\n\n  return [\n    [minX, maxX],\n    [minY, maxY]\n  ];\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA,OAAM,SAAUA,aAAaA,CAAC;EAC5BC,UAAU;EACVC,QAAQ;EACRC,OAAO,GAAG;AAAC,CAQZ;EACC,MAAMC,OAAO,GAAG,CACdH,UAAU,CAAC,CAAC,CAAC,EACbA,UAAU,CAAC,CAAC,CAAC,EACb,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACpC,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACrC,CAACI,GAAG,CAACC,CAAC,IAAIJ,QAAQ,CAACI,CAAC,CAAC,CAAC;EAEvB,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGL,OAAO,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO;EAC1D,MAAMO,IAAI,GAAGF,IAAI,CAACC,GAAG,CAAC,GAAGL,OAAO,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO;EAC1D,MAAMQ,IAAI,GAAGH,IAAI,CAACI,GAAG,CAAC,GAAGR,OAAO,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO,GAAG,CAAC;EAC9D,MAAMU,IAAI,GAAGL,IAAI,CAACI,GAAG,CAAC,GAAGR,OAAO,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO,GAAG,CAAC;EAE9D,OAAO,CACL,CAACI,IAAI,EAAEI,IAAI,CAAC,EACZ,CAACD,IAAI,EAAEG,IAAI,CAAC,CACb;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}