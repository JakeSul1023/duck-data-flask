{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { decodeTextureFormat } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nimport { getWebGLExtension } from \"../../context/helpers/webgl-extensions.js\";\nimport { getGLFromVertexType } from \"./vertex-formats.js\";\n/* eslint-disable camelcase */\n// TEXTURE FEATURES\n// Define local webgl extension strings to optimize minification\nconst X_S3TC = 'WEBGL_compressed_texture_s3tc'; // BC1, BC2, BC3\nconst X_S3TC_SRGB = 'WEBGL_compressed_texture_s3tc_srgb'; // BC1, BC2, BC3\nconst X_RGTC = 'EXT_texture_compression_rgtc'; // BC4, BC5\nconst X_BPTC = 'EXT_texture_compression_bptc'; // BC6, BC7\nconst X_ETC2 = 'WEBGL_compressed_texture_etc'; // Renamed from 'WEBGL_compressed_texture_es3'\nconst X_ASTC = 'WEBGL_compressed_texture_astc';\nconst X_ETC1 = 'WEBGL_compressed_texture_etc1';\nconst X_PVRTC = 'WEBGL_compressed_texture_pvrtc';\nconst X_ATC = 'WEBGL_compressed_texture_atc';\n// Define local webgl extension strings to optimize minification\nconst EXT_texture_norm16 = 'EXT_texture_norm16';\nconst EXT_render_snorm = 'EXT_render_snorm';\nconst EXT_color_buffer_float = 'EXT_color_buffer_float';\n// prettier-ignore\nexport const TEXTURE_FEATURES = {\n  'float32-renderable-webgl': ['EXT_color_buffer_float'],\n  'float16-renderable-webgl': ['EXT_color_buffer_half_float'],\n  'rgb9e5ufloat-renderable-webgl': ['WEBGL_render_shared_exponent'],\n  'snorm8-renderable-webgl': [EXT_render_snorm],\n  'norm16-renderable-webgl': [EXT_texture_norm16],\n  'snorm16-renderable-webgl': [EXT_texture_norm16, EXT_render_snorm],\n  'float32-filterable': ['OES_texture_float_linear'],\n  'float16-filterable-webgl': ['OES_texture_half_float_linear'],\n  'texture-filterable-anisotropic-webgl': ['EXT_texture_filter_anisotropic'],\n  'texture-blend-float-webgl': ['EXT_float_blend'],\n  'texture-compression-bc': [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],\n  // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],\n  // 'texture-compression-bc3-webgl': [X_S3TC],\n  'texture-compression-bc5-webgl': [X_RGTC],\n  'texture-compression-bc7-webgl': [X_BPTC],\n  'texture-compression-etc2': [X_ETC2],\n  'texture-compression-astc': [X_ASTC],\n  'texture-compression-etc1-webgl': [X_ETC1],\n  'texture-compression-pvrtc-webgl': [X_PVRTC],\n  'texture-compression-atc-webgl': [X_ATC]\n};\nexport function isTextureFeature(feature) {\n  return feature in TEXTURE_FEATURES;\n}\n/** Checks a texture feature (for Device.features). Mainly compressed texture support */\nexport function checkTextureFeature(gl, feature, extensions) {\n  const textureExtensions = TEXTURE_FEATURES[feature] || [];\n  return textureExtensions.every(extension => getWebGLExtension(gl, extension, extensions));\n}\n// TABLES\n/**\n * Texture format data -\n * Exported but can change without notice\n */\n// prettier-ignore\nexport const WEBGL_TEXTURE_FORMATS = {\n  // 8-bit formats\n  'r8unorm': {\n    gl: 33321,\n    rb: true\n  },\n  'r8snorm': {\n    gl: 36756\n  },\n  'r8uint': {\n    gl: 33330,\n    rb: true\n  },\n  'r8sint': {\n    gl: 33329,\n    rb: true\n  },\n  // 16-bit formats\n  'rg8unorm': {\n    gl: 33323,\n    rb: true\n  },\n  'rg8snorm': {\n    gl: 36757\n  },\n  'rg8uint': {\n    gl: 33336,\n    rb: true\n  },\n  'rg8sint': {\n    gl: 33335,\n    rb: true\n  },\n  'r16uint': {\n    gl: 33332,\n    rb: true\n  },\n  'r16sint': {\n    gl: 33331,\n    rb: true\n  },\n  'r16float': {\n    gl: 33325,\n    rb: true\n  },\n  'r16unorm-webgl': {\n    gl: 33322,\n    rb: true\n  },\n  'r16snorm-webgl': {\n    gl: 36760\n  },\n  // Packed 16-bit formats\n  'rgba4unorm-webgl': {\n    gl: 32854,\n    rb: true\n  },\n  'rgb565unorm-webgl': {\n    gl: 36194,\n    rb: true\n  },\n  'rgb5a1unorm-webgl': {\n    gl: 32855,\n    rb: true\n  },\n  // 24-bit formats\n  'rgb8unorm-webgl': {\n    gl: 32849\n  },\n  'rgb8snorm-webgl': {\n    gl: 36758\n  },\n  // 32-bit formats  \n  'rgba8unorm': {\n    gl: 32856\n  },\n  'rgba8unorm-srgb': {\n    gl: 35907\n  },\n  'rgba8snorm': {\n    gl: 36759\n  },\n  'rgba8uint': {\n    gl: 36220\n  },\n  'rgba8sint': {\n    gl: 36238\n  },\n  // reverse colors, webgpu only\n  'bgra8unorm': {},\n  'bgra8unorm-srgb': {},\n  'rg16uint': {\n    gl: 33338\n  },\n  'rg16sint': {\n    gl: 33337\n  },\n  'rg16float': {\n    gl: 33327,\n    rb: true\n  },\n  'rg16unorm-webgl': {\n    gl: 33324\n  },\n  'rg16snorm-webgl': {\n    gl: 36761\n  },\n  'r32uint': {\n    gl: 33334,\n    rb: true\n  },\n  'r32sint': {\n    gl: 33333,\n    rb: true\n  },\n  'r32float': {\n    gl: 33326\n  },\n  // Packed 32-bit formats\n  'rgb9e5ufloat': {\n    gl: 35901\n  },\n  // , filter: true},\n  'rg11b10ufloat': {\n    gl: 35898,\n    rb: true\n  },\n  'rgb10a2unorm': {\n    gl: 32857,\n    rb: true\n  },\n  'rgb10a2uint-webgl': {\n    gl: 36975,\n    rb: true\n  },\n  // 48-bit formats\n  'rgb16unorm-webgl': {\n    gl: 32852\n  },\n  // rgb not renderable\n  'rgb16snorm-webgl': {\n    gl: 36762\n  },\n  // rgb not renderable\n  // 64-bit formats\n  'rg32uint': {\n    gl: 33340,\n    rb: true\n  },\n  'rg32sint': {\n    gl: 33339,\n    rb: true\n  },\n  'rg32float': {\n    gl: 33328,\n    rb: true\n  },\n  'rgba16uint': {\n    gl: 36214,\n    rb: true\n  },\n  'rgba16sint': {\n    gl: 36232,\n    rb: true\n  },\n  'rgba16float': {\n    gl: 34842\n  },\n  'rgba16unorm-webgl': {\n    gl: 32859,\n    rb: true\n  },\n  'rgba16snorm-webgl': {\n    gl: 36763\n  },\n  // 96-bit formats (deprecated!)\n  'rgb32float-webgl': {\n    gl: 34837,\n    x: EXT_color_buffer_float,\n    dataFormat: 6407,\n    types: [5126]\n  },\n  // 128-bit formats\n  'rgba32uint': {\n    gl: 36208,\n    rb: true\n  },\n  'rgba32sint': {\n    gl: 36226,\n    rb: true\n  },\n  'rgba32float': {\n    gl: 34836,\n    rb: true\n  },\n  // Depth and stencil formats\n  'stencil8': {\n    gl: 36168,\n    rb: true\n  },\n  // 8 stencil bits\n  'depth16unorm': {\n    gl: 33189,\n    dataFormat: 6402,\n    types: [5123],\n    rb: true\n  },\n  // 16 depth bits\n  'depth24plus': {\n    gl: 33190,\n    dataFormat: 6402,\n    types: [5125]\n  },\n  'depth32float': {\n    gl: 36012,\n    dataFormat: 6402,\n    types: [5126],\n    rb: true\n  },\n  // The depth component of the \"depth24plus\" and \"depth24plus-stencil8\" formats may be implemented as either a 24-bit depth value or a \"depth32float\" value.\n  'depth24plus-stencil8': {\n    gl: 35056,\n    rb: true,\n    depthTexture: true,\n    dataFormat: 34041,\n    types: [34042]\n  },\n  // \"depth32float-stencil8\" feature - TODO below is render buffer only?\n  'depth32float-stencil8': {\n    gl: 36013,\n    dataFormat: 34041,\n    types: [36269],\n    rb: true\n  },\n  // BC compressed formats: check device.features.has(\"texture-compression-bc\");\n  'bc1-rgb-unorm-webgl': {\n    gl: 33776,\n    x: X_S3TC\n  },\n  'bc1-rgb-unorm-srgb-webgl': {\n    gl: 35916,\n    x: X_S3TC_SRGB\n  },\n  'bc1-rgba-unorm': {\n    gl: 33777,\n    x: X_S3TC\n  },\n  'bc1-rgba-unorm-srgb': {\n    gl: 35916,\n    x: X_S3TC_SRGB\n  },\n  'bc2-rgba-unorm': {\n    gl: 33778,\n    x: X_S3TC\n  },\n  'bc2-rgba-unorm-srgb': {\n    gl: 35918,\n    x: X_S3TC_SRGB\n  },\n  'bc3-rgba-unorm': {\n    gl: 33779,\n    x: X_S3TC\n  },\n  'bc3-rgba-unorm-srgb': {\n    gl: 35919,\n    x: X_S3TC_SRGB\n  },\n  'bc4-r-unorm': {\n    gl: 36283,\n    x: X_RGTC\n  },\n  'bc4-r-snorm': {\n    gl: 36284,\n    x: X_RGTC\n  },\n  'bc5-rg-unorm': {\n    gl: 36285,\n    x: X_RGTC\n  },\n  'bc5-rg-snorm': {\n    gl: 36286,\n    x: X_RGTC\n  },\n  'bc6h-rgb-ufloat': {\n    gl: 36495,\n    x: X_BPTC\n  },\n  'bc6h-rgb-float': {\n    gl: 36494,\n    x: X_BPTC\n  },\n  'bc7-rgba-unorm': {\n    gl: 36492,\n    x: X_BPTC\n  },\n  'bc7-rgba-unorm-srgb': {\n    gl: 36493,\n    x: X_BPTC\n  },\n  // WEBGL_compressed_texture_etc: device.features.has(\"texture-compression-etc2\")\n  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression\n  'etc2-rgb8unorm': {\n    gl: 37492\n  },\n  'etc2-rgb8unorm-srgb': {\n    gl: 37494\n  },\n  'etc2-rgb8a1unorm': {\n    gl: 37496\n  },\n  'etc2-rgb8a1unorm-srgb': {\n    gl: 37497\n  },\n  'etc2-rgba8unorm': {\n    gl: 37493\n  },\n  'etc2-rgba8unorm-srgb': {\n    gl: 37495\n  },\n  'eac-r11unorm': {\n    gl: 37488\n  },\n  'eac-r11snorm': {\n    gl: 37489\n  },\n  'eac-rg11unorm': {\n    gl: 37490\n  },\n  'eac-rg11snorm': {\n    gl: 37491\n  },\n  // X_ASTC compressed formats: device.features.has(\"texture-compression-astc\")\n  'astc-4x4-unorm': {\n    gl: 37808\n  },\n  'astc-4x4-unorm-srgb': {\n    gl: 37840\n  },\n  'astc-5x4-unorm': {\n    gl: 37809\n  },\n  'astc-5x4-unorm-srgb': {\n    gl: 37841\n  },\n  'astc-5x5-unorm': {\n    gl: 37810\n  },\n  'astc-5x5-unorm-srgb': {\n    gl: 37842\n  },\n  'astc-6x5-unorm': {\n    gl: 37811\n  },\n  'astc-6x5-unorm-srgb': {\n    gl: 37843\n  },\n  'astc-6x6-unorm': {\n    gl: 37812\n  },\n  'astc-6x6-unorm-srgb': {\n    gl: 37844\n  },\n  'astc-8x5-unorm': {\n    gl: 37813\n  },\n  'astc-8x5-unorm-srgb': {\n    gl: 37845\n  },\n  'astc-8x6-unorm': {\n    gl: 37814\n  },\n  'astc-8x6-unorm-srgb': {\n    gl: 37846\n  },\n  'astc-8x8-unorm': {\n    gl: 37815\n  },\n  'astc-8x8-unorm-srgb': {\n    gl: 37847\n  },\n  'astc-10x5-unorm': {\n    gl: 37819\n  },\n  'astc-10x5-unorm-srgb': {\n    gl: 37851\n  },\n  'astc-10x6-unorm': {\n    gl: 37817\n  },\n  'astc-10x6-unorm-srgb': {\n    gl: 37849\n  },\n  'astc-10x8-unorm': {\n    gl: 37818\n  },\n  'astc-10x8-unorm-srgb': {\n    gl: 37850\n  },\n  'astc-10x10-unorm': {\n    gl: 37819\n  },\n  'astc-10x10-unorm-srgb': {\n    gl: 37851\n  },\n  'astc-12x10-unorm': {\n    gl: 37820\n  },\n  'astc-12x10-unorm-srgb': {\n    gl: 37852\n  },\n  'astc-12x12-unorm': {\n    gl: 37821\n  },\n  'astc-12x12-unorm-srgb': {\n    gl: 37853\n  },\n  // WEBGL_compressed_texture_pvrtc\n  'pvrtc-rgb4unorm-webgl': {\n    gl: 35840\n  },\n  'pvrtc-rgba4unorm-webgl': {\n    gl: 35842\n  },\n  'pvrtc-rbg2unorm-webgl': {\n    gl: 35841\n  },\n  'pvrtc-rgba2unorm-webgl': {\n    gl: 35843\n  },\n  // WEBGL_compressed_texture_etc1\n  'etc1-rbg-unorm-webgl': {\n    gl: 36196\n  },\n  // WEBGL_compressed_texture_atc\n  'atc-rgb-unorm-webgl': {\n    gl: 35986\n  },\n  'atc-rgba-unorm-webgl': {\n    gl: 35986\n  },\n  'atc-rgbai-unorm-webgl': {\n    gl: 34798\n  }\n};\n// FUNCTIONS\n/** Checks if a texture format is supported */\nexport function isWebGLTextureFormatCapabilitiesed(gl, format, extensions) {\n  const webglTextureInfo = WEBGL_TEXTURE_FORMATS[format];\n  // Check that we have a GL constant\n  if (!webglTextureInfo?.gl) {\n    return false;\n  }\n  // Check extensions\n  const extension = webglTextureInfo.x;\n  if (extension) {\n    return Boolean(getWebGLExtension(gl, extension, extensions));\n  }\n  return true;\n}\n/** Checks if a texture format is supported, renderable, filterable etc */\nexport function getTextureFormatCapabilitiesWebGL(gl, formatSupport, extensions) {\n  let supported = formatSupport.create;\n  const webglFormatInfo = WEBGL_TEXTURE_FORMATS[formatSupport.format];\n  // Support Check that we have a GL constant\n  if (webglFormatInfo?.gl === undefined) {\n    supported = false;\n  }\n  if (webglFormatInfo?.x) {\n    supported = supported && Boolean(getWebGLExtension(gl, webglFormatInfo.x, extensions));\n  }\n  return {\n    format: formatSupport.format,\n    // @ts-ignore\n    create: supported && formatSupport.create,\n    // @ts-ignore\n    render: supported && formatSupport.render,\n    // @ts-ignore\n    filter: supported && formatSupport.filter,\n    // @ts-ignore\n    blend: supported && formatSupport.blend,\n    // @ts-ignore\n    store: supported && formatSupport.store\n  };\n}\n/** Get parameters necessary to work with format in WebGL: internalFormat, dataFormat, type, compressed, */\nexport function getTextureFormatWebGL(format) {\n  const formatData = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = convertTextureFormatToGL(format);\n  const decoded = decodeTextureFormat(format);\n  return {\n    internalFormat: webglFormat,\n    format: formatData?.dataFormat || getWebGLPixelDataFormat(decoded.channels, decoded.integer, decoded.normalized, webglFormat),\n    // depth formats don't have a type\n    type: decoded.dataType ? getGLFromVertexType(decoded.dataType) : formatData?.types?.[0] || 5121,\n    compressed: decoded.compressed || false\n  };\n}\nexport function getDepthStencilAttachmentWebGL(format) {\n  const formatInfo = decodeTextureFormat(format);\n  switch (formatInfo.attachment) {\n    case 'depth':\n      return 36096;\n    case 'stencil':\n      return 36128;\n    case 'depth-stencil':\n      return 33306;\n    default:\n      throw new Error(`Not a depth stencil format: ${format}`);\n  }\n}\n/** TODO - VERY roundabout legacy way of calculating bytes per pixel */\nexport function getTextureFormatBytesPerPixel(format) {\n  const formatInfo = decodeTextureFormat(format);\n  return formatInfo.bytesPerPixel;\n}\n// DATA TYPE HELPERS\nexport function getWebGLPixelDataFormat(channels, integer, normalized, format) {\n  // WebGL1 formats use same internalFormat\n  if (format === 6408 || format === 6407) {\n    return format;\n  }\n  // prettier-ignore\n  switch (channels) {\n    case 'r':\n      return integer && !normalized ? 36244 : 6403;\n    case 'rg':\n      return integer && !normalized ? 33320 : 33319;\n    case 'rgb':\n      return integer && !normalized ? 36248 : 6407;\n    case 'rgba':\n      return integer && !normalized ? 36249 : 6408;\n    case 'bgra':\n      throw new Error('bgra pixels not supported by WebGL');\n    default:\n      return 6408;\n  }\n}\n/**\n * Map WebGPU style texture format strings to GL constants\n */\nfunction convertTextureFormatToGL(format) {\n  const formatInfo = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = formatInfo?.gl;\n  if (webglFormat === undefined) {\n    throw new Error(`Unsupported texture format ${format}`);\n  }\n  return webglFormat;\n}\n//# sourceMappingURL=webgl-texture-table.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}