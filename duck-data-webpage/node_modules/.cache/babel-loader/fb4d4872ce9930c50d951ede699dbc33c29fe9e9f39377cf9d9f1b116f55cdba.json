{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Matrix4 } from '@math.gl/core';\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined && opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(opts.viewMatrix);\n  }\n  return uniforms;\n}\nconst common = /* glsl */`\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\nconst fs = `\n${common}\\\n`;\n/**\n * Projects coordinates\n */\nexport const project = {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};","map":{"version":3,"names":["Matrix4","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","modelMatrix","viewMatrix","projectionMatrix","cameraPositionWorld","getUniforms","opts","prevUniforms","uniforms","undefined","viewProjectionMatrix","multiplyRight","common","vs","fs","project","name"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules-webgl1\\project\\project.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {ShaderModule} from '../../lib/shader-module/shader-module';\nimport type {NumberArray3, NumberArray16} from '@math.gl/core';\n\ntype ProjectionProps = {\n  modelMatrix?: Readonly<Matrix4 | NumberArray16>;\n  viewMatrix?: Readonly<Matrix4 | NumberArray16>;\n  projectionMatrix?: Readonly<Matrix4 | NumberArray16>;\n  cameraPositionWorld?: Readonly<Vector3 | NumberArray3>;\n};\n\nconst IDENTITY_MATRIX: NumberArray16 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS: ProjectionProps = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts: ProjectionProps = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms: Record<string, any> = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined && opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = /* glsl */ `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\n/**\n * Projects coordinates\n */\nexport const project = {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n} as const satisfies ShaderModule<ProjectionProps, ProjectionProps>;\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAiBA,OAAO,QAAO,eAAe;AAW9C,MAAMC,eAAe,GAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAEvF,MAAMC,sBAAsB,GAAoB;EAC9CC,WAAW,EAAEF,eAAe;EAC5BG,UAAU,EAAEH,eAAe;EAC3BI,gBAAgB,EAAEJ,eAAe;EACjCK,mBAAmB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;CAC9B;AAED,SAASC,WAAWA,CAACC,IAAA,GAAwBN,sBAAsB,EAAEO,YAAY,GAAG,EAAE;EACpF;EACA;EACA;EAEA,MAAMC,QAAQ,GAAwB,EAAE;EACxC,IAAIF,IAAI,CAACL,WAAW,KAAKQ,SAAS,EAAE;IAClCD,QAAQ,CAACP,WAAW,GAAGK,IAAI,CAACL,WAAW;EACzC;EACA,IAAIK,IAAI,CAACJ,UAAU,KAAKO,SAAS,EAAE;IACjCD,QAAQ,CAACN,UAAU,GAAGI,IAAI,CAACJ,UAAU;EACvC;EACA,IAAII,IAAI,CAACH,gBAAgB,KAAKM,SAAS,EAAE;IACvCD,QAAQ,CAACL,gBAAgB,GAAGG,IAAI,CAACH,gBAAgB;EACnD;EACA,IAAIG,IAAI,CAACF,mBAAmB,KAAKK,SAAS,EAAE;IAC1CD,QAAQ,CAACJ,mBAAmB,GAAGE,IAAI,CAACF,mBAAmB;EACzD;EAEA;EACA,IAAIE,IAAI,CAACH,gBAAgB,KAAKM,SAAS,IAAIH,IAAI,CAACJ,UAAU,KAAKO,SAAS,EAAE;IACxED,QAAQ,CAACE,oBAAoB,GAAG,IAAIZ,OAAO,CAACQ,IAAI,CAACH,gBAAgB,CAAC,CAACQ,aAAa,CAC9EL,IAAI,CAACJ,UAAU,CAChB;EACH;EAEA,OAAOM,QAAQ;AACjB;AAEA,MAAMI,MAAM,GAAG,UAAW;;;;;;;;;;;CAWzB;AAED,MAAMC,EAAE,GAAG;EACTD,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqDP;AAED,MAAME,EAAE,GAAG;EACTF,MAAM;CACP;AAED;;;AAGA,OAAO,MAAMG,OAAO,GAAG;EACrBC,IAAI,EAAE,SAAS;EACfX,WAAW;EACXQ,EAAE;EACFC;CACiE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}