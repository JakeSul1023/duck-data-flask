{"ast":null,"code":"import { GL } from \"../constants.js\";\nimport { getPrimitiveModeType } from \"../primitives/modes.js\";\nimport { assert } from '@loaders.gl/loader-utils';\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(indices, attributes = {}, mode, start = 0, end) {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n  // iteration info\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS:\n        // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES:\n        // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP:\n        // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP:\n        // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES:\n        // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP:\n        // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN:\n        // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n      default:\n        assert(false);\n    }\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}","map":{"version":3,"names":["GL","getPrimitiveModeType","assert","makePrimitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/math/dist/geometry/iterators/primitive-iterator.js"],"sourcesContent":["import { GL } from \"../constants.js\";\nimport { getPrimitiveModeType } from \"../primitives/modes.js\";\nimport { assert } from '@loaders.gl/loader-utils';\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(indices, attributes = {}, mode, start = 0, end) {\n    // support indices being an object with a values array\n    if (indices) {\n        indices = indices.values || indices.value || indices;\n    }\n    // Autodeduce length from indices\n    if (end === undefined) {\n        end = indices ? indices.length : start;\n    }\n    // iteration info\n    const info = {\n        attributes,\n        type: getPrimitiveModeType(mode),\n        i1: 0,\n        i2: 0,\n        i3: 0\n    };\n    let i = start;\n    // @ts-ignore\n    while (i < end) {\n        switch (mode) {\n            case GL.POINTS: // draw single points.\n                info.i1 = i;\n                i += 1;\n                break;\n            case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n                info.i1 = i;\n                info.i2 = i + 1;\n                i += 2;\n                break;\n            case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n                info.i1 = i;\n                info.i2 = i + 1;\n                i += 1;\n                break;\n            case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n                info.i1 = i;\n                info.i2 = i + 1;\n                i += 1;\n                break;\n            case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n                info.i1 = i;\n                info.i2 = i + 1;\n                info.i3 = i + 2;\n                i += 3;\n                break;\n            case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n                info.i1 = i;\n                info.i2 = i + 1;\n                i += 1;\n                break;\n            case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n                info.i1 = 1;\n                info.i2 = i;\n                info.i3 = i + 1;\n                i += 1;\n                break;\n            default:\n                assert(false);\n        }\n        // if indices are present, lookup actual vertices in indices\n        if (indices) {\n            if ('i1' in info) {\n                info.i1 = indices[info.i1];\n                info.i2 = indices[info.i2];\n                info.i3 = indices[info.i3];\n            }\n        }\n        // @ts-ignore\n        yield info;\n    }\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,iBAAiB;AACpC,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,MAAM,QAAQ,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,UAAUC,qBAAqBA,CAACC,OAAO,EAAEC,UAAU,GAAG,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,EAAE;EACnF;EACA,IAAIJ,OAAO,EAAE;IACTA,OAAO,GAAGA,OAAO,CAACK,MAAM,IAAIL,OAAO,CAACM,KAAK,IAAIN,OAAO;EACxD;EACA;EACA,IAAII,GAAG,KAAKG,SAAS,EAAE;IACnBH,GAAG,GAAGJ,OAAO,GAAGA,OAAO,CAACQ,MAAM,GAAGL,KAAK;EAC1C;EACA;EACA,MAAMM,IAAI,GAAG;IACTR,UAAU;IACVS,IAAI,EAAEb,oBAAoB,CAACK,IAAI,CAAC;IAChCS,EAAE,EAAE,CAAC;IACLC,EAAE,EAAE,CAAC;IACLC,EAAE,EAAE;EACR,CAAC;EACD,IAAIC,CAAC,GAAGX,KAAK;EACb;EACA,OAAOW,CAAC,GAAGV,GAAG,EAAE;IACZ,QAAQF,IAAI;MACR,KAAKN,EAAE,CAACmB,MAAM;QAAE;QACZN,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXA,CAAC,IAAI,CAAC;QACN;MACJ,KAAKlB,EAAE,CAACoB,KAAK;QAAE;QACXP,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACJ,KAAKlB,EAAE,CAACqB,UAAU;QAAE;QAChBR,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACJ,KAAKlB,EAAE,CAACsB,SAAS;QAAE;QACfT,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACJ,KAAKlB,EAAE,CAACuB,SAAS;QAAE;QACfV,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfL,IAAI,CAACI,EAAE,GAAGC,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACJ,KAAKlB,EAAE,CAACwB,cAAc;QAAE;QACpBX,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACJ,KAAKlB,EAAE,CAACyB,YAAY;QAAE;QAClBZ,IAAI,CAACE,EAAE,GAAG,CAAC;QACXF,IAAI,CAACG,EAAE,GAAGE,CAAC;QACXL,IAAI,CAACI,EAAE,GAAGC,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACJ;QACIhB,MAAM,CAAC,KAAK,CAAC;IACrB;IACA;IACA,IAAIE,OAAO,EAAE;MACT,IAAI,IAAI,IAAIS,IAAI,EAAE;QACdA,IAAI,CAACE,EAAE,GAAGX,OAAO,CAACS,IAAI,CAACE,EAAE,CAAC;QAC1BF,IAAI,CAACG,EAAE,GAAGZ,OAAO,CAACS,IAAI,CAACG,EAAE,CAAC;QAC1BH,IAAI,CAACI,EAAE,GAAGb,OAAO,CAACS,IAAI,CAACI,EAAE,CAAC;MAC9B;IACJ;IACA;IACA,MAAMJ,IAAI;EACd;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}