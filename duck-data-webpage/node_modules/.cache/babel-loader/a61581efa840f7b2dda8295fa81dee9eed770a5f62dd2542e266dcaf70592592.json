{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getTableCell, getTableLength, getTableRowAsArray, getTableRowAsObject } from \"./table-accessors.js\";\nimport { deduceTableSchema } from \"./table-schema.js\";\nimport { makeColumnFromField } from \"./table-column.js\";\n/**\n * Convert a table to a different shape\n * @param table\n * @param shape\n * @returns\n */\nexport function convertTable(table, shape) {\n  switch (shape) {\n    case 'object-row-table':\n      return makeObjectRowTable(table);\n    case 'array-row-table':\n      return makeArrayRowTable(table);\n    case 'columnar-table':\n      return makeColumnarTable(table);\n    case 'arrow-table':\n      return makeArrowTable(table);\n    default:\n      throw new Error(shape);\n  }\n}\n/**\n * Convert a table to apache arrow format\n * @note this depends on the `@loaders.gl/arrow module being imported\n */\nexport function makeArrowTable(table) {\n  const _makeArrowTable = globalThis.__loaders?._makeArrowTable;\n  if (!_makeArrowTable) {\n    throw new Error('');\n  }\n  return _makeArrowTable(table);\n}\n/** Convert any simple table into columnar format */\nexport function makeColumnarTable(table) {\n  // TODO - should schema really be optional?\n  const schema = table.schema || deduceTableSchema(table);\n  const fields = table.schema?.fields || [];\n  if (table.shape === 'columnar-table') {\n    return {\n      ...table,\n      schema\n    };\n  }\n  const length = getTableLength(table);\n  const columns = {};\n  for (const field of fields) {\n    const column = makeColumnFromField(field, length);\n    columns[field.name] = column;\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n      column[rowIndex] = getTableCell(table, rowIndex, field.name);\n    }\n  }\n  return {\n    shape: 'columnar-table',\n    schema,\n    data: columns\n  };\n}\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table) {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table) {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n/**\n *\n * @note - should be part of schema module\n *\nexport function convertColumnarToRowFormatTable(columnarTable: ColumnarTable): ObjectRowTable {\n  const tableKeys = Object.keys(columnarTable);\n  const tableRowsCount = columnarTable[tableKeys[0]].length;\n\n  const rowFormatTable: {}[] = [];\n\n  for (let index = 0; index < tableRowsCount; index++) {\n    const tableItem = {};\n    for (let keyIndex = 0; keyIndex < tableKeys.length; keyIndex++) {\n      const fieldName = tableKeys[keyIndex];\n      tableItem[fieldName] = columnarTable[fieldName][index];\n    }\n    rowFormatTable.push(tableItem);\n  }\n\n  return {\n    shape: 'object-row-table',\n    schema: columnarTable.schema,\n    data: rowFormatTable\n  };\n}\n*/","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}