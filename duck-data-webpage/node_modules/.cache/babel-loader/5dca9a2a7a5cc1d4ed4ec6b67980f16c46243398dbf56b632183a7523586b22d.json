{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { GL } from '@luma.gl/constants';\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case 0:\n      return 0;\n    case 1:\n      return 1;\n    case 3:\n      return 1;\n    case 2:\n      return 1;\n    case 4:\n      return 4;\n    case 5:\n      return 4;\n    case 6:\n      return 4;\n    default:\n      throw new Error('drawMode');\n  }\n}\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount(options) {\n  const {\n    drawMode,\n    vertexCount\n  } = options;\n  switch (drawMode) {\n    case 0:\n    case 2:\n      return vertexCount;\n    case 1:\n      return vertexCount / 2;\n    case 3:\n      return vertexCount - 1;\n    case 4:\n      return vertexCount / 3;\n    case 5:\n    case 6:\n      return vertexCount - 2;\n    default:\n      throw new Error('drawMode');\n  }\n}\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount(options) {\n  const {\n    drawMode,\n    vertexCount\n  } = options;\n  const primitiveCount = getPrimitiveCount({\n    drawMode,\n    vertexCount\n  });\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case 0:\n      return primitiveCount;\n    case 1:\n      return primitiveCount * 2;\n    case 4:\n      return primitiveCount * 3;\n    default:\n      throw new Error('drawMode');\n  }\n}\n/** Get the primitive type for draw */\nexport function getGLDrawMode(topology) {\n  // prettier-ignore\n  switch (topology) {\n    case 'point-list':\n      return 0;\n    case 'line-list':\n      return 1;\n    case 'line-strip':\n      return 3;\n    case 'triangle-list':\n      return 4;\n    case 'triangle-strip':\n      return 5;\n    default:\n      throw new Error(topology);\n  }\n}\n/** Get the primitive type for transform feedback */\nexport function getGLPrimitive(topology) {\n  // prettier-ignore\n  switch (topology) {\n    case 'point-list':\n      return 0;\n    case 'line-list':\n      return 1;\n    case 'line-strip':\n      return 1;\n    case 'triangle-list':\n      return 4;\n    case 'triangle-strip':\n      return 4;\n    default:\n      throw new Error(topology);\n  }\n}\n//# sourceMappingURL=webgl-topology-utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}