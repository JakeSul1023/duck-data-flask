{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * (Recursively) load the service directory from an ArcGIS Server URL\n * @param url\n * @param fetchFile= Optional fetch function override\n * @returns\n */\nexport async function getArcGISServices(url, fetchFile = fetch) {\n  if (url.includes('rest/services')) {\n    const serverUrl = url.replace(/rest\\/services.*$/i, 'rest/services');\n    return loadServiceDirectory(serverUrl, fetchFile, []);\n  }\n  return null;\n}\nasync function loadServiceDirectory(serverUrl, fetch, path) {\n  const serviceUrl = `${serverUrl}/${path.join('/')}`;\n  const response = await fetch(`${serviceUrl}?f=pjson`);\n  const directory = await response.json();\n  const services = extractServices(directory, serviceUrl);\n  const folders = directory.folders || [];\n  const promises = folders.map(folder => loadServiceDirectory(`${serverUrl}`, fetch, [...path, folder]));\n  for (const folderServices of await Promise.all(promises)) {\n    services.push(...folderServices);\n  }\n  return services;\n}\nfunction extractServices(directory, url) {\n  const arcgisServices = directory.services || [];\n  const services = [];\n  for (const service of arcgisServices) {\n    services.push({\n      name: service.name,\n      type: `arcgis-${service.type.toLocaleLowerCase().replace('server', '-server')}`,\n      url: `${url}${service.name}/${service.type}`\n    });\n  }\n  return services;\n}","map":{"version":3,"names":["getArcGISServices","url","fetchFile","fetch","includes","serverUrl","replace","loadServiceDirectory","path","serviceUrl","join","response","directory","json","services","extractServices","folders","promises","map","folder","folderServices","Promise","all","push","arcgisServices","service","name","type","toLocaleLowerCase"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/wms/dist/services/arcgis/arcgis-server.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * (Recursively) load the service directory from an ArcGIS Server URL\n * @param url\n * @param fetchFile= Optional fetch function override\n * @returns\n */\nexport async function getArcGISServices(url, fetchFile = fetch) {\n    if (url.includes('rest/services')) {\n        const serverUrl = url.replace(/rest\\/services.*$/i, 'rest/services');\n        return loadServiceDirectory(serverUrl, fetchFile, []);\n    }\n    return null;\n}\nasync function loadServiceDirectory(serverUrl, fetch, path) {\n    const serviceUrl = `${serverUrl}/${path.join('/')}`;\n    const response = await fetch(`${serviceUrl}?f=pjson`);\n    const directory = await response.json();\n    const services = extractServices(directory, serviceUrl);\n    const folders = (directory.folders || []);\n    const promises = folders.map((folder) => loadServiceDirectory(`${serverUrl}`, fetch, [...path, folder]));\n    for (const folderServices of await Promise.all(promises)) {\n        services.push(...folderServices);\n    }\n    return services;\n}\nfunction extractServices(directory, url) {\n    const arcgisServices = (directory.services || []);\n    const services = [];\n    for (const service of arcgisServices) {\n        services.push({\n            name: service.name,\n            type: `arcgis-${service.type.toLocaleLowerCase().replace('server', '-server')}`,\n            url: `${url}${service.name}/${service.type}`\n        });\n    }\n    return services;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,iBAAiBA,CAACC,GAAG,EAAEC,SAAS,GAAGC,KAAK,EAAE;EAC5D,IAAIF,GAAG,CAACG,QAAQ,CAAC,eAAe,CAAC,EAAE;IAC/B,MAAMC,SAAS,GAAGJ,GAAG,CAACK,OAAO,CAAC,oBAAoB,EAAE,eAAe,CAAC;IACpE,OAAOC,oBAAoB,CAACF,SAAS,EAAEH,SAAS,EAAE,EAAE,CAAC;EACzD;EACA,OAAO,IAAI;AACf;AACA,eAAeK,oBAAoBA,CAACF,SAAS,EAAEF,KAAK,EAAEK,IAAI,EAAE;EACxD,MAAMC,UAAU,GAAG,GAAGJ,SAAS,IAAIG,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC,EAAE;EACnD,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAAC,GAAGM,UAAU,UAAU,CAAC;EACrD,MAAMG,SAAS,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EACvC,MAAMC,QAAQ,GAAGC,eAAe,CAACH,SAAS,EAAEH,UAAU,CAAC;EACvD,MAAMO,OAAO,GAAIJ,SAAS,CAACI,OAAO,IAAI,EAAG;EACzC,MAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAG,CAAEC,MAAM,IAAKZ,oBAAoB,CAAC,GAAGF,SAAS,EAAE,EAAEF,KAAK,EAAE,CAAC,GAAGK,IAAI,EAAEW,MAAM,CAAC,CAAC,CAAC;EACxG,KAAK,MAAMC,cAAc,IAAI,MAAMC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC,EAAE;IACtDH,QAAQ,CAACS,IAAI,CAAC,GAAGH,cAAc,CAAC;EACpC;EACA,OAAON,QAAQ;AACnB;AACA,SAASC,eAAeA,CAACH,SAAS,EAAEX,GAAG,EAAE;EACrC,MAAMuB,cAAc,GAAIZ,SAAS,CAACE,QAAQ,IAAI,EAAG;EACjD,MAAMA,QAAQ,GAAG,EAAE;EACnB,KAAK,MAAMW,OAAO,IAAID,cAAc,EAAE;IAClCV,QAAQ,CAACS,IAAI,CAAC;MACVG,IAAI,EAAED,OAAO,CAACC,IAAI;MAClBC,IAAI,EAAE,UAAUF,OAAO,CAACE,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAACtB,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE;MAC/EL,GAAG,EAAE,GAAGA,GAAG,GAAGwB,OAAO,CAACC,IAAI,IAAID,OAAO,CAACE,IAAI;IAC9C,CAAC,CAAC;EACN;EACA,OAAOb,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}