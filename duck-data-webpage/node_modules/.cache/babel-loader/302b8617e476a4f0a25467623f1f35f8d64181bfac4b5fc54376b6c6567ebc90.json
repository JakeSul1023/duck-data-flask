{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Extracts a table suitable for `console.table()` from a shader layout to assist in debugging.\n * @param layout shader layout\n * @param name app should provide the most meaningful name, usually the model or pipeline name / id.\n * @returns\n */\nexport function getDebugTableForShaderLayout(layout, name) {\n  const table = {};\n  const header = 'Values'; // '`Shader Layout for ${name}`;\n  if (layout.attributes.length === 0 && !layout.varyings?.length) {\n    return {\n      'No attributes or varyings': {\n        [header]: 'N/A'\n      }\n    };\n  }\n  for (const attributeDeclaration of layout.attributes) {\n    if (attributeDeclaration) {\n      const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;\n      table[`in ${glslDeclaration}`] = {\n        [header]: attributeDeclaration.stepMode || 'vertex'\n      };\n    }\n  }\n  for (const varyingDeclaration of layout.varyings || []) {\n    const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;\n    table[`out ${glslDeclaration}`] = {\n      [header]: JSON.stringify(varyingDeclaration)\n    };\n  }\n  return table;\n}","map":{"version":3,"names":["getDebugTableForShaderLayout","layout","name","table","header","attributes","length","varyings","attributeDeclaration","glslDeclaration","location","type","stepMode","varyingDeclaration","JSON","stringify"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\debug\\debug-shader-layout.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {ShaderLayout} from '@luma.gl/core';\n\n/**\n * Extracts a table suitable for `console.table()` from a shader layout to assist in debugging.\n * @param layout shader layout\n * @param name app should provide the most meaningful name, usually the model or pipeline name / id.\n * @returns\n */\nexport function getDebugTableForShaderLayout(\n  layout: ShaderLayout,\n  name: string\n): Record<string, Record<string, string>> {\n  const table: Record<string, Record<string, string>> = {};\n\n  const header = 'Values'; // '`Shader Layout for ${name}`;\n\n  if (layout.attributes.length === 0 && !layout.varyings?.length) {\n    return {'No attributes or varyings': {[header]: 'N/A'}};\n  }\n\n  for (const attributeDeclaration of layout.attributes) {\n    if (attributeDeclaration) {\n      const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;\n      table[`in ${glslDeclaration}`] = {[header]: attributeDeclaration.stepMode || 'vertex'};\n    }\n  }\n\n  for (const varyingDeclaration of layout.varyings || []) {\n    const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;\n    table[`out ${glslDeclaration}`] = {[header]: JSON.stringify(varyingDeclaration)};\n  }\n\n  return table;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;;;;;;AAMA,OAAM,SAAUA,4BAA4BA,CAC1CC,MAAoB,EACpBC,IAAY;EAEZ,MAAMC,KAAK,GAA2C,EAAE;EAExD,MAAMC,MAAM,GAAG,QAAQ,CAAC,CAAC;EAEzB,IAAIH,MAAM,CAACI,UAAU,CAACC,MAAM,KAAK,CAAC,IAAI,CAACL,MAAM,CAACM,QAAQ,EAAED,MAAM,EAAE;IAC9D,OAAO;MAAC,2BAA2B,EAAE;QAAC,CAACF,MAAM,GAAG;MAAK;IAAC,CAAC;EACzD;EAEA,KAAK,MAAMI,oBAAoB,IAAIP,MAAM,CAACI,UAAU,EAAE;IACpD,IAAIG,oBAAoB,EAAE;MACxB,MAAMC,eAAe,GAAG,GAAGD,oBAAoB,CAACE,QAAQ,IAAIF,oBAAoB,CAACN,IAAI,KAAKM,oBAAoB,CAACG,IAAI,EAAE;MACrHR,KAAK,CAAC,MAAMM,eAAe,EAAE,CAAC,GAAG;QAAC,CAACL,MAAM,GAAGI,oBAAoB,CAACI,QAAQ,IAAI;MAAQ,CAAC;IACxF;EACF;EAEA,KAAK,MAAMC,kBAAkB,IAAIZ,MAAM,CAACM,QAAQ,IAAI,EAAE,EAAE;IACtD,MAAME,eAAe,GAAG,GAAGI,kBAAkB,CAACH,QAAQ,IAAIG,kBAAkB,CAACX,IAAI,EAAE;IACnFC,KAAK,CAAC,OAAOM,eAAe,EAAE,CAAC,GAAG;MAAC,CAACL,MAAM,GAAGU,IAAI,CAACC,SAAS,CAACF,kBAAkB;IAAC,CAAC;EAClF;EAEA,OAAOV,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}