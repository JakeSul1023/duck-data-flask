{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { lighting } from \"../lights/lighting.js\";\nimport { PHONG_WGSL } from \"./phong-shaders-wgsl.js\";\nimport { PHONG_VS, PHONG_FS } from \"./phong-shaders-glsl.js\";\n/** In Phong shading, the normal vector is linearly interpolated across the surface of the polygon from the polygon's vertex normals. */\nexport const phongMaterial = {\n  name: 'phongMaterial',\n  dependencies: [lighting],\n  // Note these are switched between phong and gouraud\n  source: PHONG_WGSL,\n  vs: PHONG_VS,\n  fs: PHONG_FS,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n  },\n  uniformTypes: {\n    ambient: 'f32',\n    diffuse: 'f32',\n    shininess: 'f32',\n    specularColor: 'vec3<f32>'\n  },\n  defaultUniforms: {\n    ambient: 0.35,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [0.15, 0.15, 0.15]\n  },\n  getUniforms(props) {\n    const uniforms = {\n      ...props\n    };\n    if (uniforms.specularColor) {\n      uniforms.specularColor = uniforms.specularColor.map(x => x / 255);\n    }\n    return {\n      ...phongMaterial.defaultUniforms,\n      ...uniforms\n    };\n  }\n};","map":{"version":3,"names":["lighting","PHONG_WGSL","PHONG_VS","PHONG_FS","phongMaterial","name","dependencies","source","vs","fs","defines","LIGHTING_FRAGMENT","uniformTypes","ambient","diffuse","shininess","specularColor","defaultUniforms","getUniforms","props","uniforms","map","x"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules\\lighting\\phong-material\\phong-material.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {NumberArray3} from '@math.gl/types';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {lighting} from '../lights/lighting';\nimport {PHONG_WGSL} from './phong-shaders-wgsl';\nimport {PHONG_VS, PHONG_FS} from './phong-shaders-glsl';\n\nexport type PhongMaterialProps = {\n  ambient?: number;\n  diffuse?: number;\n  /** Specularity exponent */\n  shininess?: number;\n  specularColor?: NumberArray3;\n};\n\n/** In Phong shading, the normal vector is linearly interpolated across the surface of the polygon from the polygon's vertex normals. */\nexport const phongMaterial: ShaderModule<PhongMaterialProps> = {\n  name: 'phongMaterial',\n  dependencies: [lighting],\n  // Note these are switched between phong and gouraud\n  source: PHONG_WGSL,\n  vs: PHONG_VS,\n  fs: PHONG_FS,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n  },\n  uniformTypes: {\n    ambient: 'f32',\n    diffuse: 'f32',\n    shininess: 'f32',\n    specularColor: 'vec3<f32>'\n  },\n  defaultUniforms: {\n    ambient: 0.35,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [0.15, 0.15, 0.15]\n  },\n  getUniforms(props?: PhongMaterialProps) {\n    const uniforms = {...props};\n    if (uniforms.specularColor) {\n      uniforms.specularColor = uniforms.specularColor.map(x => x / 255) as NumberArray3;\n    }\n    return {...phongMaterial.defaultUniforms, ...uniforms};\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,QAAQ,QAAC;AACjB,SAAQC,UAAU,QAAC;AACnB,SAAQC,QAAQ,EAAEC,QAAQ,QAAC;AAU3B;AACA,OAAO,MAAMC,aAAa,GAAqC;EAC7DC,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE,CAACN,QAAQ,CAAC;EACxB;EACAO,MAAM,EAAEN,UAAU;EAClBO,EAAE,EAAEN,QAAQ;EACZO,EAAE,EAAEN,QAAQ;EACZO,OAAO,EAAE;IACPC,iBAAiB,EAAE;GACpB;EACDC,YAAY,EAAE;IACZC,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE,KAAK;IACdC,SAAS,EAAE,KAAK;IAChBC,aAAa,EAAE;GAChB;EACDC,eAAe,EAAE;IACfJ,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,EAAE;IACbC,aAAa,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;GACjC;EACDE,WAAWA,CAACC,KAA0B;IACpC,MAAMC,QAAQ,GAAG;MAAC,GAAGD;IAAK,CAAC;IAC3B,IAAIC,QAAQ,CAACJ,aAAa,EAAE;MAC1BI,QAAQ,CAACJ,aAAa,GAAGI,QAAQ,CAACJ,aAAa,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,GAAG,GAAG,CAAiB;IACnF;IACA,OAAO;MAAC,GAAGlB,aAAa,CAACa,eAAe;MAAE,GAAGG;IAAQ,CAAC;EACxD;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}