{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport class Tile2DHeader {\n  constructor(index) {\n    this.index = index;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._loader = undefined;\n    this._abortController = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n  /** @deprecated use `boundingBox` instead */\n  get bbox() {\n    return this._bbox;\n  }\n  // TODO - remove in v9\n  set bbox(value) {\n    // Only set once from `Tileset2D.getTileMetadata`\n    if (this._bbox) return;\n    this._bbox = value;\n    if ('west' in value) {\n      this.boundingBox = [[value.west, value.south], [value.east, value.north]];\n    } else {\n      this.boundingBox = [[value.left, value.top], [value.right, value.bottom]];\n    }\n  }\n  get data() {\n    return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;\n  }\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      // eslint-disable-next-line no-console\n      console.error('byteLength not defined in tile data');\n    }\n    return result;\n  }\n  /* eslint-disable max-statements */\n  async _loadData({\n    getData,\n    requestScheduler,\n    onLoad,\n    onError\n  }) {\n    const {\n      index,\n      id,\n      bbox,\n      userData,\n      zoom\n    } = this;\n    const loaderId = this._loaderId;\n    this._abortController = new AbortController();\n    const {\n      signal\n    } = this._abortController;\n    // @ts-expect-error (2345) Argument of type '(tile: any) => 1 | -1' is not assignable ...\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n    let tileData = null;\n    let error;\n    try {\n      tileData = await getData({\n        index,\n        id,\n        bbox,\n        userData,\n        zoom,\n        signal\n      });\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n    this._isCancelled = true;\n    this._abortController?.abort();\n  }\n}\n//# sourceMappingURL=tile-2d-header.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}