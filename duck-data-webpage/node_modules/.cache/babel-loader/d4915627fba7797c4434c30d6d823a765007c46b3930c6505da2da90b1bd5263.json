{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { GL_PARAMETER_DEFAULTS, GL_PARAMETER_SETTERS, GL_COMPOSITE_PARAMETER_SETTERS, GL_PARAMETER_GETTERS } from \"./webgl-parameter-tables.js\";\n/**\n * Sets any GL parameter regardless of function (gl.blendMode, ...)\n *\n * @note requires a `cache` object to be set on the context (gl.state.cache)\n * This object is used to fill in any missing values for composite setter functions\n */\nexport function setGLParameters(gl, parameters) {\n  if (isObjectEmpty(parameters)) {\n    return;\n  }\n  const compositeSetters = {};\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n  for (const key in parameters) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 parameters in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, parameters[key], glConstant);\n      }\n    }\n  }\n  // HANDLE COMPOSITE SETTERS\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  // @ts-expect-error\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, parameters, cache);\n    }\n  }\n  // Add a log for the else case?\n}\n/**\n * Reads the entire WebGL state from a context\n\n  // default to querying all parameters\n\n  * @returns - a newly created map, with values keyed by GL parameters\n *\n * @note Copies the state from a context (gl.getParameter should not be overriden)\n * Reads the entire WebGL state from a context\n *\n * @note This can generates a huge amount of synchronous driver roundtrips and should be\n * considered a very slow operation, to be used only if/when a context already manipulated\n * by external code needs to be synchronized for the first time\n */\nexport function getGLParameters(gl, parameters = GL_PARAMETER_DEFAULTS) {\n  // support both arrays of parameters and objects (keys represent parameters)\n  if (typeof parameters === 'number') {\n    // single GL enum\n    const key = parameters;\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n  const state = {};\n  for (const key of parameterKeys) {\n    const getter = GL_PARAMETER_GETTERS[key];\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n  return state;\n}\n/**\n * Reset all parameters to a (almost) pure context state\n * @note viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,\n * NOT the canvas size dimensions, so they will have to be properly set after\n * calling this function.\n */\nexport function resetGLParameters(gl) {\n  setGLParameters(gl, GL_PARAMETER_DEFAULTS);\n}\n// Helpers\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(object) {\n  // @ts-ignore dummy key variable\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["GL_PARAMETER_DEFAULTS","GL_PARAMETER_SETTERS","GL_COMPOSITE_PARAMETER_SETTERS","GL_PARAMETER_GETTERS","setGLParameters","gl","parameters","isObjectEmpty","compositeSetters","key","glConstant","Number","setter","cache","state","compositeSetter","getGLParameters","getter","getParameter","parameterKeys","Array","isArray","Object","keys","resetGLParameters","object"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\context\\parameters\\unified-parameter-api.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport type {GLParameters} from '@luma.gl/constants';\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nexport type {GLParameters};\n\n/**\n * Sets any GL parameter regardless of function (gl.blendMode, ...)\n *\n * @note requires a `cache` object to be set on the context (gl.state.cache)\n * This object is used to fill in any missing values for composite setter functions\n */\nexport function setGLParameters(gl: WebGL2RenderingContext, parameters: GLParameters): void {\n  if (isObjectEmpty(parameters)) {\n    return;\n  }\n\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in parameters) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 parameters in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, parameters[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  // @ts-expect-error\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, parameters, cache);\n    }\n  }\n\n  // Add a log for the else case?\n}\n\n/**\n * Reads the entire WebGL state from a context\n\n  // default to querying all parameters\n\n  * @returns - a newly created map, with values keyed by GL parameters\n *\n * @note Copies the state from a context (gl.getParameter should not be overriden)\n * Reads the entire WebGL state from a context\n *\n * @note This can generates a huge amount of synchronous driver roundtrips and should be\n * considered a very slow operation, to be used only if/when a context already manipulated\n * by external code needs to be synchronized for the first time\n */\nexport function getGLParameters(\n  gl: WebGL2RenderingContext,\n  parameters: keyof GLParameters | (keyof GLParameters)[] | GLParameters = GL_PARAMETER_DEFAULTS\n): GLParameters {\n  // support both arrays of parameters and objects (keys represent parameters)\n\n  if (typeof parameters === 'number') {\n    // single GL enum\n    const key = parameters;\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    const getter = GL_PARAMETER_GETTERS[key];\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n  return state;\n}\n\n/**\n * Reset all parameters to a (almost) pure context state\n * @note viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,\n * NOT the canvas size dimensions, so they will have to be properly set after\n * calling this function.\n */\nexport function resetGLParameters(gl: WebGL2RenderingContext): void {\n  setGLParameters(gl, GL_PARAMETER_DEFAULTS);\n}\n\n// Helpers\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(object) {\n  // @ts-ignore dummy key variable\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n"],"mappings":"AAAA;AACA;AACA;AAMA,SACEA,qBAAqB,EACrBC,oBAAoB,EACpBC,8BAA8B,EAC9BC,oBAAoB,QACrB;AAID;;;;;;AAMA,OAAM,SAAUC,eAAeA,CAACC,EAA0B,EAAEC,UAAwB;EAClF,IAAIC,aAAa,CAACD,UAAU,CAAC,EAAE;IAC7B;EACF;EAEA,MAAME,gBAAgB,GAAG,EAAE;EAE3B;EAEA,KAAK,MAAMC,GAAG,IAAIH,UAAU,EAAE;IAC5B,MAAMI,UAAU,GAAGC,MAAM,CAACF,GAAG,CAAC;IAC9B,MAAMG,MAAM,GAAGX,oBAAoB,CAACQ,GAAG,CAAC;IACxC,IAAIG,MAAM,EAAE;MACV;MACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC9BJ,gBAAgB,CAACI,MAAM,CAAC,GAAG,IAAI;MACjC,CAAC,MAAM;QACL;QACA;QACA;QACA;QACAA,MAAM,CAACP,EAAE,EAAEC,UAAU,CAACG,GAAG,CAAC,EAAEC,UAAU,CAAC;MACzC;IACF;EACF;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMG,KAAK,GAAGR,EAAE,CAACS,KAAK,IAAIT,EAAE,CAACS,KAAK,CAACD,KAAK;EACxC,IAAIA,KAAK,EAAE;IACT,KAAK,MAAMJ,GAAG,IAAID,gBAAgB,EAAE;MAClC;MACA,MAAMO,eAAe,GAAGb,8BAA8B,CAACO,GAAG,CAAC;MAC3D;MACA;MACAM,eAAe,CAACV,EAAE,EAAEC,UAAU,EAAEO,KAAK,CAAC;IACxC;EACF;EAEA;AACF;AAEA;;;;;;;;;;;;;;AAcA,OAAM,SAAUG,eAAeA,CAC7BX,EAA0B,EAC1BC,UAAA,GAAyEN,qBAAqB;EAE9F;EAEA,IAAI,OAAOM,UAAU,KAAK,QAAQ,EAAE;IAClC;IACA,MAAMG,GAAG,GAAGH,UAAU;IACtB,MAAMW,MAAM,GAAGd,oBAAoB,CAACM,GAAG,CAAC;IACxC,OAAOQ,MAAM,GAAGA,MAAM,CAACZ,EAAE,EAAEI,GAAG,CAAC,GAAGJ,EAAE,CAACa,YAAY,CAACT,GAAG,CAAC;EACxD;EAEA,MAAMU,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACf,UAAU,CAAC,GAAGA,UAAU,GAAGgB,MAAM,CAACC,IAAI,CAACjB,UAAU,CAAC;EAEtF,MAAMQ,KAAK,GAAG,EAAE;EAChB,KAAK,MAAML,GAAG,IAAIU,aAAa,EAAE;IAC/B,MAAMF,MAAM,GAAGd,oBAAoB,CAACM,GAAG,CAAC;IACxCK,KAAK,CAACL,GAAG,CAAC,GAAGQ,MAAM,GAAGA,MAAM,CAACZ,EAAE,EAAEM,MAAM,CAACF,GAAG,CAAC,CAAC,GAAGJ,EAAE,CAACa,YAAY,CAACP,MAAM,CAACF,GAAG,CAAC,CAAC;EAC9E;EACA,OAAOK,KAAK;AACd;AAEA;;;;;;AAMA,OAAM,SAAUU,iBAAiBA,CAACnB,EAA0B;EAC1DD,eAAe,CAACC,EAAE,EAAEL,qBAAqB,CAAC;AAC5C;AAEA;AAEA;AACA,SAASO,aAAaA,CAACkB,MAAM;EAC3B;EACA,KAAK,MAAMhB,GAAG,IAAIgB,MAAM,EAAE;IACxB,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}