{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Merge two luma.gl shader descriptors\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n  const result = {\n    ...target,\n    ...source\n  };\n  if ('defines' in source) {\n    result.defines = {\n      ...target.defines,\n      ...source.defines\n    };\n  }\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n    // Hack: prject32 and project64 cannot co-exist\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = {\n        ...target.inject\n      };\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n      result.inject = mergedInjection;\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["mergeShaders","target","source","result","defines","modules","concat","some","module","name","index","findIndex","splice","inject","mergedInjection","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\utils\\shader.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Merge two luma.gl shader descriptors\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n  const result = {...target, ...source};\n\n  if ('defines' in source) {\n    result.defines = {...target.defines, ...source.defines};\n  }\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    // Hack: prject32 and project64 cannot co-exist\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = {...target.inject};\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n      result.inject = mergedInjection;\n    }\n  }\n  return result;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA,OAAM,SAAUA,YAAYA,CAACC,MAAM,EAAEC,MAAM;EACzC,IAAI,CAACA,MAAM,EAAE;IACX,OAAOD,MAAM;EACf;EACA,MAAME,MAAM,GAAG;IAAC,GAAGF,MAAM;IAAE,GAAGC;EAAM,CAAC;EAErC,IAAI,SAAS,IAAIA,MAAM,EAAE;IACvBC,MAAM,CAACC,OAAO,GAAG;MAAC,GAAGH,MAAM,CAACG,OAAO;MAAE,GAAGF,MAAM,CAACE;IAAO,CAAC;EACzD;EACA,IAAI,SAAS,IAAIF,MAAM,EAAE;IACvBC,MAAM,CAACE,OAAO,GAAG,CAACJ,MAAM,CAACI,OAAO,IAAI,EAAE,EAAEC,MAAM,CAACJ,MAAM,CAACG,OAAO,CAAC;IAE9D;IACA,IAAIH,MAAM,CAACG,OAAO,CAACE,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,CAAC,EAAE;MAC9D,MAAMC,KAAK,GAAGP,MAAM,CAACE,OAAO,CAACM,SAAS,CAACH,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,CAAC;MAC7E,IAAIC,KAAK,IAAI,CAAC,EAAE;QACdP,MAAM,CAACE,OAAO,CAACO,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACjC;IACF;EACF;EACA,IAAI,QAAQ,IAAIR,MAAM,EAAE;IACtB,IAAI,CAACD,MAAM,CAACY,MAAM,EAAE;MAClBV,MAAM,CAACU,MAAM,GAAGX,MAAM,CAACW,MAAM;IAC/B,CAAC,MAAM;MACL,MAAMC,eAAe,GAAG;QAAC,GAAGb,MAAM,CAACY;MAAM,CAAC;MAC1C,KAAK,MAAME,GAAG,IAAIb,MAAM,CAACW,MAAM,EAAE;QAC/BC,eAAe,CAACC,GAAG,CAAC,GAAG,CAACD,eAAe,CAACC,GAAG,CAAC,IAAI,EAAE,IAAIb,MAAM,CAACW,MAAM,CAACE,GAAG,CAAC;MAC1E;MACAZ,MAAM,CAACU,MAAM,GAAGC,eAAe;IACjC;EACF;EACA,OAAOX,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}