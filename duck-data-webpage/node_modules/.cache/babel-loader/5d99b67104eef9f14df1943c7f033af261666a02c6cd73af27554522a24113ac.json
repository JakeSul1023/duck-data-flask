{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport JSZip from 'jszip';\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\nexport const ZipLoader = {\n  dataType: null,\n  batchType: null,\n  id: 'zip',\n  module: 'zip',\n  name: 'Zip Archive',\n  version: VERSION,\n  extensions: ['zip'],\n  mimeTypes: ['application/zip'],\n  category: 'archive',\n  tests: ['PK'],\n  options: {},\n  parse: parseZipAsync\n};\n// TODO - Could return a map of promises, perhaps as an option...\nasync function parseZipAsync(data, options = {}) {\n  const promises = [];\n  const fileMap = {};\n  try {\n    const jsZip = new JSZip();\n    const zip = await jsZip.loadAsync(data, options);\n    // start to load each file in this zip\n    zip.forEach((relativePath, zipEntry) => {\n      const subFilename = zipEntry.name;\n      const promise = loadZipEntry(jsZip, subFilename, options).then(arrayBufferOrError => {\n        fileMap[relativePath] = arrayBufferOrError;\n      });\n      // Ensure Promise.all doesn't ignore rejected promises.\n      promises.push(promise);\n    });\n    await Promise.all(promises);\n    return fileMap;\n  } catch (error) {\n    // @ts-ignore\n    options.log.error(`Unable to read zip archive: ${error}`);\n    throw error;\n  }\n}\nasync function loadZipEntry(jsZip, subFilename, options = {}) {\n  // jszip supports both arraybuffer and text, the main loaders.gl types\n  // https://stuk.github.io/jszip/documentation/api_zipobject/async.html\n  try {\n    const arrayBuffer = await jsZip.file(subFilename).async(options.dataType || 'arraybuffer');\n    return arrayBuffer;\n  } catch (error) {\n    options.log.error(`Unable to read ${subFilename} from zip archive: ${error}`);\n    // Store error in place of data in map\n    return error;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}