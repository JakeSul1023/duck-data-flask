{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a)) {\n    // Special treatment for arrays: compare 1-level deep\n    // This is to support equality of matrix/coordinate props\n    const len = a.length;\n    if (!b || b.length !== len) {\n      return false;\n    }\n    for (let i = 0; i < len; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Speed up consecutive function calls by caching the result of calls with identical input\n * https://en.wikipedia.org/wiki/Memoization\n * @param {function} compute - the function to be memoized\n */\nexport default function memoize(compute) {\n  let cachedArgs = {};\n  let cachedResult;\n  return args => {\n    for (const key in args) {\n      if (!isEqual(args[key], cachedArgs[key])) {\n        cachedResult = compute(args);\n        cachedArgs = args;\n        break;\n      }\n    }\n    return cachedResult;\n  };\n}","map":{"version":3,"names":["isEqual","a","b","Array","isArray","len","length","i","memoize","compute","cachedArgs","cachedResult","args","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\utils\\memoize.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a)) {\n    // Special treatment for arrays: compare 1-level deep\n    // This is to support equality of matrix/coordinate props\n    const len = a.length;\n    if (!b || b.length !== len) {\n      return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Speed up consecutive function calls by caching the result of calls with identical input\n * https://en.wikipedia.org/wiki/Memoization\n * @param {function} compute - the function to be memoized\n */\nexport default function memoize<In, Out>(compute: (args: In) => Out): (args: In) => Out {\n  let cachedArgs: any = {};\n  let cachedResult: Out;\n\n  return (args: In) => {\n    for (const key in args) {\n      if (!isEqual(args[key], cachedArgs[key])) {\n        cachedResult = compute(args);\n        cachedArgs = args;\n        break;\n      }\n    }\n    return cachedResult;\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,OAAOA,CAACC,CAAC,EAAEC,CAAC;EACnB,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,IAAI;EACb;EACA,IAAIC,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,EAAE;IACpB;IACA;IACA,MAAMI,GAAG,GAAGJ,CAAC,CAACK,MAAM;IACpB,IAAI,CAACJ,CAAC,IAAIA,CAAC,CAACI,MAAM,KAAKD,GAAG,EAAE;MAC1B,OAAO,KAAK;IACd;IAEA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;MAC5B,IAAIN,CAAC,CAACM,CAAC,CAAC,KAAKL,CAAC,CAACK,CAAC,CAAC,EAAE;QACjB,OAAO,KAAK;MACd;IACF;IACA,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;AAEA;;;;;AAKA,eAAc,SAAUC,OAAOA,CAAUC,OAA0B;EACjE,IAAIC,UAAU,GAAQ,EAAE;EACxB,IAAIC,YAAiB;EAErB,OAAQC,IAAQ,IAAI;IAClB,KAAK,MAAMC,GAAG,IAAID,IAAI,EAAE;MACtB,IAAI,CAACZ,OAAO,CAACY,IAAI,CAACC,GAAG,CAAC,EAAEH,UAAU,CAACG,GAAG,CAAC,CAAC,EAAE;QACxCF,YAAY,GAAGF,OAAO,CAACG,IAAI,CAAC;QAC5BF,UAAU,GAAGE,IAAI;QACjB;MACF;IACF;IACA,OAAOD,YAAY;EACrB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}