{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// LZO\n// import {loadLibrary} from '@loaders.gl/worker-utils';\nimport { registerJSModules, getJSModule, toBuffer } from '@loaders.gl/loader-utils';\nimport { Compression } from \"./compression.js\";\n// import {isBrowser} from '@loaders.gl/loader-utils';\n// import lzo from 'lzo'; // https://bundlephobia.com/package/lzo\n// import {decompress} from 'lzo-wasm';\n// const LZO_WASM_JS_URL = './node_modules/lzo-wasm/lzo-wasm.js';\n// const LZO_WASM_WASM_URL = './node_modules/lzo-wasm/lzo-wasm.wasm';\n/**\n * Lempel-Ziv-Oberheimer compression / decompression\n */\nexport class LZOCompression extends Compression {\n  name = 'lzo';\n  extensions = [];\n  contentEncodings = [];\n  isSupported = false; // !isBrowser;\n  options;\n  /**\n   * lzo is an injectable dependency due to big size\n   * @param options\n   */\n  constructor(options) {\n    super(options);\n    this.options = options;\n    registerJSModules(options?.modules);\n  }\n  async preload(modules = {}) {\n    registerJSModules(modules);\n    // await loadLibrary(LZO_WASM_JS_URL);\n    // await loadLibrary(LZO_WASM_WASM_URL);\n  }\n  async compress(input) {\n    await this.preload();\n    const lzo = getJSModule('lzo', this.name);\n    // const inputArray = new Uint8Array(input);\n    const inputBuffer = toBuffer(input);\n    return lzo.compress(inputBuffer).buffer;\n  }\n  async decompress(input) {\n    try {\n      await this.preload();\n      const lzo = getJSModule('lzo', this.name);\n      // const inputArray = new Uint8Array(input);\n      const inputBuffer = toBuffer(input);\n      return lzo.decompress(inputBuffer).buffer;\n    } catch (error) {\n      // TODO - solve SharedArrayBuffer issues\n      // return decompress(input);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["registerJSModules","getJSModule","toBuffer","Compression","LZOCompression","name","extensions","contentEncodings","isSupported","options","constructor","modules","preload","compress","input","lzo","inputBuffer","buffer","decompress","error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/compression/dist/lib/lzo-compression.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// LZO\n// import {loadLibrary} from '@loaders.gl/worker-utils';\nimport { registerJSModules, getJSModule, toBuffer } from '@loaders.gl/loader-utils';\nimport { Compression } from \"./compression.js\";\n// import {isBrowser} from '@loaders.gl/loader-utils';\n// import lzo from 'lzo'; // https://bundlephobia.com/package/lzo\n// import {decompress} from 'lzo-wasm';\n// const LZO_WASM_JS_URL = './node_modules/lzo-wasm/lzo-wasm.js';\n// const LZO_WASM_WASM_URL = './node_modules/lzo-wasm/lzo-wasm.wasm';\n/**\n * Lempel-Ziv-Oberheimer compression / decompression\n */\nexport class LZOCompression extends Compression {\n    name = 'lzo';\n    extensions = [];\n    contentEncodings = [];\n    isSupported = false; // !isBrowser;\n    options;\n    /**\n     * lzo is an injectable dependency due to big size\n     * @param options\n     */\n    constructor(options) {\n        super(options);\n        this.options = options;\n        registerJSModules(options?.modules);\n    }\n    async preload(modules = {}) {\n        registerJSModules(modules);\n        // await loadLibrary(LZO_WASM_JS_URL);\n        // await loadLibrary(LZO_WASM_WASM_URL);\n    }\n    async compress(input) {\n        await this.preload();\n        const lzo = getJSModule('lzo', this.name);\n        // const inputArray = new Uint8Array(input);\n        const inputBuffer = toBuffer(input);\n        return lzo.compress(inputBuffer).buffer;\n    }\n    async decompress(input) {\n        try {\n            await this.preload();\n            const lzo = getJSModule('lzo', this.name);\n            // const inputArray = new Uint8Array(input);\n            const inputBuffer = toBuffer(input);\n            return lzo.decompress(inputBuffer).buffer;\n        }\n        catch (error) {\n            // TODO - solve SharedArrayBuffer issues\n            // return decompress(input);\n            throw error;\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,0BAA0B;AACnF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,SAASD,WAAW,CAAC;EAC5CE,IAAI,GAAG,KAAK;EACZC,UAAU,GAAG,EAAE;EACfC,gBAAgB,GAAG,EAAE;EACrBC,WAAW,GAAG,KAAK,CAAC,CAAC;EACrBC,OAAO;EACP;AACJ;AACA;AACA;EACIC,WAAWA,CAACD,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtBT,iBAAiB,CAACS,OAAO,EAAEE,OAAO,CAAC;EACvC;EACA,MAAMC,OAAOA,CAACD,OAAO,GAAG,CAAC,CAAC,EAAE;IACxBX,iBAAiB,CAACW,OAAO,CAAC;IAC1B;IACA;EACJ;EACA,MAAME,QAAQA,CAACC,KAAK,EAAE;IAClB,MAAM,IAAI,CAACF,OAAO,CAAC,CAAC;IACpB,MAAMG,GAAG,GAAGd,WAAW,CAAC,KAAK,EAAE,IAAI,CAACI,IAAI,CAAC;IACzC;IACA,MAAMW,WAAW,GAAGd,QAAQ,CAACY,KAAK,CAAC;IACnC,OAAOC,GAAG,CAACF,QAAQ,CAACG,WAAW,CAAC,CAACC,MAAM;EAC3C;EACA,MAAMC,UAAUA,CAACJ,KAAK,EAAE;IACpB,IAAI;MACA,MAAM,IAAI,CAACF,OAAO,CAAC,CAAC;MACpB,MAAMG,GAAG,GAAGd,WAAW,CAAC,KAAK,EAAE,IAAI,CAACI,IAAI,CAAC;MACzC;MACA,MAAMW,WAAW,GAAGd,QAAQ,CAACY,KAAK,CAAC;MACnC,OAAOC,GAAG,CAACG,UAAU,CAACF,WAAW,CAAC,CAACC,MAAM;IAC7C,CAAC,CACD,OAAOE,KAAK,EAAE;MACV;MACA;MACA,MAAMA,KAAK;IACf;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}