{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Note: The numeric values here are matched by shader code in the\n// \"project\" and \"project64\" shader modules. Both places need to be\n// updated.\nimport log from \"../utils/log.js\";\nimport { Pan, InputDirection, Pinch, Tap } from 'mjolnir.js';\n/**\n * The coordinate system that positions/dimensions are defined in.\n */\nexport const COORDINATE_SYSTEM = {\n  /**\n   * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise\n   */\n  DEFAULT: -1,\n  /**\n   * Positions are interpreted as [longitude, latitude, elevation]\n   * longitude/latitude are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT: 1,\n  /**\n   * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.\n   * Dimensions are in meters.\n   */\n  METER_OFFSETS: 2,\n  /**\n   * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.\n   * deltaLng/deltaLat are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT_OFFSETS: 3,\n  /**\n   * Positions and dimensions are in the common units of the viewport.\n   */\n  CARTESIAN: 0\n};\n// Deprecated\n/* eslint-disable accessor-pairs */\nObject.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {\n  get: () => {\n    log.deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();\n    return 0;\n  }\n});\n/* eslint-enable accessor-pairs */\n/**\n * How coordinates are transformed from the world space into the common space.\n */\nexport const PROJECTION_MODE = {\n  /**\n   * Render geospatial data in Web Mercator projection\n   */\n  WEB_MERCATOR: 1,\n  /**\n   * Render geospatial data as a 3D globe\n   */\n  GLOBE: 2,\n  /**\n   * (Internal use only) Web Mercator projection at high zoom\n   */\n  WEB_MERCATOR_AUTO_OFFSET: 4,\n  /**\n   * No transformation\n   */\n  IDENTITY: 0\n};\nexport const UNIT = {\n  common: 0,\n  meters: 1,\n  pixels: 2\n};\nexport const EVENT_HANDLERS = {\n  click: 'onClick',\n  panstart: 'onDragStart',\n  panmove: 'onDrag',\n  panend: 'onDragEnd'\n};\nexport const RECOGNIZERS = {\n  multipan: [Pan, {\n    threshold: 10,\n    direction: InputDirection.Vertical,\n    pointers: 2\n  }],\n  pinch: [Pinch, {}, null, ['multipan']],\n  pan: [Pan, {\n    threshold: 1\n  }, ['pinch'], ['multipan']],\n  dblclick: [Tap, {\n    event: 'dblclick',\n    taps: 2\n  }],\n  click: [Tap, {\n    event: 'click'\n  }, null, ['dblclick']]\n};\n/**\n * @deprecated Use string constants directly\n */\nexport const OPERATION = {\n  DRAW: 'draw',\n  MASK: 'mask',\n  TERRAIN: 'terrain'\n};","map":{"version":3,"names":["log","Pan","InputDirection","Pinch","Tap","COORDINATE_SYSTEM","DEFAULT","LNGLAT","METER_OFFSETS","LNGLAT_OFFSETS","CARTESIAN","Object","defineProperty","get","deprecated","PROJECTION_MODE","WEB_MERCATOR","GLOBE","WEB_MERCATOR_AUTO_OFFSET","IDENTITY","UNIT","common","meters","pixels","EVENT_HANDLERS","click","panstart","panmove","panend","RECOGNIZERS","multipan","threshold","direction","Vertical","pointers","pinch","pan","dblclick","event","taps","OPERATION","DRAW","MASK","TERRAIN"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\lib\\constants.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Note: The numeric values here are matched by shader code in the\n// \"project\" and \"project64\" shader modules. Both places need to be\n// updated.\nimport log from '../utils/log';\nimport {Pan, InputDirection, Pinch, Tap} from 'mjolnir.js';\nimport type {PanRecognizerOptions, PinchRecognizerOptions, TapRecognizerOptions} from 'mjolnir.js';\n\n/**\n * The coordinate system that positions/dimensions are defined in.\n */\nexport const COORDINATE_SYSTEM = {\n  /**\n   * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise\n   */\n  DEFAULT: -1,\n  /**\n   * Positions are interpreted as [longitude, latitude, elevation]\n   * longitude/latitude are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT: 1,\n\n  /**\n   * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.\n   * Dimensions are in meters.\n   */\n  METER_OFFSETS: 2,\n\n  /**\n   * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.\n   * deltaLng/deltaLat are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT_OFFSETS: 3,\n\n  /**\n   * Positions and dimensions are in the common units of the viewport.\n   */\n  CARTESIAN: 0\n} as const;\n\n// Enums cannot be directly exported as they are not transpiled correctly into ES5, see https://github.com/visgl/deck.gl/issues/7130\nexport type CoordinateSystem = -1 | 0 | 1 | 2 | 3;\n\n// Deprecated\n/* eslint-disable accessor-pairs */\nObject.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {\n  get: () => {\n    log.deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();\n    return 0;\n  }\n});\n/* eslint-enable accessor-pairs */\n\n/**\n * How coordinates are transformed from the world space into the common space.\n */\nexport const PROJECTION_MODE = {\n  /**\n   * Render geospatial data in Web Mercator projection\n   */\n  WEB_MERCATOR: 1,\n  /**\n   * Render geospatial data as a 3D globe\n   */\n  GLOBE: 2,\n\n  /**\n   * (Internal use only) Web Mercator projection at high zoom\n   */\n  WEB_MERCATOR_AUTO_OFFSET: 4,\n\n  /**\n   * No transformation\n   */\n  IDENTITY: 0\n} as const;\n\nexport const UNIT = {\n  common: 0,\n  meters: 1,\n  pixels: 2\n} as const;\n\nexport const EVENT_HANDLERS: {[eventName: string]: string} = {\n  click: 'onClick',\n  panstart: 'onDragStart',\n  panmove: 'onDrag',\n  panend: 'onDragEnd'\n} as const;\n\nexport const RECOGNIZERS = {\n  multipan: [Pan, {threshold: 10, direction: InputDirection.Vertical, pointers: 2}],\n  pinch: [Pinch, {}, null, ['multipan']],\n  pan: [Pan, {threshold: 1}, ['pinch'], ['multipan']],\n  dblclick: [Tap, {event: 'dblclick', taps: 2}],\n  click: [Tap, {event: 'click'}, null, ['dblclick']]\n} as const;\nexport type RecognizerOptions = {\n  pinch?: Omit<PinchRecognizerOptions, 'event' | 'enable'>;\n  multipan?: Omit<PanRecognizerOptions, 'event' | 'enable'>;\n  pan?: Omit<PanRecognizerOptions, 'event' | 'enable'>;\n  dblclick?: Omit<TapRecognizerOptions, 'event' | 'enable'>;\n  click?: Omit<TapRecognizerOptions, 'event' | 'enable'>;\n};\n\n/**\n * @deprecated Use string constants directly\n */\nexport const OPERATION = {\n  DRAW: 'draw',\n  MASK: 'mask',\n  TERRAIN: 'terrain'\n} as const;\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA,OAAOA,GAAG;AACV,SAAQC,GAAG,EAAEC,cAAc,EAAEC,KAAK,EAAEC,GAAG,QAAO,YAAY;AAG1D;;;AAGA,OAAO,MAAMC,iBAAiB,GAAG;EAC/B;;;EAGAC,OAAO,EAAE,CAAC,CAAC;EACX;;;;;EAKAC,MAAM,EAAE,CAAC;EAET;;;;EAIAC,aAAa,EAAE,CAAC;EAEhB;;;;;EAKAC,cAAc,EAAE,CAAC;EAEjB;;;EAGAC,SAAS,EAAE;CACH;AAKV;AACA;AACAC,MAAM,CAACC,cAAc,CAACP,iBAAiB,EAAE,UAAU,EAAE;EACnDQ,GAAG,EAAEA,CAAA,KAAK;IACRb,GAAG,CAACc,UAAU,CAAC,4BAA4B,EAAE,6BAA6B,CAAC,EAAE;IAC7E,OAAO,CAAC;EACV;CACD,CAAC;AACF;AAEA;;;AAGA,OAAO,MAAMC,eAAe,GAAG;EAC7B;;;EAGAC,YAAY,EAAE,CAAC;EACf;;;EAGAC,KAAK,EAAE,CAAC;EAER;;;EAGAC,wBAAwB,EAAE,CAAC;EAE3B;;;EAGAC,QAAQ,EAAE;CACF;AAEV,OAAO,MAAMC,IAAI,GAAG;EAClBC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE;CACA;AAEV,OAAO,MAAMC,cAAc,GAAkC;EAC3DC,KAAK,EAAE,SAAS;EAChBC,QAAQ,EAAE,aAAa;EACvBC,OAAO,EAAE,QAAQ;EACjBC,MAAM,EAAE;CACA;AAEV,OAAO,MAAMC,WAAW,GAAG;EACzBC,QAAQ,EAAE,CAAC7B,GAAG,EAAE;IAAC8B,SAAS,EAAE,EAAE;IAAEC,SAAS,EAAE9B,cAAc,CAAC+B,QAAQ;IAAEC,QAAQ,EAAE;EAAC,CAAC,CAAC;EACjFC,KAAK,EAAE,CAAChC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC;EACtCiC,GAAG,EAAE,CAACnC,GAAG,EAAE;IAAC8B,SAAS,EAAE;EAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;EACnDM,QAAQ,EAAE,CAACjC,GAAG,EAAE;IAACkC,KAAK,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAC,CAAC,CAAC;EAC7Cd,KAAK,EAAE,CAACrB,GAAG,EAAE;IAACkC,KAAK,EAAE;EAAO,CAAC,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC;CACzC;AASV;;;AAGA,OAAO,MAAME,SAAS,GAAG;EACvBC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}