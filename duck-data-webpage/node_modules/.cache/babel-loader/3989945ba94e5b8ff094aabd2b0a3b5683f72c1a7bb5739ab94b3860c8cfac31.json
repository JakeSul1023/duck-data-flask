{"ast":null,"code":"// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nconst DRACO_DECODER_VERSION = '1.5.6';\nconst DRACO_ENCODER_VERSION = '1.4.1';\nconst STATIC_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_DECODER_VERSION}`;\nexport const DRACO_EXTERNAL_LIBRARIES = {\n  /** The primary Draco3D encoder, javascript wrapper part */\n  DECODER: 'draco_wasm_wrapper.js',\n  /** The primary draco decoder, compiled web assembly part */\n  DECODER_WASM: 'draco_decoder.wasm',\n  /** Fallback decoder for non-webassebly environments. Very big bundle, lower performance */\n  FALLBACK_DECODER: 'draco_decoder.js',\n  /** Draco encoder */\n  ENCODER: 'draco_encoder.js'\n};\nexport const DRACO_EXTERNAL_LIBRARY_URLS = {\n  [DRACO_EXTERNAL_LIBRARIES.DECODER]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.DECODER}`,\n  [DRACO_EXTERNAL_LIBRARIES.DECODER_WASM]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.DECODER_WASM}`,\n  [DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER}`,\n  [DRACO_EXTERNAL_LIBRARIES.ENCODER]: `https://raw.githubusercontent.com/google/draco/${DRACO_ENCODER_VERSION}/javascript/${DRACO_EXTERNAL_LIBRARIES.ENCODER}`\n};\nlet loadDecoderPromise;\nlet loadEncoderPromise;\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise ||= modules.draco3d.createDecoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise ||= loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise ||= modules.draco3d.createEncoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise ||= loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n// DRACO DECODER LOADING\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER], 'draco', options, DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER);\n      break;\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.DECODER], 'draco', options, DRACO_EXTERNAL_LIBRARIES.DECODER), await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.DECODER_WASM], 'draco', options, DRACO_EXTERNAL_LIBRARIES.DECODER_WASM)]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: draco => resolve({\n        draco\n      }) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n// ENCODER\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.ENCODER], 'draco', options, DRACO_EXTERNAL_LIBRARIES.ENCODER);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n  return new Promise(resolve => {\n    DracoEncoderModule({\n      onModuleLoaded: draco => resolve({\n        draco\n      }) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}","map":{"version":3,"names":["loadLibrary","DRACO_DECODER_VERSION","DRACO_ENCODER_VERSION","STATIC_DECODER_URL","DRACO_EXTERNAL_LIBRARIES","DECODER","DECODER_WASM","FALLBACK_DECODER","ENCODER","DRACO_EXTERNAL_LIBRARY_URLS","loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","options","modules","draco3d","createDecoderModule","then","draco","loadDracoDecoder","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","DracoDecoderModule","wasmBinary","decoderType","Promise","all","globalThis","initializeDracoDecoder","resolve","onModuleLoaded","DracoEncoderModule"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/draco/dist/lib/draco-module-loader.js"],"sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nconst DRACO_DECODER_VERSION = '1.5.6';\nconst DRACO_ENCODER_VERSION = '1.4.1';\nconst STATIC_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_DECODER_VERSION}`;\nexport const DRACO_EXTERNAL_LIBRARIES = {\n    /** The primary Draco3D encoder, javascript wrapper part */\n    DECODER: 'draco_wasm_wrapper.js',\n    /** The primary draco decoder, compiled web assembly part */\n    DECODER_WASM: 'draco_decoder.wasm',\n    /** Fallback decoder for non-webassebly environments. Very big bundle, lower performance */\n    FALLBACK_DECODER: 'draco_decoder.js',\n    /** Draco encoder */\n    ENCODER: 'draco_encoder.js'\n};\nexport const DRACO_EXTERNAL_LIBRARY_URLS = {\n    [DRACO_EXTERNAL_LIBRARIES.DECODER]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.DECODER}`,\n    [DRACO_EXTERNAL_LIBRARIES.DECODER_WASM]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.DECODER_WASM}`,\n    [DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER}`,\n    [DRACO_EXTERNAL_LIBRARIES.ENCODER]: `https://raw.githubusercontent.com/google/draco/${DRACO_ENCODER_VERSION}/javascript/${DRACO_EXTERNAL_LIBRARIES.ENCODER}`\n};\nlet loadDecoderPromise;\nlet loadEncoderPromise;\nexport async function loadDracoDecoderModule(options) {\n    const modules = options.modules || {};\n    // Check if a bundled draco3d library has been supplied by application\n    if (modules.draco3d) {\n        loadDecoderPromise ||= modules.draco3d.createDecoderModule({}).then((draco) => {\n            return { draco };\n        });\n    }\n    else {\n        // If not, dynamically load the WASM script from our CDN\n        loadDecoderPromise ||= loadDracoDecoder(options);\n    }\n    return await loadDecoderPromise;\n}\nexport async function loadDracoEncoderModule(options) {\n    const modules = options.modules || {};\n    // Check if a bundled draco3d library has been supplied by application\n    if (modules.draco3d) {\n        loadEncoderPromise ||= modules.draco3d.createEncoderModule({}).then((draco) => {\n            return { draco };\n        });\n    }\n    else {\n        // If not, dynamically load the WASM script from our CDN\n        loadEncoderPromise ||= loadDracoEncoder(options);\n    }\n    return await loadEncoderPromise;\n}\n// DRACO DECODER LOADING\nasync function loadDracoDecoder(options) {\n    let DracoDecoderModule;\n    let wasmBinary;\n    switch (options.draco && options.draco.decoderType) {\n        case 'js':\n            DracoDecoderModule = await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER], 'draco', options, DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER);\n            break;\n        case 'wasm':\n        default:\n            [DracoDecoderModule, wasmBinary] = await Promise.all([\n                await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.DECODER], 'draco', options, DRACO_EXTERNAL_LIBRARIES.DECODER),\n                await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.DECODER_WASM], 'draco', options, DRACO_EXTERNAL_LIBRARIES.DECODER_WASM)\n            ]);\n    }\n    // Depends on how import happened...\n    // @ts-ignore\n    DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n    return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n    const options = {};\n    if (wasmBinary) {\n        options.wasmBinary = wasmBinary;\n    }\n    return new Promise((resolve) => {\n        DracoDecoderModule({\n            ...options,\n            onModuleLoaded: (draco) => resolve({ draco }) // Module is Promise-like. Wrap in object to avoid loop.\n        });\n    });\n}\n// ENCODER\nasync function loadDracoEncoder(options) {\n    let DracoEncoderModule = await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.ENCODER], 'draco', options, DRACO_EXTERNAL_LIBRARIES.ENCODER);\n    // @ts-ignore\n    DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n    return new Promise((resolve) => {\n        DracoEncoderModule({\n            onModuleLoaded: (draco) => resolve({ draco }) // Module is Promise-like. Wrap in object to avoid loop.\n        });\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}