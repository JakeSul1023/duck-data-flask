{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue {\n  _values;\n  _settlers;\n  _closed;\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value) {\n    return this.enqueue(value);\n  }\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close() {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({\n        done: true\n      });\n    }\n    this._closed = true;\n  }\n  // ITERATOR IMPLEMENTATION\n  /** @returns a Promise for an IteratorResult */\n  next() {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({\n        done: false,\n        value\n      });\n    }\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({\n        done: true,\n        value: undefined\n      });\n    }\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({\n        resolve,\n        reject\n      });\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}