{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { calculatePickingColors } from \"./geojson-binary.js\";\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  const layerProps = createEmptyLayerProps();\n  const {\n    pointFeatures,\n    lineFeatures,\n    polygonFeatures,\n    polygonOutlineFeatures\n  } = features;\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff = featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff = featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n  return layerProps;\n}\nexport function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {\n  // The binary data format is documented here\n  // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n  // It is the default output from the `MVTLoader` and can also be obtained\n  // from GeoJSON by using the `geojsonToBinary` utility function.\n  const layerProps = createEmptyLayerProps();\n  const {\n    points,\n    lines,\n    polygons\n  } = geojsonBinary;\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 4,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    layerProps.polygons.data.attributes.indices = polygons.triangles.value;\n  }\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n  return layerProps;\n}","map":{"version":3,"names":["calculatePickingColors","createEmptyLayerProps","points","lines","polygons","polygonsOutline","getCoordinates","f","geometry","coordinates","createLayerPropsFromFeatures","features","featuresDiff","layerProps","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","data","_dataDiff","getPosition","getPath","getPolygon","createLayerPropsFromBinary","geojsonBinary","encodePickingColor","customPickingColors","length","positions","value","size","attributes","instancePickingColors","properties","numericProps","featureIds","pathIndices","startIndices","_pathType","polygonIndices","pickingColors","_normalize","triangles","indices","primitivePolygonIndices"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\geojson-layer\\geojson-layer-props.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {LayerData, LayerProps} from '@deck.gl/core';\nimport {PolygonLayerProps, ScatterplotLayerProps} from '..';\nimport {calculatePickingColors} from './geojson-binary';\nimport type {ExtendedBinaryFeatureCollection} from './geojson-binary';\nimport {SeparatedGeometries} from './geojson';\n\n// TODO: PathLayer is not yet typed\ntype PathLayerProps = LayerProps & Record<string, any>;\n\nexport type SubLayersProps = {\n  points: Partial<ScatterplotLayerProps>;\n  lines: Partial<PathLayerProps>;\n  polygons: Partial<PolygonLayerProps>;\n  polygonsOutline: Partial<PathLayerProps>;\n};\n\nfunction createEmptyLayerProps(): SubLayersProps {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(\n  features: SeparatedGeometries,\n  featuresDiff\n): SubLayersProps {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(\n  geojsonBinary: Required<ExtendedBinaryFeatureCollection>,\n  encodePickingColor: (id: number, result: number[]) => void\n): SubLayersProps {\n  // The binary data format is documented here\n  // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n  // It is the default output from the `MVTLoader` and can also be obtained\n  // from GeoJSON by using the `geojsonToBinary` utility function.\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.points!\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  } as LayerData<any>;\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.lines!\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  } as LayerData<any>;\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 4,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    (layerProps.polygons.data as any).attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 4,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,sBAAsB,QAAC;AAc/B,SAASC,qBAAqBA,CAAA;EAC5B,OAAO;IACLC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE;GAClB;AACH;AAEA,SAASC,cAAcA,CAACC,CAAC;EACvB,OAAOA,CAAC,CAACC,QAAQ,CAACC,WAAW;AAC/B;AAEA,OAAM,SAAUC,4BAA4BA,CAC1CC,QAA6B,EAC7BC,YAAY;EAEZ,MAAMC,UAAU,GAAGZ,qBAAqB,EAAE;EAC1C,MAAM;IAACa,aAAa;IAAEC,YAAY;IAAEC,eAAe;IAAEC;EAAsB,CAAC,GAAGN,QAAQ;EAEvFE,UAAU,CAACX,MAAM,CAACgB,IAAI,GAAGJ,aAAa;EACtCD,UAAU,CAACX,MAAM,CAACiB,SAAS,GAAGP,YAAY,CAACE,aAAa,KAAK,MAAMF,YAAY,CAACE,aAAa,CAAC;EAC9FD,UAAU,CAACX,MAAM,CAACkB,WAAW,GAAGd,cAAc;EAE9CO,UAAU,CAACV,KAAK,CAACe,IAAI,GAAGH,YAAY;EACpCF,UAAU,CAACV,KAAK,CAACgB,SAAS,GAAGP,YAAY,CAACG,YAAY,KAAK,MAAMH,YAAY,CAACG,YAAY,CAAC;EAC3FF,UAAU,CAACV,KAAK,CAACkB,OAAO,GAAGf,cAAc;EAEzCO,UAAU,CAACT,QAAQ,CAACc,IAAI,GAAGF,eAAe;EAC1CH,UAAU,CAACT,QAAQ,CAACe,SAAS,GAC3BP,YAAY,CAACI,eAAe,KAAK,MAAMJ,YAAY,CAACI,eAAe,CAAC;EACtEH,UAAU,CAACT,QAAQ,CAACkB,UAAU,GAAGhB,cAAc;EAE/CO,UAAU,CAACR,eAAe,CAACa,IAAI,GAAGD,sBAAsB;EACxDJ,UAAU,CAACR,eAAe,CAACc,SAAS,GAClCP,YAAY,CAACK,sBAAsB,KAAK,MAAML,YAAY,CAACK,sBAAsB,CAAC;EACpFJ,UAAU,CAACR,eAAe,CAACgB,OAAO,GAAGf,cAAc;EAEnD,OAAOO,UAAU;AACnB;AAEA,OAAM,SAAUU,0BAA0BA,CACxCC,aAAwD,EACxDC,kBAA0D;EAE1D;EACA;EACA;EACA;EACA,MAAMZ,UAAU,GAAGZ,qBAAqB,EAAE;EAC1C,MAAM;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGoB,aAAa;EAE/C,MAAME,mBAAmB,GAAG1B,sBAAsB,CAACwB,aAAa,EAAEC,kBAAkB,CAAC;EAErFZ,UAAU,CAACX,MAAM,CAACgB,IAAI,GAAG;IACvBS,MAAM,EAAEzB,MAAM,CAAC0B,SAAS,CAACC,KAAK,CAACF,MAAM,GAAGzB,MAAM,CAAC0B,SAAS,CAACE,IAAI;IAC7DC,UAAU,EAAE;MACV,GAAG7B,MAAM,CAAC6B,UAAU;MACpBX,WAAW,EAAElB,MAAM,CAAC0B,SAAS;MAC7BI,qBAAqB,EAAE;QACrBF,IAAI,EAAE,CAAC;QACPD,KAAK,EAAEH,mBAAmB,CAACxB;;KAE9B;IACD+B,UAAU,EAAE/B,MAAM,CAAC+B,UAAU;IAC7BC,YAAY,EAAEhC,MAAM,CAACgC,YAAY;IACjCC,UAAU,EAAEjC,MAAM,CAACiC;GACF;EAEnBtB,UAAU,CAACV,KAAK,CAACe,IAAI,GAAG;IACtBS,MAAM,EAAExB,KAAK,CAACiC,WAAW,CAACP,KAAK,CAACF,MAAM,GAAG,CAAC;IAC1CU,YAAY,EAAElC,KAAK,CAACiC,WAAW,CAACP,KAAK;IACrCE,UAAU,EAAE;MACV,GAAG5B,KAAK,CAAC4B,UAAU;MACnBV,OAAO,EAAElB,KAAK,CAACyB,SAAS;MACxBI,qBAAqB,EAAE;QACrBF,IAAI,EAAE,CAAC;QACPD,KAAK,EAAEH,mBAAmB,CAACvB;;KAE9B;IACD8B,UAAU,EAAE9B,KAAK,CAAC8B,UAAU;IAC5BC,YAAY,EAAE/B,KAAK,CAAC+B,YAAY;IAChCC,UAAU,EAAEhC,KAAK,CAACgC;GACD;EACnBtB,UAAU,CAACV,KAAK,CAACmC,SAAS,GAAG,MAAM;EAEnCzB,UAAU,CAACT,QAAQ,CAACc,IAAI,GAAG;IACzBS,MAAM,EAAEvB,QAAQ,CAACmC,cAAc,CAACV,KAAK,CAACF,MAAM,GAAG,CAAC;IAChDU,YAAY,EAAEjC,QAAQ,CAACmC,cAAc,CAACV,KAAK;IAC3CE,UAAU,EAAE;MACV,GAAG3B,QAAQ,CAAC2B,UAAU;MACtBT,UAAU,EAAElB,QAAQ,CAACwB,SAAS;MAC9BY,aAAa,EAAE;QACbV,IAAI,EAAE,CAAC;QACPD,KAAK,EAAEH,mBAAmB,CAACtB;;KAE9B;IACD6B,UAAU,EAAE7B,QAAQ,CAAC6B,UAAU;IAC/BC,YAAY,EAAE9B,QAAQ,CAAC8B,YAAY;IACnCC,UAAU,EAAE/B,QAAQ,CAAC+B;GACJ;EACnBtB,UAAU,CAACT,QAAQ,CAACqC,UAAU,GAAG,KAAK;EACtC,IAAIrC,QAAQ,CAACsC,SAAS,EAAE;IACrB7B,UAAU,CAACT,QAAQ,CAACc,IAAY,CAACa,UAAU,CAACY,OAAO,GAAGvC,QAAQ,CAACsC,SAAS,CAACb,KAAK;EACjF;EAEAhB,UAAU,CAACR,eAAe,CAACa,IAAI,GAAG;IAChCS,MAAM,EAAEvB,QAAQ,CAACwC,uBAAuB,CAACf,KAAK,CAACF,MAAM,GAAG,CAAC;IACzDU,YAAY,EAAEjC,QAAQ,CAACwC,uBAAuB,CAACf,KAAK;IACpDE,UAAU,EAAE;MACV,GAAG3B,QAAQ,CAAC2B,UAAU;MACtBV,OAAO,EAAEjB,QAAQ,CAACwB,SAAS;MAC3BI,qBAAqB,EAAE;QACrBF,IAAI,EAAE,CAAC;QACPD,KAAK,EAAEH,mBAAmB,CAACtB;;KAE9B;IACD6B,UAAU,EAAE7B,QAAQ,CAAC6B,UAAU;IAC/BC,YAAY,EAAE9B,QAAQ,CAAC8B,YAAY;IACnCC,UAAU,EAAE/B,QAAQ,CAAC+B;GACJ;EACnBtB,UAAU,CAACR,eAAe,CAACiC,SAAS,GAAG,MAAM;EAE7C,OAAOzB,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}