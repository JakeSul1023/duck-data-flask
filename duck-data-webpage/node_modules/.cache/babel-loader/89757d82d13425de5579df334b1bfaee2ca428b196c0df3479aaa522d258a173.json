{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\nimport { isBrowser } from \"../env-utils/globals.js\";\nimport { VERSION, NPM_TAG } from \"../env-utils/version.js\";\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker) {\n  const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n  return `${worker.name}@${worker.version}${warning}`;\n}\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker, options = {}) {\n  const workerOptions = options[worker.id] || {};\n  const workerFile = isBrowser ? `${worker.id}-worker.js` : `${worker.id}-worker-node.js`;\n  let url = workerOptions.workerUrl;\n  // HACK: Allow for non-nested workerUrl for the CompressionWorker.\n  // For the compression worker, workerOptions is currently not nested correctly. For most loaders,\n  // you'd have options within an object, i.e. `{mvt: {coordinates: ...}}` but the CompressionWorker\n  // puts options at the top level, not within a `compression` key (its `id`). For this reason, the\n  // above `workerOptions` will always be a string (i.e. `'gzip'`) for the CompressionWorker. To not\n  // break backwards compatibility, we allow the CompressionWorker to have options at the top level.\n  if (!url && worker.id === 'compression') {\n    url = options.workerUrl;\n  }\n  // If URL is test, generate local loaders.gl url\n  // @ts-ignore _workerType\n  if (options._workerType === 'test') {\n    if (isBrowser) {\n      url = `modules/${worker.module}/dist/${workerFile}`;\n    } else {\n      // In the test environment the ts-node loader requires TypeScript code\n      url = `modules/${worker.module}/src/workers/${worker.id}-worker-node.ts`;\n    }\n  }\n  // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n  if (!url) {\n    // GENERATE\n    let version = worker.version;\n    // On master we need to load npm alpha releases published with the `beta` tag\n    if (version === 'latest') {\n      // throw new Error('latest worker version specified');\n      version = NPM_TAG;\n    }\n    const versionTag = version ? `@${version}` : '';\n    url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n  }\n  assert(url);\n  // Allow user to override location\n  return url;\n}","map":{"version":3,"names":["assert","isBrowser","VERSION","NPM_TAG","getWorkerName","worker","warning","version","name","getWorkerURL","options","workerOptions","id","workerFile","url","workerUrl","_workerType","module","versionTag"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/get-worker-url.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\nimport { isBrowser } from \"../env-utils/globals.js\";\nimport { VERSION, NPM_TAG } from \"../env-utils/version.js\";\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker) {\n    const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n    return `${worker.name}@${worker.version}${warning}`;\n}\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker, options = {}) {\n    const workerOptions = options[worker.id] || {};\n    const workerFile = isBrowser ? `${worker.id}-worker.js` : `${worker.id}-worker-node.js`;\n    let url = workerOptions.workerUrl;\n    // HACK: Allow for non-nested workerUrl for the CompressionWorker.\n    // For the compression worker, workerOptions is currently not nested correctly. For most loaders,\n    // you'd have options within an object, i.e. `{mvt: {coordinates: ...}}` but the CompressionWorker\n    // puts options at the top level, not within a `compression` key (its `id`). For this reason, the\n    // above `workerOptions` will always be a string (i.e. `'gzip'`) for the CompressionWorker. To not\n    // break backwards compatibility, we allow the CompressionWorker to have options at the top level.\n    if (!url && worker.id === 'compression') {\n        url = options.workerUrl;\n    }\n    // If URL is test, generate local loaders.gl url\n    // @ts-ignore _workerType\n    if (options._workerType === 'test') {\n        if (isBrowser) {\n            url = `modules/${worker.module}/dist/${workerFile}`;\n        }\n        else {\n            // In the test environment the ts-node loader requires TypeScript code\n            url = `modules/${worker.module}/src/workers/${worker.id}-worker-node.ts`;\n        }\n    }\n    // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n    if (!url) {\n        // GENERATE\n        let version = worker.version;\n        // On master we need to load npm alpha releases published with the `beta` tag\n        if (version === 'latest') {\n            // throw new Error('latest worker version specified');\n            version = NPM_TAG;\n        }\n        const versionTag = version ? `@${version}` : '';\n        url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n    }\n    assert(url);\n    // Allow user to override location\n    return url;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,EAAEC,OAAO,QAAQ,yBAAyB;AAC1D;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAE;EAClC,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO,KAAKL,OAAO,GAAG,kBAAkBA,OAAO,GAAG,GAAG,EAAE;EAC9E,OAAO,GAAGG,MAAM,CAACG,IAAI,IAAIH,MAAM,CAACE,OAAO,GAAGD,OAAO,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,YAAYA,CAACJ,MAAM,EAAEK,OAAO,GAAG,CAAC,CAAC,EAAE;EAC/C,MAAMC,aAAa,GAAGD,OAAO,CAACL,MAAM,CAACO,EAAE,CAAC,IAAI,CAAC,CAAC;EAC9C,MAAMC,UAAU,GAAGZ,SAAS,GAAG,GAAGI,MAAM,CAACO,EAAE,YAAY,GAAG,GAAGP,MAAM,CAACO,EAAE,iBAAiB;EACvF,IAAIE,GAAG,GAAGH,aAAa,CAACI,SAAS;EACjC;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,CAACD,GAAG,IAAIT,MAAM,CAACO,EAAE,KAAK,aAAa,EAAE;IACrCE,GAAG,GAAGJ,OAAO,CAACK,SAAS;EAC3B;EACA;EACA;EACA,IAAIL,OAAO,CAACM,WAAW,KAAK,MAAM,EAAE;IAChC,IAAIf,SAAS,EAAE;MACXa,GAAG,GAAG,WAAWT,MAAM,CAACY,MAAM,SAASJ,UAAU,EAAE;IACvD,CAAC,MACI;MACD;MACAC,GAAG,GAAG,WAAWT,MAAM,CAACY,MAAM,gBAAgBZ,MAAM,CAACO,EAAE,iBAAiB;IAC5E;EACJ;EACA;EACA,IAAI,CAACE,GAAG,EAAE;IACN;IACA,IAAIP,OAAO,GAAGF,MAAM,CAACE,OAAO;IAC5B;IACA,IAAIA,OAAO,KAAK,QAAQ,EAAE;MACtB;MACAA,OAAO,GAAGJ,OAAO;IACrB;IACA,MAAMe,UAAU,GAAGX,OAAO,GAAG,IAAIA,OAAO,EAAE,GAAG,EAAE;IAC/CO,GAAG,GAAG,iCAAiCT,MAAM,CAACY,MAAM,GAAGC,UAAU,SAASL,UAAU,EAAE;EAC1F;EACAb,MAAM,CAACc,GAAG,CAAC;EACX;EACA,OAAOA,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}