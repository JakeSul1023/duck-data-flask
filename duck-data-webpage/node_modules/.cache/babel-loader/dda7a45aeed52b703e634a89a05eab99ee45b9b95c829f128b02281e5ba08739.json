{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { Vector3 } from '@math.gl/core';\nimport { makeOrientedBoundingBoxFromPoints } from '@math.gl/culling';\nimport { getS2OrientedBoundingBoxCornerPoints, getS2LngLat } from \"../../utils/s2/index.js\";\nimport { Ellipsoid } from '@math.gl/geospatial';\n/**\n * Converts S2VolumeInfo to OrientedBoundingBox\n * @param {S2VolumeInfo} s2VolumeInfo - s2 volume to convert\n * @returns Oriented Bounding Box of type Box\n */\nexport function convertS2BoundingVolumetoOBB(s2VolumeInfo) {\n  const token = s2VolumeInfo.token;\n  const heightInfo = {\n    minimumHeight: s2VolumeInfo.minimumHeight,\n    maximumHeight: s2VolumeInfo.maximumHeight\n  };\n  const corners = getS2OrientedBoundingBoxCornerPoints(token, heightInfo);\n  // Add a point that doesn't allow the box dive under the Earth\n  const center = getS2LngLat(token);\n  const centerLng = center[0];\n  const centerLat = center[1];\n  const point = Ellipsoid.WGS84.cartographicToCartesian([centerLng, centerLat, heightInfo.maximumHeight]);\n  const centerPointAdditional = new Vector3(point[0], point[1], point[2]);\n  corners.push(centerPointAdditional);\n  // corners should be an array of Vector3 (XYZ)\n  const obb = makeOrientedBoundingBoxFromPoints(corners);\n  const box = [...obb.center, ...obb.halfAxes];\n  return box;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}