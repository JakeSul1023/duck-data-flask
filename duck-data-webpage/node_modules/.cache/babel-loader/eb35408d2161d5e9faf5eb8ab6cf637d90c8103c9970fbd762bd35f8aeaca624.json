{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Tesselator } from '@deck.gl/core';\nimport { normalizePath } from \"./path.js\";\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {\n          size: 1,\n          type: Uint8ClampedArray\n        }\n      }\n    });\n  }\n  /** Get packed attribute by name */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n  /* Implement base Tesselator interface */\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n  /* Implement base Tesselator interface */\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n  /* Implement base Tesselator interface */\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n  _updateSegmentTypes(path, context) {\n    const segmentTypes = this.attributes.segmentTypes;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {\n      vertexStart,\n      geometrySize\n    } = context;\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n  _updatePositions(path, context) {\n    const {\n      positions\n    } = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {\n      vertexStart,\n      geometrySize\n    } = context;\n    const p = new Array(3);\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n  // Utilities\n  /** Returns the number of points in the path */\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n  /** Returns a point on the path at the specified index */\n  getPointOnPath(path, index, target = []) {\n    const {\n      positionSize\n    } = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = positionSize === 3 && path[i + 2] || 0;\n    return target;\n  }\n  // Returns true if the first and last points are identical\n  isClosed(path) {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {\n      positionSize\n    } = this;\n    const lastPointIndex = path.length - positionSize;\n    return path[0] === path[lastPointIndex] && path[1] === path[lastPointIndex + 1] && (positionSize === 2 || path[2] === path[lastPointIndex + 2]);\n  }\n}\nfunction isCut(path) {\n  return Array.isArray(path[0]);\n}","map":{"version":3,"names":["Tesselator","normalizePath","START_CAP","END_CAP","INVALID","PathTesselator","constructor","opts","attributes","positions","size","padding","initialize","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","get","attributeName","getGeometryFromBuffer","buffer","normalize","normalizeGeometry","path","positionSize","resolution","wrapLongitude","getGeometrySize","isCut","subPath","numPoints","getPathLength","isClosed","updateGeometryAttributes","context","geometrySize","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","Array","i","ptIndex","getPointOnPath","length","index","target","Boolean","loop","lastPointIndex","isArray"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\path-layer\\path-tesselator.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nimport type {TypedArray} from '@math.gl/core';\nimport type {PathGeometry, FlatPathGeometry, NormalizedPathGeometry} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator<\n  PathGeometry,\n  NormalizedPathGeometry,\n  {\n    fp64?: boolean;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    loop?: boolean;\n  }\n> {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  /** Get packed attribute by name */\n  get(attributeName: string): TypedArray | null {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n\n  /* Implement base Tesselator interface */\n  protected normalizeGeometry(path: PathGeometry): number[][] | PathGeometry {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometrySize(path: NormalizedPathGeometry): number {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  /* Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    path: NormalizedPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ): void {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  private _updateSegmentTypes(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const segmentTypes = this.attributes.segmentTypes as TypedArray;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  private _updatePositions(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const {positions} = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  // Utilities\n  /** Returns the number of points in the path */\n  private getPathLength(path: FlatPathGeometry): number {\n    return path.length / this.positionSize;\n  }\n\n  /** Returns a point on the path at the specified index */\n  private getPointOnPath(path: FlatPathGeometry, index: number, target: number[] = []): number[] {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  private isClosed(path: FlatPathGeometry): boolean {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n\nfunction isCut(path: NormalizedPathGeometry): path is FlatPathGeometry[] {\n  return Array.isArray(path[0]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}