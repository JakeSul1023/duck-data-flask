{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Default color for auto highlight, a cyan color */\nconst DEFAULT_HIGHLIGHT_COLOR = [0, 1, 1, 1];\nexport const INVALID_INDEX = -1;\n// GLSL_UNIFORMS\nconst uniformTypes = {\n  isActive: 'i32',\n  indexMode: 'i32',\n  batchIndex: 'i32',\n  isHighlightActive: 'i32',\n  highlightedBatchIndex: 'i32',\n  highlightedObjectIndex: 'i32',\n  highlightColor: 'vec4<f32>'\n};\nexport const GLSL_UNIFORMS = /* glsl */`\\\nprecision highp float;\nprecision highp int;\n\nuniform pickingUniforms {\n  int isActive;\n  int indexMode;\n  int batchIndex;\n\n  int isHighlightActive;\n  int highlightedBatchIndex;\n  int highlightedObjectIndex;\n  vec4 highlightColor;\n} picking;\n`;\nexport const WGSL_UNIFORMS = /* wgsl */`\\\nstruct pickingUniforms {\n  isActive: int32;\n  indexMode: int32;\n  batchIndex: int32;\n\n  isHighlightActive: int32;\n  highlightedBatchIndex: int32;\n  highlightedObjectIndex: int32;\n  highlightColor: vec4<f32>;\n} picking;\n`;\nfunction getUniforms() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let prevUniforms = arguments.length > 1 ? arguments[1] : undefined;\n  const uniforms = {\n    ...prevUniforms\n  };\n  // picking\n  if (props.isActive !== undefined) {\n    uniforms.isActive = Boolean(props.isActive);\n  }\n  switch (props.indexMode) {\n    case 'instance':\n      uniforms.indexMode = 0;\n      break;\n    case 'custom':\n      uniforms.indexMode = 1;\n      break;\n    case undefined:\n      // no change\n      break;\n  }\n  switch (props.highlightedObjectIndex) {\n    case undefined:\n      // Unless highlightedObjectColor explicitly null or set, do not update state\n      break;\n    case null:\n      // Clear highlight\n      uniforms.isHighlightActive = false;\n      uniforms.highlightedObjectIndex = INVALID_INDEX;\n      break;\n    default:\n      uniforms.isHighlightActive = true;\n      uniforms.highlightedObjectIndex = props.highlightedObjectIndex;\n  }\n  if (typeof props.highlightedBatchIndex === 'number') {\n    uniforms.highlightedBatchIndex = props.highlightedBatchIndex;\n  }\n  if (props.highlightColor) {\n    uniforms.highlightColor = props.highlightColor;\n  }\n  return uniforms;\n}\n/**\n * Provides support for color-based picking and highlighting.\n *\n * In particular, supports picking a specific instance in an instanced\n * draw call and highlighting an instance based on its picking color,\n * and correspondingly, supports picking and highlighting groups of\n * primitives with the same picking color in non-instanced draw-calls\n *\n * @note Color based picking has the significant advantage in that it can be added to any\n * existing shader without requiring any additional picking logic.\n */\nexport const pickingUniforms = {\n  props: {},\n  uniforms: {},\n  name: 'picking',\n  uniformTypes,\n  defaultUniforms: {\n    isActive: false,\n    indexMode: 0,\n    batchIndex: 0,\n    isHighlightActive: true,\n    highlightedBatchIndex: INVALID_INDEX,\n    highlightedObjectIndex: INVALID_INDEX,\n    highlightColor: DEFAULT_HIGHLIGHT_COLOR\n  },\n  getUniforms\n};\n//# sourceMappingURL=picking-uniforms.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}