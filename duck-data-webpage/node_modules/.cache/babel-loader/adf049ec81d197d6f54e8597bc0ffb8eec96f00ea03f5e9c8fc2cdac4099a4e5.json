{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Compression } from \"./compression.js\";\nimport { isBrowser, toArrayBuffer, registerJSModules, getJSModule, getJSModuleOrNull, promisify1 } from '@loaders.gl/loader-utils';\n// import brotli from 'brotli';  // https://bundlephobia.com/package/brotli\nimport { BrotliDecode } from \"../brotli/decode.js\";\nimport zlib from 'zlib';\nconst DEFAULT_BROTLI_OPTIONS = {\n  brotli: {\n    mode: 0,\n    quality: 8,\n    lgwin: 22\n  }\n};\n/**\n * brotli compression / decompression\n */\nexport class BrotliCompression extends Compression {\n  name = 'brotli';\n  extensions = ['br'];\n  contentEncodings = ['br'];\n  isSupported = true;\n  options;\n  constructor(options) {\n    super(options);\n    this.options = options;\n    registerJSModules(options?.modules);\n  }\n  /**\n   * brotli is an injectable dependency due to big size\n   * @param options\n   */\n  async preload(modules = {}) {\n    registerJSModules(modules);\n  }\n  async compress(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = await promisify1(zlib.brotliCompress)(input);\n      return toArrayBuffer(buffer);\n    }\n    return this.compressSync(input);\n  }\n  compressSync(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = zlib.brotliCompressSync(input);\n      return toArrayBuffer(buffer);\n    }\n    const brotliOptions = {\n      ...DEFAULT_BROTLI_OPTIONS.brotli,\n      ...this.options?.brotli\n    };\n    const inputArray = new Uint8Array(input);\n    const brotli = getJSModule('brotli', this.name);\n    // @ts-ignore brotli types state that only Buffers are accepted...\n    const outputArray = brotli.compress(inputArray, brotliOptions);\n    return outputArray.buffer;\n  }\n  async decompress(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = await promisify1(zlib.brotliDecompress)(input);\n      return toArrayBuffer(buffer);\n    }\n    return this.decompressSync(input);\n  }\n  decompressSync(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = zlib.brotliDecompressSync(input);\n      return toArrayBuffer(buffer);\n    }\n    const brotliOptions = {\n      ...DEFAULT_BROTLI_OPTIONS.brotli,\n      ...this.options?.brotli\n    };\n    const inputArray = new Uint8Array(input);\n    const brotli = getJSModuleOrNull('brotli');\n    if (brotli) {\n      // @ts-ignore brotli types state that only Buffers are accepted...\n      const outputArray = brotli.decompress(inputArray, brotliOptions);\n      return outputArray.buffer;\n    }\n    const outputArray = BrotliDecode(inputArray, undefined);\n    return outputArray.buffer;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}