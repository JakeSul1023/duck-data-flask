{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { RenderPipeline, ComputePipeline } from '@luma.gl/core';\n/**\n * Efficiently creates / caches pipelines\n */\nexport class PipelineFactory {\n  static defaultProps = {\n    ...RenderPipeline.defaultProps\n  };\n  /** Get the singleton default pipeline factory for the specified device */\n  static getDefaultPipelineFactory(device) {\n    device._lumaData.defaultPipelineFactory = device._lumaData.defaultPipelineFactory || new PipelineFactory(device);\n    return device._lumaData.defaultPipelineFactory;\n  }\n  device;\n  destroyPolicy;\n  _hashCounter = 0;\n  _hashes = {};\n  _renderPipelineCache = {};\n  _computePipelineCache = {};\n  constructor(device) {\n    this.device = device;\n    this.destroyPolicy = device.props._factoryDestroyPolicy;\n  }\n  /** Return a RenderPipeline matching props. Reuses a similar pipeline if already created. */\n  createRenderPipeline(props) {\n    const allProps = {\n      ...RenderPipeline.defaultProps,\n      ...props\n    };\n    const hash = this._hashRenderPipeline(allProps);\n    if (!this._renderPipelineCache[hash]) {\n      const pipeline = this.device.createRenderPipeline({\n        ...allProps,\n        id: allProps.id ? `${allProps.id}-cached` : undefined\n      });\n      pipeline.hash = hash;\n      this._renderPipelineCache[hash] = {\n        pipeline,\n        useCount: 0\n      };\n    }\n    this._renderPipelineCache[hash].useCount++;\n    return this._renderPipelineCache[hash].pipeline;\n  }\n  createComputePipeline(props) {\n    const allProps = {\n      ...ComputePipeline.defaultProps,\n      ...props\n    };\n    const hash = this._hashComputePipeline(allProps);\n    if (!this._computePipelineCache[hash]) {\n      const pipeline = this.device.createComputePipeline({\n        ...allProps,\n        id: allProps.id ? `${allProps.id}-cached` : undefined\n      });\n      pipeline.hash = hash;\n      this._computePipelineCache[hash] = {\n        pipeline,\n        useCount: 0\n      };\n    }\n    this._computePipelineCache[hash].useCount++;\n    return this._computePipelineCache[hash].pipeline;\n  }\n  release(pipeline) {\n    const hash = pipeline.hash;\n    const cache = pipeline instanceof ComputePipeline ? this._computePipelineCache : this._renderPipelineCache;\n    cache[hash].useCount--;\n    if (cache[hash].useCount === 0) {\n      if (this.destroyPolicy === 'unused') {\n        cache[hash].pipeline.destroy();\n        delete cache[hash];\n      }\n    }\n  }\n  // PRIVATE\n  _hashComputePipeline(props) {\n    const shaderHash = this._getHash(props.shader.source);\n    return `${shaderHash}`;\n  }\n  /** Calculate a hash based on all the inputs for a render pipeline */\n  _hashRenderPipeline(props) {\n    const vsHash = props.vs ? this._getHash(props.vs.source) : 0;\n    const fsHash = props.fs ? this._getHash(props.fs.source) : 0;\n    // WebGL specific\n    // const {varyings = [], bufferMode = {}} = props;\n    // const varyingHashes = varyings.map((v) => this._getHash(v));\n    const varyingHash = '-'; // `${varyingHashes.join('/')}B${bufferMode}`\n    const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));\n    switch (this.device.type) {\n      case 'webgl':\n        // WebGL is more dynamic\n        return `${vsHash}/${fsHash}V${varyingHash}BL${bufferLayoutHash}`;\n      default:\n        // On WebGPU we need to rebuild the pipeline if topology, parameters or bufferLayout change\n        const parameterHash = this._getHash(JSON.stringify(props.parameters));\n        // TODO - Can json.stringify() generate different strings for equivalent objects if order of params is different?\n        // create a deepHash() to deduplicate?\n        return `${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}`;\n    }\n  }\n  _getHash(key) {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n    return this._hashes[key];\n  }\n}","map":{"version":3,"names":["RenderPipeline","ComputePipeline","PipelineFactory","defaultProps","getDefaultPipelineFactory","device","_lumaData","defaultPipelineFactory","destroyPolicy","_hashCounter","_hashes","_renderPipelineCache","_computePipelineCache","constructor","props","_factoryDestroyPolicy","createRenderPipeline","allProps","hash","_hashRenderPipeline","pipeline","id","undefined","useCount","createComputePipeline","_hashComputePipeline","release","cache","destroy","shaderHash","_getHash","shader","source","vsHash","vs","fsHash","fs","varyingHash","bufferLayoutHash","JSON","stringify","bufferLayout","type","parameterHash","parameters","topology","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\factories\\pipeline-factory.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {RenderPipelineProps, ComputePipelineProps} from '@luma.gl/core';\nimport {Device, RenderPipeline, ComputePipeline} from '@luma.gl/core';\n\nexport type PipelineFactoryProps = RenderPipelineProps;\n\ntype RenderPipelineCacheItem = {pipeline: RenderPipeline; useCount: number};\ntype ComputePipelineCacheItem = {pipeline: ComputePipeline; useCount: number};\n\n/**\n * Efficiently creates / caches pipelines\n */\nexport class PipelineFactory {\n  static defaultProps: Required<PipelineFactoryProps> = {...RenderPipeline.defaultProps};\n\n  /** Get the singleton default pipeline factory for the specified device */\n  static getDefaultPipelineFactory(device: Device): PipelineFactory {\n    device._lumaData.defaultPipelineFactory =\n      device._lumaData.defaultPipelineFactory || new PipelineFactory(device);\n    return device._lumaData.defaultPipelineFactory as PipelineFactory;\n  }\n\n  readonly device: Device;\n  readonly destroyPolicy: 'unused' | 'never';\n\n  private _hashCounter: number = 0;\n  private readonly _hashes: Record<string, number> = {};\n  private readonly _renderPipelineCache: Record<string, RenderPipelineCacheItem> = {};\n  private readonly _computePipelineCache: Record<string, ComputePipelineCacheItem> = {};\n\n  constructor(device: Device) {\n    this.device = device;\n    this.destroyPolicy = device.props._factoryDestroyPolicy;\n  }\n\n  /** Return a RenderPipeline matching props. Reuses a similar pipeline if already created. */\n  createRenderPipeline(props: RenderPipelineProps): RenderPipeline {\n    const allProps: Required<RenderPipelineProps> = {...RenderPipeline.defaultProps, ...props};\n\n    const hash = this._hashRenderPipeline(allProps);\n\n    if (!this._renderPipelineCache[hash]) {\n      const pipeline = this.device.createRenderPipeline({\n        ...allProps,\n        id: allProps.id ? `${allProps.id}-cached` : undefined\n      });\n      pipeline.hash = hash;\n      this._renderPipelineCache[hash] = {pipeline, useCount: 0};\n    }\n\n    this._renderPipelineCache[hash].useCount++;\n    return this._renderPipelineCache[hash].pipeline;\n  }\n\n  createComputePipeline(props: ComputePipelineProps): ComputePipeline {\n    const allProps: Required<ComputePipelineProps> = {...ComputePipeline.defaultProps, ...props};\n\n    const hash = this._hashComputePipeline(allProps);\n\n    if (!this._computePipelineCache[hash]) {\n      const pipeline = this.device.createComputePipeline({\n        ...allProps,\n        id: allProps.id ? `${allProps.id}-cached` : undefined\n      });\n      pipeline.hash = hash;\n      this._computePipelineCache[hash] = {pipeline, useCount: 0};\n    }\n\n    this._computePipelineCache[hash].useCount++;\n    return this._computePipelineCache[hash].pipeline;\n  }\n\n  release(pipeline: RenderPipeline | ComputePipeline): void {\n    const hash = pipeline.hash;\n    const cache =\n      pipeline instanceof ComputePipeline ? this._computePipelineCache : this._renderPipelineCache;\n    cache[hash].useCount--;\n    if (cache[hash].useCount === 0) {\n      if (this.destroyPolicy === 'unused') {\n        cache[hash].pipeline.destroy();\n        delete cache[hash];\n      }\n    }\n  }\n\n  // PRIVATE\n  private _hashComputePipeline(props: ComputePipelineProps): string {\n    const shaderHash = this._getHash(props.shader.source);\n    return `${shaderHash}`;\n  }\n\n  /** Calculate a hash based on all the inputs for a render pipeline */\n  private _hashRenderPipeline(props: RenderPipelineProps): string {\n    const vsHash = props.vs ? this._getHash(props.vs.source) : 0;\n    const fsHash = props.fs ? this._getHash(props.fs.source) : 0;\n\n    // WebGL specific\n    // const {varyings = [], bufferMode = {}} = props;\n    // const varyingHashes = varyings.map((v) => this._getHash(v));\n    const varyingHash = '-'; // `${varyingHashes.join('/')}B${bufferMode}`\n    const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));\n\n    switch (this.device.type) {\n      case 'webgl':\n        // WebGL is more dynamic\n        return `${vsHash}/${fsHash}V${varyingHash}BL${bufferLayoutHash}`;\n\n      default:\n        // On WebGPU we need to rebuild the pipeline if topology, parameters or bufferLayout change\n        const parameterHash = this._getHash(JSON.stringify(props.parameters));\n        // TODO - Can json.stringify() generate different strings for equivalent objects if order of params is different?\n        // create a deepHash() to deduplicate?\n        return `${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}`;\n    }\n  }\n\n  private _getHash(key: string): number {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n    return this._hashes[key];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}