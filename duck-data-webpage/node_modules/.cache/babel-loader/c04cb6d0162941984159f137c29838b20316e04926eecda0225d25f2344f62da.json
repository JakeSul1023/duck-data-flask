{"ast":null,"code":"// TODO - remove\nimport { getAccessorTypeFromSize, getComponentTypeFromArray } from \"./gltf-utils.js\";\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes) {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute) {\n  const {\n    buffer,\n    size,\n    count\n  } = getAccessorData(attribute);\n  const glTFAccessor = {\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    // bufferView: null,\n    // TODO: Deprecate `value` in favor of bufferView?\n    // @ts-ignore\n    value: buffer,\n    size,\n    // Decoded `type` (e.g. SCALAR)\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n  return glTFAccessor;\n}\n// export function getGLTFAttribute(data, gltfAttributeName): GLTFAccessor {\n//   return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n// }\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n  return {\n    buffer,\n    size,\n    count\n  };\n}\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}","map":{"version":3,"names":["getAccessorTypeFromSize","getComponentTypeFromArray","getGLTFAccessors","attributes","accessors","name","attribute","glTFAccessor","getGLTFAccessor","buffer","size","count","getAccessorData","value","byteOffset","type","componentType","ArrayBuffer","isView","toTypedArray","Float32Array","length","array","ArrayType","convertTypedArrays","Array","isArray"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/lib/gltf-utils/gltf-attribute-utils.js"],"sourcesContent":["// TODO - remove\nimport { getAccessorTypeFromSize, getComponentTypeFromArray } from \"./gltf-utils.js\";\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes) {\n    const accessors = {};\n    for (const name in attributes) {\n        const attribute = attributes[name];\n        if (name !== 'indices') {\n            const glTFAccessor = getGLTFAccessor(attribute);\n            accessors[name] = glTFAccessor;\n        }\n    }\n    return accessors;\n}\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute) {\n    const { buffer, size, count } = getAccessorData(attribute);\n    const glTFAccessor = {\n        // glTF Accessor values\n        // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n        // bufferView: null,\n        // TODO: Deprecate `value` in favor of bufferView?\n        // @ts-ignore\n        value: buffer,\n        size, // Decoded `type` (e.g. SCALAR)\n        byteOffset: 0,\n        count,\n        type: getAccessorTypeFromSize(size),\n        componentType: getComponentTypeFromArray(buffer)\n    };\n    return glTFAccessor;\n}\n// export function getGLTFAttribute(data, gltfAttributeName): GLTFAccessor {\n//   return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n// }\nfunction getAccessorData(attribute) {\n    let buffer = attribute;\n    let size = 1;\n    let count = 0;\n    if (attribute && attribute.value) {\n        buffer = attribute.value;\n        size = attribute.size || 1;\n    }\n    if (buffer) {\n        if (!ArrayBuffer.isView(buffer)) {\n            buffer = toTypedArray(buffer, Float32Array);\n        }\n        count = buffer.length / size;\n    }\n    return { buffer, size, count };\n}\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n    if (!array) {\n        return null;\n    }\n    if (Array.isArray(array)) {\n        return new ArrayType(array);\n    }\n    if (convertTypedArrays && !(array instanceof ArrayType)) {\n        return new ArrayType(array);\n    }\n    return array;\n}\n"],"mappings":"AAAA;AACA,SAASA,uBAAuB,EAAEC,yBAAyB,QAAQ,iBAAiB;AACpF;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,UAAU,EAAE;EACzC,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,KAAK,MAAMC,IAAI,IAAIF,UAAU,EAAE;IAC3B,MAAMG,SAAS,GAAGH,UAAU,CAACE,IAAI,CAAC;IAClC,IAAIA,IAAI,KAAK,SAAS,EAAE;MACpB,MAAME,YAAY,GAAGC,eAAe,CAACF,SAAS,CAAC;MAC/CF,SAAS,CAACC,IAAI,CAAC,GAAGE,YAAY;IAClC;EACJ;EACA,OAAOH,SAAS;AACpB;AACA;AACA;AACA;AACA,OAAO,SAASI,eAAeA,CAACF,SAAS,EAAE;EACvC,MAAM;IAAEG,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAGC,eAAe,CAACN,SAAS,CAAC;EAC1D,MAAMC,YAAY,GAAG;IACjB;IACA;IACA;IACA;IACA;IACAM,KAAK,EAAEJ,MAAM;IACbC,IAAI;IAAE;IACNI,UAAU,EAAE,CAAC;IACbH,KAAK;IACLI,IAAI,EAAEf,uBAAuB,CAACU,IAAI,CAAC;IACnCM,aAAa,EAAEf,yBAAyB,CAACQ,MAAM;EACnD,CAAC;EACD,OAAOF,YAAY;AACvB;AACA;AACA;AACA;AACA,SAASK,eAAeA,CAACN,SAAS,EAAE;EAChC,IAAIG,MAAM,GAAGH,SAAS;EACtB,IAAII,IAAI,GAAG,CAAC;EACZ,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIL,SAAS,IAAIA,SAAS,CAACO,KAAK,EAAE;IAC9BJ,MAAM,GAAGH,SAAS,CAACO,KAAK;IACxBH,IAAI,GAAGJ,SAAS,CAACI,IAAI,IAAI,CAAC;EAC9B;EACA,IAAID,MAAM,EAAE;IACR,IAAI,CAACQ,WAAW,CAACC,MAAM,CAACT,MAAM,CAAC,EAAE;MAC7BA,MAAM,GAAGU,YAAY,CAACV,MAAM,EAAEW,YAAY,CAAC;IAC/C;IACAT,KAAK,GAAGF,MAAM,CAACY,MAAM,GAAGX,IAAI;EAChC;EACA,OAAO;IAAED,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC;AAClC;AACA;AACA,SAASQ,YAAYA,CAACG,KAAK,EAAEC,SAAS,EAAEC,kBAAkB,GAAG,KAAK,EAAE;EAChE,IAAI,CAACF,KAAK,EAAE;IACR,OAAO,IAAI;EACf;EACA,IAAIG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;IACtB,OAAO,IAAIC,SAAS,CAACD,KAAK,CAAC;EAC/B;EACA,IAAIE,kBAAkB,IAAI,EAAEF,KAAK,YAAYC,SAAS,CAAC,EAAE;IACrD,OAAO,IAAIA,SAAS,CAACD,KAAK,CAAC;EAC/B;EACA,OAAOA,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}