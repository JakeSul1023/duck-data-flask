{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  name;\n  workerThread;\n  isRunning = true;\n  /** Promise that resolves when Job is done */\n  result;\n  _resolve = () => {};\n  _reject = () => {};\n  constructor(jobName, workerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type, payload) {\n    this.workerThread.postMessage({\n      source: 'loaders.gl',\n      // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value) {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error) {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}