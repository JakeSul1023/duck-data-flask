{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Hash } from \"./hash.js\";\nimport CRC32C from \"./algorithms/crc32c.js\";\nimport { encodeNumber } from \"./utils/digest-utils.js\";\n/**\n * A transform that calculates CRC32c Hash\n */\nexport class CRC32CHash extends Hash {\n  name = 'crc32c';\n  options;\n  /**\n   * Atomic hash calculation\n   * @returns base64 encoded hash\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.options = {\n      crypto: {},\n      ...options\n    };\n  }\n  /**\n   * Atomic hash calculation\n   * @returns base64 encoded hash\n   */\n  async hash(input, encoding) {\n    return this.hashSync(input, encoding);\n  }\n  hashSync(input, encoding) {\n    const hash = new CRC32C(this.options);\n    hash.update(input);\n    const digest = hash.finalize();\n    return encodeNumber(digest, encoding);\n  }\n  // runInBatches inherited\n  hashBatches(asyncIterator) {\n    try {\n      var _this = this;\n      let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base64';\n      return async function* () {\n        const hash = new CRC32C(_this.options);\n        for await (const chunk of asyncIterator) {\n          hash.update(chunk);\n          yield chunk;\n        }\n        const digest = hash.finalize();\n        _this.options.crypto?.onEnd?.({\n          hash: encodeNumber(digest, encoding)\n        });\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}