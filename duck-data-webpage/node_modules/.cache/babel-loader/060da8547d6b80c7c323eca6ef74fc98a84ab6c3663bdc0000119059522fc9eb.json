{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { GL } from '@luma.gl/constants';\n/** Get vertex format from GL constants */\nexport function getVertexFormatFromGL(type, components) {\n  const base = getVertexTypeFromGL(type);\n  // prettier-ignore\n  switch (components) {\n    // @ts-expect-error TODO deal with lack of formats\n    case 1:\n      return base;\n    case 2:\n      return `${base}x2`;\n    // @ts-expect-error TODO deal with lack of formats\n    case 3:\n      return `${base}x3`;\n    case 4:\n      return `${base}x4`;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(components));\n}\n/** Get data type from GL constants */\nexport function getVertexTypeFromGL(type) {\n  let normalized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // prettier-ignore\n  switch (type) {\n    // WebGPU does not support normalized 32 bit integer attributes\n    case 5124:\n      return normalized ? 'sint32' : 'sint32';\n    case 5125:\n      return normalized ? 'uint32' : 'uint32';\n    case 5122:\n      return normalized ? 'sint16' : 'unorm16';\n    case 5123:\n      return normalized ? 'uint16' : 'unorm16';\n    case 5120:\n      return normalized ? 'sint8' : 'snorm16';\n    case 5121:\n      return normalized ? 'uint8' : 'unorm8';\n    case 5126:\n      return 'float32';\n    case 5131:\n      return 'float16';\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(type));\n}\nexport function getGLFromVertexType(dataType) {\n  // prettier-ignore\n  switch (dataType) {\n    case 'uint8':\n      return 5121;\n    case 'sint8':\n      return 5120;\n    case 'unorm8':\n      return 5121;\n    case 'snorm8':\n      return 5120;\n    case 'uint16':\n      return 5123;\n    case 'sint16':\n      return 5122;\n    case 'unorm16':\n      return 5123;\n    case 'snorm16':\n      return 5122;\n    case 'uint32':\n      return 5125;\n    case 'sint32':\n      return 5124;\n    // WebGPU does not support normalized 32 bit integer attributes\n    // case 'unorm32': return GL.UNSIGNED_INT;\n    // case 'snorm32': return GL.INT;\n    case 'float16':\n      return 5131;\n    case 'float32':\n      return 5126;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(dataType));\n}\n//# sourceMappingURL=vertex-formats.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}