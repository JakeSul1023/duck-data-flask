{"ast":null,"code":"// The MIT License (MIT)\n//\n// Copyright (c) 2016 Zhipeng Jia\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n'use strict';\n\nvar BLOCK_LOG = 16;\nvar BLOCK_SIZE = 1 << BLOCK_LOG;\nvar MAX_HASH_TABLE_BITS = 14;\nvar globalHashTables = new Array(MAX_HASH_TABLE_BITS + 1);\nfunction hashFunc(key, hashFuncShift) {\n  return key * 0x1e35a7bd >>> hashFuncShift;\n}\nfunction load32(array, pos) {\n  return array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24);\n}\nfunction equals32(array, pos1, pos2) {\n  return array[pos1] === array[pos2] && array[pos1 + 1] === array[pos2 + 1] && array[pos1 + 2] === array[pos2 + 2] && array[pos1 + 3] === array[pos2 + 3];\n}\nfunction copyBytes(fromArray, fromPos, toArray, toPos, length) {\n  var i;\n  for (i = 0; i < length; i++) {\n    toArray[toPos + i] = fromArray[fromPos + i];\n  }\n}\nfunction emitLiteral(input, ip, len, output, op) {\n  if (len <= 60) {\n    output[op] = len - 1 << 2;\n    op += 1;\n  } else if (len < 256) {\n    output[op] = 60 << 2;\n    output[op + 1] = len - 1;\n    op += 2;\n  } else {\n    output[op] = 61 << 2;\n    output[op + 1] = len - 1 & 0xff;\n    output[op + 2] = len - 1 >>> 8;\n    op += 3;\n  }\n  copyBytes(input, ip, output, op, len);\n  return op + len;\n}\nfunction emitCopyLessThan64(output, op, offset, len) {\n  if (len < 12 && offset < 2048) {\n    output[op] = 1 + (len - 4 << 2) + (offset >>> 8 << 5);\n    output[op + 1] = offset & 0xff;\n    return op + 2;\n  } else {\n    output[op] = 2 + (len - 1 << 2);\n    output[op + 1] = offset & 0xff;\n    output[op + 2] = offset >>> 8;\n    return op + 3;\n  }\n}\nfunction emitCopy(output, op, offset, len) {\n  while (len >= 68) {\n    op = emitCopyLessThan64(output, op, offset, 64);\n    len -= 64;\n  }\n  if (len > 64) {\n    op = emitCopyLessThan64(output, op, offset, 60);\n    len -= 60;\n  }\n  return emitCopyLessThan64(output, op, offset, len);\n}\nfunction compressFragment(input, ip, inputSize, output, op) {\n  var hashTableBits = 1;\n  while (1 << hashTableBits <= inputSize && hashTableBits <= MAX_HASH_TABLE_BITS) {\n    hashTableBits += 1;\n  }\n  hashTableBits -= 1;\n  var hashFuncShift = 32 - hashTableBits;\n  if (typeof globalHashTables[hashTableBits] === 'undefined') {\n    globalHashTables[hashTableBits] = new Uint16Array(1 << hashTableBits);\n  }\n  var hashTable = globalHashTables[hashTableBits];\n  var i;\n  for (i = 0; i < hashTable.length; i++) {\n    hashTable[i] = 0;\n  }\n  var ipEnd = ip + inputSize;\n  var ipLimit;\n  var baseIp = ip;\n  var nextEmit = ip;\n  var hash, nextHash;\n  var nextIp, candidate, skip;\n  var bytesBetweenHashLookups;\n  var base, matched, offset;\n  var prevHash, curHash;\n  var flag = true;\n  var INPUT_MARGIN = 15;\n  if (inputSize >= INPUT_MARGIN) {\n    ipLimit = ipEnd - INPUT_MARGIN;\n    ip += 1;\n    nextHash = hashFunc(load32(input, ip), hashFuncShift);\n    while (flag) {\n      skip = 32;\n      nextIp = ip;\n      do {\n        ip = nextIp;\n        hash = nextHash;\n        bytesBetweenHashLookups = skip >>> 5;\n        skip += 1;\n        nextIp = ip + bytesBetweenHashLookups;\n        if (ip > ipLimit) {\n          flag = false;\n          break;\n        }\n        nextHash = hashFunc(load32(input, nextIp), hashFuncShift);\n        candidate = baseIp + hashTable[hash];\n        hashTable[hash] = ip - baseIp;\n      } while (!equals32(input, ip, candidate));\n      if (!flag) {\n        break;\n      }\n      op = emitLiteral(input, nextEmit, ip - nextEmit, output, op);\n      do {\n        base = ip;\n        matched = 4;\n        while (ip + matched < ipEnd && input[ip + matched] === input[candidate + matched]) {\n          matched += 1;\n        }\n        ip += matched;\n        offset = base - candidate;\n        op = emitCopy(output, op, offset, matched);\n        nextEmit = ip;\n        if (ip >= ipLimit) {\n          flag = false;\n          break;\n        }\n        prevHash = hashFunc(load32(input, ip - 1), hashFuncShift);\n        hashTable[prevHash] = ip - 1 - baseIp;\n        curHash = hashFunc(load32(input, ip), hashFuncShift);\n        candidate = baseIp + hashTable[curHash];\n        hashTable[curHash] = ip - baseIp;\n      } while (equals32(input, ip, candidate));\n      if (!flag) {\n        break;\n      }\n      ip += 1;\n      nextHash = hashFunc(load32(input, ip), hashFuncShift);\n    }\n  }\n  if (nextEmit < ipEnd) {\n    op = emitLiteral(input, nextEmit, ipEnd - nextEmit, output, op);\n  }\n  return op;\n}\nfunction putVarint(value, output, op) {\n  do {\n    output[op] = value & 0x7f;\n    value = value >>> 7;\n    if (value > 0) {\n      output[op] += 0x80;\n    }\n    op += 1;\n  } while (value > 0);\n  return op;\n}\nfunction SnappyCompressor(uncompressed) {\n  this.array = uncompressed;\n}\nSnappyCompressor.prototype.maxCompressedLength = function () {\n  var sourceLen = this.array.length;\n  return 32 + sourceLen + Math.floor(sourceLen / 6);\n};\nSnappyCompressor.prototype.compressToBuffer = function (outBuffer) {\n  var array = this.array;\n  var length = array.length;\n  var pos = 0;\n  var outPos = 0;\n  var fragmentSize;\n  outPos = putVarint(length, outBuffer, outPos);\n  while (pos < length) {\n    fragmentSize = Math.min(length - pos, BLOCK_SIZE);\n    outPos = compressFragment(array, pos, fragmentSize, outBuffer, outPos);\n    pos += fragmentSize;\n  }\n  return outPos;\n};\nexports.SnappyCompressor = SnappyCompressor;","map":{"version":3,"names":["BLOCK_LOG","BLOCK_SIZE","MAX_HASH_TABLE_BITS","globalHashTables","Array","hashFunc","key","hashFuncShift","load32","array","pos","equals32","pos1","pos2","copyBytes","fromArray","fromPos","toArray","toPos","length","i","emitLiteral","input","ip","len","output","op","emitCopyLessThan64","offset","emitCopy","compressFragment","inputSize","hashTableBits","Uint16Array","hashTable","ipEnd","ipLimit","baseIp","nextEmit","hash","nextHash","nextIp","candidate","skip","bytesBetweenHashLookups","base","matched","prevHash","curHash","flag","INPUT_MARGIN","putVarint","value","SnappyCompressor","uncompressed","prototype","maxCompressedLength","sourceLen","Math","floor","compressToBuffer","outBuffer","outPos","fragmentSize","min","exports"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/snappyjs/snappy_compressor.js"],"sourcesContent":["// The MIT License (MIT)\n//\n// Copyright (c) 2016 Zhipeng Jia\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n'use strict'\n\nvar BLOCK_LOG = 16\nvar BLOCK_SIZE = 1 << BLOCK_LOG\n\nvar MAX_HASH_TABLE_BITS = 14\nvar globalHashTables = new Array(MAX_HASH_TABLE_BITS + 1)\n\nfunction hashFunc (key, hashFuncShift) {\n  return (key * 0x1e35a7bd) >>> hashFuncShift\n}\n\nfunction load32 (array, pos) {\n  return array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\n}\n\nfunction equals32 (array, pos1, pos2) {\n  return array[pos1] === array[pos2] &&\n         array[pos1 + 1] === array[pos2 + 1] &&\n         array[pos1 + 2] === array[pos2 + 2] &&\n         array[pos1 + 3] === array[pos2 + 3]\n}\n\nfunction copyBytes (fromArray, fromPos, toArray, toPos, length) {\n  var i\n  for (i = 0; i < length; i++) {\n    toArray[toPos + i] = fromArray[fromPos + i]\n  }\n}\n\nfunction emitLiteral (input, ip, len, output, op) {\n  if (len <= 60) {\n    output[op] = (len - 1) << 2\n    op += 1\n  } else if (len < 256) {\n    output[op] = 60 << 2\n    output[op + 1] = len - 1\n    op += 2\n  } else {\n    output[op] = 61 << 2\n    output[op + 1] = (len - 1) & 0xff\n    output[op + 2] = (len - 1) >>> 8\n    op += 3\n  }\n  copyBytes(input, ip, output, op, len)\n  return op + len\n}\n\nfunction emitCopyLessThan64 (output, op, offset, len) {\n  if (len < 12 && offset < 2048) {\n    output[op] = 1 + ((len - 4) << 2) + ((offset >>> 8) << 5)\n    output[op + 1] = offset & 0xff\n    return op + 2\n  } else {\n    output[op] = 2 + ((len - 1) << 2)\n    output[op + 1] = offset & 0xff\n    output[op + 2] = offset >>> 8\n    return op + 3\n  }\n}\n\nfunction emitCopy (output, op, offset, len) {\n  while (len >= 68) {\n    op = emitCopyLessThan64(output, op, offset, 64)\n    len -= 64\n  }\n  if (len > 64) {\n    op = emitCopyLessThan64(output, op, offset, 60)\n    len -= 60\n  }\n  return emitCopyLessThan64(output, op, offset, len)\n}\n\nfunction compressFragment (input, ip, inputSize, output, op) {\n  var hashTableBits = 1\n  while ((1 << hashTableBits) <= inputSize &&\n         hashTableBits <= MAX_HASH_TABLE_BITS) {\n    hashTableBits += 1\n  }\n  hashTableBits -= 1\n  var hashFuncShift = 32 - hashTableBits\n\n  if (typeof globalHashTables[hashTableBits] === 'undefined') {\n    globalHashTables[hashTableBits] = new Uint16Array(1 << hashTableBits)\n  }\n  var hashTable = globalHashTables[hashTableBits]\n  var i\n  for (i = 0; i < hashTable.length; i++) {\n    hashTable[i] = 0\n  }\n\n  var ipEnd = ip + inputSize\n  var ipLimit\n  var baseIp = ip\n  var nextEmit = ip\n\n  var hash, nextHash\n  var nextIp, candidate, skip\n  var bytesBetweenHashLookups\n  var base, matched, offset\n  var prevHash, curHash\n  var flag = true\n\n  var INPUT_MARGIN = 15\n  if (inputSize >= INPUT_MARGIN) {\n    ipLimit = ipEnd - INPUT_MARGIN\n\n    ip += 1\n    nextHash = hashFunc(load32(input, ip), hashFuncShift)\n\n    while (flag) {\n      skip = 32\n      nextIp = ip\n      do {\n        ip = nextIp\n        hash = nextHash\n        bytesBetweenHashLookups = skip >>> 5\n        skip += 1\n        nextIp = ip + bytesBetweenHashLookups\n        if (ip > ipLimit) {\n          flag = false\n          break\n        }\n        nextHash = hashFunc(load32(input, nextIp), hashFuncShift)\n        candidate = baseIp + hashTable[hash]\n        hashTable[hash] = ip - baseIp\n      } while (!equals32(input, ip, candidate))\n\n      if (!flag) {\n        break\n      }\n\n      op = emitLiteral(input, nextEmit, ip - nextEmit, output, op)\n\n      do {\n        base = ip\n        matched = 4\n        while (ip + matched < ipEnd && input[ip + matched] === input[candidate + matched]) {\n          matched += 1\n        }\n        ip += matched\n        offset = base - candidate\n        op = emitCopy(output, op, offset, matched)\n\n        nextEmit = ip\n        if (ip >= ipLimit) {\n          flag = false\n          break\n        }\n        prevHash = hashFunc(load32(input, ip - 1), hashFuncShift)\n        hashTable[prevHash] = ip - 1 - baseIp\n        curHash = hashFunc(load32(input, ip), hashFuncShift)\n        candidate = baseIp + hashTable[curHash]\n        hashTable[curHash] = ip - baseIp\n      } while (equals32(input, ip, candidate))\n\n      if (!flag) {\n        break\n      }\n\n      ip += 1\n      nextHash = hashFunc(load32(input, ip), hashFuncShift)\n    }\n  }\n\n  if (nextEmit < ipEnd) {\n    op = emitLiteral(input, nextEmit, ipEnd - nextEmit, output, op)\n  }\n\n  return op\n}\n\nfunction putVarint (value, output, op) {\n  do {\n    output[op] = value & 0x7f\n    value = value >>> 7\n    if (value > 0) {\n      output[op] += 0x80\n    }\n    op += 1\n  } while (value > 0)\n  return op\n}\n\nfunction SnappyCompressor (uncompressed) {\n  this.array = uncompressed\n}\n\nSnappyCompressor.prototype.maxCompressedLength = function () {\n  var sourceLen = this.array.length\n  return 32 + sourceLen + Math.floor(sourceLen / 6)\n}\n\nSnappyCompressor.prototype.compressToBuffer = function (outBuffer) {\n  var array = this.array\n  var length = array.length\n  var pos = 0\n  var outPos = 0\n\n  var fragmentSize\n\n  outPos = putVarint(length, outBuffer, outPos)\n  while (pos < length) {\n    fragmentSize = Math.min(length - pos, BLOCK_SIZE)\n    outPos = compressFragment(array, pos, fragmentSize, outBuffer, outPos)\n    pos += fragmentSize\n  }\n\n  return outPos\n}\n\nexports.SnappyCompressor = SnappyCompressor\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}