{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { lerp } from '@math.gl/core';\nconst DEFAULT_INDICES = new Uint32Array([0, 2, 1, 0, 3, 2]);\nconst DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);\n/*\n  1 ---- 2\n  |      |\n  |      |\n  0 ---- 3\n*/\n/* eslint-disable max-statements */\nexport default function createMesh(bounds, resolution) {\n  if (!resolution) {\n    return createQuad(bounds);\n  }\n  const maxXSpan = Math.max(Math.abs(bounds[0][0] - bounds[3][0]), Math.abs(bounds[1][0] - bounds[2][0]));\n  const maxYSpan = Math.max(Math.abs(bounds[1][1] - bounds[0][1]), Math.abs(bounds[2][1] - bounds[3][1]));\n  const uCount = Math.ceil(maxXSpan / resolution) + 1;\n  const vCount = Math.ceil(maxYSpan / resolution) + 1;\n  const vertexCount = (uCount - 1) * (vCount - 1) * 6;\n  const indices = new Uint32Array(vertexCount);\n  const texCoords = new Float32Array(uCount * vCount * 2);\n  const positions = new Float64Array(uCount * vCount * 3);\n  // Tesselate\n  let vertex = 0;\n  let index = 0;\n  for (let u = 0; u < uCount; u++) {\n    const ut = u / (uCount - 1);\n    for (let v = 0; v < vCount; v++) {\n      const vt = v / (vCount - 1);\n      const p = interpolateQuad(bounds, ut, vt);\n      positions[vertex * 3 + 0] = p[0];\n      positions[vertex * 3 + 1] = p[1];\n      positions[vertex * 3 + 2] = p[2] || 0;\n      texCoords[vertex * 2 + 0] = ut;\n      texCoords[vertex * 2 + 1] = 1 - vt;\n      if (u > 0 && v > 0) {\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - vCount - 1;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex;\n      }\n      vertex++;\n    }\n  }\n  return {\n    vertexCount,\n    positions,\n    indices,\n    texCoords\n  };\n}\nfunction createQuad(bounds) {\n  const positions = new Float64Array(12);\n  // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n  for (let i = 0; i < bounds.length; i++) {\n    positions[i * 3 + 0] = bounds[i][0];\n    positions[i * 3 + 1] = bounds[i][1];\n    positions[i * 3 + 2] = bounds[i][2] || 0;\n  }\n  return {\n    vertexCount: 6,\n    positions,\n    indices: DEFAULT_INDICES,\n    texCoords: DEFAULT_TEX_COORDS\n  };\n}\nfunction interpolateQuad(quad, ut, vt) {\n  return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut);\n}","map":{"version":3,"names":["lerp","DEFAULT_INDICES","Uint32Array","DEFAULT_TEX_COORDS","Float32Array","createMesh","bounds","resolution","createQuad","maxXSpan","Math","max","abs","maxYSpan","uCount","ceil","vCount","vertexCount","indices","texCoords","positions","Float64Array","vertex","index","u","ut","v","vt","p","interpolateQuad","i","length","quad"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\bitmap-layer\\create-mesh.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {lerp} from '@math.gl/core';\n\nconst DEFAULT_INDICES = new Uint32Array([0, 2, 1, 0, 3, 2]);\nconst DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);\n\n/*\n  1 ---- 2\n  |      |\n  |      |\n  0 ---- 3\n*/\n/* eslint-disable max-statements */\nexport default function createMesh(bounds, resolution) {\n  if (!resolution) {\n    return createQuad(bounds);\n  }\n  const maxXSpan = Math.max(\n    Math.abs(bounds[0][0] - bounds[3][0]),\n    Math.abs(bounds[1][0] - bounds[2][0])\n  );\n  const maxYSpan = Math.max(\n    Math.abs(bounds[1][1] - bounds[0][1]),\n    Math.abs(bounds[2][1] - bounds[3][1])\n  );\n  const uCount = Math.ceil(maxXSpan / resolution) + 1;\n  const vCount = Math.ceil(maxYSpan / resolution) + 1;\n\n  const vertexCount = (uCount - 1) * (vCount - 1) * 6;\n  const indices = new Uint32Array(vertexCount);\n  const texCoords = new Float32Array(uCount * vCount * 2);\n  const positions = new Float64Array(uCount * vCount * 3);\n\n  // Tesselate\n  let vertex = 0;\n  let index = 0;\n  for (let u = 0; u < uCount; u++) {\n    const ut = u / (uCount - 1);\n    for (let v = 0; v < vCount; v++) {\n      const vt = v / (vCount - 1);\n      const p = interpolateQuad(bounds, ut, vt);\n\n      positions[vertex * 3 + 0] = p[0];\n      positions[vertex * 3 + 1] = p[1];\n      positions[vertex * 3 + 2] = p[2] || 0;\n\n      texCoords[vertex * 2 + 0] = ut;\n      texCoords[vertex * 2 + 1] = 1 - vt;\n\n      if (u > 0 && v > 0) {\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - vCount - 1;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex;\n      }\n\n      vertex++;\n    }\n  }\n  return {\n    vertexCount,\n    positions,\n    indices,\n    texCoords\n  };\n}\n\nfunction createQuad(bounds) {\n  const positions = new Float64Array(12);\n  // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n  for (let i = 0; i < bounds.length; i++) {\n    positions[i * 3 + 0] = bounds[i][0];\n    positions[i * 3 + 1] = bounds[i][1];\n    positions[i * 3 + 2] = bounds[i][2] || 0;\n  }\n\n  return {\n    vertexCount: 6,\n    positions,\n    indices: DEFAULT_INDICES,\n    texCoords: DEFAULT_TEX_COORDS\n  };\n}\n\nfunction interpolateQuad(quad, ut, vt) {\n  return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}