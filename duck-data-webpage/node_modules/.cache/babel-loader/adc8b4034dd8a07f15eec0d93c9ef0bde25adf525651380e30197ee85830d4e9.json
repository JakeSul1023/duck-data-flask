{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from \"../solid-polygon-layer/solid-polygon-layer.js\";\nimport PathLayer from \"../path-layer/path-layer.js\";\nimport * as Polygon from \"../solid-polygon-layer/polygon.js\";\nimport { replaceInRange } from \"../utils.js\";\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  // Polygon fill color\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  // Point, line and polygon outline color\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  // Line and polygon outline accessors\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  // Polygon extrusion accessor\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  // Optional material for 'lighting' shader module\n  material: true\n};\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nclass PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: [],\n      pathsDiff: null\n    };\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n  updateState({\n    changeFlags\n  }) {\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange => replaceInRange({\n        data: paths,\n        getIndex: p => p.__source.index,\n        dataRange,\n        replace: this._getPaths(dataRange)\n      }));\n      this.setState({\n        paths,\n        pathsDiff\n      });\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n  _getPaths(dataRange = {}) {\n    const {\n      data,\n      getPolygon,\n      positionFormat,\n      _normalize\n    } = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {\n      startRow,\n      endRow\n    } = dataRange;\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {\n        holeIndices\n      } = polygon;\n      const positions = polygon.positions || polygon;\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({\n            path\n          }, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({\n          path: positions\n        }, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n    const {\n      paths,\n      pathsDiff\n    } = this.state;\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n    // Filled Polygon Layer\n    const polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n      _dataDiff,\n      extruded,\n      elevationScale,\n      filled,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      getElevation,\n      getFillColor,\n      getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n      material,\n      transitions\n    }, this.getSubLayerProps({\n      id: 'fill',\n      updateTriggers: updateTriggers && {\n        getPolygon: updateTriggers.getPolygon,\n        getElevation: updateTriggers.getElevation,\n        getFillColor: updateTriggers.getFillColor,\n        // using a legacy API to invalid lineColor attributes\n        // if (extruded && wireframe) has changed\n        lineColors: extruded && wireframe,\n        getLineColor: updateTriggers.getLineColor\n      }\n    }), {\n      data,\n      positionFormat,\n      getPolygon\n    });\n    // Polygon line layer\n    const polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n      _dataDiff: pathsDiff && (() => pathsDiff),\n      widthUnits: lineWidthUnits,\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels,\n      jointRounded: lineJointRounded,\n      miterLimit: lineMiterLimit,\n      dashJustified: lineDashJustified,\n      // Already normalized\n      _pathType: 'loop',\n      transitions: transitions && {\n        getWidth: transitions.getLineWidth,\n        getColor: transitions.getLineColor,\n        getPath: transitions.getPolygon\n      },\n      getColor: this.getSubLayerAccessor(getLineColor),\n      getWidth: this.getSubLayerAccessor(getLineWidth),\n      getDashArray: this.getSubLayerAccessor(getLineDashArray)\n    }, this.getSubLayerProps({\n      id: 'stroke',\n      updateTriggers: updateTriggers && {\n        getWidth: updateTriggers.getLineWidth,\n        getColor: updateTriggers.getLineColor,\n        getDashArray: updateTriggers.getLineDashArray\n      }\n    }), {\n      data: paths,\n      positionFormat,\n      getPath: x => x.path\n    });\n    return [\n    // If not extruded: flat fill layer is drawn below outlines\n    !extruded && polygonLayer, polygonLineLayer,\n    // If extruded: draw fill layer last for correct blending behavior\n    extruded && polygonLayer];\n  }\n}\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\nexport default PolygonLayer;","map":{"version":3,"names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","initializeState","state","paths","pathsDiff","props","getLineDashArray","removed","updateState","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","renderLayers","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\polygon-layer\\polygon-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayerDataSource,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = unknown> = _PolygonLayerProps<DataT> & CompositeLayerProps;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = unknown> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: (f: any) => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    paths: number[][];\n    pathsDiff:\n      | {\n          startRow: number;\n          endRow: number;\n        }[]\n      | null;\n  };\n\n  initializeState(): void {\n    this.state = {\n      paths: [],\n      pathsDiff: null\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}