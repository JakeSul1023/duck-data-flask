{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { GL } from '@luma.gl/constants';\n/** Get vertex format from GL constants */\nexport function getVertexFormatFromGL(type, components) {\n  const base = getVertexTypeFromGL(type);\n  // prettier-ignore\n  switch (components) {\n    // @ts-expect-error TODO deal with lack of formats\n    case 1:\n      return base;\n    case 2:\n      return `${base}x2`;\n    // @ts-expect-error TODO deal with lack of formats\n    case 3:\n      return `${base}x3`;\n    case 4:\n      return `${base}x4`;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(components));\n}\n/** Get data type from GL constants */\nexport function getVertexTypeFromGL(type, normalized = false) {\n  // prettier-ignore\n  switch (type) {\n    // WebGPU does not support normalized 32 bit integer attributes\n    case 5124:\n      return normalized ? 'sint32' : 'sint32';\n    case 5125:\n      return normalized ? 'uint32' : 'uint32';\n    case 5122:\n      return normalized ? 'sint16' : 'unorm16';\n    case 5123:\n      return normalized ? 'uint16' : 'unorm16';\n    case 5120:\n      return normalized ? 'sint8' : 'snorm16';\n    case 5121:\n      return normalized ? 'uint8' : 'unorm8';\n    case 5126:\n      return 'float32';\n    case 5131:\n      return 'float16';\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(type));\n}\nexport function getGLFromVertexType(dataType) {\n  // prettier-ignore\n  switch (dataType) {\n    case 'uint8':\n      return 5121;\n    case 'sint8':\n      return 5120;\n    case 'unorm8':\n      return 5121;\n    case 'snorm8':\n      return 5120;\n    case 'uint16':\n      return 5123;\n    case 'sint16':\n      return 5122;\n    case 'unorm16':\n      return 5123;\n    case 'snorm16':\n      return 5122;\n    case 'uint32':\n      return 5125;\n    case 'sint32':\n      return 5124;\n    // WebGPU does not support normalized 32 bit integer attributes\n    // case 'unorm32': return GL.UNSIGNED_INT;\n    // case 'snorm32': return GL.INT;\n    case 'float16':\n      return 5131;\n    case 'float32':\n      return 5126;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(dataType));\n}","map":{"version":3,"names":["GL","getVertexFormatFromGL","type","components","base","getVertexTypeFromGL","Error","String","normalized","getGLFromVertexType","dataType"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\converters\\vertex-formats.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GL} from '@luma.gl/constants';\nimport {VertexFormat, VertexType} from '@luma.gl/core';\n\ntype GLDataType =\n  | GL.UNSIGNED_BYTE\n  | GL.BYTE\n  | GL.UNSIGNED_SHORT\n  | GL.SHORT\n  | GL.UNSIGNED_INT\n  | GL.INT\n  | GL.HALF_FLOAT\n  | GL.FLOAT;\n\n/** Get vertex format from GL constants */\nexport function getVertexFormatFromGL(type: GLDataType, components: 1 | 2 | 3 | 4): VertexFormat {\n  const base = getVertexTypeFromGL(type);\n  // prettier-ignore\n  switch (components) {\n    // @ts-expect-error TODO deal with lack of formats\n    case 1: return base;\n    case 2: return `${base}x2`;\n    // @ts-expect-error TODO deal with lack of formats\n    case 3: return `${base}x3`;\n    case 4: return `${base}x4`;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(components));\n}\n\n/** Get data type from GL constants */\nexport function getVertexTypeFromGL(type: GLDataType, normalized = false): VertexType {\n  // prettier-ignore\n  switch (type) {\n    // WebGPU does not support normalized 32 bit integer attributes\n    case GL.INT: return normalized ? 'sint32' : 'sint32';\n    case GL.UNSIGNED_INT: return normalized ? 'uint32' : 'uint32';\n    case GL.SHORT: return normalized ? 'sint16' : 'unorm16';\n    case GL.UNSIGNED_SHORT: return normalized ? 'uint16' : 'unorm16';\n    case GL.BYTE: return normalized ? 'sint8' : 'snorm16';\n    case GL.UNSIGNED_BYTE: return normalized ? 'uint8' : 'unorm8';\n    case GL.FLOAT: return 'float32';\n    case GL.HALF_FLOAT: return 'float16';\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(type));\n}\n\nexport function getGLFromVertexType(\n  dataType: VertexType\n):\n  | GL.UNSIGNED_BYTE\n  | GL.BYTE\n  | GL.UNSIGNED_SHORT\n  | GL.SHORT\n  | GL.UNSIGNED_INT\n  | GL.INT\n  | GL.HALF_FLOAT\n  | GL.FLOAT {\n  // prettier-ignore\n  switch (dataType) {\n    case 'uint8': return GL.UNSIGNED_BYTE;\n    case 'sint8': return GL.BYTE;\n    case 'unorm8': return GL.UNSIGNED_BYTE;\n    case 'snorm8': return GL.BYTE;\n    case 'uint16': return GL.UNSIGNED_SHORT;\n    case 'sint16': return GL.SHORT;\n    case 'unorm16': return GL.UNSIGNED_SHORT;\n    case 'snorm16': return GL.SHORT;\n    case 'uint32': return GL.UNSIGNED_INT;\n    case 'sint32': return GL.INT;\n    // WebGPU does not support normalized 32 bit integer attributes\n    // case 'unorm32': return GL.UNSIGNED_INT;\n    // case 'snorm32': return GL.INT;\n    case 'float16': return GL.HALF_FLOAT;\n    case 'float32': return GL.FLOAT;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(dataType));\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,EAAE,QAAO,oBAAoB;AAarC;AACA,OAAM,SAAUC,qBAAqBA,CAACC,IAAgB,EAAEC,UAAyB;EAC/E,MAAMC,IAAI,GAAGC,mBAAmB,CAACH,IAAI,CAAC;EACtC;EACA,QAAQC,UAAU;IAChB;IACA,KAAK,CAAC;MAAE,OAAOC,IAAI;IACnB,KAAK,CAAC;MAAE,OAAO,GAAGA,IAAI,IAAI;IAC1B;IACA,KAAK,CAAC;MAAE,OAAO,GAAGA,IAAI,IAAI;IAC1B,KAAK,CAAC;MAAE,OAAO,GAAGA,IAAI,IAAI;EAC5B;EACA;EACA,MAAM,IAAIE,KAAK,CAACC,MAAM,CAACJ,UAAU,CAAC,CAAC;AACrC;AAEA;AACA,OAAM,SAAUE,mBAAmBA,CAACH,IAAgB,EAAEM,UAAU,GAAG,KAAK;EACtE;EACA,QAAQN,IAAI;IACV;IACA;MAAa,OAAOM,UAAU,GAAG,QAAQ,GAAG,QAAQ;IACpD;MAAsB,OAAOA,UAAU,GAAG,QAAQ,GAAG,QAAQ;IAC7D;MAAe,OAAOA,UAAU,GAAG,QAAQ,GAAG,SAAS;IACvD;MAAwB,OAAOA,UAAU,GAAG,QAAQ,GAAG,SAAS;IAChE;MAAc,OAAOA,UAAU,GAAG,OAAO,GAAG,SAAS;IACrD;MAAuB,OAAOA,UAAU,GAAG,OAAO,GAAG,QAAQ;IAC7D;MAAe,OAAO,SAAS;IAC/B;MAAoB,OAAO,SAAS;EACtC;EACA;EACA,MAAM,IAAIF,KAAK,CAACC,MAAM,CAACL,IAAI,CAAC,CAAC;AAC/B;AAEA,OAAM,SAAUO,mBAAmBA,CACjCC,QAAoB;EAUpB;EACA,QAAQA,QAAQ;IACd,KAAK,OAAO;MAAE;IACd,KAAK,OAAO;MAAE;IACd,KAAK,QAAQ;MAAE;IACf,KAAK,QAAQ;MAAE;IACf,KAAK,QAAQ;MAAE;IACf,KAAK,QAAQ;MAAE;IACf,KAAK,SAAS;MAAE;IAChB,KAAK,SAAS;MAAE;IAChB,KAAK,QAAQ;MAAE;IACf,KAAK,QAAQ;MAAE;IACf;IACA;IACA;IACA,KAAK,SAAS;MAAE;IAChB,KAAK,SAAS;MAAE;EAClB;EACA;EACA,MAAM,IAAIJ,KAAK,CAACC,MAAM,CAACG,QAAQ,CAAC,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}