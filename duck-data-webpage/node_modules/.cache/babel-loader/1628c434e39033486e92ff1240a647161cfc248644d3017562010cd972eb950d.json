{"ast":null,"code":"/**\n * Apply transformation to every coordinate of binary features\n * @param  binaryFeatures binary features\n * @param  transformCoordinate Function to call on each coordinate\n * @return Transformed binary features\n */\nexport function transformBinaryCoords(binaryFeatures, transformCoordinate) {\n  if (binaryFeatures.points) {\n    transformBinaryGeometryPositions(binaryFeatures.points, transformCoordinate);\n  }\n  if (binaryFeatures.lines) {\n    transformBinaryGeometryPositions(binaryFeatures.lines, transformCoordinate);\n  }\n  if (binaryFeatures.polygons) {\n    transformBinaryGeometryPositions(binaryFeatures.polygons, transformCoordinate);\n  }\n  return binaryFeatures;\n}\n/** Transform one binary geometry */\nfunction transformBinaryGeometryPositions(binaryGeometry, fn) {\n  const {\n    positions\n  } = binaryGeometry;\n  for (let i = 0; i < positions.value.length; i += positions.size) {\n    // @ts-ignore inclusion of bigint causes problems\n    const coord = Array.from(positions.value.subarray(i, i + positions.size));\n    const transformedCoord = fn(coord);\n    // @ts-ignore typescript typing for .set seems to require bigint?\n    positions.value.set(transformedCoord, i);\n  }\n}\n/**\n * Apply transformation to every coordinate of GeoJSON features\n *\n * @param  features Array of GeoJSON features\n * @param  fn       Function to call on each coordinate\n * @return          Transformed GeoJSON features\n */\nexport function transformGeoJsonCoords(features, fn) {\n  for (const feature of features) {\n    // @ts-ignore\n    feature.geometry.coordinates = coordMap(feature.geometry.coordinates, fn);\n  }\n  return features;\n}\nfunction coordMap(array, fn) {\n  if (isCoord(array)) {\n    return fn(array);\n  }\n  return array.map(item => {\n    return coordMap(item, fn);\n  });\n}\nfunction isCoord(array) {\n  return Array.isArray(array) && Number.isFinite(array[0]) && Number.isFinite(array[1]);\n}","map":{"version":3,"names":["transformBinaryCoords","binaryFeatures","transformCoordinate","points","transformBinaryGeometryPositions","lines","polygons","binaryGeometry","fn","positions","i","value","length","size","coord","Array","from","subarray","transformedCoord","set","transformGeoJsonCoords","features","feature","geometry","coordinates","coordMap","array","isCoord","map","item","isArray","Number","isFinite"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gis/dist/lib/binary-features/transform.js"],"sourcesContent":["/**\n * Apply transformation to every coordinate of binary features\n * @param  binaryFeatures binary features\n * @param  transformCoordinate Function to call on each coordinate\n * @return Transformed binary features\n */\nexport function transformBinaryCoords(binaryFeatures, transformCoordinate) {\n    if (binaryFeatures.points) {\n        transformBinaryGeometryPositions(binaryFeatures.points, transformCoordinate);\n    }\n    if (binaryFeatures.lines) {\n        transformBinaryGeometryPositions(binaryFeatures.lines, transformCoordinate);\n    }\n    if (binaryFeatures.polygons) {\n        transformBinaryGeometryPositions(binaryFeatures.polygons, transformCoordinate);\n    }\n    return binaryFeatures;\n}\n/** Transform one binary geometry */\nfunction transformBinaryGeometryPositions(binaryGeometry, fn) {\n    const { positions } = binaryGeometry;\n    for (let i = 0; i < positions.value.length; i += positions.size) {\n        // @ts-ignore inclusion of bigint causes problems\n        const coord = Array.from(positions.value.subarray(i, i + positions.size));\n        const transformedCoord = fn(coord);\n        // @ts-ignore typescript typing for .set seems to require bigint?\n        positions.value.set(transformedCoord, i);\n    }\n}\n/**\n * Apply transformation to every coordinate of GeoJSON features\n *\n * @param  features Array of GeoJSON features\n * @param  fn       Function to call on each coordinate\n * @return          Transformed GeoJSON features\n */\nexport function transformGeoJsonCoords(features, fn) {\n    for (const feature of features) {\n        // @ts-ignore\n        feature.geometry.coordinates = coordMap(feature.geometry.coordinates, fn);\n    }\n    return features;\n}\nfunction coordMap(array, fn) {\n    if (isCoord(array)) {\n        return fn(array);\n    }\n    return array.map((item) => {\n        return coordMap(item, fn);\n    });\n}\nfunction isCoord(array) {\n    return Array.isArray(array) && Number.isFinite(array[0]) && Number.isFinite(array[1]);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAqBA,CAACC,cAAc,EAAEC,mBAAmB,EAAE;EACvE,IAAID,cAAc,CAACE,MAAM,EAAE;IACvBC,gCAAgC,CAACH,cAAc,CAACE,MAAM,EAAED,mBAAmB,CAAC;EAChF;EACA,IAAID,cAAc,CAACI,KAAK,EAAE;IACtBD,gCAAgC,CAACH,cAAc,CAACI,KAAK,EAAEH,mBAAmB,CAAC;EAC/E;EACA,IAAID,cAAc,CAACK,QAAQ,EAAE;IACzBF,gCAAgC,CAACH,cAAc,CAACK,QAAQ,EAAEJ,mBAAmB,CAAC;EAClF;EACA,OAAOD,cAAc;AACzB;AACA;AACA,SAASG,gCAAgCA,CAACG,cAAc,EAAEC,EAAE,EAAE;EAC1D,MAAM;IAAEC;EAAU,CAAC,GAAGF,cAAc;EACpC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACE,KAAK,CAACC,MAAM,EAAEF,CAAC,IAAID,SAAS,CAACI,IAAI,EAAE;IAC7D;IACA,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACP,SAAS,CAACE,KAAK,CAACM,QAAQ,CAACP,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACI,IAAI,CAAC,CAAC;IACzE,MAAMK,gBAAgB,GAAGV,EAAE,CAACM,KAAK,CAAC;IAClC;IACAL,SAAS,CAACE,KAAK,CAACQ,GAAG,CAACD,gBAAgB,EAAER,CAAC,CAAC;EAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,sBAAsBA,CAACC,QAAQ,EAAEb,EAAE,EAAE;EACjD,KAAK,MAAMc,OAAO,IAAID,QAAQ,EAAE;IAC5B;IACAC,OAAO,CAACC,QAAQ,CAACC,WAAW,GAAGC,QAAQ,CAACH,OAAO,CAACC,QAAQ,CAACC,WAAW,EAAEhB,EAAE,CAAC;EAC7E;EACA,OAAOa,QAAQ;AACnB;AACA,SAASI,QAAQA,CAACC,KAAK,EAAElB,EAAE,EAAE;EACzB,IAAImB,OAAO,CAACD,KAAK,CAAC,EAAE;IAChB,OAAOlB,EAAE,CAACkB,KAAK,CAAC;EACpB;EACA,OAAOA,KAAK,CAACE,GAAG,CAAEC,IAAI,IAAK;IACvB,OAAOJ,QAAQ,CAACI,IAAI,EAAErB,EAAE,CAAC;EAC7B,CAAC,CAAC;AACN;AACA,SAASmB,OAAOA,CAACD,KAAK,EAAE;EACpB,OAAOX,KAAK,CAACe,OAAO,CAACJ,KAAK,CAAC,IAAIK,MAAM,CAACC,QAAQ,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,IAAIK,MAAM,CAACC,QAAQ,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC;AACzF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}