{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Array containing all encodings */\nconst GEOARROW_ENCODINGS = ['geoarrow.multipolygon', 'geoarrow.polygon', 'geoarrow.multilinestring', 'geoarrow.linestring', 'geoarrow.multipoint', 'geoarrow.point', 'geoarrow.wkb', 'geoarrow.wkt'];\nconst GEOARROW_COLUMN_METADATA_ENCODING = 'ARROW:extension:name';\nconst GEOARROW_COLUMN_METADATA_METADATA = 'ARROW:extension:metadata';\n/**\n * get geometry columns from arrow table\n */\nexport function getGeometryColumnsFromSchema(schema) {\n  const geometryColumns = {};\n  for (const field of schema.fields) {\n    const metadata = getGeometryMetadataForField(field);\n    if (metadata) {\n      geometryColumns[field.name] = metadata;\n    }\n  }\n  return geometryColumns;\n}\n/**\n * Extracts GeoArrow metadata from a field\n * @param field\n * @returns\n * @see https://github.com/geoarrow/geoarrow/blob/d2f56704414d9ae71e8a5170a8671343ed15eefe/extension-types.md\n */\nexport function getGeometryMetadataForField(field) {\n  let metadata = null;\n  // Check for GeoArrow column encoding\n  let geoEncoding = field.metadata?.[GEOARROW_COLUMN_METADATA_ENCODING];\n  if (geoEncoding) {\n    geoEncoding = geoEncoding.toLowerCase();\n    // at time of testing, ogr2ogr uses WKB/WKT for encoding.\n    if (geoEncoding === 'wkb') {\n      geoEncoding = 'geoarrow.wkb';\n    }\n    if (geoEncoding === 'wkt') {\n      geoEncoding = 'geoarrow.wkt';\n    }\n    if (!GEOARROW_ENCODINGS.includes(geoEncoding)) {\n      // eslint-disable-next-line no-console\n      console.warn(`Invalid GeoArrow encoding: ${geoEncoding}`);\n    } else {\n      metadata = metadata || {};\n      metadata.encoding = geoEncoding;\n    }\n  }\n  // Check for GeoArrow metadata\n  const columnMetadata = field.metadata?.[GEOARROW_COLUMN_METADATA_METADATA];\n  if (columnMetadata) {\n    try {\n      metadata = JSON.parse(columnMetadata);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn('Failed to parse GeoArrow metadata', error);\n    }\n  }\n  return metadata || null;\n}","map":{"version":3,"names":["GEOARROW_ENCODINGS","GEOARROW_COLUMN_METADATA_ENCODING","GEOARROW_COLUMN_METADATA_METADATA","getGeometryColumnsFromSchema","schema","geometryColumns","field","fields","metadata","getGeometryMetadataForField","name","geoEncoding","toLowerCase","includes","console","warn","encoding","columnMetadata","JSON","parse","error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gis/dist/lib/geo/geoarrow-metadata.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Array containing all encodings */\nconst GEOARROW_ENCODINGS = [\n    'geoarrow.multipolygon',\n    'geoarrow.polygon',\n    'geoarrow.multilinestring',\n    'geoarrow.linestring',\n    'geoarrow.multipoint',\n    'geoarrow.point',\n    'geoarrow.wkb',\n    'geoarrow.wkt'\n];\nconst GEOARROW_COLUMN_METADATA_ENCODING = 'ARROW:extension:name';\nconst GEOARROW_COLUMN_METADATA_METADATA = 'ARROW:extension:metadata';\n/**\n * get geometry columns from arrow table\n */\nexport function getGeometryColumnsFromSchema(schema) {\n    const geometryColumns = {};\n    for (const field of schema.fields) {\n        const metadata = getGeometryMetadataForField(field);\n        if (metadata) {\n            geometryColumns[field.name] = metadata;\n        }\n    }\n    return geometryColumns;\n}\n/**\n * Extracts GeoArrow metadata from a field\n * @param field\n * @returns\n * @see https://github.com/geoarrow/geoarrow/blob/d2f56704414d9ae71e8a5170a8671343ed15eefe/extension-types.md\n */\nexport function getGeometryMetadataForField(field) {\n    let metadata = null;\n    // Check for GeoArrow column encoding\n    let geoEncoding = field.metadata?.[GEOARROW_COLUMN_METADATA_ENCODING];\n    if (geoEncoding) {\n        geoEncoding = geoEncoding.toLowerCase();\n        // at time of testing, ogr2ogr uses WKB/WKT for encoding.\n        if (geoEncoding === 'wkb') {\n            geoEncoding = 'geoarrow.wkb';\n        }\n        if (geoEncoding === 'wkt') {\n            geoEncoding = 'geoarrow.wkt';\n        }\n        if (!GEOARROW_ENCODINGS.includes(geoEncoding)) {\n            // eslint-disable-next-line no-console\n            console.warn(`Invalid GeoArrow encoding: ${geoEncoding}`);\n        }\n        else {\n            metadata = metadata || {};\n            metadata.encoding = geoEncoding;\n        }\n    }\n    // Check for GeoArrow metadata\n    const columnMetadata = field.metadata?.[GEOARROW_COLUMN_METADATA_METADATA];\n    if (columnMetadata) {\n        try {\n            metadata = JSON.parse(columnMetadata);\n        }\n        catch (error) {\n            // eslint-disable-next-line no-console\n            console.warn('Failed to parse GeoArrow metadata', error);\n        }\n    }\n    return metadata || null;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,kBAAkB,GAAG,CACvB,uBAAuB,EACvB,kBAAkB,EAClB,0BAA0B,EAC1B,qBAAqB,EACrB,qBAAqB,EACrB,gBAAgB,EAChB,cAAc,EACd,cAAc,CACjB;AACD,MAAMC,iCAAiC,GAAG,sBAAsB;AAChE,MAAMC,iCAAiC,GAAG,0BAA0B;AACpE;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA,CAACC,MAAM,EAAE;EACjD,MAAMC,eAAe,GAAG,CAAC,CAAC;EAC1B,KAAK,MAAMC,KAAK,IAAIF,MAAM,CAACG,MAAM,EAAE;IAC/B,MAAMC,QAAQ,GAAGC,2BAA2B,CAACH,KAAK,CAAC;IACnD,IAAIE,QAAQ,EAAE;MACVH,eAAe,CAACC,KAAK,CAACI,IAAI,CAAC,GAAGF,QAAQ;IAC1C;EACJ;EACA,OAAOH,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,2BAA2BA,CAACH,KAAK,EAAE;EAC/C,IAAIE,QAAQ,GAAG,IAAI;EACnB;EACA,IAAIG,WAAW,GAAGL,KAAK,CAACE,QAAQ,GAAGP,iCAAiC,CAAC;EACrE,IAAIU,WAAW,EAAE;IACbA,WAAW,GAAGA,WAAW,CAACC,WAAW,CAAC,CAAC;IACvC;IACA,IAAID,WAAW,KAAK,KAAK,EAAE;MACvBA,WAAW,GAAG,cAAc;IAChC;IACA,IAAIA,WAAW,KAAK,KAAK,EAAE;MACvBA,WAAW,GAAG,cAAc;IAChC;IACA,IAAI,CAACX,kBAAkB,CAACa,QAAQ,CAACF,WAAW,CAAC,EAAE;MAC3C;MACAG,OAAO,CAACC,IAAI,CAAC,8BAA8BJ,WAAW,EAAE,CAAC;IAC7D,CAAC,MACI;MACDH,QAAQ,GAAGA,QAAQ,IAAI,CAAC,CAAC;MACzBA,QAAQ,CAACQ,QAAQ,GAAGL,WAAW;IACnC;EACJ;EACA;EACA,MAAMM,cAAc,GAAGX,KAAK,CAACE,QAAQ,GAAGN,iCAAiC,CAAC;EAC1E,IAAIe,cAAc,EAAE;IAChB,IAAI;MACAT,QAAQ,GAAGU,IAAI,CAACC,KAAK,CAACF,cAAc,CAAC;IACzC,CAAC,CACD,OAAOG,KAAK,EAAE;MACV;MACAN,OAAO,CAACC,IAAI,CAAC,mCAAmC,EAAEK,KAAK,CAAC;IAC5D;EACJ;EACA,OAAOZ,QAAQ,IAAI,IAAI;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}