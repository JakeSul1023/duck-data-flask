{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Texture } from '@luma.gl/core';\n/**\n * Helper class for working with repeated transformations / computations\n * Primarily intended for GPU buffers `Swap<Buffer>` or textures `Swap<Texture>`)\n * @note the two resources are expected to be structurally identical (same size, length, format, etc)\n * @note the two resources can be destroyed by calling `destroy()`\n */\nexport class Swap {\n  /** The current resource - usually the source for renders or computations */\n  current;\n  /** The next resource - usually the target/destination for transforms / computations */\n  next;\n  constructor(props) {\n    this.current = props.current;\n    this.next = props.next;\n  }\n  /** Destroys the two managed resources */\n  destroy() {\n    this.current?.destroy();\n    this.next?.destroy();\n  }\n  /** Make the next resource into the current resource, and reuse the current resource as the next resource */\n  swap() {\n    const current = this.current;\n    this.current = this.next;\n    this.next = current;\n  }\n}\n/** Helper for managing double-buffered framebuffers */\nexport class SwapFramebuffers extends Swap {\n  constructor(device, props) {\n    props = {\n      ...props\n    };\n    let colorAttachments = props.colorAttachments?.map(colorAttachment => typeof colorAttachment !== 'string' ? colorAttachment : device.createTexture({\n      format: colorAttachment,\n      usage: Texture.COPY_DST | Texture.RENDER_ATTACHMENT\n    }));\n    const current = device.createFramebuffer({\n      ...props,\n      colorAttachments\n    });\n    colorAttachments = props.colorAttachments?.map(colorAttachment => typeof colorAttachment !== 'string' ? colorAttachment : device.createTexture({\n      format: colorAttachment,\n      usage: Texture.COPY_DST | Texture.RENDER_ATTACHMENT\n    }));\n    const next = device.createFramebuffer({\n      ...props,\n      colorAttachments\n    });\n    super({\n      current,\n      next\n    });\n  }\n  /**\n   * Resizes the Framebuffers.\n   * @returns true if the size changed, otherwise exiting framebuffers were preserved\n   * @note any contents are not preserved!\n   */\n  resize(size) {\n    if (size.width === this.current.width && size.height === this.current.height) {\n      return false;\n    }\n    const {\n      current,\n      next\n    } = this;\n    this.current = current.clone(size);\n    current.destroy();\n    this.next = next.clone(size);\n    next.destroy();\n    return true;\n  }\n}\n/** Helper for managing double-buffered GPU buffers */\nexport class SwapBuffers extends Swap {\n  constructor(device, props) {\n    super({\n      current: device.createBuffer(props),\n      next: device.createBuffer(props)\n    });\n  }\n  /**\n   * Resizes the Buffers.\n   * @returns true if the size changed, otherwise exiting buffers were preserved.\n   * @note any contents are not preserved!\n   */\n  resize(props) {\n    if (props.byteLength === this.current.byteLength) {\n      return false;\n    }\n    const {\n      current,\n      next\n    } = this;\n    this.current = current.clone(props);\n    current.destroy();\n    this.next = next.clone(props);\n    next.destroy();\n    return true;\n  }\n}\n//# sourceMappingURL=swap.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}