{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { _PickLayersPass as PickLayersPass } from '@deck.gl/core';\n/** Renders textures used by the TerrainEffect picking pass */\nexport class TerrainPickingPass extends PickLayersPass {\n  constructor() {\n    super(...arguments);\n    /** Save layer index for use when drawing to terrain cover.\n     * When a terrain cover's picking buffer is rendered,\n     * we need to make sure each layer receives a consistent index (encoded in the alpha channel)\n     * so that a picked color can be decoded back to the correct layer.\n     * Updated in getRenderableLayers which is called in TerrainEffect.preRender\n     */\n    this.drawParameters = {};\n  }\n  getRenderableLayers(viewport, opts) {\n    const {\n      layers\n    } = opts;\n    const result = [];\n    this.drawParameters = {};\n    this._resetColorEncoder(opts.pickZ);\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n        this.drawParameters[layer.id] = drawParamsByIndex[i].layerParameters;\n      }\n    }\n    return result;\n  }\n  renderTerrainCover(terrainCover, opts) {\n    // console.log('Updating terrain cover for picking ' + terrainCover.id)\n    const target = terrainCover.getPickingFramebuffer();\n    const viewport = terrainCover.renderViewport;\n    if (!target || !viewport) {\n      return;\n    }\n    const layers = terrainCover.filterLayers(opts.layers);\n    const terrainLayer = terrainCover.targetLayer;\n    if (terrainLayer.props.pickable) {\n      layers.unshift(terrainLayer);\n    }\n    target.resize(viewport);\n    this.render({\n      ...opts,\n      pickingFBO: target,\n      pass: `terrain-cover-picking-${terrainCover.id}`,\n      layers,\n      effects: [],\n      viewports: [viewport],\n      // Disable the default culling because TileLayer would cull sublayers based on the screen viewport,\n      // not the viewport of the terrain cover. Culling is already done by `terrainCover.filterLayers`\n      cullRect: undefined,\n      deviceRect: viewport,\n      pickZ: false\n    });\n  }\n  getLayerParameters(layer, layerIndex, viewport) {\n    let parameters;\n    if (this.drawParameters[layer.id]) {\n      parameters = this.drawParameters[layer.id];\n    } else {\n      parameters = super.getLayerParameters(layer, layerIndex, viewport);\n      parameters.blend = true;\n    }\n    return {\n      ...parameters,\n      depthCompare: 'always'\n    };\n  }\n  getShaderModuleProps(layer, effects, otherShaderModuleProps) {\n    return {\n      terrain: {\n        project: otherShaderModuleProps.project\n      }\n    };\n  }\n}\n//# sourceMappingURL=terrain-picking-pass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}