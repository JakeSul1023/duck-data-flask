{"ast":null,"code":"import { InputEvent } from \"../input/input-consts.js\";\nimport { Input } from \"../input/input.js\";\nconst POINTER_INPUT_MAP = {\n  pointerdown: InputEvent.Start,\n  pointermove: InputEvent.Move,\n  pointerup: InputEvent.End,\n  pointercancel: InputEvent.Cancel,\n  pointerout: InputEvent.Cancel\n};\nconst POINTER_ELEMENT_EVENTS = 'pointerdown';\nconst POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n/**\n * Pointer events input\n */\nexport class PointerEventInput extends Input {\n  constructor(manager) {\n    super(manager);\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n    this.store = this.manager.session.pointerEvents = [];\n    this.init();\n  }\n  /**\n   * handle mouse events\n   */\n  handler(ev) {\n    const {\n      store\n    } = this;\n    let removePointer = false;\n    // @ts-ignore\n    const eventType = POINTER_INPUT_MAP[ev.type];\n    const pointerType = ev.pointerType;\n    const isTouch = pointerType === 'touch';\n    // get index of the event in the store\n    let storeIndex = store.findIndex(e => e.pointerId === ev.pointerId);\n    // start and mouse must be down\n    if (eventType & InputEvent.Start && (ev.buttons || isTouch)) {\n      if (storeIndex < 0) {\n        store.push(ev);\n        storeIndex = store.length - 1;\n      }\n    } else if (eventType & (InputEvent.End | InputEvent.Cancel)) {\n      removePointer = true;\n    }\n    // it not found, so the pointer hasn't been down (so it's probably a hover)\n    if (storeIndex < 0) {\n      return;\n    }\n    // update the event in the store\n    store[storeIndex] = ev;\n    this.callback(eventType, {\n      pointers: store,\n      changedPointers: [ev],\n      eventType,\n      pointerType,\n      srcEvent: ev\n    });\n    if (removePointer) {\n      // remove from the store\n      store.splice(storeIndex, 1);\n    }\n  }\n}\n//# sourceMappingURL=pointerevent.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}