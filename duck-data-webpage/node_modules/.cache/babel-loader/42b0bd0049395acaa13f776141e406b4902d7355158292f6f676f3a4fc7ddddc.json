{"ast":null,"code":"import hasParent from \"../utils/has-parent.js\";\nimport { simpleCloneInputData } from \"./simple-clone-input-data.js\";\nimport { getCenter } from \"./get-center.js\";\nimport { getPointDistance } from \"./get-distance.js\";\nimport { getPointAngle } from \"./get-angle.js\";\nimport { getDirection } from \"./get-direction.js\";\nimport { computeDeltaXY } from \"./get-delta-xy.js\";\nimport { getVelocity } from \"./get-velocity.js\";\nimport { getScale } from \"./get-scale.js\";\nimport { getRotation } from \"./get-rotation.js\";\nimport { computeIntervalInputData } from \"./compute-interval-input-data.js\";\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n */\nexport function computeInputData(manager, input) {\n  const {\n    session\n  } = manager;\n  const {\n    pointers\n  } = input;\n  const {\n    length: pointersLength\n  } = pointers;\n  // store the first input to calculate the distance and direction\n  if (!session.firstInput) {\n    session.firstInput = simpleCloneInputData(input);\n  }\n  // to compute scale and rotation we need to store the multiple touches\n  if (pointersLength > 1 && !session.firstMultiple) {\n    session.firstMultiple = simpleCloneInputData(input);\n  } else if (pointersLength === 1) {\n    session.firstMultiple = false;\n  }\n  const {\n    firstInput,\n    firstMultiple\n  } = session;\n  const offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n  const center = input.center = getCenter(pointers);\n  input.timeStamp = Date.now();\n  input.deltaTime = input.timeStamp - firstInput.timeStamp;\n  input.angle = getPointAngle(offsetCenter, center);\n  input.distance = getPointDistance(offsetCenter, center);\n  const {\n    deltaX,\n    deltaY\n  } = computeDeltaXY(session, input);\n  input.deltaX = deltaX;\n  input.deltaY = deltaY;\n  input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n  const overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n  input.overallVelocityX = overallVelocity.x;\n  input.overallVelocityY = overallVelocity.y;\n  input.overallVelocity = Math.abs(overallVelocity.x) > Math.abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n  // find the correct target\n  let target = manager.element;\n  if (hasParent(input.srcEvent.target, target)) {\n    target = input.srcEvent.target;\n  }\n  input.target = target;\n  computeIntervalInputData(session, input);\n  // All the optional fields have been populated\n  return input;\n}\n//# sourceMappingURL=compute-input-data.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}