{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport Viewport from \"../viewports/viewport.js\";\nimport { getMeterZoom } from '@math.gl/web-mercator';\nimport { Matrix4, _SphericalCoordinates as SphericalCoordinates } from '@math.gl/core';\nexport default class FirstPersonViewport extends Viewport {\n  constructor(props) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {\n      longitude,\n      latitude,\n      modelMatrix,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1]\n    } = props;\n    // Always calculate direction from bearing and pitch\n    const spherical = new SphericalCoordinates({\n      bearing,\n      // Avoid \"pixel project matrix not invertible\" error\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const dir = spherical.toVector3().normalize();\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = Number.isFinite(latitude) ? getMeterZoom({\n      latitude: latitude\n    }) : 0;\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({\n      eye: [0, 0, 0],\n      center,\n      up\n    }).scale(scale);\n    super({\n      ...props,\n      zoom,\n      viewMatrix\n    });\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}","map":{"version":3,"names":["Viewport","getMeterZoom","Matrix4","_SphericalCoordinates","SphericalCoordinates","FirstPersonViewport","constructor","props","longitude","latitude","modelMatrix","bearing","pitch","up","spherical","dir","toVector3","normalize","center","transformAsVector","zoom","Number","isFinite","scale","Math","pow","viewMatrix","lookAt","eye"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\viewports\\first-person-viewport.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from '@math.gl/core';\n\nexport type FirstPersonViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude of the camera, in the geospatial case. */\n  longitude?: number;\n  /** Latitude of the camera, in the geospatial case. */\n  latitude?: number;\n  /** Meter offsets of the camera from the lng-lat-elevation anchor point. Default `[0, 0, 0]`. */\n  position?: [number, number, number];\n  /** Bearing (heading) of the camera in degrees. Default `0` (north). */\n  bearing?: number;\n  /** Pitch (tilt) of the camera in degrees. Default `0` (horizontal). */\n  pitch?: number;\n  /** Transform applied to the camera position and direction */\n  modelMatrix?: number[] | null;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** The up direction, default positive z axis. */\n  up?: [number, number, number];\n  /** Field of view covered by camera, in degrees. Default `75`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Modifier of viewport scale. Corresponds to the number of pixels per meter. Default `1`. */\n  focalDistance?: number;\n};\n\nexport default class FirstPersonViewport extends Viewport {\n  longitude?: number;\n  latitude?: number;\n\n  constructor(props: FirstPersonViewportOptions) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {longitude, latitude, modelMatrix, bearing = 0, pitch = 0, up = [0, 0, 1]} = props;\n\n    // Always calculate direction from bearing and pitch\n    const spherical = new SphericalCoordinates({\n      bearing,\n      // Avoid \"pixel project matrix not invertible\" error\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const dir = spherical.toVector3().normalize();\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = Number.isFinite(latitude) ? getMeterZoom({latitude: latitude as number}) : 0;\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    super({\n      ...props,\n      zoom,\n      viewMatrix\n    });\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,QAAQ;AACf,SAAQC,YAAY,QAAO,uBAAuB;AAClD,SAAQC,OAAO,EAAEC,qBAAqB,IAAIC,oBAAoB,QAAO,eAAe;AAuCpF,eAAc,MAAOC,mBAAoB,SAAQL,QAAQ;EAIvDM,YAAYC,KAAiC;IAC3C;IACA,MAAM;MAACC,SAAS;MAAEC,QAAQ;MAAEC,WAAW;MAAEC,OAAO,GAAG,CAAC;MAAEC,KAAK,GAAG,CAAC;MAAEC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAC,CAAC,GAAGN,KAAK;IAExF;IACA,MAAMO,SAAS,GAAG,IAAIV,oBAAoB,CAAC;MACzCO,OAAO;MACP;MACAC,KAAK,EAAEA,KAAK,KAAK,CAAC,EAAE,GAAG,MAAM,GAAG,EAAE,GAAGA;KACtC,CAAC;IACF,MAAMG,GAAG,GAAGD,SAAS,CAACE,SAAS,EAAE,CAACC,SAAS,EAAE;IAE7C;IACA,MAAMC,MAAM,GAAGR,WAAW,GAAG,IAAIR,OAAO,CAACQ,WAAW,CAAC,CAACS,iBAAiB,CAACJ,GAAG,CAAC,GAAGA,GAAG;IAElF;IACA,MAAMK,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACb,QAAQ,CAAC,GAAGR,YAAY,CAAC;MAACQ,QAAQ,EAAEA;IAAkB,CAAC,CAAC,GAAG,CAAC;IACzF,MAAMc,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,IAAI,CAAC;IAC/B,MAAMM,UAAU,GAAG,IAAIxB,OAAO,EAAE,CAACyB,MAAM,CAAC;MAACC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAEV,MAAM;MAAEL;IAAE,CAAC,CAAC,CAACU,KAAK,CAACA,KAAK,CAAC;IAElF,KAAK,CAAC;MACJ,GAAGhB,KAAK;MACRa,IAAI;MACJM;KACD,CAAC;IAEF,IAAI,CAACjB,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACD,SAAS,GAAGA,SAAS;EAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}