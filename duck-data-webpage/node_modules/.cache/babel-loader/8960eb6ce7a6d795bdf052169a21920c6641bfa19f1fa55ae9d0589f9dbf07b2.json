{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Parse a WebGL-format GLSL compilation log into an array of WebGPU style message records.\n * This follows documented WebGL conventions for compilation logs.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\nexport function parseShaderCompilerLog(errLog) {\n  // Parse the error - note: browser and driver dependent\n  const lines = errLog.split(/\\r?\\n/);\n  const messages = [];\n  for (const line of lines) {\n    if (line.length <= 1) {\n      continue; // eslint-disable-line no-continue\n    }\n    const segments = line.split(':');\n    // Check for messages with no line information `ERROR: unsupported shader version`\n    if (segments.length === 2) {\n      const [messageType, message] = segments;\n      messages.push({\n        message: message.trim(),\n        type: getMessageType(messageType),\n        lineNum: 0,\n        linePos: 0\n      });\n      continue; // eslint-disable-line no-continue\n    }\n    const [messageType, linePosition, lineNumber, ...rest] = segments;\n    let lineNum = parseInt(lineNumber, 10);\n    if (isNaN(lineNum)) {\n      lineNum = 0;\n    }\n    let linePos = parseInt(linePosition, 10);\n    if (isNaN(linePos)) {\n      linePos = 0;\n    }\n    messages.push({\n      message: rest.join(':').trim(),\n      type: getMessageType(messageType),\n      lineNum,\n      linePos // TODO\n    });\n  }\n  return messages;\n}\n/** Ensure supported type */\nfunction getMessageType(messageType) {\n  const MESSAGE_TYPES = ['warning', 'error', 'info'];\n  const lowerCaseType = messageType.toLowerCase();\n  return MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : 'info';\n}","map":{"version":3,"names":["parseShaderCompilerLog","errLog","lines","split","messages","line","length","segments","messageType","message","push","trim","type","getMessageType","lineNum","linePos","linePosition","lineNumber","rest","parseInt","isNaN","join","MESSAGE_TYPES","lowerCaseType","toLowerCase","includes"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\helpers\\parse-shader-compiler-log.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CompilerMessage} from '@luma.gl/core';\n\n/**\n * Parse a WebGL-format GLSL compilation log into an array of WebGPU style message records.\n * This follows documented WebGL conventions for compilation logs.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\nexport function parseShaderCompilerLog(errLog: string): readonly CompilerMessage[] {\n  // Parse the error - note: browser and driver dependent\n  const lines = errLog.split(/\\r?\\n/);\n\n  const messages: CompilerMessage[] = [];\n\n  for (const line of lines) {\n    if (line.length <= 1) {\n      continue; // eslint-disable-line no-continue\n    }\n\n    const segments: string[] = line.split(':');\n\n    // Check for messages with no line information `ERROR: unsupported shader version`\n    if (segments.length === 2) {\n      const [messageType, message] = segments;\n      messages.push({\n        message: message.trim(),\n        type: getMessageType(messageType),\n        lineNum: 0,\n        linePos: 0\n      });\n      continue; // eslint-disable-line no-continue\n    }\n\n    const [messageType, linePosition, lineNumber, ...rest] = segments;\n\n    let lineNum = parseInt(lineNumber, 10);\n    if (isNaN(lineNum)) {\n      lineNum = 0;\n    }\n\n    let linePos = parseInt(linePosition, 10);\n    if (isNaN(linePos)) {\n      linePos = 0;\n    }\n\n    messages.push({\n      message: rest.join(':').trim(),\n      type: getMessageType(messageType),\n      lineNum,\n      linePos // TODO\n    });\n  }\n\n  return messages;\n}\n\n/** Ensure supported type */\nfunction getMessageType(messageType: string): 'warning' | 'error' | 'info' {\n  const MESSAGE_TYPES = ['warning', 'error', 'info'];\n  const lowerCaseType = messageType.toLowerCase();\n  return (MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : 'info') as\n    | 'warning'\n    | 'error'\n    | 'info';\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;;;;;AAKA,OAAM,SAAUA,sBAAsBA,CAACC,MAAc;EACnD;EACA,MAAMC,KAAK,GAAGD,MAAM,CAACE,KAAK,CAAC,OAAO,CAAC;EAEnC,MAAMC,QAAQ,GAAsB,EAAE;EAEtC,KAAK,MAAMC,IAAI,IAAIH,KAAK,EAAE;IACxB,IAAIG,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE;MACpB,SAAS,CAAC;IACZ;IAEA,MAAMC,QAAQ,GAAaF,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC;IAE1C;IACA,IAAII,QAAQ,CAACD,MAAM,KAAK,CAAC,EAAE;MACzB,MAAM,CAACE,WAAW,EAAEC,OAAO,CAAC,GAAGF,QAAQ;MACvCH,QAAQ,CAACM,IAAI,CAAC;QACZD,OAAO,EAAEA,OAAO,CAACE,IAAI,EAAE;QACvBC,IAAI,EAAEC,cAAc,CAACL,WAAW,CAAC;QACjCM,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;OACV,CAAC;MACF,SAAS,CAAC;IACZ;IAEA,MAAM,CAACP,WAAW,EAAEQ,YAAY,EAAEC,UAAU,EAAE,GAAGC,IAAI,CAAC,GAAGX,QAAQ;IAEjE,IAAIO,OAAO,GAAGK,QAAQ,CAACF,UAAU,EAAE,EAAE,CAAC;IACtC,IAAIG,KAAK,CAACN,OAAO,CAAC,EAAE;MAClBA,OAAO,GAAG,CAAC;IACb;IAEA,IAAIC,OAAO,GAAGI,QAAQ,CAACH,YAAY,EAAE,EAAE,CAAC;IACxC,IAAII,KAAK,CAACL,OAAO,CAAC,EAAE;MAClBA,OAAO,GAAG,CAAC;IACb;IAEAX,QAAQ,CAACM,IAAI,CAAC;MACZD,OAAO,EAAES,IAAI,CAACG,IAAI,CAAC,GAAG,CAAC,CAACV,IAAI,EAAE;MAC9BC,IAAI,EAAEC,cAAc,CAACL,WAAW,CAAC;MACjCM,OAAO;MACPC,OAAO,CAAC;KACT,CAAC;EACJ;EAEA,OAAOX,QAAQ;AACjB;AAEA;AACA,SAASS,cAAcA,CAACL,WAAmB;EACzC,MAAMc,aAAa,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC;EAClD,MAAMC,aAAa,GAAGf,WAAW,CAACgB,WAAW,EAAE;EAC/C,OAAQF,aAAa,CAACG,QAAQ,CAACF,aAAa,CAAC,GAAGA,aAAa,GAAG,MAAM;AAIxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}