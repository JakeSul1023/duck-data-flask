{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from \"../utils/response-utils.js\";\n// import {FetchError} from './fetch-error';\nexport function isNodePath(url) {\n  return !isRequestURL(url) && !isDataURL(url);\n}\nexport function isRequestURL(url) {\n  return url.startsWith('http:') || url.startsWith('https:');\n}\nexport function isDataURL(url) {\n  return url.startsWith('data:');\n}\n/**\n * fetch API compatible function\n * - Supports fetching from Node.js local file system paths\n * - Respects pathPrefix and file aliases\n */\nexport async function fetchFile(urlOrData, fetchOptions) {\n  if (typeof urlOrData === 'string') {\n    const url = resolvePath(urlOrData);\n    // Support fetching from local file system\n    if (isNodePath(url)) {\n      if (globalThis.loaders?.fetchNode) {\n        return globalThis.loaders?.fetchNode(url, fetchOptions);\n      }\n      // throw new Error(\n      //   'fetchFile: globalThis.loaders.fetchNode not defined. Install @loaders.gl/polyfills'\n      // );\n    }\n    // Call global fetch\n    return await fetch(url, fetchOptions);\n  }\n  // TODO - should we still call fetch on non-URL inputs?\n  return await makeResponse(urlOrData);\n}","map":{"version":3,"names":["resolvePath","makeResponse","isNodePath","url","isRequestURL","isDataURL","startsWith","fetchFile","urlOrData","fetchOptions","globalThis","loaders","fetchNode","fetch"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/fetch/fetch-file.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from \"../utils/response-utils.js\";\n// import {FetchError} from './fetch-error';\nexport function isNodePath(url) {\n    return !isRequestURL(url) && !isDataURL(url);\n}\nexport function isRequestURL(url) {\n    return url.startsWith('http:') || url.startsWith('https:');\n}\nexport function isDataURL(url) {\n    return url.startsWith('data:');\n}\n/**\n * fetch API compatible function\n * - Supports fetching from Node.js local file system paths\n * - Respects pathPrefix and file aliases\n */\nexport async function fetchFile(urlOrData, fetchOptions) {\n    if (typeof urlOrData === 'string') {\n        const url = resolvePath(urlOrData);\n        // Support fetching from local file system\n        if (isNodePath(url)) {\n            if (globalThis.loaders?.fetchNode) {\n                return globalThis.loaders?.fetchNode(url, fetchOptions);\n            }\n            // throw new Error(\n            //   'fetchFile: globalThis.loaders.fetchNode not defined. Install @loaders.gl/polyfills'\n            // );\n        }\n        // Call global fetch\n        return await fetch(url, fetchOptions);\n    }\n    // TODO - should we still call fetch on non-URL inputs?\n    return await makeResponse(urlOrData);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,0BAA0B;AACtD,SAASC,YAAY,QAAQ,4BAA4B;AACzD;AACA,OAAO,SAASC,UAAUA,CAACC,GAAG,EAAE;EAC5B,OAAO,CAACC,YAAY,CAACD,GAAG,CAAC,IAAI,CAACE,SAAS,CAACF,GAAG,CAAC;AAChD;AACA,OAAO,SAASC,YAAYA,CAACD,GAAG,EAAE;EAC9B,OAAOA,GAAG,CAACG,UAAU,CAAC,OAAO,CAAC,IAAIH,GAAG,CAACG,UAAU,CAAC,QAAQ,CAAC;AAC9D;AACA,OAAO,SAASD,SAASA,CAACF,GAAG,EAAE;EAC3B,OAAOA,GAAG,CAACG,UAAU,CAAC,OAAO,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,SAASA,CAACC,SAAS,EAAEC,YAAY,EAAE;EACrD,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;IAC/B,MAAML,GAAG,GAAGH,WAAW,CAACQ,SAAS,CAAC;IAClC;IACA,IAAIN,UAAU,CAACC,GAAG,CAAC,EAAE;MACjB,IAAIO,UAAU,CAACC,OAAO,EAAEC,SAAS,EAAE;QAC/B,OAAOF,UAAU,CAACC,OAAO,EAAEC,SAAS,CAACT,GAAG,EAAEM,YAAY,CAAC;MAC3D;MACA;MACA;MACA;IACJ;IACA;IACA,OAAO,MAAMI,KAAK,CAACV,GAAG,EAAEM,YAAY,CAAC;EACzC;EACA;EACA,OAAO,MAAMR,YAAY,CAACO,SAAS,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}