{"ast":null,"code":"import { AttrRecognizer } from \"./attribute.js\";\nimport { InputDirection, InputEvent } from \"../input/input-consts.js\";\nimport { PanRecognizer } from \"./pan.js\";\nconst EVENT_NAMES = ['', 'up', 'down', 'left', 'right'];\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n */\nexport class SwipeRecognizer extends AttrRecognizer {\n  constructor(options = {}) {\n    super({\n      enable: true,\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: InputDirection.All,\n      pointers: 1,\n      ...options\n    });\n  }\n  getTouchAction() {\n    return PanRecognizer.prototype.getTouchAction.call(this);\n  }\n  getEventNames() {\n    return EVENT_NAMES.map(suffix => this.options.event + suffix);\n  }\n  attrTest(input) {\n    const {\n      direction\n    } = this.options;\n    let velocity = 0;\n    if (direction & InputDirection.All) {\n      velocity = input.overallVelocity;\n    } else if (direction & InputDirection.Horizontal) {\n      velocity = input.overallVelocityX;\n    } else if (direction & InputDirection.Vertical) {\n      velocity = input.overallVelocityY;\n    }\n    return super.attrTest(input) && Boolean(direction & input.offsetDirection) && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && Math.abs(velocity) > this.options.velocity && Boolean(input.eventType & InputEvent.End);\n  }\n  emit(input) {\n    const direction = InputDirection[input.offsetDirection].toLowerCase();\n    if (direction) {\n      this.manager.emit(this.options.event + direction, input);\n    }\n    this.manager.emit(this.options.event, input);\n  }\n}\n//# sourceMappingURL=swipe.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}