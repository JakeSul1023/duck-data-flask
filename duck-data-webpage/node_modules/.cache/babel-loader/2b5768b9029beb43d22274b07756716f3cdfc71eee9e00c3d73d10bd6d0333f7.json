{"ast":null,"code":"// @eslint-disable\n// @ts-nocheck\nimport * as glMatrix from './common.js';\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n/**\n * Creates a new, empty vec2\n *\n * @returns a new 2D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param a vector to clone\n * @returns a new 2D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param x X component\n * @param y Y component\n * @returns a new 2D vector\n */\nexport function fromValues(x, y) {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the source vector\n * @returns {NumericArray} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {NumericArray} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to ceil\n * @returns {NumericArray} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to floor\n * @returns {NumericArray} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * symmetric round the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to round\n * @returns {NumericArray} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {NumericArray} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {NumericArray} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to negate\n * @returns {NumericArray} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to invert\n * @returns {NumericArray} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to normalize\n * @returns {NumericArray} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  let len = x * x + y * y;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {NumericArray} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {NumericArray} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2d(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {NumericArray} out The receiving vec2\n * @param {Readonly<NumericArray>} a The vec2 point to rotate\n * @param {Readonly<NumericArray>} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {NumericArray} out\n */\nexport function rotate(out, a, b, rad) {\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n  // perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {Readonly<NumericArray>} a The first operand\n * @param {Readonly<NumericArray>} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const x1 = a[0];\n  const y1 = a[1];\n  const x2 = b[0];\n  const y2 = b[1];\n  // mag is the product of the magnitudes of a and b\n  const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2));\n  // mag &&.. short circuits if mag == 0\n  const cosine = mag && (x1 * x2 + y1 * y2) / mag;\n  // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {NumericArray} out the receiving vector\n * @returns {NumericArray} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {Readonly<NumericArray>} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec2(${a[0]}, ${a[1]})`;\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const b0 = b[0];\n  const b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = function () {\n  const vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 2;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n    return a;\n  };\n}();","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","sqrt","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","cross","z","lerp","t","ax","ay","random","undefined","r","RANDOM","PI","cos","sin","transformMat2","m","transformMat2d","transformMat3","transformMat4","rotate","rad","p0","p1","sinC","cosC","angle","x1","y1","x2","y2","mag","cosine","acos","zero","str","exactEquals","equals","a0","a1","b0","b1","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\gl-matrix\\vec2.ts"],"sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport type {NumericArray} from '@math.gl/types';\nimport * as glMatrix from './common.js';\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns a new 2D vector\n */\nexport function create(): NumericArray {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param a vector to clone\n * @returns a new 2D vector\n */\nexport function clone(a: Readonly<NumericArray>): NumericArray {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param x X component\n * @param y Y component\n * @returns a new 2D vector\n */\nexport function fromValues(x: number, y: number): NumericArray {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the source vector\n * @returns {NumericArray} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {NumericArray} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to ceil\n * @returns {NumericArray} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to floor\n * @returns {NumericArray} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to round\n * @returns {NumericArray} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {NumericArray} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {NumericArray} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to negate\n * @returns {NumericArray} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to invert\n * @returns {NumericArray} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to normalize\n * @returns {NumericArray} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  let len = x * x + y * y;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {NumericArray} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {NumericArray} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2d(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {NumericArray} out The receiving vec2\n * @param {Readonly<NumericArray>} a The vec2 point to rotate\n * @param {Readonly<NumericArray>} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {NumericArray} out\n */\nexport function rotate(out, a, b, rad) {\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  // perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {Readonly<NumericArray>} a The first operand\n * @param {Readonly<NumericArray>} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const x1 = a[0];\n  const y1 = a[1];\n  const x2 = b[0];\n  const y2 = b[1];\n  // mag is the product of the magnitudes of a and b\n  const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2));\n  // mag &&.. short circuits if mag == 0\n  const cosine = mag && (x1 * x2 + y1 * y2) / mag;\n  // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec2 to zero\n *\n * @param {NumericArray} out the receiving vector\n * @returns {NumericArray} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {Readonly<NumericArray>} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec2(${a[0]}, ${a[1]})`;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const b0 = b[0];\n  const b1 = b[1];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n  );\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}