{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport JSZip from 'jszip';\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\nexport const ZipLoader = {\n  dataType: null,\n  batchType: null,\n  id: 'zip',\n  module: 'zip',\n  name: 'Zip Archive',\n  version: VERSION,\n  extensions: ['zip'],\n  mimeTypes: ['application/zip'],\n  category: 'archive',\n  tests: ['PK'],\n  options: {},\n  parse: parseZipAsync\n};\n// TODO - Could return a map of promises, perhaps as an option...\nasync function parseZipAsync(data, options = {}) {\n  const promises = [];\n  const fileMap = {};\n  try {\n    const jsZip = new JSZip();\n    const zip = await jsZip.loadAsync(data, options);\n    // start to load each file in this zip\n    zip.forEach((relativePath, zipEntry) => {\n      const subFilename = zipEntry.name;\n      const promise = loadZipEntry(jsZip, subFilename, options).then(arrayBufferOrError => {\n        fileMap[relativePath] = arrayBufferOrError;\n      });\n      // Ensure Promise.all doesn't ignore rejected promises.\n      promises.push(promise);\n    });\n    await Promise.all(promises);\n    return fileMap;\n  } catch (error) {\n    // @ts-ignore\n    options.log.error(`Unable to read zip archive: ${error}`);\n    throw error;\n  }\n}\nasync function loadZipEntry(jsZip, subFilename, options = {}) {\n  // jszip supports both arraybuffer and text, the main loaders.gl types\n  // https://stuk.github.io/jszip/documentation/api_zipobject/async.html\n  try {\n    const arrayBuffer = await jsZip.file(subFilename).async(options.dataType || 'arraybuffer');\n    return arrayBuffer;\n  } catch (error) {\n    options.log.error(`Unable to read ${subFilename} from zip archive: ${error}`);\n    // Store error in place of data in map\n    return error;\n  }\n}","map":{"version":3,"names":["JSZip","VERSION","ZipLoader","dataType","batchType","id","module","name","version","extensions","mimeTypes","category","tests","options","parse","parseZipAsync","data","promises","fileMap","jsZip","zip","loadAsync","forEach","relativePath","zipEntry","subFilename","promise","loadZipEntry","then","arrayBufferOrError","push","Promise","all","error","log","arrayBuffer","file","async"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/zip/dist/zip-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport JSZip from 'jszip';\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\nexport const ZipLoader = {\n    dataType: null,\n    batchType: null,\n    id: 'zip',\n    module: 'zip',\n    name: 'Zip Archive',\n    version: VERSION,\n    extensions: ['zip'],\n    mimeTypes: ['application/zip'],\n    category: 'archive',\n    tests: ['PK'],\n    options: {},\n    parse: parseZipAsync\n};\n// TODO - Could return a map of promises, perhaps as an option...\nasync function parseZipAsync(data, options = {}) {\n    const promises = [];\n    const fileMap = {};\n    try {\n        const jsZip = new JSZip();\n        const zip = await jsZip.loadAsync(data, options);\n        // start to load each file in this zip\n        zip.forEach((relativePath, zipEntry) => {\n            const subFilename = zipEntry.name;\n            const promise = loadZipEntry(jsZip, subFilename, options).then((arrayBufferOrError) => {\n                fileMap[relativePath] = arrayBufferOrError;\n            });\n            // Ensure Promise.all doesn't ignore rejected promises.\n            promises.push(promise);\n        });\n        await Promise.all(promises);\n        return fileMap;\n    }\n    catch (error) {\n        // @ts-ignore\n        options.log.error(`Unable to read zip archive: ${error}`);\n        throw error;\n    }\n}\nasync function loadZipEntry(jsZip, subFilename, options = {}) {\n    // jszip supports both arraybuffer and text, the main loaders.gl types\n    // https://stuk.github.io/jszip/documentation/api_zipobject/async.html\n    try {\n        const arrayBuffer = await jsZip.file(subFilename).async(options.dataType || 'arraybuffer');\n        return arrayBuffer;\n    }\n    catch (error) {\n        options.log.error(`Unable to read ${subFilename} from zip archive: ${error}`);\n        // Store error in place of data in map\n        return error;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA,MAAMC,OAAO,GAAG,OAAO,OAAO,KAAK,WAAW,GAAG,OAAO,GAAG,QAAQ;AACnE,OAAO,MAAMC,SAAS,GAAG;EACrBC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,EAAE,EAAE,KAAK;EACTC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,aAAa;EACnBC,OAAO,EAAEP,OAAO;EAChBQ,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,SAAS,EAAE,CAAC,iBAAiB,CAAC;EAC9BC,QAAQ,EAAE,SAAS;EACnBC,KAAK,EAAE,CAAC,IAAI,CAAC;EACbC,OAAO,EAAE,CAAC,CAAC;EACXC,KAAK,EAAEC;AACX,CAAC;AACD;AACA,eAAeA,aAAaA,CAACC,IAAI,EAAEH,OAAO,GAAG,CAAC,CAAC,EAAE;EAC7C,MAAMI,QAAQ,GAAG,EAAE;EACnB,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,IAAI;IACA,MAAMC,KAAK,GAAG,IAAInB,KAAK,CAAC,CAAC;IACzB,MAAMoB,GAAG,GAAG,MAAMD,KAAK,CAACE,SAAS,CAACL,IAAI,EAAEH,OAAO,CAAC;IAChD;IACAO,GAAG,CAACE,OAAO,CAAC,CAACC,YAAY,EAAEC,QAAQ,KAAK;MACpC,MAAMC,WAAW,GAAGD,QAAQ,CAACjB,IAAI;MACjC,MAAMmB,OAAO,GAAGC,YAAY,CAACR,KAAK,EAAEM,WAAW,EAAEZ,OAAO,CAAC,CAACe,IAAI,CAAEC,kBAAkB,IAAK;QACnFX,OAAO,CAACK,YAAY,CAAC,GAAGM,kBAAkB;MAC9C,CAAC,CAAC;MACF;MACAZ,QAAQ,CAACa,IAAI,CAACJ,OAAO,CAAC;IAC1B,CAAC,CAAC;IACF,MAAMK,OAAO,CAACC,GAAG,CAACf,QAAQ,CAAC;IAC3B,OAAOC,OAAO;EAClB,CAAC,CACD,OAAOe,KAAK,EAAE;IACV;IACApB,OAAO,CAACqB,GAAG,CAACD,KAAK,CAAC,+BAA+BA,KAAK,EAAE,CAAC;IACzD,MAAMA,KAAK;EACf;AACJ;AACA,eAAeN,YAAYA,CAACR,KAAK,EAAEM,WAAW,EAAEZ,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1D;EACA;EACA,IAAI;IACA,MAAMsB,WAAW,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAACX,WAAW,CAAC,CAACY,KAAK,CAACxB,OAAO,CAACV,QAAQ,IAAI,aAAa,CAAC;IAC1F,OAAOgC,WAAW;EACtB,CAAC,CACD,OAAOF,KAAK,EAAE;IACVpB,OAAO,CAACqB,GAAG,CAACD,KAAK,CAAC,kBAAkBR,WAAW,sBAAsBQ,KAAK,EAAE,CAAC;IAC7E;IACA,OAAOA,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}