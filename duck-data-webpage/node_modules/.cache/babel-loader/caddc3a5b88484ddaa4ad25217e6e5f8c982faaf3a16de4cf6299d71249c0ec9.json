{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Load a script (identified by an url). When the url returns, the\n * content of this file is added into a new script element, attached to the DOM (body element)\n * @param scriptUrl defines the url of the script to laod\n * @param scriptId defines the id of the script element\n */\nexport async function loadScript(scriptUrl, scriptId) {\n  const head = document.getElementsByTagName('head')[0];\n  if (!head) {\n    throw new Error('loadScript');\n  }\n  const script = document.createElement('script');\n  script.setAttribute('type', 'text/javascript');\n  script.setAttribute('src', scriptUrl);\n  if (scriptId) {\n    script.id = scriptId;\n  }\n  return new Promise((resolve, reject) => {\n    script.onload = resolve;\n    script.onerror = error => reject(new Error(`Unable to load script '${scriptUrl}': ${error}`));\n    head.appendChild(script);\n  });\n}","map":{"version":3,"names":["loadScript","scriptUrl","scriptId","head","document","getElementsByTagName","Error","script","createElement","setAttribute","id","Promise","resolve","reject","onload","onerror","error","appendChild"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\utils\\load-script.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/**\n * Load a script (identified by an url). When the url returns, the\n * content of this file is added into a new script element, attached to the DOM (body element)\n * @param scriptUrl defines the url of the script to laod\n * @param scriptId defines the id of the script element\n */\nexport async function loadScript(scriptUrl: string, scriptId?: string): Promise<Event> {\n  const head = document.getElementsByTagName('head')[0];\n  if (!head) {\n    throw new Error('loadScript');\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('type', 'text/javascript');\n  script.setAttribute('src', scriptUrl);\n  if (scriptId) {\n    script.id = scriptId;\n  }\n\n  return new Promise((resolve, reject) => {\n    script.onload = resolve;\n    script.onerror = error =>\n      reject(new Error(`Unable to load script '${scriptUrl}': ${error as string}`));\n    head.appendChild(script);\n  });\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;;;;;;AAMA,OAAO,eAAeA,UAAUA,CAACC,SAAiB,EAAEC,QAAiB;EACnE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACrD,IAAI,CAACF,IAAI,EAAE;IACT,MAAM,IAAIG,KAAK,CAAC,YAAY,CAAC;EAC/B;EAEA,MAAMC,MAAM,GAAGH,QAAQ,CAACI,aAAa,CAAC,QAAQ,CAAC;EAC/CD,MAAM,CAACE,YAAY,CAAC,MAAM,EAAE,iBAAiB,CAAC;EAC9CF,MAAM,CAACE,YAAY,CAAC,KAAK,EAAER,SAAS,CAAC;EACrC,IAAIC,QAAQ,EAAE;IACZK,MAAM,CAACG,EAAE,GAAGR,QAAQ;EACtB;EAEA,OAAO,IAAIS,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACrCN,MAAM,CAACO,MAAM,GAAGF,OAAO;IACvBL,MAAM,CAACQ,OAAO,GAAGC,KAAK,IACpBH,MAAM,CAAC,IAAIP,KAAK,CAAC,0BAA0BL,SAAS,MAAMe,KAAe,EAAE,CAAC,CAAC;IAC/Eb,IAAI,CAACc,WAAW,CAACV,MAAM,CAAC;EAC1B,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}