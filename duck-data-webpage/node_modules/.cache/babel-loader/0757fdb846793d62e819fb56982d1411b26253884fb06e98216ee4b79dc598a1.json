{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { GL } from '@loaders.gl/math'; // math.gl/geometry;\nimport Tile3DFeatureTable from \"../classes/tile-3d-feature-table.js\";\n// import Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport { parse3DTileHeaderSync } from \"./helpers/parse-3d-tile-header.js\";\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from \"./helpers/parse-3d-tile-tables.js\";\nimport { parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT } from \"./helpers/parse-3d-tile-gltf-view.js\";\nexport async function parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n  const extensions = tile?.gltf?.extensions;\n  if (extensions && extensions.CESIUM_RTC) {\n    tile.rtcCenter = extensions.CESIUM_RTC.center;\n  }\n  return byteOffset;\n}\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  return byteOffset;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}