{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { makePropValidators, getValidatedProperties } from \"../filters/prop-types.js\";\nimport { normalizeInjections } from \"../shader-assembly/shader-injections.js\";\n// SHNDER MODULE API\nexport function initializeShaderModules(modules) {\n  modules.map(module => initializeShaderModule(module));\n}\nexport function initializeShaderModule(module) {\n  if (module.instance) {\n    return;\n  }\n  initializeShaderModules(module.dependencies || []);\n  const {\n    propTypes = {},\n    deprecations = [],\n    // defines = {},\n    inject = {}\n  } = module;\n  const instance = {\n    normalizedInjections: normalizeInjections(inject),\n    parsedDeprecations: parseDeprecationDefinitions(deprecations)\n  };\n  if (propTypes) {\n    instance.propValidators = makePropValidators(propTypes);\n  }\n  module.instance = instance;\n  // TODO(ib) - we need to apply the original prop types to the default uniforms\n  let defaultProps = {};\n  if (propTypes) {\n    defaultProps = Object.entries(propTypes).reduce((obj, _ref) => {\n      let [key, propType] = _ref;\n      // @ts-expect-error\n      const value = propType?.value;\n      if (value) {\n        // @ts-expect-error\n        obj[key] = value;\n      }\n      return obj;\n    }, {});\n  }\n  module.defaultUniforms = {\n    ...module.defaultUniforms,\n    ...defaultProps\n  };\n}\n/** Convert module props to uniforms */\nexport function getShaderModuleUniforms(module, props, oldUniforms) {\n  initializeShaderModule(module);\n  const uniforms = oldUniforms || {\n    ...module.defaultUniforms\n  };\n  // If module has a getUniforms function, use it\n  if (props && module.getUniforms) {\n    return module.getUniforms(props, uniforms);\n  }\n  // Build uniforms from the uniforms array\n  // @ts-expect-error\n  return getValidatedProperties(props, module.instance?.propValidators, module.name);\n}\n/* TODO this looks like it was unused code\n  _defaultGetUniforms(opts: Record<string, any> = {}): Record<string, any> {\n    const uniforms: Record<string, any> = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n*/\n// Warn about deprecated uniforms or functions\nexport function checkShaderModuleDeprecations(shaderModule, shaderSource, log) {\n  shaderModule.deprecations?.forEach(def => {\n    if (def.regex?.test(shaderSource)) {\n      if (def.deprecated) {\n        log.deprecated(def.old, def.new)();\n      } else {\n        log.removed(def.old, def.new)();\n      }\n    }\n  });\n}\n// HELPERS\nfunction parseDeprecationDefinitions(deprecations) {\n  deprecations.forEach(def => {\n    switch (def.type) {\n      case 'function':\n        def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n        break;\n      default:\n        def.regex = new RegExp(`${def.type} ${def.old};`);\n    }\n  });\n  return deprecations;\n}\n//# sourceMappingURL=shader-module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}