{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n *\n * @param baseOptions Can be undefined, in which case a fresh options object will be minted\n * @param newOptions\n * @returns\n */\nexport function mergeLoaderOptions(baseOptions, newOptions) {\n  return mergeOptionsRecursively(baseOptions || {}, newOptions);\n}\nfunction mergeOptionsRecursively(baseOptions, newOptions) {\n  let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  // Sanity check (jest test runner overwrites the console object which can lead to infinite recursion)\n  if (level > 3) {\n    return newOptions;\n  }\n  const options = {\n    ...baseOptions\n  };\n  for (const [key, newValue] of Object.entries(newOptions)) {\n    if (newValue && typeof newValue === 'object' && !Array.isArray(newValue)) {\n      options[key] = mergeOptionsRecursively(options[key] || {}, newOptions[key], level + 1);\n      // Object.assign(options[key] as object, newOptions[key]);\n    } else {\n      options[key] = newOptions[key];\n    }\n  }\n  return options;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}