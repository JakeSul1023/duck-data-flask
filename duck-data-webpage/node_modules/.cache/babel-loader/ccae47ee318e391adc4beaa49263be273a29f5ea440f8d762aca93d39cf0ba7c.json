{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Geometry } from '@luma.gl/engine';\nimport { Model } from '@luma.gl/engine';\nimport { textBackgroundUniforms } from \"./text-background-layer-uniforms.js\";\nimport vs from \"./text-background-layer-vertex.glsl.js\";\nimport fs from \"./text-background-layer-fragment.glsl.js\";\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  padding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getBoundingRect: {\n    type: 'accessor',\n    value: [0, 0, 0, 0]\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\nclass TextBackgroundLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking, textBackgroundUniforms]\n    });\n  }\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      changeFlags\n    } = params;\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n  draw({\n    uniforms\n  }) {\n    const {\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      getLineWidth\n    } = this.props;\n    let {\n      padding\n    } = this.props;\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n    const model = this.state.model;\n    const textBackgroundProps = {\n      billboard,\n      stroked: Boolean(getLineWidth),\n      padding: padding,\n      sizeUnits: UNIT[sizeUnits],\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels\n    };\n    model.shaderInputs.setProps({\n      textBackground: textBackgroundProps\n    });\n    model.draw(this.context.renderPass);\n  }\n  _getModel() {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 0, 1, 1, 1];\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager().getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        vertexCount: 4,\n        attributes: {\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\nTextBackgroundLayer.defaultProps = defaultProps;\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nexport default TextBackgroundLayer;","map":{"version":3,"names":["Layer","project32","picking","UNIT","Geometry","Model","textBackgroundUniforms","vs","fs","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","state","model","destroy","_getModel","invalidateAll","draw","uniforms","props","length","textBackgroundProps","stroked","Boolean","shaderInputs","setProps","textBackground","context","renderPass","positions","device","id","bufferLayout","getBufferLayouts","geometry","topology","vertexCount","attributes","Float32Array","isInstanced","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\text-layer\\text-background-layer\\text-background-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport {Geometry} from '@luma.gl/engine';\nimport {Model} from '@luma.gl/engine';\n\nimport {TextBackgroundProps, textBackgroundUniforms} from './text-background-layer-uniforms';\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = unknown> = _TextBackgroundLayerProps<DataT> &\n  LayerProps;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: (x: any) => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model?: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking, textBackgroundUniforms]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 'float64',\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        type: 'unorm8',\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      this.state.model?.destroy();\n      this.state.model = this._getModel();\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    const model = this.state.model!;\n    const textBackgroundProps: TextBackgroundProps = {\n      billboard,\n      stroked: Boolean(getLineWidth),\n      padding: padding as [number, number, number, number],\n      sizeUnits: UNIT[sizeUnits],\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels\n    };\n    model.shaderInputs.setProps({textBackground: textBackgroundProps});\n    model.draw(this.context.renderPass);\n  }\n\n  protected _getModel(): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 0, 1, 1, 1];\n\n    return new Model(this.context.device, {\n      ...this.getShaders(),\n      id: this.props.id,\n      bufferLayout: this.getAttributeManager()!.getBufferLayouts(),\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}