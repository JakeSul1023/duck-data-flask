{"ast":null,"code":"/* eslint-disable camelcase */\nimport { vec2 } from '@math.gl/core';\nimport { worldToLngLat } from \"./web-mercator-utils.js\";\nimport { transformVector } from \"./math-utils.js\";\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n/*\n * Returns the quad at the intersection of the frustum and the given z plane\n * @param {WebMercatorViewport} viewport\n * @param {Number} z - elevation in meters\n */\nexport function getBounds(viewport, z = 0) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const {\n    width,\n    height,\n    unproject\n  } = viewport;\n  const unprojectOps = {\n    targetZ: z\n  };\n  const bottomLeft = unproject([0, height], unprojectOps);\n  const bottomRight = unproject([width, height], unprojectOps);\n  let topLeft;\n  let topRight;\n  const halfFov = viewport.fovy ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS : Math.atan(0.5 / viewport.altitude);\n  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;\n  // The top plane is parallel to the ground if halfFov == angleToGround\n  if (halfFov > angleToGround - 0.01) {\n    // intersect with the far plane\n    topLeft = unprojectOnFarPlane(viewport, 0, z);\n    topRight = unprojectOnFarPlane(viewport, width, z);\n  } else {\n    // intersect with the top plane\n    topLeft = unproject([0, 0], unprojectOps);\n    topRight = unproject([width, 0], unprojectOps);\n  }\n  return [bottomLeft, bottomRight, topRight, topLeft];\n}\n/*\n * Find a point on the far clipping plane of the viewport\n * @param {WebMercatorViewport} viewport\n * @param {Number} x - projected x in screen space\n * @param {Number} targetZ - the elevation of the point in meters\n */\nfunction unprojectOnFarPlane(viewport, x, targetZ) {\n  const {\n    pixelUnprojectionMatrix\n  } = viewport;\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, 0, 1, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);\n  const z = targetZ * viewport.distanceScales.unitsPerMeter[2];\n  const t = (z - coord0[2]) / (coord1[2] - coord0[2]);\n  const coord = vec2.lerp([], coord0, coord1, t);\n  const result = worldToLngLat(coord);\n  result.push(targetZ);\n  return result;\n}","map":{"version":3,"names":["vec2","worldToLngLat","transformVector","DEGREES_TO_RADIANS","Math","PI","getBounds","viewport","z","width","height","unproject","unprojectOps","targetZ","bottomLeft","bottomRight","topLeft","topRight","halfFov","fovy","atan","altitude","angleToGround","pitch","unprojectOnFarPlane","x","pixelUnprojectionMatrix","coord0","coord1","distanceScales","unitsPerMeter","t","coord","lerp","result","push"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\web-mercator\\src\\get-bounds.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport {vec2} from '@math.gl/core';\nimport type {WebMercatorViewport} from './web-mercator-viewport';\nimport {worldToLngLat} from './web-mercator-utils';\nimport {transformVector} from './math-utils';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n/*\n * Returns the quad at the intersection of the frustum and the given z plane\n * @param {WebMercatorViewport} viewport\n * @param {Number} z - elevation in meters\n */\nexport function getBounds(viewport: WebMercatorViewport, z: number = 0): number[][] {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const {width, height, unproject} = viewport;\n  const unprojectOps = {targetZ: z};\n  const bottomLeft = unproject([0, height], unprojectOps);\n  const bottomRight = unproject([width, height], unprojectOps);\n  let topLeft: number[];\n  let topRight: number[];\n\n  const halfFov = viewport.fovy\n    ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS\n    : Math.atan(0.5 / viewport.altitude);\n  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;\n  // The top plane is parallel to the ground if halfFov == angleToGround\n  if (halfFov > angleToGround - 0.01) {\n    // intersect with the far plane\n    topLeft = unprojectOnFarPlane(viewport, 0, z);\n    topRight = unprojectOnFarPlane(viewport, width, z);\n  } else {\n    // intersect with the top plane\n    topLeft = unproject([0, 0], unprojectOps);\n    topRight = unproject([width, 0], unprojectOps);\n  }\n\n  return [bottomLeft, bottomRight, topRight, topLeft];\n}\n\n/*\n * Find a point on the far clipping plane of the viewport\n * @param {WebMercatorViewport} viewport\n * @param {Number} x - projected x in screen space\n * @param {Number} targetZ - the elevation of the point in meters\n */\nfunction unprojectOnFarPlane(viewport: WebMercatorViewport, x: number, targetZ: number): number[] {\n  const {pixelUnprojectionMatrix} = viewport;\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, 0, 1, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);\n\n  const z = targetZ * viewport.distanceScales.unitsPerMeter[2];\n  const t = (z - coord0[2]) / (coord1[2] - coord0[2]);\n  const coord = vec2.lerp([], coord0, coord1, t);\n\n  const result = worldToLngLat(coord);\n  result.push(targetZ);\n  return result;\n}\n"],"mappings":"AAAA;AACA,SAAQA,IAAI,QAAO,eAAe;AAElC,SAAQC,aAAa,QAAC;AACtB,SAAQC,eAAe,QAAC;AAExB,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;AAExC;;;;;AAKA,OAAM,SAAUC,SAASA,CAACC,QAA6B,EAAEC,CAAA,GAAY,CAAC;EACpE;EACA,MAAM;IAACC,KAAK;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAGJ,QAAQ;EAC3C,MAAMK,YAAY,GAAG;IAACC,OAAO,EAAEL;EAAC,CAAC;EACjC,MAAMM,UAAU,GAAGH,SAAS,CAAC,CAAC,CAAC,EAAED,MAAM,CAAC,EAAEE,YAAY,CAAC;EACvD,MAAMG,WAAW,GAAGJ,SAAS,CAAC,CAACF,KAAK,EAAEC,MAAM,CAAC,EAAEE,YAAY,CAAC;EAC5D,IAAII,OAAiB;EACrB,IAAIC,QAAkB;EAEtB,MAAMC,OAAO,GAAGX,QAAQ,CAACY,IAAI,GACzB,GAAG,GAAGZ,QAAQ,CAACY,IAAI,GAAGhB,kBAAkB,GACxCC,IAAI,CAACgB,IAAI,CAAC,GAAG,GAAGb,QAAQ,CAACc,QAAQ,CAAC;EACtC,MAAMC,aAAa,GAAG,CAAC,EAAE,GAAGf,QAAQ,CAACgB,KAAK,IAAIpB,kBAAkB;EAChE;EACA,IAAIe,OAAO,GAAGI,aAAa,GAAG,IAAI,EAAE;IAClC;IACAN,OAAO,GAAGQ,mBAAmB,CAACjB,QAAQ,EAAE,CAAC,EAAEC,CAAC,CAAC;IAC7CS,QAAQ,GAAGO,mBAAmB,CAACjB,QAAQ,EAAEE,KAAK,EAAED,CAAC,CAAC;EACpD,CAAC,MAAM;IACL;IACAQ,OAAO,GAAGL,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,YAAY,CAAC;IACzCK,QAAQ,GAAGN,SAAS,CAAC,CAACF,KAAK,EAAE,CAAC,CAAC,EAAEG,YAAY,CAAC;EAChD;EAEA,OAAO,CAACE,UAAU,EAAEC,WAAW,EAAEE,QAAQ,EAAED,OAAO,CAAC;AACrD;AAEA;;;;;;AAMA,SAASQ,mBAAmBA,CAACjB,QAA6B,EAAEkB,CAAS,EAAEZ,OAAe;EACpF,MAAM;IAACa;EAAuB,CAAC,GAAGnB,QAAQ;EAC1C,MAAMoB,MAAM,GAAGzB,eAAe,CAACwB,uBAAuB,EAAE,CAACD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACrE,MAAMG,MAAM,GAAG1B,eAAe,CAACwB,uBAAuB,EAAE,CAACD,CAAC,EAAElB,QAAQ,CAACG,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEnF,MAAMF,CAAC,GAAGK,OAAO,GAAGN,QAAQ,CAACsB,cAAc,CAACC,aAAa,CAAC,CAAC,CAAC;EAC5D,MAAMC,CAAC,GAAG,CAACvB,CAAC,GAAGmB,MAAM,CAAC,CAAC,CAAC,KAAKC,MAAM,CAAC,CAAC,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC,CAAC;EACnD,MAAMK,KAAK,GAAGhC,IAAI,CAACiC,IAAI,CAAC,EAAE,EAAEN,MAAM,EAAEC,MAAM,EAAEG,CAAC,CAAC;EAE9C,MAAMG,MAAM,GAAGjC,aAAa,CAAC+B,KAAK,CAAC;EACnCE,MAAM,CAACC,IAAI,CAACtB,OAAO,CAAC;EACpB,OAAOqB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}