{"ast":null,"code":"import { VERSION } from \"./lib/utils/version.js\";\nimport { parseGLTF } from \"./lib/parsers/parse-gltf.js\";\n/**\n * GLTF loader\n */\nexport const GLTFLoader = {\n  dataType: null,\n  batchType: null,\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n  options: {\n    gltf: {\n      normalize: true,\n      // Normalize glTF v1 to glTF v2 format (not yet stable)\n      loadBuffers: true,\n      // Fetch any linked .BIN buffers, decode base64\n      loadImages: true,\n      // Create image objects\n      decompressMeshes: true // Decompress Draco encoded meshes\n    },\n    // common?\n    log: console // eslint-disable-line\n  }\n};\nexport async function parse(arrayBuffer) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let context = arguments.length > 2 ? arguments[2] : undefined;\n  // Apps can call the parse method directly, we so apply default options here\n  options = {\n    ...GLTFLoader.options,\n    ...options\n  };\n  // @ts-ignore\n  options.gltf = {\n    ...GLTFLoader.options.gltf,\n    ...options.gltf\n  };\n  const {\n    byteOffset = 0\n  } = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}