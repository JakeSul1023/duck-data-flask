{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { lighting } from \"../lights/lighting.js\";\nimport { PHONG_VS, PHONG_FS } from \"../phong-material/phong-shaders-glsl.js\";\nimport { PHONG_WGSL } from \"../phong-material/phong-shaders-wgsl.js\";\n/** In Gouraud shading, color is calculated for each triangle vertex normal, and then color is interpolated colors across the triangle */\nexport const gouraudMaterial = {\n  props: {},\n  name: 'gouraudMaterial',\n  // Note these are switched between phong and gouraud\n  vs: PHONG_FS.replace('phongMaterial', 'gouraudMaterial'),\n  fs: PHONG_VS.replace('phongMaterial', 'gouraudMaterial'),\n  source: PHONG_WGSL.replaceAll('phongMaterial', 'gouraudMaterial'),\n  defines: {\n    LIGHTING_VERTEX: 1\n  },\n  dependencies: [lighting],\n  uniformTypes: {\n    ambient: 'f32',\n    diffuse: 'f32',\n    shininess: 'f32',\n    specularColor: 'vec3<f32>'\n  },\n  defaultUniforms: {\n    ambient: 0.35,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [0.15, 0.15, 0.15]\n  },\n  getUniforms(props) {\n    const uniforms = {\n      ...props\n    };\n    if (uniforms.specularColor) {\n      uniforms.specularColor = uniforms.specularColor.map(x => x / 255);\n    }\n    return {\n      ...gouraudMaterial.defaultUniforms,\n      ...uniforms\n    };\n  }\n};","map":{"version":3,"names":["lighting","PHONG_VS","PHONG_FS","PHONG_WGSL","gouraudMaterial","props","name","vs","replace","fs","source","replaceAll","defines","LIGHTING_VERTEX","dependencies","uniformTypes","ambient","diffuse","shininess","specularColor","defaultUniforms","getUniforms","uniforms","map","x"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules\\lighting\\gouraud-material\\gouraud-material.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {NumberArray3} from '@math.gl/types';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {lighting} from '../lights/lighting';\nimport {PHONG_VS, PHONG_FS} from '../phong-material/phong-shaders-glsl';\nimport {PHONG_WGSL} from '../phong-material/phong-shaders-wgsl';\n\nexport type GouraudMaterialProps = {\n  ambient?: number;\n  diffuse?: number;\n  /** Specularity exponent */\n  shininess?: number;\n  specularColor?: [number, number, number];\n};\n\n/** In Gouraud shading, color is calculated for each triangle vertex normal, and then color is interpolated colors across the triangle */\nexport const gouraudMaterial: ShaderModule<GouraudMaterialProps> = {\n  props: {} as GouraudMaterialProps,\n\n  name: 'gouraudMaterial',\n  // Note these are switched between phong and gouraud\n  vs: PHONG_FS.replace('phongMaterial', 'gouraudMaterial'),\n  fs: PHONG_VS.replace('phongMaterial', 'gouraudMaterial'),\n  source: PHONG_WGSL.replaceAll('phongMaterial', 'gouraudMaterial'),\n  defines: {\n    LIGHTING_VERTEX: 1\n  },\n  dependencies: [lighting],\n  uniformTypes: {\n    ambient: 'f32',\n    diffuse: 'f32',\n    shininess: 'f32',\n    specularColor: 'vec3<f32>'\n  },\n  defaultUniforms: {\n    ambient: 0.35,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [0.15, 0.15, 0.15]\n  },\n\n  getUniforms(props: GouraudMaterialProps) {\n    const uniforms = {...props};\n    if (uniforms.specularColor) {\n      uniforms.specularColor = uniforms.specularColor.map(x => x / 255) as NumberArray3;\n    }\n    return {...gouraudMaterial.defaultUniforms, ...uniforms};\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,QAAQ,QAAC;AACjB,SAAQC,QAAQ,EAAEC,QAAQ,QAAC;AAC3B,SAAQC,UAAU,QAAC;AAUnB;AACA,OAAO,MAAMC,eAAe,GAAuC;EACjEC,KAAK,EAAE,EAA0B;EAEjCC,IAAI,EAAE,iBAAiB;EACvB;EACAC,EAAE,EAAEL,QAAQ,CAACM,OAAO,CAAC,eAAe,EAAE,iBAAiB,CAAC;EACxDC,EAAE,EAAER,QAAQ,CAACO,OAAO,CAAC,eAAe,EAAE,iBAAiB,CAAC;EACxDE,MAAM,EAAEP,UAAU,CAACQ,UAAU,CAAC,eAAe,EAAE,iBAAiB,CAAC;EACjEC,OAAO,EAAE;IACPC,eAAe,EAAE;GAClB;EACDC,YAAY,EAAE,CAACd,QAAQ,CAAC;EACxBe,YAAY,EAAE;IACZC,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE,KAAK;IACdC,SAAS,EAAE,KAAK;IAChBC,aAAa,EAAE;GAChB;EACDC,eAAe,EAAE;IACfJ,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,EAAE;IACbC,aAAa,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;GACjC;EAEDE,WAAWA,CAAChB,KAA2B;IACrC,MAAMiB,QAAQ,GAAG;MAAC,GAAGjB;IAAK,CAAC;IAC3B,IAAIiB,QAAQ,CAACH,aAAa,EAAE;MAC1BG,QAAQ,CAACH,aAAa,GAAGG,QAAQ,CAACH,aAAa,CAACI,GAAG,CAACC,CAAC,IAAIA,CAAC,GAAG,GAAG,CAAiB;IACnF;IACA,OAAO;MAAC,GAAGpB,eAAe,CAACgB,eAAe;MAAE,GAAGE;IAAQ,CAAC;EAC1D;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}