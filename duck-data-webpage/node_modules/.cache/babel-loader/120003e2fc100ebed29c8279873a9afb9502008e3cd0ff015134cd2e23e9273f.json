{"ast":null,"code":"import { deduceMeshField } from '@loaders.gl/schema';\n/** Extract an arrow-like schema from a Draco mesh */\nexport function getDracoSchema(attributes, loaderData, indices) {\n  const metadata = makeMetadata(loaderData.metadata);\n  const fields = [];\n  const namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const field = getArrowFieldFromAttribute(attributeName, attribute, namedLoaderDataAttributes[attributeName]);\n    fields.push(field);\n  }\n  if (indices) {\n    const indicesField = getArrowFieldFromAttribute('indices', indices);\n    fields.push(indicesField);\n  }\n  return {\n    fields,\n    metadata\n  };\n}\nfunction transformAttributesLoaderData(loaderData) {\n  const result = {};\n  for (const key in loaderData) {\n    const dracoAttribute = loaderData[key];\n    result[dracoAttribute.name || 'undefined'] = dracoAttribute;\n  }\n  return result;\n}\nfunction getArrowFieldFromAttribute(attributeName, attribute, loaderData) {\n  const metadataMap = loaderData ? makeMetadata(loaderData.metadata) : undefined;\n  const field = deduceMeshField(attributeName, attribute, metadataMap);\n  return field;\n}\nfunction makeMetadata(metadata) {\n  Object.entries(metadata);\n  const serializedMetadata = {};\n  for (const key in metadata) {\n    serializedMetadata[`${key}.string`] = JSON.stringify(metadata[key]);\n  }\n  return serializedMetadata;\n}","map":{"version":3,"names":["deduceMeshField","getDracoSchema","attributes","loaderData","indices","metadata","makeMetadata","fields","namedLoaderDataAttributes","transformAttributesLoaderData","attributeName","attribute","field","getArrowFieldFromAttribute","push","indicesField","result","key","dracoAttribute","name","metadataMap","undefined","Object","entries","serializedMetadata","JSON","stringify"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/draco/dist/lib/utils/get-draco-schema.js"],"sourcesContent":["import { deduceMeshField } from '@loaders.gl/schema';\n/** Extract an arrow-like schema from a Draco mesh */\nexport function getDracoSchema(attributes, loaderData, indices) {\n    const metadata = makeMetadata(loaderData.metadata);\n    const fields = [];\n    const namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);\n    for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        const field = getArrowFieldFromAttribute(attributeName, attribute, namedLoaderDataAttributes[attributeName]);\n        fields.push(field);\n    }\n    if (indices) {\n        const indicesField = getArrowFieldFromAttribute('indices', indices);\n        fields.push(indicesField);\n    }\n    return { fields, metadata };\n}\nfunction transformAttributesLoaderData(loaderData) {\n    const result = {};\n    for (const key in loaderData) {\n        const dracoAttribute = loaderData[key];\n        result[dracoAttribute.name || 'undefined'] = dracoAttribute;\n    }\n    return result;\n}\nfunction getArrowFieldFromAttribute(attributeName, attribute, loaderData) {\n    const metadataMap = loaderData ? makeMetadata(loaderData.metadata) : undefined;\n    const field = deduceMeshField(attributeName, attribute, metadataMap);\n    return field;\n}\nfunction makeMetadata(metadata) {\n    Object.entries(metadata);\n    const serializedMetadata = {};\n    for (const key in metadata) {\n        serializedMetadata[`${key}.string`] = JSON.stringify(metadata[key]);\n    }\n    return serializedMetadata;\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD;AACA,OAAO,SAASC,cAAcA,CAACC,UAAU,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC5D,MAAMC,QAAQ,GAAGC,YAAY,CAACH,UAAU,CAACE,QAAQ,CAAC;EAClD,MAAME,MAAM,GAAG,EAAE;EACjB,MAAMC,yBAAyB,GAAGC,6BAA6B,CAACN,UAAU,CAACD,UAAU,CAAC;EACtF,KAAK,MAAMQ,aAAa,IAAIR,UAAU,EAAE;IACpC,MAAMS,SAAS,GAAGT,UAAU,CAACQ,aAAa,CAAC;IAC3C,MAAME,KAAK,GAAGC,0BAA0B,CAACH,aAAa,EAAEC,SAAS,EAAEH,yBAAyB,CAACE,aAAa,CAAC,CAAC;IAC5GH,MAAM,CAACO,IAAI,CAACF,KAAK,CAAC;EACtB;EACA,IAAIR,OAAO,EAAE;IACT,MAAMW,YAAY,GAAGF,0BAA0B,CAAC,SAAS,EAAET,OAAO,CAAC;IACnEG,MAAM,CAACO,IAAI,CAACC,YAAY,CAAC;EAC7B;EACA,OAAO;IAAER,MAAM;IAAEF;EAAS,CAAC;AAC/B;AACA,SAASI,6BAA6BA,CAACN,UAAU,EAAE;EAC/C,MAAMa,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,MAAMC,GAAG,IAAId,UAAU,EAAE;IAC1B,MAAMe,cAAc,GAAGf,UAAU,CAACc,GAAG,CAAC;IACtCD,MAAM,CAACE,cAAc,CAACC,IAAI,IAAI,WAAW,CAAC,GAAGD,cAAc;EAC/D;EACA,OAAOF,MAAM;AACjB;AACA,SAASH,0BAA0BA,CAACH,aAAa,EAAEC,SAAS,EAAER,UAAU,EAAE;EACtE,MAAMiB,WAAW,GAAGjB,UAAU,GAAGG,YAAY,CAACH,UAAU,CAACE,QAAQ,CAAC,GAAGgB,SAAS;EAC9E,MAAMT,KAAK,GAAGZ,eAAe,CAACU,aAAa,EAAEC,SAAS,EAAES,WAAW,CAAC;EACpE,OAAOR,KAAK;AAChB;AACA,SAASN,YAAYA,CAACD,QAAQ,EAAE;EAC5BiB,MAAM,CAACC,OAAO,CAAClB,QAAQ,CAAC;EACxB,MAAMmB,kBAAkB,GAAG,CAAC,CAAC;EAC7B,KAAK,MAAMP,GAAG,IAAIZ,QAAQ,EAAE;IACxBmB,kBAAkB,CAAC,GAAGP,GAAG,SAAS,CAAC,GAAGQ,IAAI,CAACC,SAAS,CAACrB,QAAQ,CAACY,GAAG,CAAC,CAAC;EACvE;EACA,OAAOO,kBAAkB;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}