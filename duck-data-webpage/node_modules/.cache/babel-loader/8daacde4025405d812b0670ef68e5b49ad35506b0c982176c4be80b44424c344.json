{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Compression } from \"./compression.js\";\nimport { registerJSModules, checkJSModule, getJSModule, getJSModuleOrNull } from '@loaders.gl/loader-utils';\n// import {ZstdCodec} from 'zstd-codec'; // https://bundlephobia.com/package/zstd-codec\nconst CHUNK_SIZE = 1000000; // Tested value\nlet zstdPromise;\nlet zstd;\n/**\n * Zstandard compression / decompression\n */\nexport class ZstdCompression extends Compression {\n  name = 'zstd';\n  extensions = [];\n  contentEncodings = [];\n  isSupported = true;\n  options;\n  /**\n   * zstd-codec is an injectable dependency due to big size\n   * @param options\n   */\n  constructor(options) {\n    super(options);\n    this.options = options;\n    registerJSModules(options?.modules);\n  }\n  async preload(modules = {}) {\n    registerJSModules(modules);\n    checkJSModule('zstd-codec', this.name);\n    const ZstdCodec = getJSModuleOrNull('zstd-codec');\n    // eslint-disable-next-line  @typescript-eslint/no-misused-promises\n    if (!zstdPromise && ZstdCodec) {\n      zstdPromise = new Promise(resolve => ZstdCodec.run(zstd => resolve(zstd)));\n      zstd = await zstdPromise;\n    }\n  }\n  compressSync(input) {\n    getJSModule('zstd-codec', this.name);\n    const simpleZstd = new zstd.Simple();\n    const inputArray = new Uint8Array(input);\n    return simpleZstd.compress(inputArray).buffer;\n  }\n  decompressSync(input) {\n    getJSModule('zstd-codec', this.name);\n    const simpleZstd = new zstd.Simple();\n    // var ddict = new zstd.Dict.Decompression(dictData);\n    // var jsonBytes = simpleZstd.decompressUsingDict(jsonZstData, ddict);\n    const inputArray = new Uint8Array(input);\n    return simpleZstd.decompress(inputArray).buffer;\n  }\n  async decompress(input, size) {\n    await this.preload();\n    const simpleZstd = new zstd.Streaming();\n    const inputArray = new Uint8Array(input);\n    const chunks = [];\n    for (let i = 0; i <= inputArray.length; i += CHUNK_SIZE) {\n      chunks.push(inputArray.subarray(i, i + CHUNK_SIZE));\n    }\n    const decompressResult = await simpleZstd.decompressChunks(chunks);\n    return decompressResult.buffer;\n  }\n}","map":{"version":3,"names":["Compression","registerJSModules","checkJSModule","getJSModule","getJSModuleOrNull","CHUNK_SIZE","zstdPromise","zstd","ZstdCompression","name","extensions","contentEncodings","isSupported","options","constructor","modules","preload","ZstdCodec","Promise","resolve","run","compressSync","input","simpleZstd","Simple","inputArray","Uint8Array","compress","buffer","decompressSync","decompress","size","Streaming","chunks","i","length","push","subarray","decompressResult","decompressChunks"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/compression/dist/lib/zstd-compression.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Compression } from \"./compression.js\";\nimport { registerJSModules, checkJSModule, getJSModule, getJSModuleOrNull } from '@loaders.gl/loader-utils';\n// import {ZstdCodec} from 'zstd-codec'; // https://bundlephobia.com/package/zstd-codec\nconst CHUNK_SIZE = 1000000; // Tested value\nlet zstdPromise;\nlet zstd;\n/**\n * Zstandard compression / decompression\n */\nexport class ZstdCompression extends Compression {\n    name = 'zstd';\n    extensions = [];\n    contentEncodings = [];\n    isSupported = true;\n    options;\n    /**\n     * zstd-codec is an injectable dependency due to big size\n     * @param options\n     */\n    constructor(options) {\n        super(options);\n        this.options = options;\n        registerJSModules(options?.modules);\n    }\n    async preload(modules = {}) {\n        registerJSModules(modules);\n        checkJSModule('zstd-codec', this.name);\n        const ZstdCodec = getJSModuleOrNull('zstd-codec');\n        // eslint-disable-next-line  @typescript-eslint/no-misused-promises\n        if (!zstdPromise && ZstdCodec) {\n            zstdPromise = new Promise((resolve) => ZstdCodec.run((zstd) => resolve(zstd)));\n            zstd = await zstdPromise;\n        }\n    }\n    compressSync(input) {\n        getJSModule('zstd-codec', this.name);\n        const simpleZstd = new zstd.Simple();\n        const inputArray = new Uint8Array(input);\n        return simpleZstd.compress(inputArray).buffer;\n    }\n    decompressSync(input) {\n        getJSModule('zstd-codec', this.name);\n        const simpleZstd = new zstd.Simple();\n        // var ddict = new zstd.Dict.Decompression(dictData);\n        // var jsonBytes = simpleZstd.decompressUsingDict(jsonZstData, ddict);\n        const inputArray = new Uint8Array(input);\n        return simpleZstd.decompress(inputArray).buffer;\n    }\n    async decompress(input, size) {\n        await this.preload();\n        const simpleZstd = new zstd.Streaming();\n        const inputArray = new Uint8Array(input);\n        const chunks = [];\n        for (let i = 0; i <= inputArray.length; i += CHUNK_SIZE) {\n            chunks.push(inputArray.subarray(i, i + CHUNK_SIZE));\n        }\n        const decompressResult = await simpleZstd.decompressChunks(chunks);\n        return decompressResult.buffer;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,iBAAiB,EAAEC,aAAa,EAAEC,WAAW,EAAEC,iBAAiB,QAAQ,0BAA0B;AAC3G;AACA,MAAMC,UAAU,GAAG,OAAO,CAAC,CAAC;AAC5B,IAAIC,WAAW;AACf,IAAIC,IAAI;AACR;AACA;AACA;AACA,OAAO,MAAMC,eAAe,SAASR,WAAW,CAAC;EAC7CS,IAAI,GAAG,MAAM;EACbC,UAAU,GAAG,EAAE;EACfC,gBAAgB,GAAG,EAAE;EACrBC,WAAW,GAAG,IAAI;EAClBC,OAAO;EACP;AACJ;AACA;AACA;EACIC,WAAWA,CAACD,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtBZ,iBAAiB,CAACY,OAAO,EAAEE,OAAO,CAAC;EACvC;EACA,MAAMC,OAAOA,CAACD,OAAO,GAAG,CAAC,CAAC,EAAE;IACxBd,iBAAiB,CAACc,OAAO,CAAC;IAC1Bb,aAAa,CAAC,YAAY,EAAE,IAAI,CAACO,IAAI,CAAC;IACtC,MAAMQ,SAAS,GAAGb,iBAAiB,CAAC,YAAY,CAAC;IACjD;IACA,IAAI,CAACE,WAAW,IAAIW,SAAS,EAAE;MAC3BX,WAAW,GAAG,IAAIY,OAAO,CAAEC,OAAO,IAAKF,SAAS,CAACG,GAAG,CAAEb,IAAI,IAAKY,OAAO,CAACZ,IAAI,CAAC,CAAC,CAAC;MAC9EA,IAAI,GAAG,MAAMD,WAAW;IAC5B;EACJ;EACAe,YAAYA,CAACC,KAAK,EAAE;IAChBnB,WAAW,CAAC,YAAY,EAAE,IAAI,CAACM,IAAI,CAAC;IACpC,MAAMc,UAAU,GAAG,IAAIhB,IAAI,CAACiB,MAAM,CAAC,CAAC;IACpC,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACJ,KAAK,CAAC;IACxC,OAAOC,UAAU,CAACI,QAAQ,CAACF,UAAU,CAAC,CAACG,MAAM;EACjD;EACAC,cAAcA,CAACP,KAAK,EAAE;IAClBnB,WAAW,CAAC,YAAY,EAAE,IAAI,CAACM,IAAI,CAAC;IACpC,MAAMc,UAAU,GAAG,IAAIhB,IAAI,CAACiB,MAAM,CAAC,CAAC;IACpC;IACA;IACA,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACJ,KAAK,CAAC;IACxC,OAAOC,UAAU,CAACO,UAAU,CAACL,UAAU,CAAC,CAACG,MAAM;EACnD;EACA,MAAME,UAAUA,CAACR,KAAK,EAAES,IAAI,EAAE;IAC1B,MAAM,IAAI,CAACf,OAAO,CAAC,CAAC;IACpB,MAAMO,UAAU,GAAG,IAAIhB,IAAI,CAACyB,SAAS,CAAC,CAAC;IACvC,MAAMP,UAAU,GAAG,IAAIC,UAAU,CAACJ,KAAK,CAAC;IACxC,MAAMW,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIT,UAAU,CAACU,MAAM,EAAED,CAAC,IAAI7B,UAAU,EAAE;MACrD4B,MAAM,CAACG,IAAI,CAACX,UAAU,CAACY,QAAQ,CAACH,CAAC,EAAEA,CAAC,GAAG7B,UAAU,CAAC,CAAC;IACvD;IACA,MAAMiC,gBAAgB,GAAG,MAAMf,UAAU,CAACgB,gBAAgB,CAACN,MAAM,CAAC;IAClE,OAAOK,gBAAgB,CAACV,MAAM;EAClC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}