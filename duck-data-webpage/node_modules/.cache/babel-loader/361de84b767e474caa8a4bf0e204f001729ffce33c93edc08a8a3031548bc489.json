{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getCode, getLines, getPolygons } from \"./marching-squares.js\";\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  contours,\n  getValue,\n  xRange,\n  yRange\n}) {\n  const contourLines = [];\n  const contourPolygons = [];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n  for (let i = 0; i < contours.length; i++) {\n    const contour = contours[i];\n    const z = contour.zIndex ?? i;\n    const {\n      threshold\n    } = contour;\n    for (let x = xRange[0] - 1; x < xRange[1]; x++) {\n      for (let y = yRange[0] - 1; y < yRange[1]; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {\n          code,\n          meanCode\n        } = getCode({\n          getValue,\n          threshold,\n          x,\n          y,\n          xRange,\n          yRange\n        });\n        const opts = {\n          x,\n          y,\n          z,\n          code,\n          meanCode\n        };\n        if (Array.isArray(threshold)) {\n          // ISO bands\n          const polygons = getPolygons(opts);\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // ISO lines\n          const path = getLines(opts);\n          if (path.length > 0) {\n            contourLines[segmentIndex++] = {\n              vertices: path,\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {\n    lines: contourLines,\n    polygons: contourPolygons\n  };\n}\n/* eslint-enable max-depth */","map":{"version":3,"names":["getCode","getLines","getPolygons","generateContours","contours","getValue","xRange","yRange","contourLines","contourPolygons","segmentIndex","polygonIndex","i","length","contour","z","zIndex","threshold","x","y","code","meanCode","opts","Array","isArray","polygons","polygon","vertices","path","lines"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\contour-layer\\contour-utils.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Color} from '@deck.gl/core';\nimport {getCode, getLines, getPolygons} from './marching-squares';\n\nexport type Contour = {\n  /**\n   * Isolines: `threshold` value must be a single `Number`, Isolines are generated based on this threshold value.\n   *\n   * Isobands: `threshold` value must be an Array of two `Number`s. Isobands are generated using `[threshold[0], threshold[1])` as threshold range, i.e area that has values `>= threshold[0]` and `< threshold[1]` are rendered with corresponding color. NOTE: `threshold[0]` is inclusive and `threshold[1]` is not inclusive.\n   */\n  threshold: number | number[];\n\n  /**\n   * RGBA color array to be used to render the contour.\n   * @default [255, 255, 255, 255]\n   */\n  color?: Color;\n\n  /**\n   * Applicable for `Isoline`s only, width of the Isoline in pixels.\n   * @default 1\n   */\n  strokeWidth?: number;\n\n  /** Defines z order of the contour. */\n  zIndex?: number;\n};\n\nexport type ContourLine = {\n  vertices: number[][];\n  contour: Contour;\n};\n\nexport type ContourPolygon = {\n  vertices: number[][];\n  contour: Contour;\n};\n\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  contours,\n  getValue,\n  xRange,\n  yRange\n}: {\n  contours: Contour[];\n  getValue: (x: number, y: number) => number;\n  xRange: [number, number];\n  yRange: [number, number];\n}) {\n  const contourLines: ContourLine[] = [];\n  const contourPolygons: ContourPolygon[] = [];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n\n  for (let i = 0; i < contours.length; i++) {\n    const contour = contours[i];\n    const z = contour.zIndex ?? i;\n    const {threshold} = contour;\n    for (let x = xRange[0] - 1; x < xRange[1]; x++) {\n      for (let y = yRange[0] - 1; y < yRange[1]; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {code, meanCode} = getCode({\n          getValue,\n          threshold,\n          x,\n          y,\n          xRange,\n          yRange\n        });\n        const opts = {\n          x,\n          y,\n          z,\n          code,\n          meanCode\n        };\n        if (Array.isArray(threshold)) {\n          // ISO bands\n          const polygons = getPolygons(opts);\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // ISO lines\n          const path = getLines(opts);\n          if (path.length > 0) {\n            contourLines[segmentIndex++] = {\n              vertices: path,\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {lines: contourLines, polygons: contourPolygons};\n}\n/* eslint-enable max-depth */\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,OAAO,EAAEC,QAAQ,EAAEC,WAAW,QAAC;AAoCvC;AACA;AACA,OAAM,SAAUC,gBAAgBA,CAAC;EAC/BC,QAAQ;EACRC,QAAQ;EACRC,MAAM;EACNC;AAAM,CAMP;EACC,MAAMC,YAAY,GAAkB,EAAE;EACtC,MAAMC,eAAe,GAAqB,EAAE;EAC5C,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,YAAY,GAAG,CAAC;EAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;IACxC,MAAME,OAAO,GAAGV,QAAQ,CAACQ,CAAC,CAAC;IAC3B,MAAMG,CAAC,GAAGD,OAAO,CAACE,MAAM,IAAIJ,CAAC;IAC7B,MAAM;MAACK;IAAS,CAAC,GAAGH,OAAO;IAC3B,KAAK,IAAII,CAAC,GAAGZ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEY,CAAC,GAAGZ,MAAM,CAAC,CAAC,CAAC,EAAEY,CAAC,EAAE,EAAE;MAC9C,KAAK,IAAIC,CAAC,GAAGZ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEY,CAAC,GAAGZ,MAAM,CAAC,CAAC,CAAC,EAAEY,CAAC,EAAE,EAAE;QAC9C;QACA,MAAM;UAACC,IAAI;UAAEC;QAAQ,CAAC,GAAGrB,OAAO,CAAC;UAC/BK,QAAQ;UACRY,SAAS;UACTC,CAAC;UACDC,CAAC;UACDb,MAAM;UACNC;SACD,CAAC;QACF,MAAMe,IAAI,GAAG;UACXJ,CAAC;UACDC,CAAC;UACDJ,CAAC;UACDK,IAAI;UACJC;SACD;QACD,IAAIE,KAAK,CAACC,OAAO,CAACP,SAAS,CAAC,EAAE;UAC5B;UACA,MAAMQ,QAAQ,GAAGvB,WAAW,CAACoB,IAAI,CAAC;UAClC,KAAK,MAAMI,OAAO,IAAID,QAAQ,EAAE;YAC9BhB,eAAe,CAACE,YAAY,EAAE,CAAC,GAAG;cAChCgB,QAAQ,EAAED,OAAO;cACjBZ;aACD;UACH;QACF,CAAC,MAAM;UACL;UACA,MAAMc,IAAI,GAAG3B,QAAQ,CAACqB,IAAI,CAAC;UAC3B,IAAIM,IAAI,CAACf,MAAM,GAAG,CAAC,EAAE;YACnBL,YAAY,CAACE,YAAY,EAAE,CAAC,GAAG;cAC7BiB,QAAQ,EAAEC,IAAI;cACdd;aACD;UACH;QACF;MACF;IACF;EACF;EACA,OAAO;IAACe,KAAK,EAAErB,YAAY;IAAEiB,QAAQ,EAAEhB;EAAe,CAAC;AACzD;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}