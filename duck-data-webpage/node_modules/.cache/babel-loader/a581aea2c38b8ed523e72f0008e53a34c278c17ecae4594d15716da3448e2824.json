{"ast":null,"code":"// mjolnir.js\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Input } from \"./input.js\";\nexport class ContextmenuInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n      this.callback({\n        type: 'contextmenu',\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === 'contextmenu') {\n      this.options.enable = enabled;\n    }\n  }\n}","map":{"version":3,"names":["Input","ContextmenuInput","constructor","element","callback","options","handleEvent","event","enable","type","center","x","clientX","y","clientY","srcEvent","pointerType","target","addEventListener","destroy","removeEventListener","enableEventType","eventType","enabled"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\inputs\\contextmenu-input.ts"],"sourcesContent":["// mjolnir.js\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {MjolnirPointerEventRaw} from '../types';\nimport {Input, InputOptions} from './input';\n\nexport class ContextmenuInput extends Input<MjolnirPointerEventRaw, InputOptions> {\n  constructor(\n    element: HTMLElement,\n    callback: (event: MjolnirPointerEventRaw) => void,\n    options: InputOptions\n  ) {\n    super(element, callback, options);\n\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType: string, enabled: boolean) {\n    if (eventType === 'contextmenu') {\n      this.options.enable = enabled;\n    }\n  }\n\n  handleEvent = (event: MouseEvent) => {\n    if (!this.options.enable) {\n      return;\n    }\n\n    this.callback({\n      type: 'contextmenu',\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target as HTMLElement\n    });\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,KAAK,QAAe;AAE5B,OAAM,MAAOC,gBAAiB,SAAQD,KAA2C;EAC/EE,YACEC,OAAoB,EACpBC,QAAiD,EACjDC,OAAqB;IAErB,KAAK,CAACF,OAAO,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IAmBnC,KAAAC,WAAW,GAAIC,KAAiB,IAAI;MAClC,IAAI,CAAC,IAAI,CAACF,OAAO,CAACG,MAAM,EAAE;QACxB;MACF;MAEA,IAAI,CAACJ,QAAQ,CAAC;QACZK,IAAI,EAAE,aAAa;QACnBC,MAAM,EAAE;UACNC,CAAC,EAAEJ,KAAK,CAACK,OAAO;UAChBC,CAAC,EAAEN,KAAK,CAACO;SACV;QACDC,QAAQ,EAAER,KAAK;QACfS,WAAW,EAAE,OAAO;QACpBC,MAAM,EAAEV,KAAK,CAACU;OACf,CAAC;IACJ,CAAC;IAhCCd,OAAO,CAACe,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAACZ,WAAW,CAAC;EAC3D;EAEAa,OAAOA,CAAA;IACL,IAAI,CAAChB,OAAO,CAACiB,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAACd,WAAW,CAAC;EACnE;EAEA;;;;EAIAe,eAAeA,CAACC,SAAiB,EAAEC,OAAgB;IACjD,IAAID,SAAS,KAAK,aAAa,EAAE;MAC/B,IAAI,CAACjB,OAAO,CAACG,MAAM,GAAGe,OAAO;IAC/B;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}