{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** @returns annotated errors or warnings */\nexport function formatCompilerLog(shaderLog, source, options) {\n  let formattedLog = '';\n  const lines = source.split(/\\r?\\n/);\n  const log = shaderLog.slice().sort((a, b) => a.lineNum - b.lineNum);\n  switch (options?.showSourceCode || 'no') {\n    case 'all':\n      // Parse the error - note: browser and driver dependent\n      let currentMessage = 0;\n      for (let lineNum = 1; lineNum <= lines.length; lineNum++) {\n        formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);\n        while (log.length > currentMessage && log[currentMessage].lineNum === lineNum) {\n          const message = log[currentMessage++];\n          formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n            ...options,\n            inlineSource: false\n          });\n        }\n      }\n      return formattedLog;\n    case 'issues':\n    case 'no':\n      // Parse the error - note: browser and driver dependent\n      for (const message of shaderLog) {\n        formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n          inlineSource: options?.showSourceCode !== 'no'\n        });\n      }\n      return formattedLog;\n  }\n}\n// Helpers\n/** Format one message */\nfunction formatCompilerMessage(message, lines, lineNum, options) {\n  if (options?.inlineSource) {\n    const numberedLines = getNumberedLines(lines, lineNum);\n    // If we got error position on line add a `^^^` indicator on next line\n    const positionIndicator = message.linePos > 0 ? `${' '.repeat(message.linePos + 5)}^^^\\n` : '';\n    return `\n${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}\n\n`;\n  }\n  const color = message.type === 'error' ? 'red' : '#8B4000'; // dark orange\n  return options?.html ? `<div class='luma-compiler-log-error' style=\"color:${color};\"><b> ${message.type.toUpperCase()}: ${message.message}</b></div>` : `${message.type.toUpperCase()}: ${message.message}`;\n}\nfunction getNumberedLines(lines, lineNum, options) {\n  let numberedLines = '';\n  for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {\n    const sourceLine = lines[lineIndex - 1];\n    if (sourceLine !== undefined) {\n      numberedLines += getNumberedLine(sourceLine, lineNum, options);\n    }\n  }\n  return numberedLines;\n}\nfunction getNumberedLine(line, lineNum, options) {\n  const escapedLine = options?.html ? escapeHTML(line) : line;\n  return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? '<br/>' : '\\n'}`;\n}\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, paddedLength) {\n  let result = '';\n  for (let i = string.length; i < paddedLength; ++i) {\n    result += ' ';\n  }\n  return result + string;\n}\nfunction escapeHTML(unsafe) {\n  return unsafe.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('\"', '&quot;').replaceAll(\"'\", '&#039;');\n}","map":{"version":3,"names":["formatCompilerLog","shaderLog","source","options","formattedLog","lines","split","log","slice","sort","a","b","lineNum","showSourceCode","currentMessage","length","getNumberedLine","message","formatCompilerMessage","inlineSource","numberedLines","getNumberedLines","positionIndicator","linePos","repeat","type","toUpperCase","color","html","lineIndex","sourceLine","undefined","line","escapedLine","escapeHTML","padLeft","String","string","paddedLength","result","i","unsafe","replaceAll"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter-utils\\format-compiler-log.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CompilerMessage} from '../adapter/types/compiler-message';\n\n/** @returns annotated errors or warnings */\nexport function formatCompilerLog(\n  shaderLog: readonly CompilerMessage[],\n  source: string,\n  options?: {\n    /** Include source code in the log. Either just the lines before issues or all source code */\n    showSourceCode?: 'no' | 'issues' | 'all';\n    html?: boolean;\n  }\n): string {\n  let formattedLog = '';\n  const lines = source.split(/\\r?\\n/);\n  const log = shaderLog.slice().sort((a, b) => a.lineNum - b.lineNum);\n\n  switch (options?.showSourceCode || 'no') {\n    case 'all':\n      // Parse the error - note: browser and driver dependent\n      let currentMessage = 0;\n      for (let lineNum = 1; lineNum <= lines.length; lineNum++) {\n        formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);\n        while (log.length > currentMessage && log[currentMessage].lineNum === lineNum) {\n          const message = log[currentMessage++];\n          formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n            ...options,\n            inlineSource: false\n          });\n        }\n      }\n      return formattedLog;\n\n    case 'issues':\n    case 'no':\n      // Parse the error - note: browser and driver dependent\n      for (const message of shaderLog) {\n        formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n          inlineSource: options?.showSourceCode !== 'no'\n        });\n      }\n      return formattedLog;\n  }\n}\n\n// Helpers\n\n/** Format one message */\nfunction formatCompilerMessage(\n  message: CompilerMessage,\n  lines: readonly string[],\n  lineNum: number,\n  options: {\n    inlineSource?: boolean;\n    html?: boolean;\n  }\n): string {\n  if (options?.inlineSource) {\n    const numberedLines = getNumberedLines(lines, lineNum);\n    // If we got error position on line add a `^^^` indicator on next line\n    const positionIndicator = message.linePos > 0 ? `${' '.repeat(message.linePos + 5)}^^^\\n` : '';\n    return `\n${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}\n\n`;\n  }\n  const color = message.type === 'error' ? 'red' : '#8B4000'; // dark orange\n  return options?.html\n    ? `<div class='luma-compiler-log-error' style=\"color:${color};\"><b> ${message.type.toUpperCase()}: ${\n        message.message\n      }</b></div>`\n    : `${message.type.toUpperCase()}: ${message.message}`;\n}\n\nfunction getNumberedLines(\n  lines: readonly string[],\n  lineNum: number,\n  options?: {html?: boolean}\n): string {\n  let numberedLines = '';\n  for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {\n    const sourceLine = lines[lineIndex - 1];\n    if (sourceLine !== undefined) {\n      numberedLines += getNumberedLine(sourceLine, lineNum, options);\n    }\n  }\n  return numberedLines;\n}\n\nfunction getNumberedLine(line: string, lineNum: number, options?: {html?: boolean}): string {\n  const escapedLine = options?.html ? escapeHTML(line) : line;\n  return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? '<br/>' : '\\n'}`;\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string: string, paddedLength: number): string {\n  let result = '';\n  for (let i = string.length; i < paddedLength; ++i) {\n    result += ' ';\n  }\n  return result + string;\n}\n\nfunction escapeHTML(unsafe: string): string {\n  return unsafe\n    .replaceAll('&', '&amp;')\n    .replaceAll('<', '&lt;')\n    .replaceAll('>', '&gt;')\n    .replaceAll('\"', '&quot;')\n    .replaceAll(\"'\", '&#039;');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}