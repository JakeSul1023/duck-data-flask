{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport log from \"../utils/log.js\";\nimport { isAsyncIterable } from \"../utils/iterable-utils.js\";\nimport { parsePropTypes } from \"./prop-types.js\";\nimport { COMPONENT_SYMBOL, PROP_TYPES_SYMBOL, DEPRECATED_PROPS_SYMBOL, ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from \"./constants.js\";\nimport Component from \"./component.js\";\n// Create a property object\nexport function createProps(component, propObjects) {\n  // Resolve extension value\n  let extensions;\n  for (let i = propObjects.length - 1; i >= 0; i--) {\n    const props = propObjects[i];\n    if ('extensions' in props) {\n      // @ts-expect-error TS(2339) extensions not defined\n      extensions = props.extensions;\n    }\n  }\n  // Create a new prop object with empty default props object\n  const propsPrototype = getPropsPrototype(component.constructor, extensions);\n  // The true default props object will be found later\n  const propsInstance = Object.create(propsPrototype);\n  // Props need a back pointer to the owning component\n  propsInstance[COMPONENT_SYMBOL] = component;\n  // The supplied (original) values for those async props that are set to url strings or Promises.\n  // In this case, the actual (i.e. resolved) values are looked up from component.internalState\n  propsInstance[ASYNC_ORIGINAL_SYMBOL] = {};\n  // Note: the actual (resolved) values for props that are NOT set to urls or Promises.\n  // in this case the values are served directly from this map\n  propsInstance[ASYNC_RESOLVED_SYMBOL] = {};\n  // \"Copy\" all sync props\n  for (let i = 0; i < propObjects.length; ++i) {\n    const props = propObjects[i];\n    // Do not use Object.assign here to avoid Symbols in props overwriting our private fields\n    // This might happen if one of the arguments is another props instance\n    for (const key in props) {\n      propsInstance[key] = props[key];\n    }\n  }\n  // Props must be immutable\n  Object.freeze(propsInstance);\n  return propsInstance;\n}\nconst MergedDefaultPropsCacheKey = '_mergedDefaultProps';\n// Return precalculated defaultProps and propType objects if available\n// build them if needed\nfunction getPropsPrototype(componentClass, extensions) {\n  // Bail out if we're not looking at a component - for two reasons:\n  // 1. There's no reason for an ancestor of component to have props\n  // 2. If we don't bail out, we'll follow the prototype chain all the way back to the global\n  // function prototype and add _mergedDefaultProps to it, which may break other frameworks\n  // (e.g. the react-three-fiber reconciler)\n  if (!(componentClass instanceof Component.constructor)) return {};\n  // A string that uniquely identifies the extensions involved\n  let cacheKey = MergedDefaultPropsCacheKey;\n  if (extensions) {\n    for (const extension of extensions) {\n      const ExtensionClass = extension.constructor;\n      if (ExtensionClass) {\n        cacheKey += `:${ExtensionClass.extensionName || ExtensionClass.name}`;\n      }\n    }\n  }\n  const defaultProps = getOwnProperty(componentClass, cacheKey);\n  if (!defaultProps) {\n    return componentClass[cacheKey] = createPropsPrototypeAndTypes(componentClass, extensions || []);\n  }\n  return defaultProps;\n}\n// Build defaultProps and propType objects by walking component prototype chain\nfunction createPropsPrototypeAndTypes(componentClass, extensions) {\n  const parent = componentClass.prototype;\n  if (!parent) {\n    return null;\n  }\n  const parentClass = Object.getPrototypeOf(componentClass);\n  const parentDefaultProps = getPropsPrototype(parentClass);\n  // Parse propTypes from Component.defaultProps\n  const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};\n  const componentPropDefs = parsePropTypes(componentDefaultProps);\n  // Merged default props object. Order: parent, self, extensions\n  const defaultProps = Object.assign(Object.create(null), parentDefaultProps, componentPropDefs.defaultProps);\n  // Merged prop type definitions. Order: parent, self, extensions\n  const propTypes = Object.assign(Object.create(null), parentDefaultProps?.[PROP_TYPES_SYMBOL], componentPropDefs.propTypes);\n  // Merged deprecation list. Order: parent, self, extensions\n  const deprecatedProps = Object.assign(Object.create(null), parentDefaultProps?.[DEPRECATED_PROPS_SYMBOL], componentPropDefs.deprecatedProps);\n  for (const extension of extensions) {\n    const extensionDefaultProps = getPropsPrototype(extension.constructor);\n    if (extensionDefaultProps) {\n      Object.assign(defaultProps, extensionDefaultProps);\n      Object.assign(propTypes, extensionDefaultProps[PROP_TYPES_SYMBOL]);\n      Object.assign(deprecatedProps, extensionDefaultProps[DEPRECATED_PROPS_SYMBOL]);\n    }\n  }\n  // Create any necessary property descriptors and create the default prop object\n  // Assign merged default props\n  createPropsPrototype(defaultProps, componentClass);\n  // Add getters/setters for async props\n  addAsyncPropsToPropPrototype(defaultProps, propTypes);\n  // Add setters for deprecated props\n  addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);\n  // Store the precalculated props\n  defaultProps[PROP_TYPES_SYMBOL] = propTypes;\n  defaultProps[DEPRECATED_PROPS_SYMBOL] = deprecatedProps;\n  // Backwards compatibility\n  // TODO: remove access of hidden property from the rest of the code base\n  if (extensions.length === 0 && !hasOwnProperty(componentClass, '_propTypes')) {\n    componentClass._propTypes = propTypes;\n  }\n  return defaultProps;\n}\n// Builds a pre-merged default props object that component props can inherit from\nfunction createPropsPrototype(defaultProps, componentClass) {\n  // Avoid freezing `id` prop\n  const id = getComponentName(componentClass);\n  Object.defineProperties(defaultProps, {\n    // `id` is treated specially because layer might need to override it\n    id: {\n      writable: true,\n      value: id\n    }\n  });\n}\nfunction addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {\n  for (const propName in deprecatedProps) {\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(defaultProps, propName, {\n      enumerable: false,\n      set(newValue) {\n        const nameStr = `${this.id}: ${propName}`;\n        for (const newPropName of deprecatedProps[propName]) {\n          if (!hasOwnProperty(this, newPropName)) {\n            this[newPropName] = newValue;\n          }\n        }\n        log.deprecated(nameStr, deprecatedProps[propName].join('/'))();\n      }\n    });\n    /* eslint-enable accessor-pairs */\n  }\n}\n// Create descriptors for overridable props\nfunction addAsyncPropsToPropPrototype(defaultProps, propTypes) {\n  const defaultValues = {};\n  const descriptors = {};\n  // Move async props into shadow values\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {\n      name,\n      value\n    } = propType;\n    // Note: async is ES7 keyword, can't destructure\n    if (propType.async) {\n      defaultValues[name] = value;\n      descriptors[name] = getDescriptorForAsyncProp(name);\n    }\n  }\n  // Default \"resolved\" values for async props, returned if value not yet resolved/set.\n  defaultProps[ASYNC_DEFAULTS_SYMBOL] = defaultValues;\n  // Shadowed object, just to make sure \"early indexing\" into the instance does not fail\n  defaultProps[ASYNC_ORIGINAL_SYMBOL] = {};\n  Object.defineProperties(defaultProps, descriptors);\n}\n// Helper: Configures getter and setter for one async prop\nfunction getDescriptorForAsyncProp(name) {\n  return {\n    enumerable: true,\n    // Save the provided value for async props in a special map\n    set(newValue) {\n      if (typeof newValue === 'string' || newValue instanceof Promise || isAsyncIterable(newValue)) {\n        this[ASYNC_ORIGINAL_SYMBOL][name] = newValue;\n      } else {\n        this[ASYNC_RESOLVED_SYMBOL][name] = newValue;\n      }\n    },\n    // Only the component's state knows the true value of async prop\n    get() {\n      if (this[ASYNC_RESOLVED_SYMBOL]) {\n        // Prop value isn't async, so just return it\n        if (name in this[ASYNC_RESOLVED_SYMBOL]) {\n          const value = this[ASYNC_RESOLVED_SYMBOL][name];\n          return value || this[ASYNC_DEFAULTS_SYMBOL][name];\n        }\n        if (name in this[ASYNC_ORIGINAL_SYMBOL]) {\n          // It's an async prop value: look into component state\n          const state = this[COMPONENT_SYMBOL] && this[COMPONENT_SYMBOL].internalState;\n          if (state && state.hasAsyncProp(name)) {\n            return state.getAsyncProp(name) || this[ASYNC_DEFAULTS_SYMBOL][name];\n          }\n        }\n      }\n      // the prop is not supplied, or\n      // component not yet initialized/matched, return the component's default value for the prop\n      return this[ASYNC_DEFAULTS_SYMBOL][name];\n    }\n  };\n}\n// HELPER METHODS\nfunction hasOwnProperty(object, prop) {\n  return Object.prototype.hasOwnProperty.call(object, prop);\n}\n// Constructors have their super class constructors as prototypes\nfunction getOwnProperty(object, prop) {\n  return hasOwnProperty(object, prop) && object[prop];\n}\nfunction getComponentName(componentClass) {\n  const componentName = componentClass.componentName;\n  if (!componentName) {\n    log.warn(`${componentClass.name}.componentName not specified`)();\n  }\n  return componentName || componentClass.name;\n}","map":{"version":3,"names":["log","isAsyncIterable","parsePropTypes","COMPONENT_SYMBOL","PROP_TYPES_SYMBOL","DEPRECATED_PROPS_SYMBOL","ASYNC_ORIGINAL_SYMBOL","ASYNC_RESOLVED_SYMBOL","ASYNC_DEFAULTS_SYMBOL","Component","createProps","component","propObjects","extensions","i","length","props","propsPrototype","getPropsPrototype","constructor","propsInstance","Object","create","key","freeze","MergedDefaultPropsCacheKey","componentClass","cacheKey","extension","ExtensionClass","extensionName","name","defaultProps","getOwnProperty","createPropsPrototypeAndTypes","parent","prototype","parentClass","getPrototypeOf","parentDefaultProps","componentDefaultProps","componentPropDefs","assign","propTypes","deprecatedProps","extensionDefaultProps","createPropsPrototype","addAsyncPropsToPropPrototype","addDeprecatedPropsToPropPrototype","hasOwnProperty","_propTypes","id","getComponentName","defineProperties","writable","value","propName","defineProperty","enumerable","set","newValue","nameStr","newPropName","deprecated","join","defaultValues","descriptors","propType","async","getDescriptorForAsyncProp","Promise","get","state","internalState","hasAsyncProp","getAsyncProp","object","prop","call","componentName","warn"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\lifecycle\\create-props.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport log from '../utils/log';\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {parsePropTypes} from './prop-types';\nimport {\n  COMPONENT_SYMBOL,\n  PROP_TYPES_SYMBOL,\n  DEPRECATED_PROPS_SYMBOL,\n  ASYNC_ORIGINAL_SYMBOL,\n  ASYNC_RESOLVED_SYMBOL,\n  ASYNC_DEFAULTS_SYMBOL\n} from './constants';\nimport {StatefulComponentProps} from './component';\nimport Component from './component';\n\n// Create a property object\nexport function createProps<PropsT extends {}>(\n  component: Component<PropsT>,\n  propObjects: Partial<PropsT>[]\n): StatefulComponentProps<PropsT> {\n  // Resolve extension value\n  let extensions: any[] | undefined;\n  for (let i = propObjects.length - 1; i >= 0; i--) {\n    const props = propObjects[i];\n    if ('extensions' in props) {\n      // @ts-expect-error TS(2339) extensions not defined\n      extensions = props.extensions;\n    }\n  }\n\n  // Create a new prop object with empty default props object\n  const propsPrototype = getPropsPrototype(component.constructor, extensions);\n  // The true default props object will be found later\n  const propsInstance = Object.create(propsPrototype);\n\n  // Props need a back pointer to the owning component\n  propsInstance[COMPONENT_SYMBOL] = component;\n  // The supplied (original) values for those async props that are set to url strings or Promises.\n  // In this case, the actual (i.e. resolved) values are looked up from component.internalState\n  propsInstance[ASYNC_ORIGINAL_SYMBOL] = {};\n  // Note: the actual (resolved) values for props that are NOT set to urls or Promises.\n  // in this case the values are served directly from this map\n  propsInstance[ASYNC_RESOLVED_SYMBOL] = {};\n\n  // \"Copy\" all sync props\n  for (let i = 0; i < propObjects.length; ++i) {\n    const props = propObjects[i];\n    // Do not use Object.assign here to avoid Symbols in props overwriting our private fields\n    // This might happen if one of the arguments is another props instance\n    for (const key in props) {\n      propsInstance[key] = props[key];\n    }\n  }\n\n  // Props must be immutable\n  Object.freeze(propsInstance);\n\n  return propsInstance;\n}\n\nconst MergedDefaultPropsCacheKey = '_mergedDefaultProps';\n\n// Return precalculated defaultProps and propType objects if available\n// build them if needed\nfunction getPropsPrototype(componentClass, extensions?: any[]) {\n  // Bail out if we're not looking at a component - for two reasons:\n  // 1. There's no reason for an ancestor of component to have props\n  // 2. If we don't bail out, we'll follow the prototype chain all the way back to the global\n  // function prototype and add _mergedDefaultProps to it, which may break other frameworks\n  // (e.g. the react-three-fiber reconciler)\n  if (!(componentClass instanceof Component.constructor)) return {};\n\n  // A string that uniquely identifies the extensions involved\n  let cacheKey = MergedDefaultPropsCacheKey;\n  if (extensions) {\n    for (const extension of extensions) {\n      const ExtensionClass = extension.constructor;\n      if (ExtensionClass) {\n        cacheKey += `:${ExtensionClass.extensionName || ExtensionClass.name}`;\n      }\n    }\n  }\n\n  const defaultProps = getOwnProperty(componentClass, cacheKey);\n  if (!defaultProps) {\n    return (componentClass[cacheKey] = createPropsPrototypeAndTypes(\n      componentClass,\n      extensions || []\n    ));\n  }\n  return defaultProps;\n}\n\n// Build defaultProps and propType objects by walking component prototype chain\nfunction createPropsPrototypeAndTypes(\n  componentClass,\n  extensions: any[]\n): Record<string, any> | null {\n  const parent = componentClass.prototype;\n  if (!parent) {\n    return null;\n  }\n\n  const parentClass = Object.getPrototypeOf(componentClass);\n  const parentDefaultProps = getPropsPrototype(parentClass);\n\n  // Parse propTypes from Component.defaultProps\n  const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};\n  const componentPropDefs = parsePropTypes(componentDefaultProps);\n\n  // Merged default props object. Order: parent, self, extensions\n  const defaultProps: any = Object.assign(\n    Object.create(null),\n    parentDefaultProps,\n    componentPropDefs.defaultProps\n  );\n  // Merged prop type definitions. Order: parent, self, extensions\n  const propTypes = Object.assign(\n    Object.create(null),\n    parentDefaultProps?.[PROP_TYPES_SYMBOL],\n    componentPropDefs.propTypes\n  );\n  // Merged deprecation list. Order: parent, self, extensions\n  const deprecatedProps = Object.assign(\n    Object.create(null),\n    parentDefaultProps?.[DEPRECATED_PROPS_SYMBOL],\n    componentPropDefs.deprecatedProps\n  );\n\n  for (const extension of extensions) {\n    const extensionDefaultProps = getPropsPrototype(extension.constructor);\n    if (extensionDefaultProps) {\n      Object.assign(defaultProps, extensionDefaultProps);\n      Object.assign(propTypes, extensionDefaultProps[PROP_TYPES_SYMBOL]);\n      Object.assign(deprecatedProps, extensionDefaultProps[DEPRECATED_PROPS_SYMBOL]);\n    }\n  }\n\n  // Create any necessary property descriptors and create the default prop object\n  // Assign merged default props\n  createPropsPrototype(defaultProps, componentClass);\n\n  // Add getters/setters for async props\n  addAsyncPropsToPropPrototype(defaultProps, propTypes);\n\n  // Add setters for deprecated props\n  addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);\n\n  // Store the precalculated props\n  defaultProps[PROP_TYPES_SYMBOL] = propTypes;\n  defaultProps[DEPRECATED_PROPS_SYMBOL] = deprecatedProps;\n\n  // Backwards compatibility\n  // TODO: remove access of hidden property from the rest of the code base\n  if (extensions.length === 0 && !hasOwnProperty(componentClass, '_propTypes')) {\n    componentClass._propTypes = propTypes;\n  }\n  return defaultProps;\n}\n\n// Builds a pre-merged default props object that component props can inherit from\nfunction createPropsPrototype(defaultProps, componentClass) {\n  // Avoid freezing `id` prop\n  const id = getComponentName(componentClass);\n\n  Object.defineProperties(defaultProps, {\n    // `id` is treated specially because layer might need to override it\n    id: {\n      writable: true,\n      value: id\n    }\n  });\n}\n\nfunction addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {\n  for (const propName in deprecatedProps) {\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(defaultProps, propName, {\n      enumerable: false,\n      set(newValue) {\n        const nameStr = `${this.id}: ${propName}`;\n\n        for (const newPropName of deprecatedProps[propName]) {\n          if (!hasOwnProperty(this, newPropName)) {\n            this[newPropName] = newValue;\n          }\n        }\n\n        log.deprecated(nameStr, deprecatedProps[propName].join('/'))();\n      }\n    });\n    /* eslint-enable accessor-pairs */\n  }\n}\n\n// Create descriptors for overridable props\nfunction addAsyncPropsToPropPrototype(defaultProps, propTypes) {\n  const defaultValues = {};\n\n  const descriptors = {};\n\n  // Move async props into shadow values\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {name, value} = propType;\n\n    // Note: async is ES7 keyword, can't destructure\n    if (propType.async) {\n      defaultValues[name] = value;\n      descriptors[name] = getDescriptorForAsyncProp(name);\n    }\n  }\n\n  // Default \"resolved\" values for async props, returned if value not yet resolved/set.\n  defaultProps[ASYNC_DEFAULTS_SYMBOL] = defaultValues;\n  // Shadowed object, just to make sure \"early indexing\" into the instance does not fail\n  defaultProps[ASYNC_ORIGINAL_SYMBOL] = {};\n\n  Object.defineProperties(defaultProps, descriptors);\n}\n\n// Helper: Configures getter and setter for one async prop\nfunction getDescriptorForAsyncProp(name) {\n  return {\n    enumerable: true,\n    // Save the provided value for async props in a special map\n    set(newValue) {\n      if (\n        typeof newValue === 'string' ||\n        newValue instanceof Promise ||\n        isAsyncIterable(newValue)\n      ) {\n        this[ASYNC_ORIGINAL_SYMBOL][name] = newValue;\n      } else {\n        this[ASYNC_RESOLVED_SYMBOL][name] = newValue;\n      }\n    },\n    // Only the component's state knows the true value of async prop\n    get() {\n      if (this[ASYNC_RESOLVED_SYMBOL]) {\n        // Prop value isn't async, so just return it\n        if (name in this[ASYNC_RESOLVED_SYMBOL]) {\n          const value = this[ASYNC_RESOLVED_SYMBOL][name];\n\n          return value || this[ASYNC_DEFAULTS_SYMBOL][name];\n        }\n\n        if (name in this[ASYNC_ORIGINAL_SYMBOL]) {\n          // It's an async prop value: look into component state\n          const state = this[COMPONENT_SYMBOL] && this[COMPONENT_SYMBOL].internalState;\n          if (state && state.hasAsyncProp(name)) {\n            return state.getAsyncProp(name) || this[ASYNC_DEFAULTS_SYMBOL][name];\n          }\n        }\n      }\n\n      // the prop is not supplied, or\n      // component not yet initialized/matched, return the component's default value for the prop\n      return this[ASYNC_DEFAULTS_SYMBOL][name];\n    }\n  };\n}\n\n// HELPER METHODS\n\nfunction hasOwnProperty(object, prop) {\n  return Object.prototype.hasOwnProperty.call(object, prop);\n}\n\n// Constructors have their super class constructors as prototypes\nfunction getOwnProperty(object, prop) {\n  return hasOwnProperty(object, prop) && object[prop];\n}\n\nfunction getComponentName(componentClass) {\n  const componentName = componentClass.componentName;\n  if (!componentName) {\n    log.warn(`${componentClass.name}.componentName not specified`)();\n  }\n  return componentName || componentClass.name;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}