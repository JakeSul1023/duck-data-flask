{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Return the feature for an accesor\n */\nexport function binaryToFeatureForAccesor(data, index) {\n  if (!data) {\n    return null;\n  }\n  const featureIndex = 'startIndices' in data ? data.startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n  return null;\n}\nfunction getPropertiesForIndex(data, propertiesIndex, numericPropsIndex) {\n  const feature = {\n    properties: {\n      ...data.properties[propertiesIndex]\n    }\n  };\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n  return feature;\n}\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(geojsonBinary, encodePickingColor) {\n  const pickingColors = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 4);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key][i * 4 + 0] = pickingColor[0];\n      pickingColors[key][i * 4 + 1] = pickingColor[1];\n      pickingColors[key][i * 4 + 2] = pickingColor[2];\n      pickingColors[key][i * 4 + 3] = 255;\n    }\n  }\n  return pickingColors;\n}","map":{"version":3,"names":["binaryToFeatureForAccesor","data","index","featureIndex","startIndices","geometryIndex","featureIds","value","getPropertiesForIndex","propertiesIndex","numericPropsIndex","feature","properties","prop","numericProps","calculatePickingColors","geojsonBinary","encodePickingColor","pickingColors","points","lines","polygons","key","globalFeatureIds","Uint8ClampedArray","length","pickingColor","i"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\geojson-layer\\geojson-binary.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// This module implement some utility functions to work with\n// the geojson-binary format defined at loaders.gl:\n// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n\nimport {BinaryAttribute} from '@deck.gl/core';\nimport {\n  BinaryFeatureCollection,\n  BinaryLineFeature,\n  BinaryPointFeature,\n  BinaryPolygonFeature,\n  Feature\n} from '@loaders.gl/schema';\n\nexport type BinaryFeatureTypes = BinaryPointFeature | BinaryLineFeature | BinaryPolygonFeature;\n\nexport type ExtendedBinaryFeatureCollection = {\n  [P in keyof Omit<BinaryFeatureCollection, 'shape'>]: BinaryFeatureCollection[P] & {\n    attributes?: Record<string, BinaryAttribute>;\n  };\n};\n\ntype FeaureOnlyProperties = Pick<Feature, 'properties'>;\n\n/**\n * Return the feature for an accesor\n */\nexport function binaryToFeatureForAccesor(\n  data: BinaryFeatureTypes,\n  index: number\n): FeaureOnlyProperties | null {\n  if (!data) {\n    return null;\n  }\n\n  const featureIndex = 'startIndices' in data ? (data as any).startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n\n  return null;\n}\n\nfunction getPropertiesForIndex(\n  data: BinaryFeatureTypes,\n  propertiesIndex: number,\n  numericPropsIndex: number\n): FeaureOnlyProperties {\n  const feature = {\n    properties: {...data.properties[propertiesIndex]}\n  };\n\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n\n  return feature;\n}\n\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(\n  geojsonBinary: Required<ExtendedBinaryFeatureCollection>,\n  encodePickingColor: (id: number, result: number[]) => void\n): Record<string, Uint8ClampedArray | null> {\n  const pickingColors: Record<string, Uint8ClampedArray | null> = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 4);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key][i * 4 + 0] = pickingColor[0];\n      pickingColors[key][i * 4 + 1] = pickingColor[1];\n      pickingColors[key][i * 4 + 2] = pickingColor[2];\n      pickingColors[key][i * 4 + 3] = 255;\n    }\n  }\n\n  return pickingColors;\n}\n"],"mappings":"AAAA;AACA;AACA;AAyBA;;;AAGA,OAAM,SAAUA,yBAAyBA,CACvCC,IAAwB,EACxBC,KAAa;EAEb,IAAI,CAACD,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EAEA,MAAME,YAAY,GAAG,cAAc,IAAIF,IAAI,GAAIA,IAAY,CAACG,YAAY,CAACF,KAAK,CAAC,GAAGA,KAAK;EACvF,MAAMG,aAAa,GAAGJ,IAAI,CAACK,UAAU,CAACC,KAAK,CAACJ,YAAY,CAAC;EAEzD,IAAIA,YAAY,KAAK,CAAC,CAAC,EAAE;IACvB,OAAOK,qBAAqB,CAACP,IAAI,EAAEI,aAAa,EAAEF,YAAY,CAAC;EACjE;EAEA,OAAO,IAAI;AACb;AAEA,SAASK,qBAAqBA,CAC5BP,IAAwB,EACxBQ,eAAuB,EACvBC,iBAAyB;EAEzB,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAE;MAAC,GAAGX,IAAI,CAACW,UAAU,CAACH,eAAe;IAAC;GACjD;EAED,KAAK,MAAMI,IAAI,IAAIZ,IAAI,CAACa,YAAY,EAAE;IACpCH,OAAO,CAACC,UAAU,CAACC,IAAI,CAAC,GAAGZ,IAAI,CAACa,YAAY,CAACD,IAAI,CAAC,CAACN,KAAK,CAACG,iBAAiB,CAAC;EAC7E;EAEA,OAAOC,OAAO;AAChB;AAEA;AACA,OAAM,SAAUI,sBAAsBA,CACpCC,aAAwD,EACxDC,kBAA0D;EAE1D,MAAMC,aAAa,GAA6C;IAC9DC,MAAM,EAAE,IAAI;IACZC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE;GACX;EACD,KAAK,MAAMC,GAAG,IAAIJ,aAAa,EAAE;IAC/B,MAAMZ,UAAU,GAAGU,aAAa,CAACM,GAAG,CAAC,CAACC,gBAAgB,CAAChB,KAAK;IAC5DW,aAAa,CAACI,GAAG,CAAC,GAAG,IAAIE,iBAAiB,CAAClB,UAAU,CAACmB,MAAM,GAAG,CAAC,CAAC;IACjE,MAAMC,YAAY,GAAG,EAAE;IACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrB,UAAU,CAACmB,MAAM,EAAEE,CAAC,EAAE,EAAE;MAC1CV,kBAAkB,CAACX,UAAU,CAACqB,CAAC,CAAC,EAAED,YAAY,CAAC;MAC/CR,aAAa,CAACI,GAAG,CAAC,CAACK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGD,YAAY,CAAC,CAAC,CAAC;MAC/CR,aAAa,CAACI,GAAG,CAAC,CAACK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGD,YAAY,CAAC,CAAC,CAAC;MAC/CR,aAAa,CAACI,GAAG,CAAC,CAACK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGD,YAAY,CAAC,CAAC,CAAC;MAC/CR,aAAa,CAACI,GAAG,CAAC,CAACK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG;IACrC;EACF;EAEA,OAAOT,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}