{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from '@luma.gl/core';\nimport { loadScript } from \"../../utils/load-script.js\";\nconst LOG_LEVEL = 1;\nlet spector = null;\nlet initialized = false;\nexport const DEFAULT_SPECTOR_PROPS = {\n  debugSpectorJS: log.get('debug-spectorjs'),\n  // https://github.com/BabylonJS/Spector.js#basic-usage\n  // https://forum.babylonjs.com/t/spectorcdn-is-temporarily-off/48241\n  // spectorUrl: 'https://spectorcdn.babylonjs.com/spector.bundle.js';\n  debugSpectorJSUrl: 'https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js',\n  gl: undefined\n};\n/** Loads spector from CDN if not already installed */\nexport async function loadSpectorJS(props) {\n  if (!globalThis.SPECTOR) {\n    try {\n      await loadScript(props.debugSpectorJSUrl || DEFAULT_SPECTOR_PROPS.debugSpectorJSUrl);\n    } catch (error) {\n      log.warn(String(error));\n    }\n  }\n}\nexport function initializeSpectorJS(props) {\n  props = {\n    ...DEFAULT_SPECTOR_PROPS,\n    ...props\n  };\n  if (!props.debugSpectorJS) {\n    return null;\n  }\n  if (!spector && globalThis.SPECTOR && !globalThis.luma?.spector) {\n    log.probe(LOG_LEVEL, 'SPECTOR found and initialized. Start with `luma.spector.displayUI()`')();\n    const {\n      Spector: SpectorJS\n    } = globalThis.SPECTOR;\n    spector = new SpectorJS();\n    if (globalThis.luma) {\n      globalThis.luma.spector = spector;\n    }\n  }\n  if (!spector) {\n    return null;\n  }\n  if (!initialized) {\n    initialized = true;\n    // enables recording some extra information merged in the capture like texture memory sizes and formats\n    spector.spyCanvases();\n    // A callback when results are ready\n    spector?.onCaptureStarted.add(capture => log.info('Spector capture started:', capture)());\n    spector?.onCapture.add(capture => {\n      log.info('Spector capture complete:', capture)();\n      // Use undocumented Spector API to open the UI with our capture\n      // See https://github.com/BabylonJS/Spector.js/blob/767ad1195a25b85a85c381f400eb50a979239eca/src/spector.ts#L124\n      spector?.getResultUI();\n      // @ts-expect-error private\n      spector?.resultView.display();\n      // @ts-expect-error private\n      spector?.resultView.addCapture(capture);\n    });\n  }\n  if (props.gl) {\n    // capture startup\n    const gl = props.gl;\n    // @ts-expect-error\n    const device = gl.device;\n    spector?.startCapture(props.gl, 500); // 500 commands\n    // @ts-expect-error\n    gl.device = device;\n    new Promise(resolve => setTimeout(resolve, 2000)).then(_ => {\n      log.info('Spector capture stopped after 2 seconds')();\n      spector?.stopCapture();\n      // spector?.displayUI();\n    });\n  }\n  return spector;\n}\n//# sourceMappingURL=spector.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}