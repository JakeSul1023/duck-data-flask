{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parseWMSError } from \"./lib/parsers/wms/parse-wms-error.js\";\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\n/**\n * Loader for the response to the WMS GetCapability request\n */\nexport const WMSErrorLoader = {\n  dataType: null,\n  batchType: null,\n  id: 'wms-error',\n  name: 'WMS Error',\n  module: 'wms',\n  version: VERSION,\n  worker: false,\n  extensions: ['xml'],\n  mimeTypes: ['application/vnd.ogc.se_xml', 'application/xml', 'text/xml'],\n  testText: testXMLFile,\n  options: {\n    wms: {\n      throwOnError: false\n    }\n  },\n  parse: async (arrayBuffer, options) => parseTextSync(new TextDecoder().decode(arrayBuffer), options),\n  parseSync: (arrayBuffer, options) => parseTextSync(new TextDecoder().decode(arrayBuffer), options),\n  parseTextSync: (text, options) => parseTextSync(text, options)\n};\nfunction testXMLFile(text) {\n  // TODO - There could be space first.\n  return text.startsWith('<?xml');\n}\nfunction parseTextSync(text, options) {\n  const wmsOptions = {\n    ...WMSErrorLoader.options.wms,\n    ...options?.wms\n  };\n  const error = parseWMSError(text, wmsOptions);\n  const message = wmsOptions.minimalErrors ? error : `WMS Service error: ${error}`;\n  if (wmsOptions.throwOnError) {\n    throw new Error(message);\n  }\n  return message;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}