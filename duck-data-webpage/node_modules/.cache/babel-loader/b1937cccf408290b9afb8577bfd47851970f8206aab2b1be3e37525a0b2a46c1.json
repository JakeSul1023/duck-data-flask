{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getAttributeInfosByLocation } from \"../../adapter-utils/get-attribute-from-layouts.js\";\nimport { Resource } from \"./resource.js\";\n/**\n * Stores attribute bindings.\n * Makes it easy to share a render pipeline and use separate vertex arrays.\n * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance\n * reducing the number of WebGL calls per draw call.\n * @note On WebGPU this is just a convenience class that collects the bindings.\n */\nexport class VertexArray extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    renderPipeline: null\n  };\n  get [Symbol.toStringTag]() {\n    return 'VertexArray';\n  }\n  /** Max number of vertex attributes */\n  maxVertexAttributes;\n  /** Attribute infos indexed by location - TODO only needed by webgl module? */\n  attributeInfos;\n  /** Index buffer */\n  indexBuffer = null;\n  /** Attributes indexed by buffer slot */\n  attributes;\n  constructor(device, props) {\n    super(device, props, VertexArray.defaultProps);\n    this.maxVertexAttributes = device.limits.maxVertexAttributes;\n    this.attributes = new Array(this.maxVertexAttributes).fill(null);\n    const {\n      shaderLayout,\n      bufferLayout\n    } = props.renderPipeline || {};\n    if (!shaderLayout || !bufferLayout) {\n      throw new Error('VertexArray');\n    }\n    this.attributeInfos = getAttributeInfosByLocation(shaderLayout, bufferLayout, this.maxVertexAttributes);\n  }\n  // DEPRECATED METHODS\n  /** @deprecated Set constant attributes (WebGL only) */\n  setConstantWebGL(location, value) {\n    this.device.reportError(new Error('constant attributes not supported'));\n  }\n}","map":{"version":3,"names":["getAttributeInfosByLocation","Resource","VertexArray","defaultProps","renderPipeline","Symbol","toStringTag","maxVertexAttributes","attributeInfos","indexBuffer","attributes","constructor","device","props","limits","Array","fill","shaderLayout","bufferLayout","Error","setConstantWebGL","location","value","reportError"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\vertex-array.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray} from '../../types';\nimport {\n  AttributeInfo,\n  getAttributeInfosByLocation\n} from '../../adapter-utils/get-attribute-from-layouts';\nimport type {Device} from '../device';\nimport type {Buffer} from './buffer';\nimport type {RenderPass} from './render-pass';\nimport type {RenderPipeline} from './render-pipeline';\nimport {Resource, ResourceProps} from './resource';\n\n/** Properties for initializing a VertexArray */\nexport type VertexArrayProps = ResourceProps & {\n  renderPipeline: RenderPipeline | null;\n};\n\n/**\n * Stores attribute bindings.\n * Makes it easy to share a render pipeline and use separate vertex arrays.\n * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance\n * reducing the number of WebGL calls per draw call.\n * @note On WebGPU this is just a convenience class that collects the bindings.\n */\nexport abstract class VertexArray extends Resource<VertexArrayProps> {\n  static override defaultProps: Required<VertexArrayProps> = {\n    ...Resource.defaultProps,\n    renderPipeline: null\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'VertexArray';\n  }\n\n  /** Max number of vertex attributes */\n  readonly maxVertexAttributes: number;\n  /** Attribute infos indexed by location - TODO only needed by webgl module? */\n  protected readonly attributeInfos: AttributeInfo[];\n\n  /** Index buffer */\n  indexBuffer: Buffer | null = null;\n  /** Attributes indexed by buffer slot */\n  attributes: (Buffer | TypedArray | null)[];\n\n  constructor(device: Device, props: VertexArrayProps) {\n    super(device, props, VertexArray.defaultProps);\n    this.maxVertexAttributes = device.limits.maxVertexAttributes;\n    this.attributes = new Array(this.maxVertexAttributes).fill(null);\n    const {shaderLayout, bufferLayout} = props.renderPipeline || {};\n    if (!shaderLayout || !bufferLayout) {\n      throw new Error('VertexArray');\n    }\n    this.attributeInfos = getAttributeInfosByLocation(\n      shaderLayout,\n      bufferLayout,\n      this.maxVertexAttributes\n    );\n  }\n\n  /** Set attributes (stored on pipeline and set before each call) */\n  abstract setIndexBuffer(indices: Buffer | null): void;\n  /** Set attributes (stored on pipeline and set before each call) */\n  abstract setBuffer(bufferSlot: number, buffer: Buffer | null): void;\n\n  abstract bindBeforeRender(renderPass: RenderPass): void;\n  abstract unbindAfterRender(renderPass: RenderPass): void;\n\n  // DEPRECATED METHODS\n\n  /** @deprecated Set constant attributes (WebGL only) */\n  setConstantWebGL(location: number, value: TypedArray | null): void {\n    this.device.reportError(new Error('constant attributes not supported'));\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAEEA,2BAA2B,QAC5B;AAKD,SAAQC,QAAQ,QAAgB;AAOhC;;;;;;;AAOA,OAAM,MAAgBC,WAAY,SAAQD,QAA0B;EAClE,OAAgBE,YAAY,GAA+B;IACzD,GAAGF,QAAQ,CAACE,YAAY;IACxBC,cAAc,EAAE;GACjB;EAED,KAAcC,MAAM,CAACC,WAAW,IAAC;IAC/B,OAAO,aAAa;EACtB;EAEA;EACSC,mBAAmB;EAC5B;EACmBC,cAAc;EAEjC;EACAC,WAAW,GAAkB,IAAI;EACjC;EACAC,UAAU;EAEVC,YAAYC,MAAc,EAAEC,KAAuB;IACjD,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEX,WAAW,CAACC,YAAY,CAAC;IAC9C,IAAI,CAACI,mBAAmB,GAAGK,MAAM,CAACE,MAAM,CAACP,mBAAmB;IAC5D,IAAI,CAACG,UAAU,GAAG,IAAIK,KAAK,CAAC,IAAI,CAACR,mBAAmB,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC;IAChE,MAAM;MAACC,YAAY;MAAEC;IAAY,CAAC,GAAGL,KAAK,CAACT,cAAc,IAAI,EAAE;IAC/D,IAAI,CAACa,YAAY,IAAI,CAACC,YAAY,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;IAChC;IACA,IAAI,CAACX,cAAc,GAAGR,2BAA2B,CAC/CiB,YAAY,EACZC,YAAY,EACZ,IAAI,CAACX,mBAAmB,CACzB;EACH;EAUA;EAEA;EACAa,gBAAgBA,CAACC,QAAgB,EAAEC,KAAwB;IACzD,IAAI,CAACV,MAAM,CAACW,WAAW,CAAC,IAAIJ,KAAK,CAAC,mCAAmC,CAAC,CAAC;EACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}