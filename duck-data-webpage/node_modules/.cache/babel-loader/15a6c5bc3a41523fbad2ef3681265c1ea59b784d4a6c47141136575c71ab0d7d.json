{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT license\n// Copyright (c) vis.gl contributors\nimport { parseFromContext } from '@loaders.gl/loader-utils';\nimport { _getMemoryUsageGLTF, GLTFLoader, postProcessGLTF } from '@loaders.gl/gltf';\nexport async function parseGltf3DTile(tile, arrayBuffer, options, context) {\n  // Set flags\n  // glTF models need to be rotated from Y to Z up\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n  tile.rotateYtoZ = true;\n  // Save gltf up axis\n  tile.gltfUpAxis = options?.['3d-tiles']?.assetGltfUpAxis ? options['3d-tiles'].assetGltfUpAxis : 'Y';\n  if (options?.['3d-tiles']?.loadGLTF) {\n    if (!context) {\n      return arrayBuffer.byteLength;\n    }\n    const gltfWithBuffers = await parseFromContext(arrayBuffer, GLTFLoader, options, context);\n    tile.gltf = postProcessGLTF(gltfWithBuffers);\n    tile.gpuMemoryUsageInBytes = _getMemoryUsageGLTF(tile.gltf);\n  } else {\n    tile.gltfArrayBuffer = arrayBuffer;\n  }\n  return arrayBuffer.byteLength;\n}","map":{"version":3,"names":["parseFromContext","_getMemoryUsageGLTF","GLTFLoader","postProcessGLTF","parseGltf3DTile","tile","arrayBuffer","options","context","rotateYtoZ","gltfUpAxis","assetGltfUpAxis","loadGLTF","byteLength","gltfWithBuffers","gltf","gpuMemoryUsageInBytes","gltfArrayBuffer"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-gltf.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT license\n// Copyright (c) vis.gl contributors\nimport { parseFromContext } from '@loaders.gl/loader-utils';\nimport { _getMemoryUsageGLTF, GLTFLoader, postProcessGLTF } from '@loaders.gl/gltf';\nexport async function parseGltf3DTile(tile, arrayBuffer, options, context) {\n    // Set flags\n    // glTF models need to be rotated from Y to Z up\n    // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n    tile.rotateYtoZ = true;\n    // Save gltf up axis\n    tile.gltfUpAxis = options?.['3d-tiles']?.assetGltfUpAxis\n        ? options['3d-tiles'].assetGltfUpAxis\n        : 'Y';\n    if (options?.['3d-tiles']?.loadGLTF) {\n        if (!context) {\n            return arrayBuffer.byteLength;\n        }\n        const gltfWithBuffers = await parseFromContext(arrayBuffer, GLTFLoader, options, context);\n        tile.gltf = postProcessGLTF(gltfWithBuffers);\n        tile.gpuMemoryUsageInBytes = _getMemoryUsageGLTF(tile.gltf);\n    }\n    else {\n        tile.gltfArrayBuffer = arrayBuffer;\n    }\n    return arrayBuffer.byteLength;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,mBAAmB,EAAEC,UAAU,EAAEC,eAAe,QAAQ,kBAAkB;AACnF,OAAO,eAAeC,eAAeA,CAACC,IAAI,EAAEC,WAAW,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACvE;EACA;EACA;EACAH,IAAI,CAACI,UAAU,GAAG,IAAI;EACtB;EACAJ,IAAI,CAACK,UAAU,GAAGH,OAAO,GAAG,UAAU,CAAC,EAAEI,eAAe,GAClDJ,OAAO,CAAC,UAAU,CAAC,CAACI,eAAe,GACnC,GAAG;EACT,IAAIJ,OAAO,GAAG,UAAU,CAAC,EAAEK,QAAQ,EAAE;IACjC,IAAI,CAACJ,OAAO,EAAE;MACV,OAAOF,WAAW,CAACO,UAAU;IACjC;IACA,MAAMC,eAAe,GAAG,MAAMd,gBAAgB,CAACM,WAAW,EAAEJ,UAAU,EAAEK,OAAO,EAAEC,OAAO,CAAC;IACzFH,IAAI,CAACU,IAAI,GAAGZ,eAAe,CAACW,eAAe,CAAC;IAC5CT,IAAI,CAACW,qBAAqB,GAAGf,mBAAmB,CAACI,IAAI,CAACU,IAAI,CAAC;EAC/D,CAAC,MACI;IACDV,IAAI,CAACY,eAAe,GAAGX,WAAW;EACtC;EACA,OAAOA,WAAW,CAACO,UAAU;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}