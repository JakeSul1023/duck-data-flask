{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { convertToArrayRow, convertToObjectRow, inferHeadersFromArrayRow, inferHeadersFromObjectRow } from \"../simple-table/row-utils.js\";\nconst DEFAULT_ROW_COUNT = 100;\nexport class RowTableBatchAggregator {\n  schema;\n  options;\n  length = 0;\n  objectRows = null;\n  arrayRows = null;\n  cursor = 0;\n  _headers = null;\n  constructor(schema, options) {\n    this.options = options;\n    this.schema = schema;\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (schema) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n  rowCount() {\n    return this.length;\n  }\n  addArrayRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n    // TODO - infer schema at a higher level, instead of hacking headers here?\n    this._headers ||= inferHeadersFromArrayRow(row);\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n  addObjectRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n    // TODO - infer schema at a higher level, instead of hacking headers here?\n    this._headers ||= inferHeadersFromObjectRow(row);\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n  getBatch() {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      // @ts-expect-error we should infer a schema\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}","map":{"version":3,"names":["convertToArrayRow","convertToObjectRow","inferHeadersFromArrayRow","inferHeadersFromObjectRow","DEFAULT_ROW_COUNT","RowTableBatchAggregator","schema","options","length","objectRows","arrayRows","cursor","_headers","constructor","key","index","name","rowCount","addArrayRow","row","Number","isFinite","shape","rowObject","addObjectRow","Array","rowArray","getBatch","rows","slice","batchType","data"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/batches/row-table-batch-aggregator.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { convertToArrayRow, convertToObjectRow, inferHeadersFromArrayRow, inferHeadersFromObjectRow } from \"../simple-table/row-utils.js\";\nconst DEFAULT_ROW_COUNT = 100;\nexport class RowTableBatchAggregator {\n    schema;\n    options;\n    length = 0;\n    objectRows = null;\n    arrayRows = null;\n    cursor = 0;\n    _headers = null;\n    constructor(schema, options) {\n        this.options = options;\n        this.schema = schema;\n        // schema is an array if there're no headers\n        // object if there are headers\n        if (schema) {\n            this._headers = [];\n            for (const key in schema) {\n                this._headers[schema[key].index] = schema[key].name;\n            }\n        }\n    }\n    rowCount() {\n        return this.length;\n    }\n    addArrayRow(row, cursor) {\n        if (Number.isFinite(cursor)) {\n            this.cursor = cursor;\n        }\n        // TODO - infer schema at a higher level, instead of hacking headers here?\n        this._headers ||= inferHeadersFromArrayRow(row);\n        // eslint-disable-next-line default-case\n        switch (this.options.shape) {\n            case 'object-row-table':\n                const rowObject = convertToObjectRow(row, this._headers);\n                this.addObjectRow(rowObject, cursor);\n                break;\n            case 'array-row-table':\n                this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n                this.arrayRows[this.length] = row;\n                this.length++;\n                break;\n        }\n    }\n    addObjectRow(row, cursor) {\n        if (Number.isFinite(cursor)) {\n            this.cursor = cursor;\n        }\n        // TODO - infer schema at a higher level, instead of hacking headers here?\n        this._headers ||= inferHeadersFromObjectRow(row);\n        // eslint-disable-next-line default-case\n        switch (this.options.shape) {\n            case 'array-row-table':\n                const rowArray = convertToArrayRow(row, this._headers);\n                this.addArrayRow(rowArray, cursor);\n                break;\n            case 'object-row-table':\n                this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n                this.objectRows[this.length] = row;\n                this.length++;\n                break;\n        }\n    }\n    getBatch() {\n        let rows = this.arrayRows || this.objectRows;\n        if (!rows) {\n            return null;\n        }\n        rows = rows.slice(0, this.length);\n        this.arrayRows = null;\n        this.objectRows = null;\n        return {\n            shape: this.options.shape,\n            batchType: 'data',\n            data: rows,\n            length: this.length,\n            // @ts-expect-error we should infer a schema\n            schema: this.schema,\n            cursor: this.cursor\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}