{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { joinLayerBounds, getRenderBounds, makeViewport } from \"../utils/projection-utils.js\";\nimport { createRenderTarget } from \"./utils.js\";\nconst MAP_MAX_SIZE = 2048;\n/**\n * Manages the lifecycle of the height map (a framebuffer that encodes elevation).\n * One instance of height map is is shared across all layers. It is updated when the viewport changes\n * or when some terrain source layer's data changes.\n * During the draw call of any terrainDrawMode:offset layers,\n * the vertex shader reads from this framebuffer to retrieve its z offset.\n */\nexport class HeightMapBuilder {\n  static isSupported(device) {\n    return device.isTextureFormatRenderable('rgba32float');\n  }\n  constructor(device) {\n    /** Viewport used to draw into the texture */\n    this.renderViewport = null;\n    /** Bounds of the height map texture, in cartesian space */\n    this.bounds = null;\n    /** Last rendered layers */\n    this.layers = [];\n    /** Last layer.getBounds() */\n    this.layersBounds = [];\n    /** The union of layersBounds in cartesian space */\n    this.layersBoundsCommon = null;\n    this.lastViewport = null;\n    this.device = device;\n  }\n  /** Returns the height map framebuffer for read/write access.\n   * Returns null when the texture is invalid.\n   */\n  getRenderFramebuffer() {\n    if (!this.renderViewport) {\n      return null;\n    }\n    if (!this.fbo) {\n      this.fbo = createRenderTarget(this.device, {\n        id: 'height-map',\n        float: true\n      });\n    }\n    return this.fbo;\n  }\n  /** Called every render cycle to check if the framebuffer needs update */\n  shouldUpdate(_ref) {\n    let {\n      layers,\n      viewport\n    } = _ref;\n    const layersChanged = layers.length !== this.layers.length || layers.some((layer, i) =>\n    // Layer instance is updated\n    // Layer props might have changed\n    // Undetermined props could have an effect on the output geometry of a terrain source,\n    // for example getElevation+updateTriggers, elevationScale, modelMatrix\n    layer !== this.layers[i] ||\n    // Some prop is in transition\n    layer.props.transitions ||\n    // Layer's geometry bounds have changed\n    layer.getBounds() !== this.layersBounds[i]);\n    if (layersChanged) {\n      // Recalculate cached bounds\n      this.layers = layers;\n      this.layersBounds = layers.map(layer => layer.getBounds());\n      this.layersBoundsCommon = joinLayerBounds(layers, viewport);\n    }\n    const viewportChanged = !this.lastViewport || !viewport.equals(this.lastViewport);\n    if (!this.layersBoundsCommon) {\n      this.renderViewport = null;\n    } else if (layersChanged || viewportChanged) {\n      const bounds = getRenderBounds(this.layersBoundsCommon, viewport);\n      if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n        this.renderViewport = null;\n        return false;\n      }\n      this.bounds = bounds;\n      this.lastViewport = viewport;\n      const scale = viewport.scale;\n      const pixelWidth = (bounds[2] - bounds[0]) * scale;\n      const pixelHeight = (bounds[3] - bounds[1]) * scale;\n      this.renderViewport = pixelWidth > 0 || pixelHeight > 0 ? makeViewport({\n        // It's not important whether the geometry is visible in this viewport, because\n        // vertices will not use the standard project_to_clipspace in the DRAW_TO_HEIGHT_MAP shader\n        // However the viewport must have the same center and zoom as the screen viewport\n        // So that projection uniforms used for calculating z are the same\n        bounds: [viewport.center[0] - 1, viewport.center[1] - 1, viewport.center[0] + 1, viewport.center[1] + 1],\n        zoom: viewport.zoom,\n        width: Math.min(pixelWidth, MAP_MAX_SIZE),\n        height: Math.min(pixelHeight, MAP_MAX_SIZE),\n        viewport\n      }) : null;\n      return true;\n    }\n    return false;\n  }\n  delete() {\n    if (this.fbo) {\n      this.fbo.colorAttachments[0].delete();\n      this.fbo.delete();\n    }\n  }\n}\n//# sourceMappingURL=height-map-builder.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}