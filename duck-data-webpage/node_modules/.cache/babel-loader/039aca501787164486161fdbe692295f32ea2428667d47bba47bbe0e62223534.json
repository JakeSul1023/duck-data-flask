{"ast":null,"code":"// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// This function is needed in initialization stages,\n// make sure it can be imported in isolation\nimport { isBrowser } from \"./is-browser.js\";\nimport { isElectron } from \"./is-electron.js\";\nimport { navigator } from \"./globals.js\";\nexport function isMobile() {\n  return typeof globalThis.orientation !== 'undefined';\n}\n// Simple browser detection\n// `mockUserAgent` parameter allows user agent to be overridden for testing\n/* eslint-disable complexity */\nexport function getBrowser(mockUserAgent) {\n  if (!mockUserAgent && !isBrowser()) {\n    return 'Node';\n  }\n  if (isElectron(mockUserAgent)) {\n    return 'Electron';\n  }\n  const userAgent = mockUserAgent || navigator.userAgent || '';\n  // NOTE: Order of tests matter, as many agents list Chrome etc.\n  if (userAgent.indexOf('Edge') > -1) {\n    return 'Edge';\n  }\n  if (globalThis.chrome) {\n    return 'Chrome';\n  }\n  if (globalThis.safari) {\n    return 'Safari';\n  }\n  if (globalThis.mozInnerScreenX) {\n    return 'Firefox';\n  }\n  return 'Unknown';\n}\n//# sourceMappingURL=get-browser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}