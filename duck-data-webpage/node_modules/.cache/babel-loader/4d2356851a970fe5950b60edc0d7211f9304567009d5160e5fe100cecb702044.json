{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Compression } from \"./compression.js\";\nimport { isBrowser, toArrayBuffer, registerJSModules, getJSModule, getJSModuleOrNull, promisify1 } from '@loaders.gl/loader-utils';\n// import brotli from 'brotli';  // https://bundlephobia.com/package/brotli\nimport { BrotliDecode } from \"../brotli/decode.js\";\nimport zlib from 'zlib';\nconst DEFAULT_BROTLI_OPTIONS = {\n  brotli: {\n    mode: 0,\n    quality: 8,\n    lgwin: 22\n  }\n};\n/**\n * brotli compression / decompression\n */\nexport class BrotliCompression extends Compression {\n  name = 'brotli';\n  extensions = ['br'];\n  contentEncodings = ['br'];\n  isSupported = true;\n  options;\n  constructor(options) {\n    super(options);\n    this.options = options;\n    registerJSModules(options?.modules);\n  }\n  /**\n   * brotli is an injectable dependency due to big size\n   * @param options\n   */\n  async preload(modules = {}) {\n    registerJSModules(modules);\n  }\n  async compress(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = await promisify1(zlib.brotliCompress)(input);\n      return toArrayBuffer(buffer);\n    }\n    return this.compressSync(input);\n  }\n  compressSync(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = zlib.brotliCompressSync(input);\n      return toArrayBuffer(buffer);\n    }\n    const brotliOptions = {\n      ...DEFAULT_BROTLI_OPTIONS.brotli,\n      ...this.options?.brotli\n    };\n    const inputArray = new Uint8Array(input);\n    const brotli = getJSModule('brotli', this.name);\n    // @ts-ignore brotli types state that only Buffers are accepted...\n    const outputArray = brotli.compress(inputArray, brotliOptions);\n    return outputArray.buffer;\n  }\n  async decompress(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = await promisify1(zlib.brotliDecompress)(input);\n      return toArrayBuffer(buffer);\n    }\n    return this.decompressSync(input);\n  }\n  decompressSync(input) {\n    // On Node.js we can use built-in zlib\n    if (!isBrowser && this.options.brotli?.useZlib) {\n      const buffer = zlib.brotliDecompressSync(input);\n      return toArrayBuffer(buffer);\n    }\n    const brotliOptions = {\n      ...DEFAULT_BROTLI_OPTIONS.brotli,\n      ...this.options?.brotli\n    };\n    const inputArray = new Uint8Array(input);\n    const brotli = getJSModuleOrNull('brotli');\n    if (brotli) {\n      // @ts-ignore brotli types state that only Buffers are accepted...\n      const outputArray = brotli.decompress(inputArray, brotliOptions);\n      return outputArray.buffer;\n    }\n    const outputArray = BrotliDecode(inputArray, undefined);\n    return outputArray.buffer;\n  }\n}","map":{"version":3,"names":["Compression","isBrowser","toArrayBuffer","registerJSModules","getJSModule","getJSModuleOrNull","promisify1","BrotliDecode","zlib","DEFAULT_BROTLI_OPTIONS","brotli","mode","quality","lgwin","BrotliCompression","name","extensions","contentEncodings","isSupported","options","constructor","modules","preload","compress","input","useZlib","buffer","brotliCompress","compressSync","brotliCompressSync","brotliOptions","inputArray","Uint8Array","outputArray","decompress","brotliDecompress","decompressSync","brotliDecompressSync","undefined"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/compression/dist/lib/brotli-compression.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Compression } from \"./compression.js\";\nimport { isBrowser, toArrayBuffer, registerJSModules, getJSModule, getJSModuleOrNull, promisify1 } from '@loaders.gl/loader-utils';\n// import brotli from 'brotli';  // https://bundlephobia.com/package/brotli\nimport { BrotliDecode } from \"../brotli/decode.js\";\nimport zlib from 'zlib';\nconst DEFAULT_BROTLI_OPTIONS = {\n    brotli: {\n        mode: 0,\n        quality: 8,\n        lgwin: 22\n    }\n};\n/**\n * brotli compression / decompression\n */\nexport class BrotliCompression extends Compression {\n    name = 'brotli';\n    extensions = ['br'];\n    contentEncodings = ['br'];\n    isSupported = true;\n    options;\n    constructor(options) {\n        super(options);\n        this.options = options;\n        registerJSModules(options?.modules);\n    }\n    /**\n     * brotli is an injectable dependency due to big size\n     * @param options\n     */\n    async preload(modules = {}) {\n        registerJSModules(modules);\n    }\n    async compress(input) {\n        // On Node.js we can use built-in zlib\n        if (!isBrowser && this.options.brotli?.useZlib) {\n            const buffer = await promisify1(zlib.brotliCompress)(input);\n            return toArrayBuffer(buffer);\n        }\n        return this.compressSync(input);\n    }\n    compressSync(input) {\n        // On Node.js we can use built-in zlib\n        if (!isBrowser && this.options.brotli?.useZlib) {\n            const buffer = zlib.brotliCompressSync(input);\n            return toArrayBuffer(buffer);\n        }\n        const brotliOptions = { ...DEFAULT_BROTLI_OPTIONS.brotli, ...this.options?.brotli };\n        const inputArray = new Uint8Array(input);\n        const brotli = getJSModule('brotli', this.name);\n        // @ts-ignore brotli types state that only Buffers are accepted...\n        const outputArray = brotli.compress(inputArray, brotliOptions);\n        return outputArray.buffer;\n    }\n    async decompress(input) {\n        // On Node.js we can use built-in zlib\n        if (!isBrowser && this.options.brotli?.useZlib) {\n            const buffer = await promisify1(zlib.brotliDecompress)(input);\n            return toArrayBuffer(buffer);\n        }\n        return this.decompressSync(input);\n    }\n    decompressSync(input) {\n        // On Node.js we can use built-in zlib\n        if (!isBrowser && this.options.brotli?.useZlib) {\n            const buffer = zlib.brotliDecompressSync(input);\n            return toArrayBuffer(buffer);\n        }\n        const brotliOptions = { ...DEFAULT_BROTLI_OPTIONS.brotli, ...this.options?.brotli };\n        const inputArray = new Uint8Array(input);\n        const brotli = getJSModuleOrNull('brotli');\n        if (brotli) {\n            // @ts-ignore brotli types state that only Buffers are accepted...\n            const outputArray = brotli.decompress(inputArray, brotliOptions);\n            return outputArray.buffer;\n        }\n        const outputArray = BrotliDecode(inputArray, undefined);\n        return outputArray.buffer;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}