{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Calculate WebGL 64 bit float\n * @param a  - the input float number\n * @param out - the output array. If not supplied, a new array is created.\n * @param startIndex - the index in the output array to fill from. Default 0.\n * @returns - the fp64 representation of the input number\n */\nexport function fp64ify(a, out = [], startIndex = 0) {\n  const hiPart = Math.fround(a);\n  const loPart = a - hiPart;\n  out[startIndex] = hiPart;\n  out[startIndex + 1] = loPart;\n  return out;\n}\n/**\n * Calculate the low part of a WebGL 64 bit float\n * @param a the input float number\n * @returns the lower 32 bit of the number\n */\nexport function fp64LowPart(a) {\n  return a - Math.fround(a);\n}\n/**\n * Calculate WebGL 64 bit matrix (transposed \"Float64Array\")\n * @param matrix  the input matrix\n * @returns the fp64 representation of the input matrix\n */\nexport function fp64ifyMatrix4(matrix) {\n  // Transpose the projection matrix to column major for GLSL.\n  const matrixFP64 = new Float32Array(32);\n  for (let i = 0; i < 4; ++i) {\n    for (let j = 0; j < 4; ++j) {\n      const index = i * 4 + j;\n      fp64ify(matrix[j * 4 + i], matrixFP64, index * 2);\n    }\n  }\n  return matrixFP64;\n}","map":{"version":3,"names":["fp64ify","a","out","startIndex","hiPart","Math","fround","loPart","fp64LowPart","fp64ifyMatrix4","matrix","matrixFP64","Float32Array","i","j","index"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\modules\\math\\fp64\\fp64-utils.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumericArray} from '@math.gl/types';\n\n/**\n * Calculate WebGL 64 bit float\n * @param a  - the input float number\n * @param out - the output array. If not supplied, a new array is created.\n * @param startIndex - the index in the output array to fill from. Default 0.\n * @returns - the fp64 representation of the input number\n */\nexport function fp64ify(a: number, out: NumericArray = [], startIndex: number = 0): NumericArray {\n  const hiPart = Math.fround(a);\n  const loPart = a - hiPart;\n  out[startIndex] = hiPart;\n  out[startIndex + 1] = loPart;\n  return out;\n}\n\n/**\n * Calculate the low part of a WebGL 64 bit float\n * @param a the input float number\n * @returns the lower 32 bit of the number\n */\nexport function fp64LowPart(a: number): number {\n  return a - Math.fround(a);\n}\n\n/**\n * Calculate WebGL 64 bit matrix (transposed \"Float64Array\")\n * @param matrix  the input matrix\n * @returns the fp64 representation of the input matrix\n */\nexport function fp64ifyMatrix4(matrix: NumericArray): Float32Array {\n  // Transpose the projection matrix to column major for GLSL.\n  const matrixFP64 = new Float32Array(32);\n  for (let i = 0; i < 4; ++i) {\n    for (let j = 0; j < 4; ++j) {\n      const index = i * 4 + j;\n      fp64ify(matrix[j * 4 + i], matrixFP64, index * 2);\n    }\n  }\n  return matrixFP64;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;;;;;;;AAOA,OAAM,SAAUA,OAAOA,CAACC,CAAS,EAAEC,GAAA,GAAoB,EAAE,EAAEC,UAAA,GAAqB,CAAC;EAC/E,MAAMC,MAAM,GAAGC,IAAI,CAACC,MAAM,CAACL,CAAC,CAAC;EAC7B,MAAMM,MAAM,GAAGN,CAAC,GAAGG,MAAM;EACzBF,GAAG,CAACC,UAAU,CAAC,GAAGC,MAAM;EACxBF,GAAG,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGI,MAAM;EAC5B,OAAOL,GAAG;AACZ;AAEA;;;;;AAKA,OAAM,SAAUM,WAAWA,CAACP,CAAS;EACnC,OAAOA,CAAC,GAAGI,IAAI,CAACC,MAAM,CAACL,CAAC,CAAC;AAC3B;AAEA;;;;;AAKA,OAAM,SAAUQ,cAAcA,CAACC,MAAoB;EACjD;EACA,MAAMC,UAAU,GAAG,IAAIC,YAAY,CAAC,EAAE,CAAC;EACvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;IAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;MAC1B,MAAMC,KAAK,GAAGF,CAAC,GAAG,CAAC,GAAGC,CAAC;MACvBd,OAAO,CAACU,MAAM,CAACI,CAAC,GAAG,CAAC,GAAGD,CAAC,CAAC,EAAEF,UAAU,EAAEI,KAAK,GAAG,CAAC,CAAC;IACnD;EACF;EACA,OAAOJ,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}