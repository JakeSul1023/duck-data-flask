{"ast":null,"code":"// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\nclass ArrayQueue extends Array {\n  enqueue(value) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue() {\n    // Remove first element\n    return this.shift();\n  }\n}\nexport default class AsyncQueue {\n  _values;\n  _settlers;\n  _closed;\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue();\n    this._closed = false;\n  }\n  close() {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({\n        done: true\n      });\n    }\n    this._closed = true;\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({\n        value\n      });\n    }\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({\n        done: true\n      });\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({\n        resolve,\n        reject\n      });\n    });\n  }\n}\n/**\n * @returns a Promise for an Array with the elements in `asyncIterable`\n */\nexport async function takeAsync(asyncIterable, count = Infinity) {\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {\n      value,\n      done\n    } = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}","map":{"version":3,"names":["ArrayQueue","Array","enqueue","value","push","dequeue","shift","AsyncQueue","_values","_settlers","_closed","constructor","close","length","resolve","done","Symbol","asyncIterator","Error","settler","reject","next","Promise","takeAsync","asyncIterable","count","Infinity","result","iterator"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/utils/async-queue.js"],"sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\nclass ArrayQueue extends Array {\n    enqueue(value) {\n        // Add at the end\n        return this.push(value);\n    }\n    dequeue() {\n        // Remove first element\n        return this.shift();\n    }\n}\nexport default class AsyncQueue {\n    _values;\n    _settlers;\n    _closed;\n    constructor() {\n        // enqueues > dequeues\n        this._values = new ArrayQueue();\n        // dequeues > enqueues\n        this._settlers = new ArrayQueue();\n        this._closed = false;\n    }\n    close() {\n        while (this._settlers.length > 0) {\n            this._settlers.dequeue().resolve({ done: true });\n        }\n        this._closed = true;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    enqueue(value) {\n        if (this._closed) {\n            throw new Error('Closed');\n        }\n        if (this._settlers.length > 0) {\n            if (this._values.length > 0) {\n                throw new Error('Illegal internal state');\n            }\n            const settler = this._settlers.dequeue();\n            if (value instanceof Error) {\n                settler.reject(value);\n            }\n            else {\n                settler.resolve({ value });\n            }\n        }\n        else {\n            this._values.enqueue(value);\n        }\n    }\n    /**\n     * @returns a Promise for an IteratorResult\n     */\n    next() {\n        if (this._values.length > 0) {\n            const value = this._values.dequeue();\n            if (value instanceof Error) {\n                return Promise.reject(value);\n            }\n            return Promise.resolve({ value });\n        }\n        if (this._closed) {\n            if (this._settlers.length > 0) {\n                throw new Error('Illegal internal state');\n            }\n            return Promise.resolve({ done: true });\n        }\n        // Wait for new values to be enqueued\n        return new Promise((resolve, reject) => {\n            this._settlers.enqueue({ resolve, reject });\n        });\n    }\n}\n/**\n * @returns a Promise for an Array with the elements in `asyncIterable`\n */\nexport async function takeAsync(asyncIterable, count = Infinity) {\n    const result = [];\n    const iterator = asyncIterable[Symbol.asyncIterator]();\n    while (result.length < count) {\n        const { value, done } = await iterator.next();\n        if (done) {\n            break;\n        }\n        result.push(value);\n    }\n    return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}