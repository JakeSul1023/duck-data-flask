{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { CommandEncoder } from '@luma.gl/core';\nimport { WEBGLCommandBuffer } from \"./webgl-command-buffer.js\";\nexport class WEBGLCommandEncoder extends CommandEncoder {\n  device;\n  commandBuffer;\n  constructor(device, props) {\n    super(device, props);\n    this.device = device;\n    this.commandBuffer = new WEBGLCommandBuffer(device);\n  }\n  destroy() {}\n  finish() {\n    this.commandBuffer.submitCommands();\n  }\n  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;\n  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;\n  // finish(options?: {id?: string}): GPUCommandBuffer;\n  copyBufferToBuffer(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-buffer-to-buffer',\n      options\n    });\n  }\n  copyBufferToTexture(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-buffer-to-texture',\n      options\n    });\n  }\n  copyTextureToBuffer(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-texture-to-buffer',\n      options\n    });\n  }\n  copyTextureToTexture(options) {\n    this.commandBuffer.commands.push({\n      name: 'copy-texture-to-texture',\n      options\n    });\n  }\n  // clearTexture(options: ClearTextureOptions): void {\n  //   this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});\n  // }\n  pushDebugGroup(groupLabel) {}\n  popDebugGroup() {}\n  insertDebugMarker(markerLabel) {}\n  resolveQuerySet(querySet, destination, options) {}\n}\n//# sourceMappingURL=webgl-command-encoder.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}