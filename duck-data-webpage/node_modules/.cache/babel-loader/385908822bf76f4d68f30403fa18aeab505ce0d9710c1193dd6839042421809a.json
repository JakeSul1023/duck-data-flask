{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** base class of all data sources */\nexport class DataSource {\n  /** A resolved fetch function extracted from loadOptions prop */\n  fetch;\n  /** The actual load options, if calling a loaders.gl loader */\n  loadOptions;\n  _needsRefresh = true;\n  props;\n  constructor(props) {\n    this.props = {\n      ...props\n    };\n    this.loadOptions = {\n      ...props.loadOptions\n    };\n    this.fetch = getFetchFunction(this.loadOptions);\n  }\n  setProps(props) {\n    this.props = Object.assign(this.props, props);\n    // TODO - add a shallow compare to avoid setting refresh if no change?\n    this.setNeedsRefresh();\n  }\n  /** Mark this data source as needing a refresh (redraw) */\n  setNeedsRefresh() {\n    this._needsRefresh = true;\n  }\n  /**\n   * Does this data source need refreshing?\n   * @note The specifics of the refresh mechanism depends on type of data source\n   */\n  getNeedsRefresh(clear = true) {\n    const needsRefresh = this._needsRefresh;\n    if (clear) {\n      this._needsRefresh = false;\n    }\n    return needsRefresh;\n  }\n}\n/**\n * Gets the current fetch function from options\n * @todo - move to loader-utils module\n * @todo - use in core module counterpart\n * @param options\n * @param context\n */\nexport function getFetchFunction(options) {\n  const fetchFunction = options?.fetch;\n  // options.fetch can be a function\n  if (fetchFunction && typeof fetchFunction === 'function') {\n    return (url, fetchOptions) => fetchFunction(url, fetchOptions);\n  }\n  // options.fetch can be an options object, use global fetch with those options\n  const fetchOptions = options?.fetch;\n  if (fetchOptions && typeof fetchOptions !== 'function') {\n    return url => fetch(url, fetchOptions);\n  }\n  // else return the global fetch function\n  return url => fetch(url);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}