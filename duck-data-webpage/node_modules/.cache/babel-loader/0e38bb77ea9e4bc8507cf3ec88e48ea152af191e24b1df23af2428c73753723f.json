{"ast":null,"code":"/**\n * calculate the angle between two coordinates\n * @returns angle in degrees\n */\nexport function getPointAngle(p1, p2) {\n  const x = p2.x - p1.x;\n  const y = p2.y - p1.y;\n  return Math.atan2(y, x) * 180 / Math.PI;\n}\n/**\n * calculate the angle between two pointer events\n * @returns angle in degrees\n */\nexport function getEventAngle(p1, p2) {\n  const x = p2.clientX - p1.clientX;\n  const y = p2.clientY - p1.clientY;\n  return Math.atan2(y, x) * 180 / Math.PI;\n}","map":{"version":3,"names":["getPointAngle","p1","p2","x","y","Math","atan2","PI","getEventAngle","clientX","clientY"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\input\\get-angle.ts"],"sourcesContent":["import {Point, PointerEventLike} from './types';\n\n/**\n * calculate the angle between two coordinates\n * @returns angle in degrees\n */\nexport function getPointAngle(p1: Point, p2: Point) {\n  const x: number = p2.x - p1.x;\n  const y: number = p2.y - p1.y;\n  return (Math.atan2(y, x) * 180) / Math.PI;\n}\n\n/**\n * calculate the angle between two pointer events\n * @returns angle in degrees\n */\nexport function getEventAngle(p1: PointerEventLike, p2: PointerEventLike) {\n  const x: number = p2.clientX - p1.clientX;\n  const y: number = p2.clientY - p1.clientY;\n  return (Math.atan2(y, x) * 180) / Math.PI;\n}\n"],"mappings":"AAEA;;;;AAIA,OAAM,SAAUA,aAAaA,CAACC,EAAS,EAAEC,EAAS;EAChD,MAAMC,CAAC,GAAWD,EAAE,CAACC,CAAC,GAAGF,EAAE,CAACE,CAAC;EAC7B,MAAMC,CAAC,GAAWF,EAAE,CAACE,CAAC,GAAGH,EAAE,CAACG,CAAC;EAC7B,OAAQC,IAAI,CAACC,KAAK,CAACF,CAAC,EAAED,CAAC,CAAC,GAAG,GAAG,GAAIE,IAAI,CAACE,EAAE;AAC3C;AAEA;;;;AAIA,OAAM,SAAUC,aAAaA,CAACP,EAAoB,EAAEC,EAAoB;EACtE,MAAMC,CAAC,GAAWD,EAAE,CAACO,OAAO,GAAGR,EAAE,CAACQ,OAAO;EACzC,MAAML,CAAC,GAAWF,EAAE,CAACQ,OAAO,GAAGT,EAAE,CAACS,OAAO;EACzC,OAAQL,IAAI,CAACC,KAAK,CAACF,CAAC,EAAED,CAAC,CAAC,GAAG,GAAG,GAAIE,IAAI,CAACE,EAAE;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}