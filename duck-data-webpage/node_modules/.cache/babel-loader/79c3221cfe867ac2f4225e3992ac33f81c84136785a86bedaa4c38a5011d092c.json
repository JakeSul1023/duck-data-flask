{"ast":null,"code":"import { GL } from \"../constants.js\";\nimport { getPrimitiveModeType } from \"../primitives/modes.js\";\nimport { assert } from '@loaders.gl/loader-utils';\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function makePrimitiveIterator(indices) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let mode = arguments.length > 2 ? arguments[2] : undefined;\n  let start = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let end = arguments.length > 4 ? arguments[4] : undefined;\n  return function* () {\n    // support indices being an object with a values array\n    if (indices) {\n      indices = indices.values || indices.value || indices;\n    }\n    // Autodeduce length from indices\n    if (end === undefined) {\n      end = indices ? indices.length : start;\n    }\n    // iteration info\n    const info = {\n      attributes,\n      type: getPrimitiveModeType(mode),\n      i1: 0,\n      i2: 0,\n      i3: 0\n    };\n    let i = start;\n    // @ts-ignore\n    while (i < end) {\n      switch (mode) {\n        case GL.POINTS:\n          // draw single points.\n          info.i1 = i;\n          i += 1;\n          break;\n        case GL.LINES:\n          // draw lines. Each set of two vertices is treated as a separate line segment.\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 2;\n          break;\n        case GL.LINE_STRIP:\n          // draw lines. Each vertex connects to the one after it.\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          break;\n        case GL.LINE_LOOP:\n          // draw a connected group of line segments from the first vertex to the last\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          break;\n        case GL.TRIANGLES:\n          // draw triangles. Each set of three vertices creates a separate triangle.\n          info.i1 = i;\n          info.i2 = i + 1;\n          info.i3 = i + 2;\n          i += 3;\n          break;\n        case GL.TRIANGLE_STRIP:\n          // draw a connected group of triangles.\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          break;\n        case GL.TRIANGLE_FAN:\n          // draw a connected group of triangles.\n          info.i1 = 1;\n          info.i2 = i;\n          info.i3 = i + 1;\n          i += 1;\n          break;\n        default:\n          assert(false);\n      }\n      // if indices are present, lookup actual vertices in indices\n      if (indices) {\n        if ('i1' in info) {\n          info.i1 = indices[info.i1];\n          info.i2 = indices[info.i2];\n          info.i3 = indices[info.i3];\n        }\n      }\n      // @ts-ignore\n      yield info;\n    }\n  }();\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}