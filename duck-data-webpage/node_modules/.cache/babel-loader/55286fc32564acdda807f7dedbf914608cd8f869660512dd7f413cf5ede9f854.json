{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { deepEqual } from \"../utils/deep-equal.js\";\nimport log from \"../utils/log.js\";\nimport { flatten } from \"../utils/flatten.js\";\nexport default class ViewManager {\n  constructor(props) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n    Object.seal(this);\n    // Init with default map viewport\n    this.setProps(props);\n  }\n  /** Remove all resources and event listeners */\n  finalize() {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n  /** Check if a redraw is needed */\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n  /** Checks each viewport for transition updates */\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n  /** Get a map of all views */\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n  /** Resolves a viewId string to a View */\n  getView(viewId) {\n    return this.views.find(view => view.id === viewId);\n  }\n  /** Returns the viewState for a specific viewId. Matches the viewState by\n    1. view.viewStateId\n    2. view.id\n    3. root viewState\n    then applies the view's filter if any */\n  getViewState(viewOrViewId) {\n    const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    // Backward compatibility: view state for single view\n    const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {\n      x: xyz[0],\n      y: xyz[1]\n    };\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n  /** Update the manager with new Deck props */\n  setProps(props) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n  //\n  // PRIVATE METHODS\n  //\n  _update() {\n    this._isUpdating = true;\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n    this._isUpdating = false;\n  }\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n    this.views = views;\n  }\n  _setViewState(viewState) {\n    if (viewState) {\n      // depth = 3 when comparing viewStates: viewId.position.0\n      const viewStateChanged = !deepEqual(viewState, this.viewState, 3);\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n  _createController(view, props) {\n    const Controller = props.type;\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._eventCallbacks.onViewStateChange,\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState => this.getView(view.id)?.makeViewport({\n        viewState,\n        width: this.width,\n        height: this.height\n      })\n    });\n    return controller;\n  }\n  _updateController(view, viewState, viewport, controller) {\n    const controllerProps = view.controller;\n    if (controllerProps && viewport) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n      // Create controller if not already existing or if the type of the\n      // controller has changed.\n      if (!controller || controller.constructor !== controllerProps.type) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {\n      views\n    } = this;\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--;) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({\n        viewState,\n        width: this.width,\n        height: this.height\n      });\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n      if (viewport) {\n        this._viewports.unshift(viewport);\n      }\n    }\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n    this._buildViewportMap();\n  }\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}","map":{"version":3,"names":["deepEqual","log","flatten","ViewManager","constructor","props","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractionStateChange","Object","seal","setProps","finalize","key","controller","needsRedraw","opts","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","viewId","updateTransition","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","find","getViewState","viewOrViewId","getViewStateId","filterViewState","getViewport","unproject","xyz","viewports","pixel","x","y","i","length","p","slice","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","_createController","Controller","type","onStateChange","makeViewport","_updateController","controllerProps","resolvedProps","oldControllers","invalidateControllers","oldController","hasController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\lib\\view-manager.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nimport type Controller from '../controllers/controller';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Timeline} from '@luma.gl/engine';\nimport type {EventManager} from 'mjolnir.js';\nimport type {ConstructorOf} from '../types/types';\nimport type {default as MapView, MapViewState} from '../views/map-view';\n\nexport type ViewOrViews = View | View[] | null;\ntype ViewStateOf<ViewT> = ViewT extends View<infer ViewStateT> ? ViewStateT : never;\ntype OneOfViews<ViewsT extends ViewOrViews> = ViewsT extends null\n  ? MapView\n  : ViewsT extends View[]\n    ? ViewsT[number]\n    : ViewsT;\nexport type AnyViewStateOf<ViewsT extends ViewOrViews> = ViewStateOf<OneOfViews<ViewsT>>;\nexport type ViewStateMap<ViewsT extends ViewOrViews> = ViewsT extends null\n  ? MapViewState\n  : ViewsT extends View\n    ? ViewStateOf<ViewsT>\n    : {[viewId: string]: AnyViewStateOf<ViewsT>};\n\n/** This is a very lose type of all \"acceptable\" viewState\n * It's not good for type hinting but matches what may exist internally\n */\nexport type ViewStateObject<ViewsT extends ViewOrViews> =\n  | ViewStateMap<ViewsT>\n  | AnyViewStateOf<ViewsT>\n  | {[viewId: string]: AnyViewStateOf<ViewsT>};\n\n/** ViewManager props directly supplied by the user */\ntype ViewManagerProps<ViewsT extends ViewOrViews> = {\n  views: ViewsT;\n  viewState: ViewStateObject<ViewsT> | null;\n  onViewStateChange?: (params: ViewStateChangeParameters<AnyViewStateOf<ViewsT>>) => void;\n  onInteractionStateChange?: (state: InteractionState) => void;\n  width?: number;\n  height?: number;\n};\n\nexport default class ViewManager<ViewsT extends View[]> {\n  width: number;\n  height: number;\n  views: View[];\n  viewState: ViewStateObject<ViewsT>;\n  controllers: {[viewId: string]: Controller<any> | null};\n  timeline: Timeline;\n\n  private _viewports: Viewport[];\n  private _viewportMap: {[viewId: string]: Viewport};\n  private _isUpdating: boolean;\n  private _needsRedraw: string | false;\n  private _needsUpdate: string | false;\n  private _eventManager: EventManager;\n  private _eventCallbacks: {\n    onViewStateChange?: (params: ViewStateChangeParameters) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n  };\n\n  constructor(\n    props: ViewManagerProps<ViewsT> & {\n      // Initial options\n      timeline: Timeline;\n      eventManager: EventManager;\n    }\n  ) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {} as any;\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  /** Remove all resources and event listeners */\n  finalize(): void {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  /** Check if a redraw is needed */\n  needsRedraw(\n    opts: {\n      /** Reset redraw flags to false */\n      clearRedrawFlags?: boolean;\n    } = {clearRedrawFlags: false}\n  ): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n  setNeedsUpdate(reason: string): void {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Checks each viewport for transition updates */\n  updateViewStates(): void {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  /** Get a map of all views */\n  getViews(): {[viewId: string]: View} {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  /** Resolves a viewId string to a View */\n  getView(viewId: string): View | undefined {\n    return this.views.find(view => view.id === viewId);\n  }\n\n  /** Returns the viewState for a specific viewId. Matches the viewState by\n    1. view.viewStateId\n    2. view.id\n    3. root viewState\n    then applies the view's filter if any */\n  getViewState(viewOrViewId: string | View): AnyViewStateOf<ViewsT> {\n    const view: View | undefined =\n      typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId: string): Viewport | undefined {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz: number[], opts?: {topLeft?: boolean}): number[] | null {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  /** Update the manager with new Deck props */\n  setProps(props: Partial<ViewManagerProps<ViewsT>>) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width as number, props.height as number);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  private _update(): void {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  private _setSize(width: number, height: number): void {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  private _setViews(views: View[]): void {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  private _setViewState(viewState: ViewStateObject<ViewsT>): void {\n    if (viewState) {\n      // depth = 3 when comparing viewStates: viewId.position.0\n      const viewStateChanged = !deepEqual(viewState, this.viewState, 3);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  private _createController(\n    view: View,\n    props: {id: string; type: ConstructorOf<Controller<any>>}\n  ): Controller<any> {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._eventCallbacks.onViewStateChange,\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        this.getView(view.id)?.makeViewport({\n          viewState,\n          width: this.width,\n          height: this.height\n        })\n    });\n\n    return controller;\n  }\n\n  private _updateController(\n    view: View,\n    viewState: AnyViewStateOf<ViewsT>,\n    viewport: Viewport | null,\n    controller?: Controller<any> | null\n  ): Controller<any> | null {\n    const controllerProps = view.controller;\n    if (controllerProps && viewport) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // Create controller if not already existing or if the type of the\n      // controller has changed.\n      if (!controller || controller.constructor !== controllerProps.type) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  private _rebuildViewports(): void {\n    const {views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({viewState, width: this.width, height: this.height});\n\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      if (viewport) {\n        this._viewports.unshift(viewport);\n      }\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap(): void {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews: View[], oldViews: View[]): boolean {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}