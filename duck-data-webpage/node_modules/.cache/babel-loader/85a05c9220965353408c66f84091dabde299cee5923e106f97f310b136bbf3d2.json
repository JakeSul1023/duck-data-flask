{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Model } from \"../model/model.js\";\nimport { Geometry } from \"../geometry/geometry.js\";\nimport { uid } from \"../utils/uid.js\";\nconst CLIPSPACE_VERTEX_SHADER_WGSL = /* wgsl */`\\\nstruct VertexInputs {\n  @location(0) clipSpacePosition: vec2<f32>,\n  @location(1) texCoord: vec2<f32>,\n  @location(2) coordinate: vec2<f32>  \n}\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) position : vec2<f32>,\n  @location(1) coordinate : vec2<f32>,\n  @location(2) uv : vec2<f32>\n};\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs: FragmentInputs;\n  outputs.Position = vec4(inputs.clipSpacePosition, 0., 1.);\n  outputs.position = inputs.clipSpacePosition;\n  outputs.coordinate = inputs.coordinate;\n  outputs.uv = inputs.texCoord;\n  return outputs;\n}\n`;\nconst CLIPSPACE_VERTEX_SHADER = /* glsl */`\\\n#version 300 es\nin vec2 clipSpacePositions;\nin vec2 texCoords;\nin vec2 coordinates;\n\nout vec2 position;\nout vec2 coordinate;\nout vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(clipSpacePositions, 0., 1.);\n  position = clipSpacePositions;\n  coordinate = coordinates;\n  uv = texCoords;\n}\n`;\n/* eslint-disable indent, no-multi-spaces */\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n/**\n * A flat geometry that covers the \"visible area\" that the GPU renders.\n */\nexport class ClipSpace extends Model {\n  constructor(device, props) {\n    const TEX_COORDS = POSITIONS.map(coord => coord === -1 ? 0 : coord);\n    // For WGSL we need to append the supplied fragment shader to the default vertex shader source\n    if (props.source) {\n      props = {\n        ...props,\n        source: `${CLIPSPACE_VERTEX_SHADER_WGSL}\\n${props.source}`\n      };\n    }\n    super(device, {\n      id: props.id || uid('clip-space'),\n      ...props,\n      vs: CLIPSPACE_VERTEX_SHADER,\n      vertexCount: 4,\n      geometry: new Geometry({\n        topology: 'triangle-strip',\n        vertexCount: 4,\n        attributes: {\n          clipSpacePositions: {\n            size: 2,\n            value: new Float32Array(POSITIONS)\n          },\n          texCoords: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          },\n          coordinates: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          }\n        }\n      })\n    });\n  }\n}\n//# sourceMappingURL=clip-space.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}