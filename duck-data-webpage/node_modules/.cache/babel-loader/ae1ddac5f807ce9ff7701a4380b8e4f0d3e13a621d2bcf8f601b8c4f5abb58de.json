{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { LayerExtension } from '@deck.gl/core';\nimport collision from \"./shader-module.js\";\nimport CollisionFilterEffect from \"./collision-filter-effect.js\";\nconst defaultProps = {\n  getCollisionPriority: {\n    type: 'accessor',\n    value: 0\n  },\n  collisionEnabled: true,\n  collisionGroup: {\n    type: 'string',\n    value: 'default'\n  },\n  collisionTestProps: {}\n};\n/** Allows layers to hide overlapping objects. */\nclass CollisionFilterExtension extends LayerExtension {\n  getShaders() {\n    return {\n      modules: [collision]\n    };\n  }\n  /* eslint-disable camelcase */\n  draw({\n    shaderModuleProps\n  }) {\n    if (shaderModuleProps.collision?.drawToCollisionMap) {\n      // Override any props with those defined in collisionTestProps\n      // @ts-ignore\n      this.props = this.clone(this.props.collisionTestProps).props;\n    }\n  }\n  initializeState(context, extension) {\n    if (this.getAttributeManager() === null) {\n      return;\n    }\n    this.context.deck?._addDefaultEffect(new CollisionFilterEffect());\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      collisionPriorities: {\n        size: 1,\n        stepMode: 'dynamic',\n        accessor: 'getCollisionPriority'\n      }\n    });\n  }\n  getNeedsPickingBuffer() {\n    return this.props.collisionEnabled;\n  }\n}\nCollisionFilterExtension.defaultProps = defaultProps;\nCollisionFilterExtension.extensionName = 'CollisionFilterExtension';\nexport default CollisionFilterExtension;","map":{"version":3,"names":["LayerExtension","collision","CollisionFilterEffect","defaultProps","getCollisionPriority","type","value","collisionEnabled","collisionGroup","collisionTestProps","CollisionFilterExtension","getShaders","modules","draw","shaderModuleProps","drawToCollisionMap","props","clone","initializeState","context","extension","getAttributeManager","deck","_addDefaultEffect","attributeManager","add","collisionPriorities","size","stepMode","accessor","getNeedsPickingBuffer","extensionName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\extensions\\src\\collision-filter\\collision-filter-extension.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Accessor, Layer, LayerContext, LayerExtension} from '@deck.gl/core';\nimport collision from './shader-module';\nimport CollisionFilterEffect from './collision-filter-effect';\n\nconst defaultProps = {\n  getCollisionPriority: {type: 'accessor', value: 0},\n  collisionEnabled: true,\n  collisionGroup: {type: 'string', value: 'default'},\n  collisionTestProps: {}\n};\n\nexport type CollisionFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor for collision priority. Must return a number in the range -1000 -> 1000. Features with higher values are shown preferentially.\n   */\n  getCollisionPriority?: Accessor<DataT, number>;\n\n  /**\n   * Enable/disable collisions. If collisions are disabled, all objects are rendered.\n   * @default true\n   */\n  collisionEnabled: boolean;\n\n  /**\n   * Collision group this layer belongs to. If it is not set, the 'default' collision group is used\n   */\n  collisionGroup?: string;\n\n  /**\n   * Props to override when rendering collision map\n   */\n  collisionTestProps?: {};\n};\n\n/** Allows layers to hide overlapping objects. */\nexport default class CollisionFilterExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'CollisionFilterExtension';\n\n  getShaders(this: Layer<CollisionFilterExtensionProps>): any {\n    return {modules: [collision]};\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<CollisionFilterExtensionProps>, {shaderModuleProps}: any) {\n    if (shaderModuleProps.collision?.drawToCollisionMap) {\n      // Override any props with those defined in collisionTestProps\n      // @ts-ignore\n      this.props = this.clone(this.props.collisionTestProps).props;\n    }\n  }\n\n  initializeState(\n    this: Layer<CollisionFilterExtensionProps>,\n    context: LayerContext,\n    extension: this\n  ) {\n    if (this.getAttributeManager() === null) {\n      return;\n    }\n    this.context.deck?._addDefaultEffect(new CollisionFilterEffect());\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.add({\n      collisionPriorities: {\n        size: 1,\n        stepMode: 'dynamic',\n        accessor: 'getCollisionPriority'\n      }\n    });\n  }\n\n  getNeedsPickingBuffer(this: Layer<CollisionFilterExtensionProps>): boolean {\n    return this.props.collisionEnabled;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAuCA,cAAc,QAAO,eAAe;AAC3E,OAAOC,SAAS;AAChB,OAAOC,qBAAqB;AAE5B,MAAMC,YAAY,GAAG;EACnBC,oBAAoB,EAAE;IAACC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAC,CAAC;EAClDC,gBAAgB,EAAE,IAAI;EACtBC,cAAc,EAAE;IAACH,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAS,CAAC;EAClDG,kBAAkB,EAAE;CACrB;AAyBD;AACA,MAAqBC,wBAAyB,SAAQV,cAAc;EAIlEW,UAAUA,CAAA;IACR,OAAO;MAACC,OAAO,EAAE,CAACX,SAAS;IAAC,CAAC;EAC/B;EAEA;EACAY,IAAIA,CAA6C;IAACC;EAAiB,CAAM;IACvE,IAAIA,iBAAiB,CAACb,SAAS,EAAEc,kBAAkB,EAAE;MACnD;MACA;MACA,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,KAAK,CAAC,IAAI,CAACD,KAAK,CAACP,kBAAkB,CAAC,CAACO,KAAK;IAC9D;EACF;EAEAE,eAAeA,CAEbC,OAAqB,EACrBC,SAAe;IAEf,IAAI,IAAI,CAACC,mBAAmB,EAAE,KAAK,IAAI,EAAE;MACvC;IACF;IACA,IAAI,CAACF,OAAO,CAACG,IAAI,EAAEC,iBAAiB,CAAC,IAAIrB,qBAAqB,EAAE,CAAC;IACjE,MAAMsB,gBAAgB,GAAG,IAAI,CAACH,mBAAmB,EAAE;IACnDG,gBAAiB,CAACC,GAAG,CAAC;MACpBC,mBAAmB,EAAE;QACnBC,IAAI,EAAE,CAAC;QACPC,QAAQ,EAAE,SAAS;QACnBC,QAAQ,EAAE;;KAEb,CAAC;EACJ;EAEAC,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACd,KAAK,CAACT,gBAAgB;EACpC;;AArCOG,wBAAA,CAAAP,YAAY,GAAGA,YAAY;AAC3BO,wBAAA,CAAAqB,aAAa,GAAG,0BAA0B;eAF9BrB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}