{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { decodeTextureFormat } from \"./decode-texture-format.js\";\nimport { getTextureFormatDefinition } from \"./texture-format-table.js\";\nexport function getTextureFormatCapabilities(format) {\n  const info = getTextureFormatDefinition(format);\n  const formatCapabilities = {\n    format,\n    create: info.f ?? true,\n    render: info.render ?? true,\n    filter: info.filter ?? true,\n    blend: info.blend ?? true,\n    store: info.store ?? true\n  };\n  const formatInfo = decodeTextureFormat(format);\n  const isDepthStencil = format.startsWith('depth') || format.startsWith('stencil');\n  const isSigned = formatInfo?.signed;\n  const isInteger = formatInfo?.integer;\n  const isWebGLSpecific = formatInfo?.webgl;\n  // signed formats are not renderable\n  formatCapabilities.render &&= !isSigned;\n  // signed and integer formats are not filterable\n  formatCapabilities.filter &&= !isDepthStencil && !isSigned && !isInteger && !isWebGLSpecific;\n  return formatCapabilities;\n}","map":{"version":3,"names":["decodeTextureFormat","getTextureFormatDefinition","getTextureFormatCapabilities","format","info","formatCapabilities","create","f","render","filter","blend","store","formatInfo","isDepthStencil","startsWith","isSigned","signed","isInteger","integer","isWebGLSpecific","webgl"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\gpu-type-utils\\texture-format-capabilities.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TextureFormat} from './texture-formats';\nimport type {TextureFeature} from './texture-features';\nimport {decodeTextureFormat} from './decode-texture-format';\n\nimport {getTextureFormatDefinition} from './texture-format-table';\n\n/**\n * Texture format capabilities.\n * @note Not directly usable. Can contain TextureFeature strings that need to be checked against a specific device.\n */\nexport type TextureFormatCapabilities = {\n  format: TextureFormat;\n  /** Can the format be created */\n  create: TextureFeature | boolean;\n  /** If a feature string, the specified device feature determines if format is renderable. */\n  render: TextureFeature | boolean;\n  /** If a feature string, the specified device feature determines if format is filterable. */\n  filter: TextureFeature | boolean;\n  /** If a feature string, the specified device feature determines if format is blendable. */\n  blend: TextureFeature | boolean;\n  /** If a feature string, the specified device feature determines if format is storeable. */\n  store: TextureFeature | boolean;\n};\n\nexport function getTextureFormatCapabilities(format: TextureFormat): TextureFormatCapabilities {\n  const info = getTextureFormatDefinition(format);\n\n  const formatCapabilities: Required<TextureFormatCapabilities> = {\n    format,\n    create: info.f ?? true,\n    render: info.render ?? true,\n    filter: info.filter ?? true,\n    blend: info.blend ?? true,\n    store: info.store ?? true\n  };\n\n  const formatInfo = decodeTextureFormat(format);\n  const isDepthStencil = format.startsWith('depth') || format.startsWith('stencil');\n  const isSigned = formatInfo?.signed;\n  const isInteger = formatInfo?.integer;\n  const isWebGLSpecific = formatInfo?.webgl;\n\n  // signed formats are not renderable\n  formatCapabilities.render &&= !isSigned;\n  // signed and integer formats are not filterable\n  formatCapabilities.filter &&= !isDepthStencil && !isSigned && !isInteger && !isWebGLSpecific;\n\n  return formatCapabilities;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,mBAAmB,QAAC;AAE5B,SAAQC,0BAA0B,QAAC;AAoBnC,OAAM,SAAUC,4BAA4BA,CAACC,MAAqB;EAChE,MAAMC,IAAI,GAAGH,0BAA0B,CAACE,MAAM,CAAC;EAE/C,MAAME,kBAAkB,GAAwC;IAC9DF,MAAM;IACNG,MAAM,EAAEF,IAAI,CAACG,CAAC,IAAI,IAAI;IACtBC,MAAM,EAAEJ,IAAI,CAACI,MAAM,IAAI,IAAI;IAC3BC,MAAM,EAAEL,IAAI,CAACK,MAAM,IAAI,IAAI;IAC3BC,KAAK,EAAEN,IAAI,CAACM,KAAK,IAAI,IAAI;IACzBC,KAAK,EAAEP,IAAI,CAACO,KAAK,IAAI;GACtB;EAED,MAAMC,UAAU,GAAGZ,mBAAmB,CAACG,MAAM,CAAC;EAC9C,MAAMU,cAAc,GAAGV,MAAM,CAACW,UAAU,CAAC,OAAO,CAAC,IAAIX,MAAM,CAACW,UAAU,CAAC,SAAS,CAAC;EACjF,MAAMC,QAAQ,GAAGH,UAAU,EAAEI,MAAM;EACnC,MAAMC,SAAS,GAAGL,UAAU,EAAEM,OAAO;EACrC,MAAMC,eAAe,GAAGP,UAAU,EAAEQ,KAAK;EAEzC;EACAf,kBAAkB,CAACG,MAAM,KAAK,CAACO,QAAQ;EACvC;EACAV,kBAAkB,CAACI,MAAM,KAAK,CAACI,cAAc,IAAI,CAACE,QAAQ,IAAI,CAACE,SAAS,IAAI,CAACE,eAAe;EAE5F,OAAOd,kBAAkB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}