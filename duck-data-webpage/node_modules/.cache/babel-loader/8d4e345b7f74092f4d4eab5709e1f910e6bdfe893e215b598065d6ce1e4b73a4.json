{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/*\n * range (Array)\n *   + start (Number) - the start index (incl.)\n *   + end (Number) - the end index (excl.)\n * rangeList (Array) - array of sorted, combined ranges\n */\nexport const EMPTY = [];\nexport const FULL = [[0, Infinity]];\n// Insert a range into a range collection\nexport function add(rangeList, range) {\n  // Noop if range collection already covers all\n  if (rangeList === FULL) {\n    return rangeList;\n  }\n  // Validate the input range\n  if (range[0] < 0) {\n    range[0] = 0;\n  }\n  if (range[0] >= range[1]) {\n    return rangeList;\n  }\n  // TODO - split off to tree-shakable Range class\n  const newRangeList = [];\n  const len = rangeList.length;\n  let insertPosition = 0;\n  for (let i = 0; i < len; i++) {\n    const range0 = rangeList[i];\n    if (range0[1] < range[0]) {\n      // the current range is to the left of the new range\n      newRangeList.push(range0);\n      insertPosition = i + 1;\n    } else if (range0[0] > range[1]) {\n      // the current range is to the right of the new range\n      newRangeList.push(range0);\n    } else {\n      range = [Math.min(range0[0], range[0]), Math.max(range0[1], range[1])];\n    }\n  }\n  newRangeList.splice(insertPosition, 0, range);\n  return newRangeList;\n}","map":{"version":3,"names":["EMPTY","FULL","Infinity","add","rangeList","range","newRangeList","len","length","insertPosition","i","range0","push","Math","min","max","splice"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\utils\\range.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/*\n * range (Array)\n *   + start (Number) - the start index (incl.)\n *   + end (Number) - the end index (excl.)\n * rangeList (Array) - array of sorted, combined ranges\n */\nexport const EMPTY = [];\nexport const FULL = [[0, Infinity]];\n\n// Insert a range into a range collection\nexport function add(rangeList, range) {\n  // Noop if range collection already covers all\n  if (rangeList === FULL) {\n    return rangeList;\n  }\n\n  // Validate the input range\n  if (range[0] < 0) {\n    range[0] = 0;\n  }\n  if (range[0] >= range[1]) {\n    return rangeList;\n  }\n\n  // TODO - split off to tree-shakable Range class\n  const newRangeList: number[] = [];\n  const len = rangeList.length;\n  let insertPosition = 0;\n\n  for (let i = 0; i < len; i++) {\n    const range0 = rangeList[i];\n\n    if (range0[1] < range[0]) {\n      // the current range is to the left of the new range\n      newRangeList.push(range0);\n      insertPosition = i + 1;\n    } else if (range0[0] > range[1]) {\n      // the current range is to the right of the new range\n      newRangeList.push(range0);\n    } else {\n      range = [Math.min(range0[0], range[0]), Math.max(range0[1], range[1])];\n    }\n  }\n  newRangeList.splice(insertPosition, 0, range);\n  return newRangeList;\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;;;;;;AAMA,OAAO,MAAMA,KAAK,GAAG,EAAE;AACvB,OAAO,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAC,EAAEC,QAAQ,CAAC,CAAC;AAEnC;AACA,OAAM,SAAUC,GAAGA,CAACC,SAAS,EAAEC,KAAK;EAClC;EACA,IAAID,SAAS,KAAKH,IAAI,EAAE;IACtB,OAAOG,SAAS;EAClB;EAEA;EACA,IAAIC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;IAChBA,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;EACd;EACA,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;IACxB,OAAOD,SAAS;EAClB;EAEA;EACA,MAAME,YAAY,GAAa,EAAE;EACjC,MAAMC,GAAG,GAAGH,SAAS,CAACI,MAAM;EAC5B,IAAIC,cAAc,GAAG,CAAC;EAEtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;IAC5B,MAAMC,MAAM,GAAGP,SAAS,CAACM,CAAC,CAAC;IAE3B,IAAIC,MAAM,CAAC,CAAC,CAAC,GAAGN,KAAK,CAAC,CAAC,CAAC,EAAE;MACxB;MACAC,YAAY,CAACM,IAAI,CAACD,MAAM,CAAC;MACzBF,cAAc,GAAGC,CAAC,GAAG,CAAC;IACxB,CAAC,MAAM,IAAIC,MAAM,CAAC,CAAC,CAAC,GAAGN,KAAK,CAAC,CAAC,CAAC,EAAE;MAC/B;MACAC,YAAY,CAACM,IAAI,CAACD,MAAM,CAAC;IAC3B,CAAC,MAAM;MACLN,KAAK,GAAG,CAACQ,IAAI,CAACC,GAAG,CAACH,MAAM,CAAC,CAAC,CAAC,EAAEN,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEQ,IAAI,CAACE,GAAG,CAACJ,MAAM,CAAC,CAAC,CAAC,EAAEN,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE;EACF;EACAC,YAAY,CAACU,MAAM,CAACP,cAAc,EAAE,CAAC,EAAEJ,KAAK,CAAC;EAC7C,OAAOC,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}