{"ast":null,"code":"// @eslint-disable\n// @ts-nocheck\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nexport function round(a) {\n  if (a >= 0) return Math.round(a);\n  return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nconst degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","map":{"version":3,"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","ANGLE_ORDER","round","a","floor","setMatrixArrayType","type","degree","PI","toRadian","equals","b","abs","max"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\gl-matrix\\common.js"],"sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\n/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\n\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nexport function round(a) {\n  if (a >= 0) return Math.round(a);\n\n  return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n"],"mappings":"AAAA;AACA;AAEA;;;;AAKA;AACA,OAAO,MAAMA,OAAO,GAAG,QAAQ;AAC/B,OAAO,IAAIC,UAAU,GAAG,OAAOC,YAAY,KAAK,WAAW,GAAGA,YAAY,GAAGC,KAAK;AAClF,OAAO,MAAMC,MAAM,GAAGC,IAAI,CAACC,MAAM;AACjC,OAAO,MAAMC,WAAW,GAAG,KAAK;AAEhC;;;;;;AAMA,OAAM,SAAUC,KAAKA,CAACC,CAAC;EACrB,IAAIA,CAAC,IAAI,CAAC,EAAE,OAAOJ,IAAI,CAACG,KAAK,CAACC,CAAC,CAAC;EAEhC,OAAOA,CAAC,GAAG,GAAG,KAAK,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAACD,CAAC,CAAC,GAAGJ,IAAI,CAACG,KAAK,CAACC,CAAC,CAAC;AACtD;AAEA;;;;;AAKA,OAAM,SAAUE,kBAAkBA,CAACC,IAAI;EACrCX,UAAU,GAAGW,IAAI;AACnB;AAEA,MAAMC,MAAM,GAAGR,IAAI,CAACS,EAAE,GAAG,GAAG;AAE5B;;;;;AAKA,OAAM,SAAUC,QAAQA,CAACN,CAAC;EACxB,OAAOA,CAAC,GAAGI,MAAM;AACnB;AAEA;;;;;;;;;AASA,OAAM,SAAUG,MAAMA,CAACP,CAAC,EAAEQ,CAAC;EACzB,OAAOZ,IAAI,CAACa,GAAG,CAACT,CAAC,GAAGQ,CAAC,CAAC,IAAIjB,OAAO,GAAGK,IAAI,CAACc,GAAG,CAAC,GAAG,EAAEd,IAAI,CAACa,GAAG,CAACT,CAAC,CAAC,EAAEJ,IAAI,CAACa,GAAG,CAACD,CAAC,CAAC,CAAC;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}