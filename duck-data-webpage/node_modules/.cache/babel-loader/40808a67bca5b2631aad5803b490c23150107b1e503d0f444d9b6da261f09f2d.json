{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Compression } from \"./compression.js\";\nimport { registerJSModules, checkJSModule, getJSModule, getJSModuleOrNull } from '@loaders.gl/loader-utils';\n// import {ZstdCodec} from 'zstd-codec'; // https://bundlephobia.com/package/zstd-codec\nconst CHUNK_SIZE = 1000000; // Tested value\nlet zstdPromise;\nlet zstd;\n/**\n * Zstandard compression / decompression\n */\nexport class ZstdCompression extends Compression {\n  name = 'zstd';\n  extensions = [];\n  contentEncodings = [];\n  isSupported = true;\n  options;\n  /**\n   * zstd-codec is an injectable dependency due to big size\n   * @param options\n   */\n  constructor(options) {\n    super(options);\n    this.options = options;\n    registerJSModules(options?.modules);\n  }\n  async preload(modules = {}) {\n    registerJSModules(modules);\n    checkJSModule('zstd-codec', this.name);\n    const ZstdCodec = getJSModuleOrNull('zstd-codec');\n    // eslint-disable-next-line  @typescript-eslint/no-misused-promises\n    if (!zstdPromise && ZstdCodec) {\n      zstdPromise = new Promise(resolve => ZstdCodec.run(zstd => resolve(zstd)));\n      zstd = await zstdPromise;\n    }\n  }\n  compressSync(input) {\n    getJSModule('zstd-codec', this.name);\n    const simpleZstd = new zstd.Simple();\n    const inputArray = new Uint8Array(input);\n    return simpleZstd.compress(inputArray).buffer;\n  }\n  decompressSync(input) {\n    getJSModule('zstd-codec', this.name);\n    const simpleZstd = new zstd.Simple();\n    // var ddict = new zstd.Dict.Decompression(dictData);\n    // var jsonBytes = simpleZstd.decompressUsingDict(jsonZstData, ddict);\n    const inputArray = new Uint8Array(input);\n    return simpleZstd.decompress(inputArray).buffer;\n  }\n  async decompress(input, size) {\n    await this.preload();\n    const simpleZstd = new zstd.Streaming();\n    const inputArray = new Uint8Array(input);\n    const chunks = [];\n    for (let i = 0; i <= inputArray.length; i += CHUNK_SIZE) {\n      chunks.push(inputArray.subarray(i, i + CHUNK_SIZE));\n    }\n    const decompressResult = await simpleZstd.decompressChunks(chunks);\n    return decompressResult.buffer;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}