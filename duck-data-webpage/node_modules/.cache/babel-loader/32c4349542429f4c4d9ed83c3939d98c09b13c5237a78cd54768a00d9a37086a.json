{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\nexport default class LRUCache {\n  constructor(limit = 5) {\n    this._cache = {};\n    /** access/update order, first item is oldest, last item is newest */\n    this._order = [];\n    this.limit = limit;\n  }\n  get(key) {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n  set(key, value) {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n  delete(key) {\n    const value = this._cache[key];\n    if (value) {\n      delete this._cache[key];\n      this._deleteOrder(key);\n    }\n  }\n  _deleteOrder(key) {\n    const index = this._order.indexOf(key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n  _appendOrder(key) {\n    this._order.push(key);\n  }\n}","map":{"version":3,"names":["LRUCache","constructor","limit","_cache","_order","get","key","value","_deleteOrder","_appendOrder","set","Object","keys","length","delete","index","indexOf","splice","push"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\text-layer\\lru-cache.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache<ValueT> {\n  private limit: number;\n  private _cache: Record<string, ValueT> = {};\n  /** access/update order, first item is oldest, last item is newest */\n  private _order: string[] = [];\n\n  constructor(limit: number = 5) {\n    this.limit = limit;\n  }\n\n  get(key: string): ValueT {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key: string, value: ValueT): void {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key: string): void {\n    const value = this._cache[key];\n    if (value) {\n      delete this._cache[key];\n      this._deleteOrder(key);\n    }\n  }\n\n  private _deleteOrder(key: string): void {\n    const index = this._order.indexOf(key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  private _appendOrder(key: string): void {\n    this._order.push(key);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;;;;;;AAOA,eAAc,MAAOA,QAAQ;EAM3BC,YAAYC,KAAA,GAAgB,CAAC;IAJrB,KAAAC,MAAM,GAA2B,EAAE;IAC3C;IACQ,KAAAC,MAAM,GAAa,EAAE;IAG3B,IAAI,CAACF,KAAK,GAAGA,KAAK;EACpB;EAEAG,GAAGA,CAACC,GAAW;IACb,MAAMC,KAAK,GAAG,IAAI,CAACJ,MAAM,CAACG,GAAG,CAAC;IAC9B,IAAIC,KAAK,EAAE;MACT;MACA,IAAI,CAACC,YAAY,CAACF,GAAG,CAAC;MACtB,IAAI,CAACG,YAAY,CAACH,GAAG,CAAC;IACxB;IACA,OAAOC,KAAK;EACd;EAEAG,GAAGA,CAACJ,GAAW,EAAEC,KAAa;IAC5B,IAAI,CAAC,IAAI,CAACJ,MAAM,CAACG,GAAG,CAAC,EAAE;MACrB;MACA,IAAIK,MAAM,CAACC,IAAI,CAAC,IAAI,CAACT,MAAM,CAAC,CAACU,MAAM,KAAK,IAAI,CAACX,KAAK,EAAE;QAClD,IAAI,CAACY,MAAM,CAAC,IAAI,CAACV,MAAM,CAAC,CAAC,CAAC,CAAC;MAC7B;MAEA,IAAI,CAACD,MAAM,CAACG,GAAG,CAAC,GAAGC,KAAK;MACxB,IAAI,CAACE,YAAY,CAACH,GAAG,CAAC;IACxB,CAAC,MAAM;MACL;MACA,IAAI,CAACQ,MAAM,CAACR,GAAG,CAAC;MAEhB,IAAI,CAACH,MAAM,CAACG,GAAG,CAAC,GAAGC,KAAK;MACxB,IAAI,CAACE,YAAY,CAACH,GAAG,CAAC;IACxB;EACF;EAEAQ,MAAMA,CAACR,GAAW;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACJ,MAAM,CAACG,GAAG,CAAC;IAC9B,IAAIC,KAAK,EAAE;MACT,OAAO,IAAI,CAACJ,MAAM,CAACG,GAAG,CAAC;MACvB,IAAI,CAACE,YAAY,CAACF,GAAG,CAAC;IACxB;EACF;EAEQE,YAAYA,CAACF,GAAW;IAC9B,MAAMS,KAAK,GAAG,IAAI,CAACX,MAAM,CAACY,OAAO,CAACV,GAAG,CAAC;IACtC,IAAIS,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAACX,MAAM,CAACa,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC9B;EACF;EAEQN,YAAYA,CAACH,GAAW;IAC9B,IAAI,CAACF,MAAM,CAACc,IAAI,CAACZ,GAAG,CAAC;EACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}