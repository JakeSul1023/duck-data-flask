{"ast":null,"code":"import { ZipFileSystem } from \"./zip-filesystem.js\";\n/**\n * Abstract class for fetching indexed archive formats (SLPK, 3TZ). Those types of zip archive has\n * a hash file inside that allows to increase reading speed\n */\nexport class IndexedArchive {\n  fileProvider;\n  fileName;\n  /**\n   * Constructor\n   * @param fileProvider - instance of a binary data reader\n   * @param hashTable - pre-loaded hashTable. If presented, getFile will skip reading the hash file\n   * @param fileName - name of the archive. It is used to add to an URL of a loader context\n   */\n  constructor(fileProvider, hashTable, fileName) {\n    this.fileProvider = fileProvider;\n    this.fileName = fileName;\n  }\n  /**\n   * Get file as from order ZIP arhive without using the hash file\n   * @param filename - path to the internal file\n   * @returns\n   */\n  async getFileWithoutHash(filename) {\n    const zipFS = new ZipFileSystem(this.fileProvider);\n    const response = await zipFS.fetch(filename);\n    return await response.arrayBuffer();\n  }\n}","map":{"version":3,"names":["ZipFileSystem","IndexedArchive","fileProvider","fileName","constructor","hashTable","getFileWithoutHash","filename","zipFS","response","fetch","arrayBuffer"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/zip/dist/filesystems/IndexedArchive.js"],"sourcesContent":["import { ZipFileSystem } from \"./zip-filesystem.js\";\n/**\n * Abstract class for fetching indexed archive formats (SLPK, 3TZ). Those types of zip archive has\n * a hash file inside that allows to increase reading speed\n */\nexport class IndexedArchive {\n    fileProvider;\n    fileName;\n    /**\n     * Constructor\n     * @param fileProvider - instance of a binary data reader\n     * @param hashTable - pre-loaded hashTable. If presented, getFile will skip reading the hash file\n     * @param fileName - name of the archive. It is used to add to an URL of a loader context\n     */\n    constructor(fileProvider, hashTable, fileName) {\n        this.fileProvider = fileProvider;\n        this.fileName = fileName;\n    }\n    /**\n     * Get file as from order ZIP arhive without using the hash file\n     * @param filename - path to the internal file\n     * @returns\n     */\n    async getFileWithoutHash(filename) {\n        const zipFS = new ZipFileSystem(this.fileProvider);\n        const response = await zipFS.fetch(filename);\n        return await response.arrayBuffer();\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,qBAAqB;AACnD;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,CAAC;EACxBC,YAAY;EACZC,QAAQ;EACR;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACF,YAAY,EAAEG,SAAS,EAAEF,QAAQ,EAAE;IAC3C,IAAI,CAACD,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMG,kBAAkBA,CAACC,QAAQ,EAAE;IAC/B,MAAMC,KAAK,GAAG,IAAIR,aAAa,CAAC,IAAI,CAACE,YAAY,CAAC;IAClD,MAAMO,QAAQ,GAAG,MAAMD,KAAK,CAACE,KAAK,CAACH,QAAQ,CAAC;IAC5C,OAAO,MAAME,QAAQ,CAACE,WAAW,CAAC,CAAC;EACvC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}