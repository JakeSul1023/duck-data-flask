{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { lerp } from '@math.gl/core';\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\nfunction Point([pointX, pointY], [nw, se], viewport) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n  return viewport.unprojectFlat([x, y]);\n}\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](geometry.coordinates, projectedBbox, viewport)\n  };\n}","map":{"version":3,"names":["lerp","availableTransformations","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","pointX","pointY","nw","se","viewport","x","y","unprojectFlat","getPoints","geometry","bbox","map","g","multiPoint","line","multiLineString","lineString","polygon","polygonRing","multiPolygon","transform","projectFlat","west","north","east","south","projectedBbox","coordinates","type"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\mvt-layer\\coordinate-transform.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Viewport} from '@deck.gl/core';\nimport {lerp} from '@math.gl/core';\nimport {GeoBoundingBox} from '../tileset-2d/index';\n\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point([pointX, pointY]: [number, number], [nw, se]: number[][], viewport: Viewport) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox: number[][], viewport: Viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox: number[][], viewport: Viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox: number[][], viewport: Viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox: number[][], viewport: Viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox: number[][], viewport: Viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox: number[][], viewport: Viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox: GeoBoundingBox, viewport: Viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](\n      geometry.coordinates,\n      projectedBbox,\n      viewport\n    )\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,IAAI,QAAO,eAAe;AAGlC,MAAMC,wBAAwB,GAAG;EAC/BC,KAAK;EACLC,UAAU;EACVC,UAAU;EACVC,eAAe;EACfC,OAAO;EACPC;CACD;AAED,SAASL,KAAKA,CAAC,CAACM,MAAM,EAAEC,MAAM,CAAmB,EAAE,CAACC,EAAE,EAAEC,EAAE,CAAa,EAAEC,QAAkB;EACzF,MAAMC,CAAC,GAAGb,IAAI,CAACU,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,EAAEH,MAAM,CAAC;EACpC,MAAMM,CAAC,GAAGd,IAAI,CAACU,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC;EAEpC,OAAOG,QAAQ,CAACG,aAAa,CAAC,CAACF,CAAC,EAAEC,CAAC,CAAC,CAAC;AACvC;AAEA,SAASE,SAASA,CAACC,QAAQ,EAAEC,IAAgB,EAAEN,QAAkB;EAC/D,OAAOK,QAAQ,CAACE,GAAG,CAACC,CAAC,IAAIlB,KAAK,CAACkB,CAAC,EAAEF,IAAI,EAAEN,QAAQ,CAAC,CAAC;AACpD;AAEA,SAAST,UAAUA,CAACkB,UAAU,EAAEH,IAAgB,EAAEN,QAAkB;EAClE,OAAOI,SAAS,CAACK,UAAU,EAAEH,IAAI,EAAEN,QAAQ,CAAC;AAC9C;AAEA,SAASR,UAAUA,CAACkB,IAAI,EAAEJ,IAAgB,EAAEN,QAAkB;EAC5D,OAAOI,SAAS,CAACM,IAAI,EAAEJ,IAAI,EAAEN,QAAQ,CAAC;AACxC;AAEA,SAASP,eAAeA,CAACkB,eAAe,EAAEL,IAAgB,EAAEN,QAAkB;EAC5E,OAAOW,eAAe,CAACJ,GAAG,CAACK,UAAU,IAAIpB,UAAU,CAACoB,UAAU,EAAEN,IAAI,EAAEN,QAAQ,CAAC,CAAC;AAClF;AAEA,SAASN,OAAOA,CAACmB,OAAO,EAAEP,IAAgB,EAAEN,QAAkB;EAC5D,OAAOa,OAAO,CAACN,GAAG,CAACO,WAAW,IAAIV,SAAS,CAACU,WAAW,EAAER,IAAI,EAAEN,QAAQ,CAAC,CAAC;AAC3E;AAEA,SAASL,YAAYA,CAACoB,YAAY,EAAET,IAAgB,EAAEN,QAAkB;EACtE,OAAOe,YAAY,CAACR,GAAG,CAACM,OAAO,IAAInB,OAAO,CAACmB,OAAO,EAAEP,IAAI,EAAEN,QAAQ,CAAC,CAAC;AACtE;AAEA,OAAM,SAAUgB,SAASA,CAACX,QAAQ,EAAEC,IAAoB,EAAEN,QAAkB;EAC1E,MAAMF,EAAE,GAAGE,QAAQ,CAACiB,WAAW,CAAC,CAACX,IAAI,CAACY,IAAI,EAAEZ,IAAI,CAACa,KAAK,CAAC,CAAC;EACxD,MAAMpB,EAAE,GAAGC,QAAQ,CAACiB,WAAW,CAAC,CAACX,IAAI,CAACc,IAAI,EAAEd,IAAI,CAACe,KAAK,CAAC,CAAC;EACxD,MAAMC,aAAa,GAAG,CAACxB,EAAE,EAAEC,EAAE,CAAC;EAE9B,OAAO;IACL,GAAGM,QAAQ;IACXkB,WAAW,EAAElC,wBAAwB,CAACgB,QAAQ,CAACmB,IAAI,CAAC,CAClDnB,QAAQ,CAACkB,WAAW,EACpBD,aAAa,EACbtB,QAAQ;GAEX;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}