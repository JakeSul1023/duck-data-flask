{"ast":null,"code":"import { InputEvent } from \"./input-consts.js\";\nimport { computeInputData } from \"./compute-input-data.js\";\n/**\n * handle input events\n */\nexport function inputHandler(manager, eventType, input) {\n  const pointersLen = input.pointers.length;\n  const changedPointersLen = input.changedPointers.length;\n  const isFirst = eventType & InputEvent.Start && pointersLen - changedPointersLen === 0;\n  const isFinal = eventType & (InputEvent.End | InputEvent.Cancel) && pointersLen - changedPointersLen === 0;\n  input.isFirst = Boolean(isFirst);\n  input.isFinal = Boolean(isFinal);\n  if (isFirst) {\n    manager.session = {};\n  }\n  // source event is the normalized value of the domEvents\n  // like 'touchstart, mouseup, pointerdown'\n  input.eventType = eventType;\n  // compute scale, rotation etc\n  const processedInput = computeInputData(manager, input);\n  // emit secret event\n  manager.emit('hammer.input', processedInput);\n  manager.recognize(processedInput);\n  manager.session.prevInput = processedInput;\n}","map":{"version":3,"names":["InputEvent","computeInputData","inputHandler","manager","eventType","input","pointersLen","pointers","length","changedPointersLen","changedPointers","isFirst","Start","isFinal","End","Cancel","Boolean","session","processedInput","emit","recognize","prevInput"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\input\\input-handler.ts"],"sourcesContent":["import {InputEvent} from './input-consts';\nimport {computeInputData} from './compute-input-data';\n\nimport type {Manager} from '../manager';\nimport type {RawInput} from './types';\n\n/**\n * handle input events\n */\nexport function inputHandler(manager: Manager, eventType: InputEvent, input: RawInput) {\n  const pointersLen = input.pointers.length;\n  const changedPointersLen = input.changedPointers.length;\n  const isFirst = eventType & InputEvent.Start && pointersLen - changedPointersLen === 0;\n  const isFinal =\n    eventType & (InputEvent.End | InputEvent.Cancel) && pointersLen - changedPointersLen === 0;\n\n  input.isFirst = Boolean(isFirst);\n  input.isFinal = Boolean(isFinal);\n\n  if (isFirst) {\n    manager.session = {};\n  }\n\n  // source event is the normalized value of the domEvents\n  // like 'touchstart, mouseup, pointerdown'\n  input.eventType = eventType;\n\n  // compute scale, rotation etc\n  const processedInput = computeInputData(manager, input);\n\n  // emit secret event\n  manager.emit('hammer.input', processedInput);\n\n  manager.recognize(processedInput);\n  manager.session.prevInput = processedInput;\n}\n"],"mappings":"AAAA,SAAQA,UAAU,QAAC;AACnB,SAAQC,gBAAgB,QAAC;AAKzB;;;AAGA,OAAM,SAAUC,YAAYA,CAACC,OAAgB,EAAEC,SAAqB,EAAEC,KAAe;EACnF,MAAMC,WAAW,GAAGD,KAAK,CAACE,QAAQ,CAACC,MAAM;EACzC,MAAMC,kBAAkB,GAAGJ,KAAK,CAACK,eAAe,CAACF,MAAM;EACvD,MAAMG,OAAO,GAAGP,SAAS,GAAGJ,UAAU,CAACY,KAAK,IAAIN,WAAW,GAAGG,kBAAkB,KAAK,CAAC;EACtF,MAAMI,OAAO,GACXT,SAAS,IAAIJ,UAAU,CAACc,GAAG,GAAGd,UAAU,CAACe,MAAM,CAAC,IAAIT,WAAW,GAAGG,kBAAkB,KAAK,CAAC;EAE5FJ,KAAK,CAACM,OAAO,GAAGK,OAAO,CAACL,OAAO,CAAC;EAChCN,KAAK,CAACQ,OAAO,GAAGG,OAAO,CAACH,OAAO,CAAC;EAEhC,IAAIF,OAAO,EAAE;IACXR,OAAO,CAACc,OAAO,GAAG,EAAE;EACtB;EAEA;EACA;EACAZ,KAAK,CAACD,SAAS,GAAGA,SAAS;EAE3B;EACA,MAAMc,cAAc,GAAGjB,gBAAgB,CAACE,OAAO,EAAEE,KAAK,CAAC;EAEvD;EACAF,OAAO,CAACgB,IAAI,CAAC,cAAc,EAAED,cAAc,CAAC;EAE5Cf,OAAO,CAACiB,SAAS,CAACF,cAAc,CAAC;EACjCf,OAAO,CAACc,OAAO,CAACI,SAAS,GAAGH,cAAc;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}