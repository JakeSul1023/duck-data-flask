{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { GL, GLType } from '@loaders.gl/math';\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n  json;\n  buffer;\n  featuresLength = 0;\n  _cachedTypedArrays = {};\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n  }\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n  getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n    const jsonValue = this.json[propertyName];\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, 1, jsonValue.byteOffset);\n    }\n    return jsonValue;\n  }\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n      return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);\n    }\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n    if (!jsonValue) {\n      return jsonValue;\n    }\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n    return result;\n  }\n  // HELPERS\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, this.buffer.buffer, this.buffer.byteOffset + byteOffset, count * componentLength);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n}","map":{"version":3,"names":["GL","GLType","Tile3DFeatureTable","json","buffer","featuresLength","_cachedTypedArrays","constructor","featureTableJson","featureTableBinary","getExtension","extensionName","extensions","hasProperty","propertyName","Boolean","getGlobalProperty","componentType","UNSIGNED_INT","componentLength","jsonValue","Number","isFinite","byteOffset","_getTypedArrayFromBinary","getPropertyArray","fromName","_getTypedArrayFromArray","getProperty","featureId","result","typedArray","i","count","cachedTypedArrays","createTypedArray","array"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/classes/tile-3d-feature-table.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { GL, GLType } from '@loaders.gl/math';\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n    json;\n    buffer;\n    featuresLength = 0;\n    _cachedTypedArrays = {};\n    constructor(featureTableJson, featureTableBinary) {\n        this.json = featureTableJson;\n        this.buffer = featureTableBinary;\n    }\n    getExtension(extensionName) {\n        return this.json.extensions && this.json.extensions[extensionName];\n    }\n    hasProperty(propertyName) {\n        return Boolean(this.json[propertyName]);\n    }\n    getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n        const jsonValue = this.json[propertyName];\n        if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n            return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, 1, jsonValue.byteOffset);\n        }\n        return jsonValue;\n    }\n    getPropertyArray(propertyName, componentType, componentLength) {\n        const jsonValue = this.json[propertyName];\n        if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n            if ('componentType' in jsonValue) {\n                componentType = GLType.fromName(jsonValue.componentType);\n            }\n            return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);\n        }\n        return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n    }\n    getProperty(propertyName, componentType, componentLength, featureId, result) {\n        const jsonValue = this.json[propertyName];\n        if (!jsonValue) {\n            return jsonValue;\n        }\n        const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n        if (componentLength === 1) {\n            return typedArray[featureId];\n        }\n        for (let i = 0; i < componentLength; ++i) {\n            result[i] = typedArray[componentLength * featureId + i];\n        }\n        return result;\n    }\n    // HELPERS\n    _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n        const cachedTypedArrays = this._cachedTypedArrays;\n        let typedArray = cachedTypedArrays[propertyName];\n        if (!typedArray) {\n            typedArray = GLType.createTypedArray(componentType, this.buffer.buffer, this.buffer.byteOffset + byteOffset, count * componentLength);\n            cachedTypedArrays[propertyName] = typedArray;\n        }\n        return typedArray;\n    }\n    _getTypedArrayFromArray(propertyName, componentType, array) {\n        const cachedTypedArrays = this._cachedTypedArrays;\n        let typedArray = cachedTypedArrays[propertyName];\n        if (!typedArray) {\n            typedArray = GLType.createTypedArray(componentType, array);\n            cachedTypedArrays[propertyName] = typedArray;\n        }\n        return typedArray;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,EAAE,EAAEC,MAAM,QAAQ,kBAAkB;AAC7C;AACA;AACA,eAAe,MAAMC,kBAAkB,CAAC;EACpCC,IAAI;EACJC,MAAM;EACNC,cAAc,GAAG,CAAC;EAClBC,kBAAkB,GAAG,CAAC,CAAC;EACvBC,WAAWA,CAACC,gBAAgB,EAAEC,kBAAkB,EAAE;IAC9C,IAAI,CAACN,IAAI,GAAGK,gBAAgB;IAC5B,IAAI,CAACJ,MAAM,GAAGK,kBAAkB;EACpC;EACAC,YAAYA,CAACC,aAAa,EAAE;IACxB,OAAO,IAAI,CAACR,IAAI,CAACS,UAAU,IAAI,IAAI,CAACT,IAAI,CAACS,UAAU,CAACD,aAAa,CAAC;EACtE;EACAE,WAAWA,CAACC,YAAY,EAAE;IACtB,OAAOC,OAAO,CAAC,IAAI,CAACZ,IAAI,CAACW,YAAY,CAAC,CAAC;EAC3C;EACAE,iBAAiBA,CAACF,YAAY,EAAEG,aAAa,GAAGjB,EAAE,CAACkB,YAAY,EAAEC,eAAe,GAAG,CAAC,EAAE;IAClF,MAAMC,SAAS,GAAG,IAAI,CAACjB,IAAI,CAACW,YAAY,CAAC;IACzC,IAAIM,SAAS,IAAIC,MAAM,CAACC,QAAQ,CAACF,SAAS,CAACG,UAAU,CAAC,EAAE;MACpD,OAAO,IAAI,CAACC,wBAAwB,CAACV,YAAY,EAAEG,aAAa,EAAEE,eAAe,EAAE,CAAC,EAAEC,SAAS,CAACG,UAAU,CAAC;IAC/G;IACA,OAAOH,SAAS;EACpB;EACAK,gBAAgBA,CAACX,YAAY,EAAEG,aAAa,EAAEE,eAAe,EAAE;IAC3D,MAAMC,SAAS,GAAG,IAAI,CAACjB,IAAI,CAACW,YAAY,CAAC;IACzC,IAAIM,SAAS,IAAIC,MAAM,CAACC,QAAQ,CAACF,SAAS,CAACG,UAAU,CAAC,EAAE;MACpD,IAAI,eAAe,IAAIH,SAAS,EAAE;QAC9BH,aAAa,GAAGhB,MAAM,CAACyB,QAAQ,CAACN,SAAS,CAACH,aAAa,CAAC;MAC5D;MACA,OAAO,IAAI,CAACO,wBAAwB,CAACV,YAAY,EAAEG,aAAa,EAAEE,eAAe,EAAE,IAAI,CAACd,cAAc,EAAEe,SAAS,CAACG,UAAU,CAAC;IACjI;IACA,OAAO,IAAI,CAACI,uBAAuB,CAACb,YAAY,EAAEG,aAAa,EAAEG,SAAS,CAAC;EAC/E;EACAQ,WAAWA,CAACd,YAAY,EAAEG,aAAa,EAAEE,eAAe,EAAEU,SAAS,EAAEC,MAAM,EAAE;IACzE,MAAMV,SAAS,GAAG,IAAI,CAACjB,IAAI,CAACW,YAAY,CAAC;IACzC,IAAI,CAACM,SAAS,EAAE;MACZ,OAAOA,SAAS;IACpB;IACA,MAAMW,UAAU,GAAG,IAAI,CAACN,gBAAgB,CAACX,YAAY,EAAEG,aAAa,EAAEE,eAAe,CAAC;IACtF,IAAIA,eAAe,KAAK,CAAC,EAAE;MACvB,OAAOY,UAAU,CAACF,SAAS,CAAC;IAChC;IACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,eAAe,EAAE,EAAEa,CAAC,EAAE;MACtCF,MAAM,CAACE,CAAC,CAAC,GAAGD,UAAU,CAACZ,eAAe,GAAGU,SAAS,GAAGG,CAAC,CAAC;IAC3D;IACA,OAAOF,MAAM;EACjB;EACA;EACAN,wBAAwBA,CAACV,YAAY,EAAEG,aAAa,EAAEE,eAAe,EAAEc,KAAK,EAAEV,UAAU,EAAE;IACtF,MAAMW,iBAAiB,GAAG,IAAI,CAAC5B,kBAAkB;IACjD,IAAIyB,UAAU,GAAGG,iBAAiB,CAACpB,YAAY,CAAC;IAChD,IAAI,CAACiB,UAAU,EAAE;MACbA,UAAU,GAAG9B,MAAM,CAACkC,gBAAgB,CAAClB,aAAa,EAAE,IAAI,CAACb,MAAM,CAACA,MAAM,EAAE,IAAI,CAACA,MAAM,CAACmB,UAAU,GAAGA,UAAU,EAAEU,KAAK,GAAGd,eAAe,CAAC;MACrIe,iBAAiB,CAACpB,YAAY,CAAC,GAAGiB,UAAU;IAChD;IACA,OAAOA,UAAU;EACrB;EACAJ,uBAAuBA,CAACb,YAAY,EAAEG,aAAa,EAAEmB,KAAK,EAAE;IACxD,MAAMF,iBAAiB,GAAG,IAAI,CAAC5B,kBAAkB;IACjD,IAAIyB,UAAU,GAAGG,iBAAiB,CAACpB,YAAY,CAAC;IAChD,IAAI,CAACiB,UAAU,EAAE;MACbA,UAAU,GAAG9B,MAAM,CAACkC,gBAAgB,CAAClB,aAAa,EAAEmB,KAAK,CAAC;MAC1DF,iBAAiB,CAACpB,YAAY,CAAC,GAAGiB,UAAU;IAChD;IACA,OAAOA,UAAU;EACrB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}