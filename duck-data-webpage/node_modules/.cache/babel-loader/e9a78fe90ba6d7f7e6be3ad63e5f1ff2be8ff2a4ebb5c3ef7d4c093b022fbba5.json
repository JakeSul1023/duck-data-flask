{"ast":null,"code":"// GLTF EXTENSION: KHR_texture_basisu\n// https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_basisu\n/* eslint-disable camelcase */\nimport { GLTFScenegraph } from \"../api/gltf-scenegraph.js\";\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\n/** Extension name */\nexport const name = KHR_TEXTURE_BASISU;\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData, options) {\n  const scene = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = scene;\n  for (const texture of json.textures || []) {\n    const extension = scene.getObjectExtension(texture, KHR_TEXTURE_BASISU);\n    if (extension) {\n      // TODO - if multiple texture extensions are present which one wins?\n      texture.source = extension.source;\n      scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n    }\n  }\n  // Remove the top-level extension\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}","map":{"version":3,"names":["GLTFScenegraph","KHR_TEXTURE_BASISU","name","preprocess","gltfData","options","scene","json","texture","textures","extension","getObjectExtension","source","removeObjectExtension","removeExtension"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/lib/extensions/KHR_texture_basisu.js"],"sourcesContent":["// GLTF EXTENSION: KHR_texture_basisu\n// https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_basisu\n/* eslint-disable camelcase */\nimport { GLTFScenegraph } from \"../api/gltf-scenegraph.js\";\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\n/** Extension name */\nexport const name = KHR_TEXTURE_BASISU;\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData, options) {\n    const scene = new GLTFScenegraph(gltfData);\n    const { json } = scene;\n    for (const texture of json.textures || []) {\n        const extension = scene.getObjectExtension(texture, KHR_TEXTURE_BASISU);\n        if (extension) {\n            // TODO - if multiple texture extensions are present which one wins?\n            texture.source = extension.source;\n            scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n        }\n    }\n    // Remove the top-level extension\n    scene.removeExtension(KHR_TEXTURE_BASISU);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,2BAA2B;AAC1D,MAAMC,kBAAkB,GAAG,oBAAoB;AAC/C;AACA,OAAO,MAAMC,IAAI,GAAGD,kBAAkB;AACtC;AACA;AACA;AACA;AACA,OAAO,SAASE,UAAUA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAC1C,MAAMC,KAAK,GAAG,IAAIN,cAAc,CAACI,QAAQ,CAAC;EAC1C,MAAM;IAAEG;EAAK,CAAC,GAAGD,KAAK;EACtB,KAAK,MAAME,OAAO,IAAID,IAAI,CAACE,QAAQ,IAAI,EAAE,EAAE;IACvC,MAAMC,SAAS,GAAGJ,KAAK,CAACK,kBAAkB,CAACH,OAAO,EAAEP,kBAAkB,CAAC;IACvE,IAAIS,SAAS,EAAE;MACX;MACAF,OAAO,CAACI,MAAM,GAAGF,SAAS,CAACE,MAAM;MACjCN,KAAK,CAACO,qBAAqB,CAACL,OAAO,EAAEP,kBAAkB,CAAC;IAC5D;EACJ;EACA;EACAK,KAAK,CAACQ,eAAe,CAACb,kBAAkB,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}