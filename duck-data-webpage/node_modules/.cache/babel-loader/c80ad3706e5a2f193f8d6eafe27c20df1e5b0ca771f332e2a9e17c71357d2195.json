{"ast":null,"code":"// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\nimport { assert } from \"../../utils/assert.js\";\nimport { GLTFScenegraph } from \"../../api/gltf-scenegraph.js\";\nconst KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport const name = KHR_LIGHTS_PUNCTUAL;\nexport async function decode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n  // Move the light array out of the extension and remove the extension\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    // @ts-ignore\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      // @ts-ignore\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n// Move the light ar ray out of the extension and remove the extension\nexport async function encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n  // @ts-ignore\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    // @ts-ignore\n    assert(!extension.lights);\n    // @ts-ignore\n    extension.lights = json.lights;\n    // @ts-ignore\n    delete json.lights;\n  }\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.json.lights) {\n    // @ts-ignore\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    // @ts-ignore\n    delete gltfScenegraph.json.lights;\n  }\n}","map":{"version":3,"names":["assert","GLTFScenegraph","KHR_LIGHTS_PUNCTUAL","name","decode","gltfData","gltfScenegraph","json","extension","getExtension","lights","removeExtension","node","nodes","nodeExtension","getObjectExtension","light","removeObjectExtension","encode","addExtension","addObjectExtension"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/lib/extensions/deprecated/KHR_lights_punctual.js"],"sourcesContent":["// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\nimport { assert } from \"../../utils/assert.js\";\nimport { GLTFScenegraph } from \"../../api/gltf-scenegraph.js\";\nconst KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual';\nexport const name = KHR_LIGHTS_PUNCTUAL;\nexport async function decode(gltfData) {\n    const gltfScenegraph = new GLTFScenegraph(gltfData);\n    const { json } = gltfScenegraph;\n    // Move the light array out of the extension and remove the extension\n    const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n    if (extension) {\n        // @ts-ignore\n        gltfScenegraph.json.lights = extension.lights;\n        gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n    }\n    // Any nodes that have the extension, add lights field pointing to light object\n    // and remove the extension\n    for (const node of json.nodes || []) {\n        const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n        if (nodeExtension) {\n            // @ts-ignore\n            node.light = nodeExtension.light;\n        }\n        gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    }\n}\n// Move the light ar ray out of the extension and remove the extension\nexport async function encode(gltfData) {\n    const gltfScenegraph = new GLTFScenegraph(gltfData);\n    const { json } = gltfScenegraph;\n    // @ts-ignore\n    if (json.lights) {\n        const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n        // @ts-ignore\n        assert(!extension.lights);\n        // @ts-ignore\n        extension.lights = json.lights;\n        // @ts-ignore\n        delete json.lights;\n    }\n    // Any nodes that have lights field pointing to light object\n    // add the extension\n    // @ts-ignore\n    if (gltfScenegraph.json.lights) {\n        // @ts-ignore\n        for (const light of gltfScenegraph.json.lights) {\n            const node = light.node;\n            gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n        }\n        // @ts-ignore\n        delete gltfScenegraph.json.lights;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,MAAMC,mBAAmB,GAAG,qBAAqB;AACjD,OAAO,MAAMC,IAAI,GAAGD,mBAAmB;AACvC,OAAO,eAAeE,MAAMA,CAACC,QAAQ,EAAE;EACnC,MAAMC,cAAc,GAAG,IAAIL,cAAc,CAACI,QAAQ,CAAC;EACnD,MAAM;IAAEE;EAAK,CAAC,GAAGD,cAAc;EAC/B;EACA,MAAME,SAAS,GAAGF,cAAc,CAACG,YAAY,CAACP,mBAAmB,CAAC;EAClE,IAAIM,SAAS,EAAE;IACX;IACAF,cAAc,CAACC,IAAI,CAACG,MAAM,GAAGF,SAAS,CAACE,MAAM;IAC7CJ,cAAc,CAACK,eAAe,CAACT,mBAAmB,CAAC;EACvD;EACA;EACA;EACA,KAAK,MAAMU,IAAI,IAAIL,IAAI,CAACM,KAAK,IAAI,EAAE,EAAE;IACjC,MAAMC,aAAa,GAAGR,cAAc,CAACS,kBAAkB,CAACH,IAAI,EAAEV,mBAAmB,CAAC;IAClF,IAAIY,aAAa,EAAE;MACf;MACAF,IAAI,CAACI,KAAK,GAAGF,aAAa,CAACE,KAAK;IACpC;IACAV,cAAc,CAACW,qBAAqB,CAACL,IAAI,EAAEV,mBAAmB,CAAC;EACnE;AACJ;AACA;AACA,OAAO,eAAegB,MAAMA,CAACb,QAAQ,EAAE;EACnC,MAAMC,cAAc,GAAG,IAAIL,cAAc,CAACI,QAAQ,CAAC;EACnD,MAAM;IAAEE;EAAK,CAAC,GAAGD,cAAc;EAC/B;EACA,IAAIC,IAAI,CAACG,MAAM,EAAE;IACb,MAAMF,SAAS,GAAGF,cAAc,CAACa,YAAY,CAACjB,mBAAmB,CAAC;IAClE;IACAF,MAAM,CAAC,CAACQ,SAAS,CAACE,MAAM,CAAC;IACzB;IACAF,SAAS,CAACE,MAAM,GAAGH,IAAI,CAACG,MAAM;IAC9B;IACA,OAAOH,IAAI,CAACG,MAAM;EACtB;EACA;EACA;EACA;EACA,IAAIJ,cAAc,CAACC,IAAI,CAACG,MAAM,EAAE;IAC5B;IACA,KAAK,MAAMM,KAAK,IAAIV,cAAc,CAACC,IAAI,CAACG,MAAM,EAAE;MAC5C,MAAME,IAAI,GAAGI,KAAK,CAACJ,IAAI;MACvBN,cAAc,CAACc,kBAAkB,CAACR,IAAI,EAAEV,mBAAmB,EAAEc,KAAK,CAAC;IACvE;IACA;IACA,OAAOV,cAAc,CAACC,IAAI,CAACG,MAAM;EACrC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}