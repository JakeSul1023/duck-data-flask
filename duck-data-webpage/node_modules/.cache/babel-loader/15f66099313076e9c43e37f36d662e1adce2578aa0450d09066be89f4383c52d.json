{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// s2-geometry is a pure JavaScript port of Google/Niantic's S2 Geometry library\n// which is perfect since it works in the browser.\nimport { toHilbertQuadkey, FromHilbertQuadKey, IJToST, STToUV, FaceUVToXYZ, XYZToLngLat } from \"./s2-geometry.js\";\nimport Long from 'long';\n/**\n * Given an S2 token this function convert the token to 64 bit id\n   https://github.com/google/s2-geometry-library-java/blob/c04b68bf3197a9c34082327eeb3aec7ab7c85da1/src/com/google/common/geometry/S2CellId.java#L439\n * */\nfunction getIdFromToken(token) {\n  // pad token with zeros to make the length 16\n  const paddedToken = token.padEnd(16, '0');\n  return Long.fromString(paddedToken, 16);\n}\nconst MAX_RESOLUTION = 100;\n/* Adapted from s2-geometry's S2Cell.getCornerLatLngs */\n/* eslint-disable max-statements */\nfunction getGeoBounds({\n  face,\n  ij,\n  level\n}) {\n  const offsets = [[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]];\n  // The S2 cell edge is curved: http://s2geometry.io/\n  // This is more prominent at lower levels\n  // resolution is the number of segments to generate per edge.\n  // We exponentially reduce resolution as level increases so it doesn't affect perf\n  // when there are a large number of cells\n  const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION * Math.pow(2, -level)));\n  const result = new Float64Array(4 * resolution * 2 + 2);\n  let ptIndex = 0;\n  let prevLng = 0;\n  for (let i = 0; i < 4; i++) {\n    const offset = offsets[i].slice(0);\n    const nextOffset = offsets[i + 1];\n    const stepI = (nextOffset[0] - offset[0]) / resolution;\n    const stepJ = (nextOffset[1] - offset[1]) / resolution;\n    for (let j = 0; j < resolution; j++) {\n      offset[0] += stepI;\n      offset[1] += stepJ;\n      // Cell can be represented by coordinates IJ, ST, UV, XYZ\n      // http://s2geometry.io/devguide/s2cell_hierarchy#coordinate-systems\n      const st = IJToST(ij, level, offset);\n      const uv = STToUV(st);\n      const xyz = FaceUVToXYZ(face, uv);\n      const lngLat = XYZToLngLat(xyz);\n      // Adjust longitude for Web Mercator projection\n      if (Math.abs(lngLat[1]) > 89.999) {\n        lngLat[0] = prevLng;\n      }\n      const deltaLng = lngLat[0] - prevLng;\n      lngLat[0] += deltaLng > 180 ? -360 : deltaLng < -180 ? 360 : 0;\n      result[ptIndex++] = lngLat[0];\n      result[ptIndex++] = lngLat[1];\n      prevLng = lngLat[0];\n    }\n  }\n  // close the loop\n  result[ptIndex++] = result[0];\n  result[ptIndex++] = result[1];\n  return result;\n}\n/* eslint-enable max-statements */\nexport function getS2QuadKey(token) {\n  if (typeof token === 'string') {\n    if (token.indexOf('/') > 0) {\n      // is Hilbert quad key\n      return token;\n    }\n    // is S2 token\n    token = getIdFromToken(token);\n  }\n  // is Long id\n  return toHilbertQuadkey(token.toString());\n}\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param {*} cell - This can be an S2 key or token\n * @return {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2Polygon(token) {\n  const key = getS2QuadKey(token);\n  const s2cell = FromHilbertQuadKey(key);\n  return getGeoBounds(s2cell);\n}","map":{"version":3,"names":["toHilbertQuadkey","FromHilbertQuadKey","IJToST","STToUV","FaceUVToXYZ","XYZToLngLat","Long","getIdFromToken","token","paddedToken","padEnd","fromString","MAX_RESOLUTION","getGeoBounds","face","ij","level","offsets","resolution","Math","max","ceil","pow","result","Float64Array","ptIndex","prevLng","i","offset","slice","nextOffset","stepI","stepJ","j","st","uv","xyz","lngLat","abs","deltaLng","getS2QuadKey","indexOf","toString","getS2Polygon","key","s2cell"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\s2-layer\\s2-utils.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// s2-geometry is a pure JavaScript port of Google/Niantic's S2 Geometry library\n// which is perfect since it works in the browser.\nimport {\n  toHilbertQuadkey,\n  FromHilbertQuadKey,\n  IJToST,\n  STToUV,\n  FaceUVToXYZ,\n  XYZToLngLat\n} from './s2-geometry';\nimport Long from 'long';\n\n/**\n * Given an S2 token this function convert the token to 64 bit id\n   https://github.com/google/s2-geometry-library-java/blob/c04b68bf3197a9c34082327eeb3aec7ab7c85da1/src/com/google/common/geometry/S2CellId.java#L439\n * */\nfunction getIdFromToken(token: string): number {\n  // pad token with zeros to make the length 16\n  const paddedToken = token.padEnd(16, '0');\n  return Long.fromString(paddedToken, 16);\n}\n\nconst MAX_RESOLUTION = 100;\n\n/* Adapted from s2-geometry's S2Cell.getCornerLatLngs */\n/* eslint-disable max-statements */\nfunction getGeoBounds({\n  face,\n  ij,\n  level\n}: {\n  face: number;\n  ij: [number, number];\n  level: number;\n}): Float64Array {\n  const offsets = [\n    [0, 0],\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [0, 0]\n  ];\n\n  // The S2 cell edge is curved: http://s2geometry.io/\n  // This is more prominent at lower levels\n  // resolution is the number of segments to generate per edge.\n  // We exponentially reduce resolution as level increases so it doesn't affect perf\n  // when there are a large number of cells\n  const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION * Math.pow(2, -level)));\n  const result = new Float64Array(4 * resolution * 2 + 2);\n  let ptIndex = 0;\n  let prevLng = 0;\n\n  for (let i = 0; i < 4; i++) {\n    const offset = offsets[i].slice(0) as [number, number];\n    const nextOffset = offsets[i + 1];\n    const stepI = (nextOffset[0] - offset[0]) / resolution;\n    const stepJ = (nextOffset[1] - offset[1]) / resolution;\n\n    for (let j = 0; j < resolution; j++) {\n      offset[0] += stepI;\n      offset[1] += stepJ;\n      // Cell can be represented by coordinates IJ, ST, UV, XYZ\n      // http://s2geometry.io/devguide/s2cell_hierarchy#coordinate-systems\n      const st = IJToST(ij, level, offset);\n      const uv = STToUV(st);\n      const xyz = FaceUVToXYZ(face, uv);\n      const lngLat = XYZToLngLat(xyz);\n\n      // Adjust longitude for Web Mercator projection\n      if (Math.abs(lngLat[1]) > 89.999) {\n        lngLat[0] = prevLng;\n      }\n      const deltaLng = lngLat[0] - prevLng;\n      lngLat[0] += deltaLng > 180 ? -360 : deltaLng < -180 ? 360 : 0;\n\n      result[ptIndex++] = lngLat[0];\n      result[ptIndex++] = lngLat[1];\n      prevLng = lngLat[0];\n    }\n  }\n  // close the loop\n  result[ptIndex++] = result[0];\n  result[ptIndex++] = result[1];\n  return result;\n}\n/* eslint-enable max-statements */\n\nexport function getS2QuadKey(token: string | number): string {\n  if (typeof token === 'string') {\n    if (token.indexOf('/') > 0) {\n      // is Hilbert quad key\n      return token;\n    }\n    // is S2 token\n    token = getIdFromToken(token);\n  }\n  // is Long id\n  return toHilbertQuadkey(token.toString());\n}\n\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param {*} cell - This can be an S2 key or token\n * @return {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2Polygon(token: string | number): Float64Array {\n  const key = getS2QuadKey(token);\n  const s2cell = FromHilbertQuadKey(key);\n\n  return getGeoBounds(s2cell);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}