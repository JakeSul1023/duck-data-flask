{"ast":null,"code":"// The MIT License (MIT)\n//\n// Copyright (c) 2016 Zhipeng Jia\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n'use strict';\n\nfunction isNode() {\n  if (typeof process === 'object') {\n    if (typeof process.versions === 'object') {\n      if (typeof process.versions.node !== 'undefined') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isUint8Array(object) {\n  return object instanceof Uint8Array && (!isNode() || !Buffer.isBuffer(object));\n}\nfunction isArrayBuffer(object) {\n  return object instanceof ArrayBuffer;\n}\nfunction isBuffer(object) {\n  if (!isNode()) {\n    return false;\n  }\n  return Buffer.isBuffer(object);\n}\nvar SnappyDecompressor = require('./snappy_decompressor').SnappyDecompressor;\nvar SnappyCompressor = require('./snappy_compressor').SnappyCompressor;\nvar TYPE_ERROR_MSG = 'Argument compressed must be type of ArrayBuffer, Buffer, or Uint8Array';\nfunction uncompress(compressed) {\n  if (!isUint8Array(compressed) && !isArrayBuffer(compressed) && !isBuffer(compressed)) {\n    throw new TypeError(TYPE_ERROR_MSG);\n  }\n  var uint8Mode = false;\n  var arrayBufferMode = false;\n  if (isUint8Array(compressed)) {\n    uint8Mode = true;\n  } else if (isArrayBuffer(compressed)) {\n    arrayBufferMode = true;\n    compressed = new Uint8Array(compressed);\n  }\n  var decompressor = new SnappyDecompressor(compressed);\n  var length = decompressor.readUncompressedLength();\n  if (length === -1) {\n    throw new Error('Invalid Snappy bitstream');\n  }\n  var uncompressed, uncompressedView;\n  if (uint8Mode) {\n    uncompressed = new Uint8Array(length);\n    if (!decompressor.uncompressToBuffer(uncompressed)) {\n      throw new Error('Invalid Snappy bitstream');\n    }\n  } else if (arrayBufferMode) {\n    uncompressed = new ArrayBuffer(length);\n    uncompressedView = new Uint8Array(uncompressed);\n    if (!decompressor.uncompressToBuffer(uncompressedView)) {\n      throw new Error('Invalid Snappy bitstream');\n    }\n  } else {\n    uncompressed = Buffer.alloc(length);\n    if (!decompressor.uncompressToBuffer(uncompressed)) {\n      throw new Error('Invalid Snappy bitstream');\n    }\n  }\n  return uncompressed;\n}\nfunction compress(uncompressed) {\n  if (!isUint8Array(uncompressed) && !isArrayBuffer(uncompressed) && !isBuffer(uncompressed)) {\n    throw new TypeError(TYPE_ERROR_MSG);\n  }\n  var uint8Mode = false;\n  var arrayBufferMode = false;\n  if (isUint8Array(uncompressed)) {\n    uint8Mode = true;\n  } else if (isArrayBuffer(uncompressed)) {\n    arrayBufferMode = true;\n    uncompressed = new Uint8Array(uncompressed);\n  }\n  var compressor = new SnappyCompressor(uncompressed);\n  var maxLength = compressor.maxCompressedLength();\n  var compressed, compressedView;\n  var length;\n  if (uint8Mode) {\n    compressed = new Uint8Array(maxLength);\n    length = compressor.compressToBuffer(compressed);\n  } else if (arrayBufferMode) {\n    compressed = new ArrayBuffer(maxLength);\n    compressedView = new Uint8Array(compressed);\n    length = compressor.compressToBuffer(compressedView);\n  } else {\n    compressed = Buffer.alloc(maxLength);\n    length = compressor.compressToBuffer(compressed);\n  }\n  if (!compressed.slice) {\n    // ie11\n    var compressedArray = new Uint8Array(Array.prototype.slice.call(compressed, 0, length));\n    if (uint8Mode) {\n      return compressedArray;\n    } else if (arrayBufferMode) {\n      return compressedArray.buffer;\n    } else {\n      throw new Error('Not implemented');\n    }\n  }\n  return compressed.slice(0, length);\n}\nexports.uncompress = uncompress;\nexports.compress = compress;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}