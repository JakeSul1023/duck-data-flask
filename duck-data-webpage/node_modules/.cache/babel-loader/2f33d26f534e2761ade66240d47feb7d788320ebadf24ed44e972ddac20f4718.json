{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* eslint-disable no-undef, no-console */\nimport { isArray } from '@math.gl/core';\nimport { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from \"./polygon-utils.js\";\nexport class Polygon {\n  constructor(points) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n    Object.freeze(this);\n  }\n  /**\n   * Returns signed area of the polygon.\n   * @returns Signed area of the polygon.\n   */\n  getSignedArea() {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n    return getPolygonSignedAreaPoints(this.points, this.options);\n  }\n  /**\n   * Returns absolute area of the polygon.\n   * @returns Absolute area of the polygon.\n   */\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n  /**\n   * Returns winding direction of the polygon.\n   * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n   */\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n  /**\n   * Calls the visitor callback for each segment in the polygon.\n   * @param visitor A callback to call for each segment.\n   */\n  forEachSegment(visitor) {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(this.points,\n      // eslint-disable-next-line max-params\n      (x1, y1, x2, y2, i1, i2) => {\n        // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n        visitor([x1, y1], [x2, y2], i1, i2);\n      }, this.options);\n    } else {\n      forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n    }\n  }\n  /**\n   * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n   * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n   * @return Returns true if the winding direction was changed.\n   */\n  modifyWindingDirection(direction) {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n  }\n}\n//# sourceMappingURL=polygon.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}