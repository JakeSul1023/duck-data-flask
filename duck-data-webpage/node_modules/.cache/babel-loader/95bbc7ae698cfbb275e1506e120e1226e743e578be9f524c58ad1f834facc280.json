{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst ERR_NOT_OBJECT = 'count(): argument not an object';\nconst ERR_NOT_CONTAINER = 'count(): argument not a container';\n/**\n * Deduces numer of elements in a JavaScript container.\n * - Auto-deduction for ES6 containers that define a count() method\n * - Auto-deduction for ES6 containers that define a size member\n * - Auto-deduction for Classic Arrays via the built-in length attribute\n * - Also handles objects, although note that this an O(N) operation\n */\nexport function count(container) {\n  if (!isObject(container)) {\n    throw new Error(ERR_NOT_OBJECT);\n  }\n  // Check if ES6 collection \"count\" function is available\n  if (typeof container.count === 'function') {\n    return container.count();\n  }\n  // Check if ES6 collection \"size\" attribute is set\n  if (Number.isFinite(container.size)) {\n    return container.size;\n  }\n  // Check if array length attribute is set\n  // Note: checking this last since some ES6 collections (Immutable.js)\n  // emit profuse warnings when trying to access `length` attribute\n  if (Number.isFinite(container.length)) {\n    return container.length;\n  }\n  // Note that getting the count of an object is O(N)\n  if (isPlainObject(container)) {\n    return Object.keys(container).length;\n  }\n  throw new Error(ERR_NOT_CONTAINER);\n}\n/**\n * Checks if argument is a plain object (not a class or array etc)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a plain JavaScript object\n */\nfunction isPlainObject(value) {\n  return value !== null && typeof value === 'object' && value.constructor === Object;\n}\n/**\n * Checks if argument is an indexable object (not a primitive value, nor null)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a JavaScript object\n */\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}","map":{"version":3,"names":["ERR_NOT_OBJECT","ERR_NOT_CONTAINER","count","container","isObject","Error","Number","isFinite","size","length","isPlainObject","Object","keys","value","constructor"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\utils\\count.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst ERR_NOT_OBJECT = 'count(): argument not an object';\nconst ERR_NOT_CONTAINER = 'count(): argument not a container';\n\n/**\n * Deduces numer of elements in a JavaScript container.\n * - Auto-deduction for ES6 containers that define a count() method\n * - Auto-deduction for ES6 containers that define a size member\n * - Auto-deduction for Classic Arrays via the built-in length attribute\n * - Also handles objects, although note that this an O(N) operation\n */\nexport function count(container: any): number {\n  if (!isObject(container)) {\n    throw new Error(ERR_NOT_OBJECT);\n  }\n\n  // Check if ES6 collection \"count\" function is available\n  if (typeof container.count === 'function') {\n    return container.count();\n  }\n\n  // Check if ES6 collection \"size\" attribute is set\n  if (Number.isFinite(container.size)) {\n    return container.size;\n  }\n\n  // Check if array length attribute is set\n  // Note: checking this last since some ES6 collections (Immutable.js)\n  // emit profuse warnings when trying to access `length` attribute\n  if (Number.isFinite(container.length)) {\n    return container.length;\n  }\n\n  // Note that getting the count of an object is O(N)\n  if (isPlainObject(container)) {\n    return Object.keys(container).length;\n  }\n\n  throw new Error(ERR_NOT_CONTAINER);\n}\n\n/**\n * Checks if argument is a plain object (not a class or array etc)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a plain JavaScript object\n */\nfunction isPlainObject(value) {\n  return value !== null && typeof value === 'object' && value.constructor === Object;\n}\n\n/**\n * Checks if argument is an indexable object (not a primitive value, nor null)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a JavaScript object\n */\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,cAAc,GAAG,iCAAiC;AACxD,MAAMC,iBAAiB,GAAG,mCAAmC;AAE7D;;;;;;;AAOA,OAAM,SAAUC,KAAKA,CAACC,SAAc;EAClC,IAAI,CAACC,QAAQ,CAACD,SAAS,CAAC,EAAE;IACxB,MAAM,IAAIE,KAAK,CAACL,cAAc,CAAC;EACjC;EAEA;EACA,IAAI,OAAOG,SAAS,CAACD,KAAK,KAAK,UAAU,EAAE;IACzC,OAAOC,SAAS,CAACD,KAAK,EAAE;EAC1B;EAEA;EACA,IAAII,MAAM,CAACC,QAAQ,CAACJ,SAAS,CAACK,IAAI,CAAC,EAAE;IACnC,OAAOL,SAAS,CAACK,IAAI;EACvB;EAEA;EACA;EACA;EACA,IAAIF,MAAM,CAACC,QAAQ,CAACJ,SAAS,CAACM,MAAM,CAAC,EAAE;IACrC,OAAON,SAAS,CAACM,MAAM;EACzB;EAEA;EACA,IAAIC,aAAa,CAACP,SAAS,CAAC,EAAE;IAC5B,OAAOQ,MAAM,CAACC,IAAI,CAACT,SAAS,CAAC,CAACM,MAAM;EACtC;EAEA,MAAM,IAAIJ,KAAK,CAACJ,iBAAiB,CAAC;AACpC;AAEA;;;;;AAKA,SAASS,aAAaA,CAACG,KAAK;EAC1B,OAAOA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,WAAW,KAAKH,MAAM;AACpF;AAEA;;;;;AAKA,SAASP,QAAQA,CAACS,KAAK;EACrB,OAAOA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}