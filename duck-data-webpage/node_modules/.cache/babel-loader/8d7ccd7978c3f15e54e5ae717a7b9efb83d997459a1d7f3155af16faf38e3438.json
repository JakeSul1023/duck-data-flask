{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\nimport { Texture } from \"./texture.js\";\nimport { log } from \"../../utils/log.js\";\n/**\n * Create new textures with correct size for all attachments.\n * @note resize() destroys existing textures (if size has changed).\n */\nexport class Framebuffer extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    width: 1,\n    height: 1,\n    colorAttachments: [],\n    // ['rgba8unorm'],\n    depthStencilAttachment: null // 'depth24plus-stencil8'\n  };\n  get [Symbol.toStringTag]() {\n    return 'Framebuffer';\n  }\n  /** Width of all attachments in this framebuffer */\n  width;\n  /** Height of all attachments in this framebuffer */\n  height;\n  constructor(device, props = {}) {\n    super(device, props, Framebuffer.defaultProps);\n    this.width = this.props.width;\n    this.height = this.props.height;\n  }\n  /**\n   * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.\n   * @note Does not copy contents of the attached textures.\n   */\n  clone(size) {\n    const colorAttachments = this.colorAttachments.map(colorAttachment => colorAttachment.texture.clone(size));\n    const depthStencilAttachment = this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);\n    return this.device.createFramebuffer({\n      ...this.props,\n      colorAttachments,\n      depthStencilAttachment\n    });\n  }\n  resize(size) {\n    let updateSize = !size;\n    if (size) {\n      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];\n      updateSize = updateSize || height !== this.height || width !== this.width;\n      this.width = width;\n      this.height = height;\n    }\n    if (updateSize) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();\n      this.resizeAttachments(this.width, this.height);\n    }\n  }\n  /** Auto creates any textures */\n  autoCreateAttachmentTextures() {\n    if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {\n      throw new Error('Framebuffer has noattachments');\n    }\n    this.colorAttachments = this.props.colorAttachments.map((attachment, index) => {\n      if (typeof attachment === 'string') {\n        const texture = this.createColorTexture(attachment, index);\n        this.attachResource(texture);\n        return texture.view;\n      }\n      if (attachment instanceof Texture) {\n        return attachment.view;\n      }\n      return attachment;\n    });\n    const attachment = this.props.depthStencilAttachment;\n    if (attachment) {\n      if (typeof attachment === 'string') {\n        const texture = this.createDepthStencilTexture(attachment);\n        this.attachResource(texture);\n        this.depthStencilAttachment = texture.view;\n      } else if (attachment instanceof Texture) {\n        this.depthStencilAttachment = attachment.view;\n      } else {\n        this.depthStencilAttachment = attachment;\n      }\n    }\n  }\n  /** Create a color texture */\n  createColorTexture(format, index) {\n    return this.device.createTexture({\n      id: `${this.id}-color-attachment-${index}`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n      // TODO deprecated? - luma.gl v8 compatibility\n      sampler: {\n        magFilter: 'linear',\n        minFilter: 'linear'\n      }\n    });\n  }\n  /** Create depth stencil texture */\n  createDepthStencilTexture(format) {\n    return this.device.createTexture({\n      id: `${this.id}-depth-stencil-attachment`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n      mipmaps: false\n    });\n  }\n  /**\n   * Default implementation of resize\n   * Creates new textures with correct size for all attachments.\n   * and destroys existing textures if owned\n   */\n  resizeAttachments(width, height) {\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      if (this.colorAttachments[i]) {\n        const resizedTexture = this.colorAttachments[i].texture.clone({\n          width,\n          height\n        });\n        this.destroyAttachedResource(this.colorAttachments[i]);\n        this.colorAttachments[i] = resizedTexture.view;\n        this.attachResource(resizedTexture.view);\n      }\n    }\n    if (this.depthStencilAttachment) {\n      const resizedTexture = this.depthStencilAttachment.texture.clone({\n        width,\n        height\n      });\n      this.destroyAttachedResource(this.depthStencilAttachment);\n      this.depthStencilAttachment = resizedTexture.view;\n      this.attachResource(resizedTexture);\n    }\n    this.updateAttachments();\n  }\n}","map":{"version":3,"names":["Resource","Texture","log","Framebuffer","defaultProps","width","height","colorAttachments","depthStencilAttachment","Symbol","toStringTag","constructor","device","props","clone","size","map","colorAttachment","texture","createFramebuffer","resize","updateSize","Array","isArray","id","resizeAttachments","autoCreateAttachmentTextures","length","Error","attachment","index","createColorTexture","attachResource","view","createDepthStencilTexture","format","createTexture","usage","RENDER_ATTACHMENT","sampler","magFilter","minFilter","mipmaps","i","resizedTexture","destroyAttachedResource","updateAttachments"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\framebuffer.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  ColorTextureFormat,\n  DepthStencilTextureFormat,\n  TextureFormat\n} from '../../gpu-type-utils/texture-formats';\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\nimport {Texture} from './texture';\nimport {TextureView} from './texture-view';\nimport {log} from '../../utils/log';\n\nexport type FramebufferProps = ResourceProps & {\n  width?: number;\n  height?: number;\n  colorAttachments?: (TextureView | Texture | ColorTextureFormat)[];\n  depthStencilAttachment?: (TextureView | Texture | DepthStencilTextureFormat) | null;\n};\n\n/**\n * Create new textures with correct size for all attachments.\n * @note resize() destroys existing textures (if size has changed).\n */\nexport abstract class Framebuffer extends Resource<FramebufferProps> {\n  static override defaultProps: Required<FramebufferProps> = {\n    ...Resource.defaultProps,\n    width: 1,\n    height: 1,\n    colorAttachments: [], // ['rgba8unorm'],\n    depthStencilAttachment: null // 'depth24plus-stencil8'\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'Framebuffer';\n  }\n\n  /** Width of all attachments in this framebuffer */\n  width: number;\n  /** Height of all attachments in this framebuffer */\n  height: number;\n  /** Color attachments */\n  abstract colorAttachments: TextureView[];\n  /** Depth-stencil attachment, if provided */\n  abstract depthStencilAttachment: TextureView | null;\n\n  constructor(device: Device, props: FramebufferProps = {}) {\n    super(device, props, Framebuffer.defaultProps);\n    this.width = this.props.width;\n    this.height = this.props.height;\n  }\n\n  /**\n   * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.\n   * @note Does not copy contents of the attached textures.\n   */\n  clone(size?: {width: number; height: number}): Framebuffer {\n    const colorAttachments = this.colorAttachments.map(colorAttachment =>\n      colorAttachment.texture.clone(size)\n    );\n\n    const depthStencilAttachment =\n      this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);\n\n    return this.device.createFramebuffer({...this.props, colorAttachments, depthStencilAttachment});\n  }\n\n  /**\n   * Resizes all attachments\n   * @note resize() destroys existing textures (if size has changed).\n   * @deprecated Use framebuffer.clone()\n   */\n  resize(size: {width: number; height: number}): void;\n  resize(size: [width: number, height: number]): void;\n  resize(): void;\n  resize(size?: {width: number; height: number} | [width: number, height: number]): void {\n    let updateSize: boolean = !size;\n    if (size) {\n      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];\n      updateSize = updateSize || height !== this.height || width !== this.width;\n      this.width = width;\n      this.height = height;\n    }\n    if (updateSize) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();\n      this.resizeAttachments(this.width, this.height);\n    }\n  }\n\n  /** Auto creates any textures */\n  protected autoCreateAttachmentTextures(): void {\n    if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {\n      throw new Error('Framebuffer has noattachments');\n    }\n\n    this.colorAttachments = this.props.colorAttachments.map((attachment, index) => {\n      if (typeof attachment === 'string') {\n        const texture = this.createColorTexture(attachment, index);\n        this.attachResource(texture);\n        return texture.view;\n      }\n      if (attachment instanceof Texture) {\n        return attachment.view;\n      }\n      return attachment;\n    });\n\n    const attachment = this.props.depthStencilAttachment;\n    if (attachment) {\n      if (typeof attachment === 'string') {\n        const texture = this.createDepthStencilTexture(attachment);\n        this.attachResource(texture);\n        this.depthStencilAttachment = texture.view;\n      } else if (attachment instanceof Texture) {\n        this.depthStencilAttachment = attachment.view;\n      } else {\n        this.depthStencilAttachment = attachment;\n      }\n    }\n  }\n\n  /** Create a color texture */\n  protected createColorTexture(format: TextureFormat, index: number): Texture {\n    return this.device.createTexture({\n      id: `${this.id}-color-attachment-${index}`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n      // TODO deprecated? - luma.gl v8 compatibility\n      sampler: {\n        magFilter: 'linear',\n        minFilter: 'linear'\n      }\n    });\n  }\n\n  /** Create depth stencil texture */\n  protected createDepthStencilTexture(format: TextureFormat): Texture {\n    return this.device.createTexture({\n      id: `${this.id}-depth-stencil-attachment`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n      mipmaps: false\n    });\n  }\n\n  /**\n   * Default implementation of resize\n   * Creates new textures with correct size for all attachments.\n   * and destroys existing textures if owned\n   */\n  protected resizeAttachments(width: number, height: number): void {\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      if (this.colorAttachments[i]) {\n        const resizedTexture = this.colorAttachments[i].texture.clone({\n          width,\n          height\n        });\n        this.destroyAttachedResource(this.colorAttachments[i]);\n        this.colorAttachments[i] = resizedTexture.view;\n        this.attachResource(resizedTexture.view);\n      }\n    }\n\n    if (this.depthStencilAttachment) {\n      const resizedTexture = this.depthStencilAttachment.texture.clone({\n        width,\n        height\n      });\n      this.destroyAttachedResource(this.depthStencilAttachment);\n      this.depthStencilAttachment = resizedTexture.view;\n      this.attachResource(resizedTexture);\n    }\n\n    this.updateAttachments();\n  }\n\n  /** Implementation is expected to update any underlying binding (WebGL framebuffer attachment) */\n  protected abstract updateAttachments(): void;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}