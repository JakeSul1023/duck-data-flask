{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { GL } from \"../constants.js\";\nimport { assert } from \"../utils/assert.js\";\nimport { makePrimitiveIterator } from \"../iterators/primitive-iterator.js\";\nimport { getPrimitiveModeType } from \"../primitives/modes.js\";\nimport { getPositions } from \"./get-attribute-from-geometry.js\";\n/**\n * Computes vertex normals for a geometry\n * @param param0\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport function computeVertexNormals(geometry) {\n  // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n  assert(getPrimitiveModeType(geometry.mode) === GL.TRIANGLES, 'TRIANGLES required');\n  const {\n    values: positions\n  } = getPositions(geometry);\n  const normals = new Float32Array(positions.length);\n  const vectorA = new Vector3();\n  const vectorB = new Vector3();\n  const vectorC = new Vector3();\n  const vectorCB = new Vector3();\n  const vectorAB = new Vector3();\n  for (const primitive of makePrimitiveIterator(geometry)) {\n    vectorA.fromArray(positions, primitive.i1 * 3);\n    vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n    vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n    vectorCB.subVectors(vectorC, vectorB);\n    vectorAB.subVectors(vectorA, vectorB);\n    const normal = vectorCB.cross(vectorAB);\n    normal.normalize();\n    // @ts-ignore\n    const {\n      primitiveIndex\n    } = primitive;\n    normals[primitiveIndex * 9 + 0] = normal.x;\n    normals[primitiveIndex * 9 + 1] = normal.y;\n    normals[primitiveIndex * 9 + 2] = normal.z;\n    normals[primitiveIndex * 9 + 3] = normal.x;\n    normals[primitiveIndex * 9 + 4] = normal.y;\n    normals[primitiveIndex * 9 + 5] = normal.z;\n    normals[primitiveIndex * 9 + 6] = normal.x;\n    normals[primitiveIndex * 9 + 7] = normal.y;\n    normals[primitiveIndex * 9 + 8] = normal.z;\n  }\n  return normals;\n}","map":{"version":3,"names":["Vector3","GL","assert","makePrimitiveIterator","getPrimitiveModeType","getPositions","computeVertexNormals","geometry","mode","TRIANGLES","values","positions","normals","Float32Array","length","vectorA","vectorB","vectorC","vectorCB","vectorAB","primitive","fromArray","i1","i2","i3","subVectors","normal","cross","normalize","primitiveIndex","x","y","z"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/math/dist/geometry/attributes/compute-vertex-normals.js"],"sourcesContent":["import { Vector3 } from '@math.gl/core';\nimport { GL } from \"../constants.js\";\nimport { assert } from \"../utils/assert.js\";\nimport { makePrimitiveIterator } from \"../iterators/primitive-iterator.js\";\nimport { getPrimitiveModeType } from \"../primitives/modes.js\";\nimport { getPositions } from \"./get-attribute-from-geometry.js\";\n/**\n * Computes vertex normals for a geometry\n * @param param0\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport function computeVertexNormals(geometry) {\n    // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n    assert(getPrimitiveModeType(geometry.mode) === GL.TRIANGLES, 'TRIANGLES required');\n    const { values: positions } = getPositions(geometry);\n    const normals = new Float32Array(positions.length);\n    const vectorA = new Vector3();\n    const vectorB = new Vector3();\n    const vectorC = new Vector3();\n    const vectorCB = new Vector3();\n    const vectorAB = new Vector3();\n    for (const primitive of makePrimitiveIterator(geometry)) {\n        vectorA.fromArray(positions, primitive.i1 * 3);\n        vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n        vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n        vectorCB.subVectors(vectorC, vectorB);\n        vectorAB.subVectors(vectorA, vectorB);\n        const normal = vectorCB.cross(vectorAB);\n        normal.normalize();\n        // @ts-ignore\n        const { primitiveIndex } = primitive;\n        normals[primitiveIndex * 9 + 0] = normal.x;\n        normals[primitiveIndex * 9 + 1] = normal.y;\n        normals[primitiveIndex * 9 + 2] = normal.z;\n        normals[primitiveIndex * 9 + 3] = normal.x;\n        normals[primitiveIndex * 9 + 4] = normal.y;\n        normals[primitiveIndex * 9 + 5] = normal.z;\n        normals[primitiveIndex * 9 + 6] = normal.x;\n        normals[primitiveIndex * 9 + 7] = normal.y;\n        normals[primitiveIndex * 9 + 8] = normal.z;\n    }\n    return normals;\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,EAAE,QAAQ,iBAAiB;AACpC,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,qBAAqB,QAAQ,oCAAoC;AAC1E,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,YAAY,QAAQ,kCAAkC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,QAAQ,EAAE;EAC3C;EACAL,MAAM,CAACE,oBAAoB,CAACG,QAAQ,CAACC,IAAI,CAAC,KAAKP,EAAE,CAACQ,SAAS,EAAE,oBAAoB,CAAC;EAClF,MAAM;IAAEC,MAAM,EAAEC;EAAU,CAAC,GAAGN,YAAY,CAACE,QAAQ,CAAC;EACpD,MAAMK,OAAO,GAAG,IAAIC,YAAY,CAACF,SAAS,CAACG,MAAM,CAAC;EAClD,MAAMC,OAAO,GAAG,IAAIf,OAAO,CAAC,CAAC;EAC7B,MAAMgB,OAAO,GAAG,IAAIhB,OAAO,CAAC,CAAC;EAC7B,MAAMiB,OAAO,GAAG,IAAIjB,OAAO,CAAC,CAAC;EAC7B,MAAMkB,QAAQ,GAAG,IAAIlB,OAAO,CAAC,CAAC;EAC9B,MAAMmB,QAAQ,GAAG,IAAInB,OAAO,CAAC,CAAC;EAC9B,KAAK,MAAMoB,SAAS,IAAIjB,qBAAqB,CAACI,QAAQ,CAAC,EAAE;IACrDQ,OAAO,CAACM,SAAS,CAACV,SAAS,EAAES,SAAS,CAACE,EAAE,GAAG,CAAC,CAAC;IAC9CN,OAAO,CAACK,SAAS,CAACV,SAAS,EAAES,SAAS,CAACG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAClDN,OAAO,CAACI,SAAS,CAACV,SAAS,EAAES,SAAS,CAACI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAClDN,QAAQ,CAACO,UAAU,CAACR,OAAO,EAAED,OAAO,CAAC;IACrCG,QAAQ,CAACM,UAAU,CAACV,OAAO,EAAEC,OAAO,CAAC;IACrC,MAAMU,MAAM,GAAGR,QAAQ,CAACS,KAAK,CAACR,QAAQ,CAAC;IACvCO,MAAM,CAACE,SAAS,CAAC,CAAC;IAClB;IACA,MAAM;MAAEC;IAAe,CAAC,GAAGT,SAAS;IACpCR,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACI,CAAC;IAC1ClB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACK,CAAC;IAC1CnB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACM,CAAC;IAC1CpB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACI,CAAC;IAC1ClB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACK,CAAC;IAC1CnB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACM,CAAC;IAC1CpB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACI,CAAC;IAC1ClB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACK,CAAC;IAC1CnB,OAAO,CAACiB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACM,CAAC;EAC9C;EACA,OAAOpB,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}