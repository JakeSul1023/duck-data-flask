{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport class HttpFile {\n  handle;\n  size = 0;\n  bigsize = 0n;\n  url;\n  constructor(url) {\n    this.handle = url;\n    this.url = url;\n  }\n  async close() {}\n  async stat() {\n    const response = await fetch(this.handle, {\n      method: 'HEAD'\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch HEAD ${this.handle}`);\n    }\n    const size = parseInt(response.headers.get('Content-Length') || '0');\n    return {\n      size,\n      bigsize: BigInt(size),\n      isDirectory: false\n    };\n  }\n  async read() {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const response = await this.fetchRange(offset, length);\n    const arrayBuffer = await response.arrayBuffer();\n    return arrayBuffer;\n  }\n  /**\n   *\n   * @param offset\n   * @param length\n   * @param signal\n   * @returns\n   * @see https://github.com/protomaps/PMTiles\n   */\n  // eslint-disable-next-line complexity\n  async fetchRange(offset, length, signal) {\n    const nOffset = Number(offset);\n    const nLength = Number(length);\n    let controller;\n    if (!signal) {\n      // ToDO why is it so important to abort in case 200?\n      // TODO check this works or assert 206\n      controller = new AbortController();\n      signal = controller.signal;\n    }\n    const url = this.handle;\n    let response = await fetch(url, {\n      signal,\n      headers: {\n        Range: `bytes=${nOffset}-${nOffset + nLength - 1}`\n      }\n    });\n    switch (response.status) {\n      case 206:\n        // Partial Content success\n        // This is the expected success code for a range request\n        break;\n      case 200:\n        // some well-behaved backends, e.g. DigitalOcean CDN, respond with 200 instead of 206\n        // but we also need to detect no support for Byte Serving which is returning the whole file\n        const contentLength = response.headers.get('Content-Length');\n        if (!contentLength || Number(contentLength) > length) {\n          if (controller) {\n            controller.abort();\n          }\n          throw Error('content-length header missing or exceeding request. Server must support HTTP Byte Serving.');\n        }\n      // @eslint-disable-next-line no-fallthrough\n      case 416:\n        // \"Range Not Satisfiable\"\n        // some HTTP servers don't accept ranges beyond the end of the resource.\n        // Retry with the exact length\n        // TODO: can return 416 with offset > 0 if content changed, which will have a blank etag.\n        // See https://github.com/protomaps/PMTiles/issues/90\n        if (offset === 0) {\n          const contentRange = response.headers.get('Content-Range');\n          if (!contentRange || !contentRange.startsWith('bytes *')) {\n            throw Error('Missing content-length on 416 response');\n          }\n          const actualLength = Number(contentRange.substr(8));\n          response = await fetch(this.url, {\n            signal,\n            headers: {\n              Range: `bytes=0-${actualLength - 1}`\n            }\n          });\n        }\n        break;\n      default:\n        if (response.status >= 300) {\n          throw Error(`Bad response code: ${response.status}`);\n        }\n    }\n    return response;\n    // const data = await response.arrayBuffer();\n    // return {\n    //   data,\n    //   etag: response.headers.get('ETag') || undefined,\n    //   cacheControl: response.headers.get('Cache-Control') || undefined,\n    //   expires: response.headers.get('Expires') || undefined\n    // };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}