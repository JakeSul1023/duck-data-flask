{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { equals } from '@math.gl/core';\nimport assert from \"../utils/assert.js\";\nexport default class TransitionInterpolator {\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts) {\n    const {\n      compare,\n      extract,\n      required\n    } = opts;\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps, nextProps) {\n    for (const key of this._propsToCompare) {\n      if (!(key in currentProps) || !(key in nextProps) || !equals(currentProps[key], nextProps[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(startProps, endProps) {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n    this._checkRequiredProps(startViewStateProps);\n    this._checkRequiredProps(endViewStateProps);\n    return {\n      start: startViewStateProps,\n      end: endViewStateProps\n    };\n  }\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps, endProps) {\n    return endProps.transitionDuration;\n  }\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(Number.isFinite(value) || Array.isArray(value), `${propName} is required for transition`);\n    });\n  }\n}\n//# sourceMappingURL=transition-interpolator.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}