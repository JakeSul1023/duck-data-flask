{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc\n/* global TextEncoder, TextDecoder */\nimport { concatenateArrayBuffers } from '@loaders.gl/loader-utils';\nexport async function encodeTable(data, writer, options) {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n  if (writer.encodeText) {\n    const text = await writer.encodeText(data, options);\n    return new TextEncoder().encode(text);\n  }\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeTableInBatches(data, writer, options);\n    // Concatenate the output\n    const chunks = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    return concatenateArrayBuffers(...chunks);\n  }\n  throw new Error('Writer could not encode data');\n}\nexport async function encodeTableAsText(data, writer, options) {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n  if (writer.text) {\n    const arrayBuffer = await encodeTable(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n  throw new Error(`Writer ${writer.name} could not encode data as text`);\n}\nexport function encodeTableInBatches(data, writer, options) {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    // @ts-expect-error\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\nfunction getIterator(data) {\n  const dataIterator = [{\n    ...data,\n    start: 0,\n    end: data.length\n  }];\n  return dataIterator;\n}","map":{"version":3,"names":["concatenateArrayBuffers","encodeTable","data","writer","options","encode","encodeText","text","TextEncoder","encodeInBatches","batches","encodeTableInBatches","chunks","batch","push","Error","encodeTableAsText","arrayBuffer","TextDecoder","decode","name","dataIterator","getIterator","start","end","length"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/api/encode-table.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc\n/* global TextEncoder, TextDecoder */\nimport { concatenateArrayBuffers } from '@loaders.gl/loader-utils';\nexport async function encodeTable(data, writer, options) {\n    if (writer.encode) {\n        return await writer.encode(data, options);\n    }\n    if (writer.encodeText) {\n        const text = await writer.encodeText(data, options);\n        return new TextEncoder().encode(text);\n    }\n    if (writer.encodeInBatches) {\n        // Create an iterator representing the data\n        // TODO - Assumes this is a table\n        const batches = encodeTableInBatches(data, writer, options);\n        // Concatenate the output\n        const chunks = [];\n        for await (const batch of batches) {\n            chunks.push(batch);\n        }\n        return concatenateArrayBuffers(...chunks);\n    }\n    throw new Error('Writer could not encode data');\n}\nexport async function encodeTableAsText(data, writer, options) {\n    if (writer.text && writer.encodeText) {\n        return await writer.encodeText(data, options);\n    }\n    if (writer.text) {\n        const arrayBuffer = await encodeTable(data, writer, options);\n        return new TextDecoder().decode(arrayBuffer);\n    }\n    throw new Error(`Writer ${writer.name} could not encode data as text`);\n}\nexport function encodeTableInBatches(data, writer, options) {\n    if (writer.encodeInBatches) {\n        const dataIterator = getIterator(data);\n        // @ts-expect-error\n        return writer.encodeInBatches(dataIterator, options);\n    }\n    // TODO -fall back to atomic encode?\n    throw new Error('Writer could not encode data in batches');\n}\nfunction getIterator(data) {\n    const dataIterator = [{ ...data, start: 0, end: data.length }];\n    return dataIterator;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAuB,QAAQ,0BAA0B;AAClE,OAAO,eAAeC,WAAWA,CAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACrD,IAAID,MAAM,CAACE,MAAM,EAAE;IACf,OAAO,MAAMF,MAAM,CAACE,MAAM,CAACH,IAAI,EAAEE,OAAO,CAAC;EAC7C;EACA,IAAID,MAAM,CAACG,UAAU,EAAE;IACnB,MAAMC,IAAI,GAAG,MAAMJ,MAAM,CAACG,UAAU,CAACJ,IAAI,EAAEE,OAAO,CAAC;IACnD,OAAO,IAAII,WAAW,CAAC,CAAC,CAACH,MAAM,CAACE,IAAI,CAAC;EACzC;EACA,IAAIJ,MAAM,CAACM,eAAe,EAAE;IACxB;IACA;IACA,MAAMC,OAAO,GAAGC,oBAAoB,CAACT,IAAI,EAAEC,MAAM,EAAEC,OAAO,CAAC;IAC3D;IACA,MAAMQ,MAAM,GAAG,EAAE;IACjB,WAAW,MAAMC,KAAK,IAAIH,OAAO,EAAE;MAC/BE,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC;IACtB;IACA,OAAOb,uBAAuB,CAAC,GAAGY,MAAM,CAAC;EAC7C;EACA,MAAM,IAAIG,KAAK,CAAC,8BAA8B,CAAC;AACnD;AACA,OAAO,eAAeC,iBAAiBA,CAACd,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC3D,IAAID,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACG,UAAU,EAAE;IAClC,OAAO,MAAMH,MAAM,CAACG,UAAU,CAACJ,IAAI,EAAEE,OAAO,CAAC;EACjD;EACA,IAAID,MAAM,CAACI,IAAI,EAAE;IACb,MAAMU,WAAW,GAAG,MAAMhB,WAAW,CAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,CAAC;IAC5D,OAAO,IAAIc,WAAW,CAAC,CAAC,CAACC,MAAM,CAACF,WAAW,CAAC;EAChD;EACA,MAAM,IAAIF,KAAK,CAAC,UAAUZ,MAAM,CAACiB,IAAI,gCAAgC,CAAC;AAC1E;AACA,OAAO,SAAST,oBAAoBA,CAACT,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACxD,IAAID,MAAM,CAACM,eAAe,EAAE;IACxB,MAAMY,YAAY,GAAGC,WAAW,CAACpB,IAAI,CAAC;IACtC;IACA,OAAOC,MAAM,CAACM,eAAe,CAACY,YAAY,EAAEjB,OAAO,CAAC;EACxD;EACA;EACA,MAAM,IAAIW,KAAK,CAAC,yCAAyC,CAAC;AAC9D;AACA,SAASO,WAAWA,CAACpB,IAAI,EAAE;EACvB,MAAMmB,YAAY,GAAG,CAAC;IAAE,GAAGnB,IAAI;IAAEqB,KAAK,EAAE,CAAC;IAAEC,GAAG,EAAEtB,IAAI,CAACuB;EAAO,CAAC,CAAC;EAC9D,OAAOJ,YAAY;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}