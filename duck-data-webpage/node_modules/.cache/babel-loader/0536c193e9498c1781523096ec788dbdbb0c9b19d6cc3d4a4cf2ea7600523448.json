{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"preact/jsx-runtime\";\n// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* global document */\nimport { FlyToInterpolator, LinearInterpolator, _deepEqual as deepEqual, _applyStyles as applyStyles, _removeStyles as removeStyles } from '@deck.gl/core';\nimport { render } from 'preact';\nimport { ButtonGroup, GroupedIconButton } from \"./components.js\";\nexport class ZoomWidget {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.id = 'zoom';\n    this.placement = 'top-left';\n    this.viewId = null;\n    this.viewports = {};\n    this.id = props.id ?? this.id;\n    this.viewId = props.viewId ?? this.viewId;\n    this.placement = props.placement ?? this.placement;\n    this.props = {\n      ...ZoomWidget.defaultProps,\n      ...props\n    };\n  }\n  onAdd(_ref) {\n    let {\n      deck\n    } = _ref;\n    const {\n      style,\n      className\n    } = this.props;\n    const element = document.createElement('div');\n    element.classList.add('deck-widget', 'deck-widget-zoom');\n    if (className) element.classList.add(className);\n    applyStyles(element, style);\n    this.deck = deck;\n    this.element = element;\n    this.update();\n    return element;\n  }\n  onRemove() {\n    this.deck = undefined;\n    this.element = undefined;\n  }\n  setProps(props) {\n    this.placement = props.placement ?? this.placement;\n    this.viewId = props.viewId ?? this.viewId;\n    const oldProps = this.props;\n    const el = this.element;\n    if (el) {\n      if (oldProps.className !== props.className) {\n        if (oldProps.className) el.classList.remove(oldProps.className);\n        if (props.className) el.classList.add(props.className);\n      }\n      if (!deepEqual(oldProps.style, props.style, 1)) {\n        removeStyles(el, oldProps.style);\n        applyStyles(el, props.style);\n      }\n    }\n    Object.assign(this.props, props);\n    this.update();\n  }\n  onViewportChange(viewport) {\n    this.viewports[viewport.id] = viewport;\n  }\n  handleZoom(viewport, nextZoom) {\n    const viewId = this.viewId || viewport?.id || 'default-view';\n    const nextViewState = {\n      ...viewport,\n      zoom: nextZoom\n    };\n    if (this.props.transitionDuration > 0) {\n      nextViewState.transitionDuration = this.props.transitionDuration;\n      nextViewState.transitionInterpolator = 'latitude' in nextViewState ? new FlyToInterpolator() : new LinearInterpolator();\n    }\n    this.setViewState(viewId, nextViewState);\n  }\n  handleZoomIn() {\n    for (const viewport of Object.values(this.viewports)) {\n      this.handleZoom(viewport, viewport.zoom + 1);\n    }\n  }\n  handleZoomOut() {\n    for (const viewport of Object.values(this.viewports)) {\n      this.handleZoom(viewport, viewport.zoom - 1);\n    }\n  }\n  /**\n   * @todo - move to deck or widget manager\n   */\n  setViewState(viewId, viewState) {\n    // @ts-ignore Using private method temporary until there's a public one\n    this.deck._onViewStateChange({\n      viewId,\n      viewState,\n      interactionState: {}\n    });\n  }\n  update() {\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n    const ui = _jsxs(ButtonGroup, {\n      orientation: this.props.orientation,\n      children: [_jsx(GroupedIconButton, {\n        onClick: () => this.handleZoomIn(),\n        label: this.props.zoomInLabel,\n        className: \"deck-widget-zoom-in\"\n      }), _jsx(GroupedIconButton, {\n        onClick: () => this.handleZoomOut(),\n        label: this.props.zoomOutLabel,\n        className: \"deck-widget-zoom-out\"\n      })]\n    });\n    render(ui, element);\n  }\n}\nZoomWidget.defaultProps = {\n  id: 'zoom-widget',\n  style: {},\n  placement: 'top-left',\n  className: undefined,\n  orientation: 'vertical',\n  transitionDuration: 200,\n  zoomInLabel: 'Zoom In',\n  zoomOutLabel: 'Zoom Out',\n  viewId: undefined\n};\n//# sourceMappingURL=zoom-widget.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}