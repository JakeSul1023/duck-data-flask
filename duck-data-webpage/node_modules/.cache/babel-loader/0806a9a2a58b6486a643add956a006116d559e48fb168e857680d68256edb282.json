{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ClipSpace } from \"./clip-space.js\";\nconst BACKGROUND_FS_WGSL = /* wgsl */`\\\n@group(0) @binding(0) var backgroundTexture: texture_2d<f32>;\n@group(0) @binding(1) var backgroundTextureSampler: sampler;\n\nfn billboardTexture_getTextureUV(coordinates: vec2<f32>) -> vec2<f32> {\n\tlet iTexSize: vec2<u32> = textureDimensions(backgroundTexture, 0) * 2;\n\tlet texSize: vec2<f32> = vec2<f32>(f32(iTexSize.x), f32(iTexSize.y));\n\tvar position: vec2<f32> = coordinates.xy / texSize;\n\treturn position;\n} \n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n\tlet position: vec2<f32> = billboardTexture_getTextureUV(inputs.coordinate);\n\treturn textureSample(backgroundTexture, backgroundTextureSampler, position);\n}\n`;\nconst BACKGROUND_FS = /* glsl */`\\\n#version 300 es\nprecision highp float;\n\nuniform sampler2D backgroundTexture;\nout vec4 fragColor;\n\nvec2 billboardTexture_getTextureUV() {\n  ivec2 iTexSize = textureDimensions(backgroundTexture, 0) * 2;\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n  vec2 position = gl_FragCoord.xy / texSize;\n  return position;\n}\n\nvoid main(void) {\n  vec2 position = billboardTexture_getTextureUV();\n  fragColor = texture(backgroundTexture, position);\n}\n`;\n/**\n * Model that renders a bitmap into the \"background\", i.e covering the screen\n */\nexport class BackgroundTextureModel extends ClipSpace {\n  constructor(device, props) {\n    super(device, {\n      id: props.id || 'background-texture-model',\n      source: BACKGROUND_FS_WGSL,\n      fs: BACKGROUND_FS,\n      parameters: {\n        depthWriteEnabled: false,\n        depthCompare: 'always',\n        ...(props.blend ? {\n          blend: true,\n          blendColorOperation: 'add',\n          blendAlphaOperation: 'add',\n          blendColorSrcFactor: 'one',\n          blendColorDstFactor: 'one-minus-src-color',\n          blendAlphaSrcFactor: 'one',\n          blendAlphaDstFactor: 'one-minus-src-alpha'\n        } : {})\n      }\n    });\n    this.setTexture(props.backgroundTexture);\n  }\n  setTexture(backgroundTexture) {\n    this.setBindings({\n      backgroundTexture\n    });\n  }\n  predraw() {\n    this.shaderInputs.setProps({});\n    super.predraw();\n  }\n}","map":{"version":3,"names":["ClipSpace","BACKGROUND_FS_WGSL","BACKGROUND_FS","BackgroundTextureModel","constructor","device","props","id","source","fs","parameters","depthWriteEnabled","depthCompare","blend","blendColorOperation","blendAlphaOperation","blendColorSrcFactor","blendColorDstFactor","blendAlphaSrcFactor","blendAlphaDstFactor","setTexture","backgroundTexture","setBindings","predraw","shaderInputs","setProps"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\models\\billboard-texture-model.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device, Texture} from '@luma.gl/core';\nimport {AsyncTexture} from '../async-texture/async-texture';\nimport {ClipSpace} from './clip-space';\n\nconst BACKGROUND_FS_WGSL = /* wgsl */ `\\\n@group(0) @binding(0) var backgroundTexture: texture_2d<f32>;\n@group(0) @binding(1) var backgroundTextureSampler: sampler;\n\nfn billboardTexture_getTextureUV(coordinates: vec2<f32>) -> vec2<f32> {\n\tlet iTexSize: vec2<u32> = textureDimensions(backgroundTexture, 0) * 2;\n\tlet texSize: vec2<f32> = vec2<f32>(f32(iTexSize.x), f32(iTexSize.y));\n\tvar position: vec2<f32> = coordinates.xy / texSize;\n\treturn position;\n} \n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n\tlet position: vec2<f32> = billboardTexture_getTextureUV(inputs.coordinate);\n\treturn textureSample(backgroundTexture, backgroundTextureSampler, position);\n}\n`;\n\nconst BACKGROUND_FS = /* glsl */ `\\\n#version 300 es\nprecision highp float;\n\nuniform sampler2D backgroundTexture;\nout vec4 fragColor;\n\nvec2 billboardTexture_getTextureUV() {\n  ivec2 iTexSize = textureDimensions(backgroundTexture, 0) * 2;\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n  vec2 position = gl_FragCoord.xy / texSize;\n  return position;\n}\n\nvoid main(void) {\n  vec2 position = billboardTexture_getTextureUV();\n  fragColor = texture(backgroundTexture, position);\n}\n`;\n\n/**\n * Props for a Model that renders a bitmap into the \"background\", i.e covering the screen\n */\nexport type BackgroundTextureModelProps = {\n  /** id of this model */\n  id?: string;\n  /** The texture to render */\n  backgroundTexture: Texture | AsyncTexture;\n  /** If true, the texture is rendered into transparent areas of the screen only, i.e blended in where background alpha is small */\n  blend?: boolean;\n};\n\n/**\n * Model that renders a bitmap into the \"background\", i.e covering the screen\n */\nexport class BackgroundTextureModel extends ClipSpace {\n  constructor(device: Device, props: BackgroundTextureModelProps) {\n    super(device, {\n      id: props.id || 'background-texture-model',\n      source: BACKGROUND_FS_WGSL,\n      fs: BACKGROUND_FS,\n      parameters: {\n        depthWriteEnabled: false,\n        depthCompare: 'always',\n        ...(props.blend\n          ? {\n              blend: true,\n              blendColorOperation: 'add',\n              blendAlphaOperation: 'add',\n              blendColorSrcFactor: 'one',\n              blendColorDstFactor: 'one-minus-src-color',\n              blendAlphaSrcFactor: 'one',\n              blendAlphaDstFactor: 'one-minus-src-alpha'\n            }\n          : {})\n      }\n    });\n\n    this.setTexture(props.backgroundTexture);\n  }\n\n  setTexture(backgroundTexture: Texture | AsyncTexture): void {\n    this.setBindings({\n      backgroundTexture\n    });\n  }\n\n  override predraw(): void {\n    this.shaderInputs.setProps({});\n    super.predraw();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,SAAS,QAAC;AAElB,MAAMC,kBAAkB,GAAG,UAAW;;;;;;;;;;;;;;;;CAgBrC;AAED,MAAMC,aAAa,GAAG,UAAW;;;;;;;;;;;;;;;;;;CAkBhC;AAcD;;;AAGA,OAAM,MAAOC,sBAAuB,SAAQH,SAAS;EACnDI,YAAYC,MAAc,EAAEC,KAAkC;IAC5D,KAAK,CAACD,MAAM,EAAE;MACZE,EAAE,EAAED,KAAK,CAACC,EAAE,IAAI,0BAA0B;MAC1CC,MAAM,EAAEP,kBAAkB;MAC1BQ,EAAE,EAAEP,aAAa;MACjBQ,UAAU,EAAE;QACVC,iBAAiB,EAAE,KAAK;QACxBC,YAAY,EAAE,QAAQ;QACtB,IAAIN,KAAK,CAACO,KAAK,GACX;UACEA,KAAK,EAAE,IAAI;UACXC,mBAAmB,EAAE,KAAK;UAC1BC,mBAAmB,EAAE,KAAK;UAC1BC,mBAAmB,EAAE,KAAK;UAC1BC,mBAAmB,EAAE,qBAAqB;UAC1CC,mBAAmB,EAAE,KAAK;UAC1BC,mBAAmB,EAAE;SACtB,GACD,EAAE;;KAET,CAAC;IAEF,IAAI,CAACC,UAAU,CAACd,KAAK,CAACe,iBAAiB,CAAC;EAC1C;EAEAD,UAAUA,CAACC,iBAAyC;IAClD,IAAI,CAACC,WAAW,CAAC;MACfD;KACD,CAAC;EACJ;EAESE,OAAOA,CAAA;IACd,IAAI,CAACC,YAAY,CAACC,QAAQ,CAAC,EAAE,CAAC;IAC9B,KAAK,CAACF,OAAO,EAAE;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}