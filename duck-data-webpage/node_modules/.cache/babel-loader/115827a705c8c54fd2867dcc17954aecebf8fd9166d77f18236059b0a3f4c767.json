{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { capitalize } from \"../utils/capitalize.js\";\nexport function generateGLSLForModule(module, options) {\n  return generateGLSLUniformDeclarations(module, options);\n}\nfunction generateGLSLUniformDeclarations(module, options) {\n  const glsl = [];\n  // => uniform UniformBlockName {\n  switch (options.uniforms) {\n    case 'scoped-interface-blocks':\n    case 'unscoped-interface-blocks':\n      glsl.push(`uniform ${capitalize(module.name)} {`);\n      break;\n    case 'uniforms':\n    // ignore\n  }\n  for (const [uniformName, uniformFormat] of Object.entries(module.uniformTypes || {})) {\n    const glslUniformType = getGLSLUniformType(uniformFormat);\n    switch (options.uniforms) {\n      case 'scoped-interface-blocks':\n        // => uniform UniformBlockName {\n        glsl.push(`  ${glslUniformType} ${uniformName};`);\n        break;\n      case 'unscoped-interface-blocks':\n        // => uniform UniformBlockName {\n        glsl.push(`  ${glslUniformType} ${module.name}_${uniformName};`);\n        break;\n      case 'uniforms':\n        glsl.push(`uniform ${glslUniformType} ${module.name}_${uniformName};`);\n    }\n  }\n  switch (options.uniforms) {\n    case 'scoped-interface-blocks':\n      glsl.push(`} ${module.name};`);\n      break;\n    case 'unscoped-interface-blocks':\n      glsl.push('};');\n      break;\n    case 'uniforms':\n    // ignore\n  }\n  // final new line\n  glsl.push('');\n  return glsl.join('\\n');\n}\n/** Map a luma.gl WebGPU style uniform type to GLSL */\nfunction getGLSLUniformType(uniformFormat) {\n  const UNIFORM_TYPE_TO_GLSL = {\n    f32: 'float',\n    i32: 'int',\n    u32: 'uint',\n    'vec2<f32>': 'vec2',\n    'vec3<f32>': 'vec3',\n    'vec4<f32>': 'vec4',\n    'vec2<i32>': 'ivec2',\n    'vec3<i32>': 'ivec3',\n    'vec4<i32>': 'ivec4',\n    'vec2<u32>': 'uvec2',\n    'vec3<u32>': 'uvec3',\n    'vec4<u32>': 'uvec4',\n    'mat2x2<f32>': 'mat2',\n    'mat2x3<f32>': 'mat2x3',\n    'mat2x4<f32>': 'mat2x4',\n    'mat3x2<f32>': 'mat3x2',\n    'mat3x3<f32>': 'mat3',\n    'mat3x4<f32>': 'mat3x4',\n    'mat4x2<f32>': 'mat4x2',\n    'mat4x3<f32>': 'mat4x3',\n    'mat4x4<f32>': 'mat4'\n  };\n  const glsl = UNIFORM_TYPE_TO_GLSL[uniformFormat];\n  return glsl;\n}\n//# sourceMappingURL=generate-glsl.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}