{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { project, fp64LowPart } from '@deck.gl/core';\nconst uniformBlock = /* glsl */`\\\nuniform fillUniforms {\n  vec2 patternTextureSize;\n  bool patternEnabled;\n  bool patternMask;\n  vec2 uvCoordinateOrigin;\n  vec2 uvCoordinateOrigin64Low;\n} fill;\n`;\n/*\n * fill pattern shader module\n */\nconst patternVs = /* glsl */`\nin vec4 fillPatternFrames;\nin float fillPatternScales;\nin vec2 fillPatternOffsets;\n\nout vec2 fill_uv;\nout vec4 fill_patternBounds;\nout vec4 fill_patternPlacement;\n`;\nconst vs = `\n${uniformBlock}\n${patternVs}\n`;\nconst patternFs = /* glsl */`\nuniform sampler2D fill_patternTexture;\n\nin vec4 fill_patternBounds;\nin vec4 fill_patternPlacement;\nin vec2 fill_uv;\n\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\n`;\nconst fs = `\n${uniformBlock}\n${patternFs}\n`;\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': /* glsl */`\n    fill_uv = geometry.position.xy;\n  `,\n  'vs:DECKGL_FILTER_COLOR': /* glsl */`\n    if (fill.patternEnabled) {\n      fill_patternBounds = fillPatternFrames / vec4(fill.patternTextureSize, fill.patternTextureSize);\n      fill_patternPlacement.xy = fillPatternOffsets;\n      fill_patternPlacement.zw = fillPatternScales * fillPatternFrames.zw;\n    }\n  `,\n  'fs:DECKGL_FILTER_COLOR': /* glsl */`\n    if (fill.patternEnabled) {\n      vec2 scale = FILL_UV_SCALE * fill_patternPlacement.zw;\n      vec2 patternUV = mod(mod(fill.uvCoordinateOrigin, scale) + fill.uvCoordinateOrigin64Low + fill_uv, scale) / scale;\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\n\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\n\n      vec4 patternColor = texture(fill_patternTexture, texCoords);\n      color.a *= patternColor.a;\n      if (!fill.patternMask) {\n        color.rgb = patternColor.rgb;\n      }\n    }\n  `\n};\n/* eslint-disable camelcase */\nfunction getPatternUniforms(opts) {\n  if (!opts) {\n    return {};\n  }\n  const uniforms = {};\n  if ('fillPatternTexture' in opts) {\n    const {\n      fillPatternTexture\n    } = opts;\n    uniforms.fill_patternTexture = fillPatternTexture;\n    uniforms.patternTextureSize = [fillPatternTexture.width, fillPatternTexture.height];\n  }\n  if ('project' in opts) {\n    const {\n      fillPatternMask = true,\n      fillPatternEnabled = true\n    } = opts;\n    const projectUniforms = project.getUniforms(opts.project);\n    const {\n      commonOrigin: coordinateOriginCommon\n    } = projectUniforms;\n    const coordinateOriginCommon64Low = [fp64LowPart(coordinateOriginCommon[0]), fp64LowPart(coordinateOriginCommon[1])];\n    uniforms.uvCoordinateOrigin = coordinateOriginCommon.slice(0, 2);\n    uniforms.uvCoordinateOrigin64Low = coordinateOriginCommon64Low;\n    uniforms.patternMask = fillPatternMask;\n    uniforms.patternEnabled = fillPatternEnabled;\n  }\n  return uniforms;\n}\nexport const patternShaders = {\n  name: 'fill',\n  vs,\n  fs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms,\n  uniformTypes: {\n    patternTextureSize: 'vec2<f32>',\n    patternEnabled: 'i32',\n    patternMask: 'i32',\n    uvCoordinateOrigin: 'vec2<f32>',\n    uvCoordinateOrigin64Low: 'vec2<f32>'\n  }\n};\n//# sourceMappingURL=shader-module.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}