{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// import {normalizeAttributeMap} from '../helpers/attribute-bindings';\nimport { Resource } from \"./resource.js\";\n/**\n * A compiled and linked shader program\n */\nexport class RenderPipeline extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    vs: null,\n    vertexEntryPoint: 'vertexMain',\n    vsConstants: {},\n    fs: null,\n    fragmentEntryPoint: 'fragmentMain',\n    fsConstants: {},\n    shaderLayout: null,\n    bufferLayout: [],\n    topology: 'triangle-list',\n    parameters: {},\n    // isInstanced: false,\n    // instanceCount: 0,\n    // vertexCount: 0,\n    bindings: {},\n    uniforms: {}\n  };\n  get [Symbol.toStringTag]() {\n    return 'RenderPipeline';\n  }\n  /** The merged layout */\n  shaderLayout;\n  /** Buffer map describing buffer interleaving etc */\n  bufferLayout;\n  /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */\n  linkStatus = 'pending';\n  /** The hash of the pipeline */\n  hash = '';\n  constructor(device, props) {\n    super(device, props, RenderPipeline.defaultProps);\n    this.shaderLayout = this.props.shaderLayout;\n    this.bufferLayout = this.props.bufferLayout || [];\n  }\n  // DEPRECATED METHODS\n  /**\n   * Uniforms\n   * @deprecated Use uniforms buffers\n   * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.\n   * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.\n   */\n  setUniformsWebGL(uniforms) {\n    throw new Error('Use uniform blocks');\n  }\n}\n//# sourceMappingURL=render-pipeline.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}