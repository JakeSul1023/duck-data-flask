{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport { OrbitState } from \"./orbit-controller.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n  _calculateNewZoom({\n    scale,\n    startZoom\n  }) {\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\nexport default class OrthographicController extends Controller {\n  constructor() {\n    super(...arguments);\n    this.ControllerState = OrthographicState;\n    this.transition = {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n    };\n    this.dragMode = 'pan';\n  }\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}","map":{"version":3,"names":["clamp","Controller","OrbitState","LinearInterpolator","OrthographicState","constructor","props","zoomAxis","_calculateNewZoom","scale","startZoom","maxZoom","minZoom","getViewportProps","undefined","zoom","deltaZoom","Math","log2","Array","isArray","newZoomX","newZoomY","z","min","max","OrthographicController","ControllerState","transition","transitionDuration","transitionInterpolator","dragMode","_onPanRotate"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\controllers\\orthographic-controller.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller<OrbitState> {\n  ControllerState = OrthographicState;\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n  };\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,KAAK,QAAO,eAAe;AACnC,OAAOC,UAAU;AACjB,SAAQC,UAAU,QAAC;AACnB,OAAOC,kBAAkB;AAEzB,MAAMC,iBAAkB,SAAQF,UAAU;EAGxCG,YAAYC,KAAK;IACf,KAAK,CAACA,KAAK,CAAC;IAEZ,IAAI,CAACC,QAAQ,GAAGD,KAAK,CAACC,QAAQ,IAAI,KAAK;EACzC;EAEAC,iBAAiBA,CAAC;IAACC,KAAK;IAAEC;EAAS,CAAC;IAClC,MAAM;MAACC,OAAO;MAAEC;IAAO,CAAC,GAAG,IAAI,CAACC,gBAAgB,EAAE;IAClD,IAAIH,SAAS,KAAKI,SAAS,EAAE;MAC3BJ,SAAS,GAAG,IAAI,CAACG,gBAAgB,EAAE,CAACE,IAAI;IAC1C;IACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACT,KAAK,CAAC;IAChC,IAAIU,KAAK,CAACC,OAAO,CAACV,SAAS,CAAC,EAAE;MAC5B,IAAI,CAACW,QAAQ,EAAEC,QAAQ,CAAC,GAAGZ,SAAS;MACpC,QAAQ,IAAI,CAACH,QAAQ;QACnB,KAAK,GAAG;UACN;UACAc,QAAQ,GAAGrB,KAAK,CAACqB,QAAQ,GAAGL,SAAS,EAAEJ,OAAO,EAAED,OAAO,CAAC;UACxD;QACF,KAAK,GAAG;UACN;UACAW,QAAQ,GAAGtB,KAAK,CAACsB,QAAQ,GAAGN,SAAS,EAAEJ,OAAO,EAAED,OAAO,CAAC;UACxD;QACF;UACE;UACA,IAAIY,CAAC,GAAGN,IAAI,CAACO,GAAG,CAACH,QAAQ,GAAGL,SAAS,EAAEM,QAAQ,GAAGN,SAAS,CAAC;UAC5D,IAAIO,CAAC,GAAGX,OAAO,EAAE;YACfI,SAAS,IAAIJ,OAAO,GAAGW,CAAC;UAC1B;UACAA,CAAC,GAAGN,IAAI,CAACQ,GAAG,CAACJ,QAAQ,GAAGL,SAAS,EAAEM,QAAQ,GAAGN,SAAS,CAAC;UACxD,IAAIO,CAAC,GAAGZ,OAAO,EAAE;YACfK,SAAS,IAAIL,OAAO,GAAGY,CAAC;UAC1B;UACAF,QAAQ,IAAIL,SAAS;UACrBM,QAAQ,IAAIN,SAAS;MACzB;MACA,OAAO,CAACK,QAAQ,EAAEC,QAAQ,CAAC;IAC7B;IACA;IACA;IACA;IACA,OAAOtB,KAAK,CAACU,SAAS,GAAGM,SAAS,EAAEJ,OAAO,EAAED,OAAO,CAAC;EACvD;;AAGF,eAAc,MAAOe,sBAAuB,SAAQzB,UAAsB;EAA1EI,YAAA;;IACE,KAAAsB,eAAe,GAAGvB,iBAAiB;IACnC,KAAAwB,UAAU,GAAG;MACXC,kBAAkB,EAAE,GAAG;MACvBC,sBAAsB,EAAE,IAAI3B,kBAAkB,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC;KAClE;IACD,KAAA4B,QAAQ,GAAqB,KAAK;EAMpC;EAJEC,YAAYA,CAAA;IACV;IACA,OAAO,KAAK;EACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}