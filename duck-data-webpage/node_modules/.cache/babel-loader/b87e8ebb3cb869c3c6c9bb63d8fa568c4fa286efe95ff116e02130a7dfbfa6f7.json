{"ast":null,"code":"// mjolnir.js\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { whichButtons, getOffsetPosition } from \"./event-utils.js\";\nconst DEFAULT_OPTIONS = {\n  srcElement: 'root',\n  priority: 0\n};\nexport class EventRegistrar {\n  constructor(eventManager, recognizerName) {\n    /**\n     * Handles hammerjs event\n     */\n    this.handleEvent = event => {\n      if (this.isEmpty()) {\n        return;\n      }\n      const mjolnirEvent = this._normalizeEvent(event);\n      let target = event.srcEvent.target;\n      while (target && target !== mjolnirEvent.rootElement) {\n        this._emit(mjolnirEvent, target);\n        if (mjolnirEvent.handled) {\n          return;\n        }\n        target = target.parentNode;\n      }\n      this._emit(mjolnirEvent, 'root');\n    };\n    this.eventManager = eventManager;\n    this.recognizerName = recognizerName;\n    this.handlers = [];\n    // Element -> handler map\n    this.handlersByElement = new Map();\n    this._active = false;\n  }\n  // Returns true if there are no non-passive handlers\n  isEmpty() {\n    return !this._active;\n  }\n  add(type, handler, options, once = false, passive = false) {\n    const {\n      handlers,\n      handlersByElement\n    } = this;\n    const opts = {\n      ...DEFAULT_OPTIONS,\n      ...options\n    };\n    let entries = handlersByElement.get(opts.srcElement);\n    if (!entries) {\n      entries = [];\n      handlersByElement.set(opts.srcElement, entries);\n    }\n    const entry = {\n      type,\n      handler,\n      srcElement: opts.srcElement,\n      priority: opts.priority\n    };\n    if (once) {\n      entry.once = true;\n    }\n    if (passive) {\n      entry.passive = true;\n    }\n    handlers.push(entry);\n    this._active = this._active || !entry.passive;\n    // Sort handlers by descending priority\n    // Handlers with the same priority are excuted in the order of registration\n    let insertPosition = entries.length - 1;\n    while (insertPosition >= 0) {\n      if (entries[insertPosition].priority >= entry.priority) {\n        break;\n      }\n      insertPosition--;\n    }\n    entries.splice(insertPosition + 1, 0, entry);\n  }\n  remove(type, handler) {\n    const {\n      handlers,\n      handlersByElement\n    } = this;\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const entry = handlers[i];\n      if (entry.type === type && entry.handler === handler) {\n        handlers.splice(i, 1);\n        const entries = handlersByElement.get(entry.srcElement);\n        entries.splice(entries.indexOf(entry), 1);\n        if (entries.length === 0) {\n          handlersByElement.delete(entry.srcElement);\n        }\n      }\n    }\n    this._active = handlers.some(entry => !entry.passive);\n  }\n  /**\n   * Invoke handlers on a particular element\n   */\n  _emit(event, srcElement) {\n    const entries = this.handlersByElement.get(srcElement);\n    if (entries) {\n      let immediatePropagationStopped = false;\n      // Prevents the current event from bubbling up\n      const stopPropagation = () => {\n        event.handled = true;\n      };\n      // Prevent any remaining listeners from being called\n      const stopImmediatePropagation = () => {\n        event.handled = true;\n        immediatePropagationStopped = true;\n      };\n      const entriesToRemove = [];\n      for (let i = 0; i < entries.length; i++) {\n        const {\n          type,\n          handler,\n          once\n        } = entries[i];\n        // @ts-ignore\n        handler({\n          ...event,\n          type,\n          stopPropagation,\n          stopImmediatePropagation\n        });\n        if (once) {\n          entriesToRemove.push(entries[i]);\n        }\n        if (immediatePropagationStopped) {\n          break;\n        }\n      }\n      for (let i = 0; i < entriesToRemove.length; i++) {\n        const {\n          type,\n          handler\n        } = entriesToRemove[i];\n        this.remove(type, handler);\n      }\n    }\n  }\n  /**\n   * Normalizes hammerjs and custom events to have predictable fields.\n   */\n  _normalizeEvent(event) {\n    const rootElement = this.eventManager.getElement();\n    // @ts-ignore\n    return {\n      ...event,\n      ...whichButtons(event),\n      ...getOffsetPosition(event, rootElement),\n      preventDefault: () => {\n        event.srcEvent.preventDefault();\n      },\n      stopImmediatePropagation: null,\n      stopPropagation: null,\n      handled: false,\n      rootElement\n    };\n  }\n}","map":{"version":3,"names":["whichButtons","getOffsetPosition","DEFAULT_OPTIONS","srcElement","priority","EventRegistrar","constructor","eventManager","recognizerName","handleEvent","event","isEmpty","mjolnirEvent","_normalizeEvent","target","srcEvent","rootElement","_emit","handled","parentNode","handlers","handlersByElement","Map","_active","add","type","handler","options","once","passive","opts","entries","get","set","entry","push","insertPosition","length","splice","remove","i","indexOf","delete","some","immediatePropagationStopped","stopPropagation","stopImmediatePropagation","entriesToRemove","getElement","preventDefault"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\utils\\event-registrar.ts"],"sourcesContent":["// mjolnir.js\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {EventManager} from '../event-manager';\nimport {whichButtons, getOffsetPosition} from './event-utils';\nimport type {\n  MjolnirEventRaw,\n  MjolnirEventWrapper,\n  MjolnirEvent,\n  MjolnirEventHandler\n} from '../types';\n\nexport type HandlerOptions = {\n  /** Optional element from which the event is originated from.\n   * @default 'root'\n   */\n  srcElement?: 'root' | HTMLElement;\n  /** Handler with higher priority will be called first.\n   * Handler with the same priority will be called in the order of registration.\n   * @default 0\n   */\n  priority?: number;\n};\n\ntype EventHandler = {\n  type: string;\n  handler: (event: MjolnirEvent) => void;\n  once?: boolean;\n  passive?: boolean;\n  srcElement: 'root' | HTMLElement;\n  priority: number;\n};\n\nconst DEFAULT_OPTIONS: Required<HandlerOptions> = {\n  srcElement: 'root',\n  priority: 0\n};\n\nexport class EventRegistrar {\n  eventManager: EventManager;\n  recognizerName: string;\n  handlers: EventHandler[];\n  handlersByElement: Map<'root' | HTMLElement, EventHandler[]>;\n  _active: boolean;\n\n  constructor(eventManager: EventManager, recognizerName: string) {\n    this.eventManager = eventManager;\n    this.recognizerName = recognizerName;\n    this.handlers = [];\n    // Element -> handler map\n    this.handlersByElement = new Map();\n\n    this._active = false;\n  }\n\n  // Returns true if there are no non-passive handlers\n  isEmpty(): boolean {\n    return !this._active;\n  }\n\n  add(\n    type: string,\n    handler: MjolnirEventHandler,\n    options?: HandlerOptions,\n    once: boolean = false,\n    passive: boolean = false\n  ) {\n    const {handlers, handlersByElement} = this;\n    const opts: Required<HandlerOptions> = {...DEFAULT_OPTIONS, ...options};\n\n    let entries = handlersByElement.get(opts.srcElement);\n    if (!entries) {\n      entries = [];\n      handlersByElement.set(opts.srcElement, entries);\n    }\n    const entry: EventHandler = {\n      type,\n      handler,\n      srcElement: opts.srcElement,\n      priority: opts.priority\n    };\n    if (once) {\n      entry.once = true;\n    }\n    if (passive) {\n      entry.passive = true;\n    }\n    handlers.push(entry);\n    this._active = this._active || !entry.passive;\n\n    // Sort handlers by descending priority\n    // Handlers with the same priority are excuted in the order of registration\n    let insertPosition = entries.length - 1;\n    while (insertPosition >= 0) {\n      if (entries[insertPosition].priority >= entry.priority) {\n        break;\n      }\n      insertPosition--;\n    }\n    entries.splice(insertPosition + 1, 0, entry);\n  }\n\n  remove(type: string, handler: MjolnirEventHandler) {\n    const {handlers, handlersByElement} = this;\n\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const entry = handlers[i];\n\n      if (entry.type === type && entry.handler === handler) {\n        handlers.splice(i, 1);\n        const entries = handlersByElement.get(entry.srcElement)!;\n        entries.splice(entries.indexOf(entry), 1);\n        if (entries.length === 0) {\n          handlersByElement.delete(entry.srcElement);\n        }\n      }\n    }\n    this._active = handlers.some((entry) => !entry.passive);\n  }\n\n  /**\n   * Handles hammerjs event\n   */\n  handleEvent = (event: MjolnirEventRaw) => {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    const mjolnirEvent = this._normalizeEvent(event);\n    let target = event.srcEvent.target as HTMLElement;\n\n    while (target && target !== mjolnirEvent.rootElement) {\n      this._emit(mjolnirEvent, target);\n      if (mjolnirEvent.handled) {\n        return;\n      }\n      target = target.parentNode as HTMLElement;\n    }\n    this._emit(mjolnirEvent, 'root');\n  };\n\n  /**\n   * Invoke handlers on a particular element\n   */\n  _emit<T extends MjolnirEventRaw>(\n    event: MjolnirEventWrapper<T>,\n    srcElement: 'root' | HTMLElement\n  ) {\n    const entries = this.handlersByElement.get(srcElement);\n\n    if (entries) {\n      let immediatePropagationStopped = false;\n\n      // Prevents the current event from bubbling up\n      const stopPropagation = () => {\n        event.handled = true;\n      };\n      // Prevent any remaining listeners from being called\n      const stopImmediatePropagation = () => {\n        event.handled = true;\n        immediatePropagationStopped = true;\n      };\n      const entriesToRemove: EventHandler[] = [];\n\n      for (let i = 0; i < entries.length; i++) {\n        const {type, handler, once} = entries[i];\n        // @ts-ignore\n        handler({\n          ...event,\n          type,\n          stopPropagation,\n          stopImmediatePropagation\n        });\n        if (once) {\n          entriesToRemove.push(entries[i]);\n        }\n        if (immediatePropagationStopped) {\n          break;\n        }\n      }\n\n      for (let i = 0; i < entriesToRemove.length; i++) {\n        const {type, handler} = entriesToRemove[i];\n        this.remove(type, handler);\n      }\n    }\n  }\n\n  /**\n   * Normalizes hammerjs and custom events to have predictable fields.\n   */\n  _normalizeEvent<T extends MjolnirEventRaw>(event: T): MjolnirEventWrapper<T> {\n    const rootElement = this.eventManager.getElement();\n\n    // @ts-ignore\n    return {\n      ...event,\n      ...whichButtons(event),\n      ...getOffsetPosition(event, rootElement!),\n      preventDefault: () => {\n        event.srcEvent.preventDefault();\n      },\n      stopImmediatePropagation: null,\n      stopPropagation: null,\n      handled: false,\n      rootElement\n    };\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAQA,YAAY,EAAEC,iBAAiB,QAAC;AA6BxC,MAAMC,eAAe,GAA6B;EAChDC,UAAU,EAAE,MAAM;EAClBC,QAAQ,EAAE;CACX;AAED,OAAM,MAAOC,cAAc;EAOzBC,YAAYC,YAA0B,EAAEC,cAAsB;IA2E9D;;;IAGA,KAAAC,WAAW,GAAIC,KAAsB,IAAI;MACvC,IAAI,IAAI,CAACC,OAAO,EAAE,EAAE;QAClB;MACF;MAEA,MAAMC,YAAY,GAAG,IAAI,CAACC,eAAe,CAACH,KAAK,CAAC;MAChD,IAAII,MAAM,GAAGJ,KAAK,CAACK,QAAQ,CAACD,MAAqB;MAEjD,OAAOA,MAAM,IAAIA,MAAM,KAAKF,YAAY,CAACI,WAAW,EAAE;QACpD,IAAI,CAACC,KAAK,CAACL,YAAY,EAAEE,MAAM,CAAC;QAChC,IAAIF,YAAY,CAACM,OAAO,EAAE;UACxB;QACF;QACAJ,MAAM,GAAGA,MAAM,CAACK,UAAyB;MAC3C;MACA,IAAI,CAACF,KAAK,CAACL,YAAY,EAAE,MAAM,CAAC;IAClC,CAAC;IA7FC,IAAI,CAACL,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACY,QAAQ,GAAG,EAAE;IAClB;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAIC,GAAG,EAAE;IAElC,IAAI,CAACC,OAAO,GAAG,KAAK;EACtB;EAEA;EACAZ,OAAOA,CAAA;IACL,OAAO,CAAC,IAAI,CAACY,OAAO;EACtB;EAEAC,GAAGA,CACDC,IAAY,EACZC,OAA4B,EAC5BC,OAAwB,EACxBC,IAAA,GAAgB,KAAK,EACrBC,OAAA,GAAmB,KAAK;IAExB,MAAM;MAACT,QAAQ;MAAEC;IAAiB,CAAC,GAAG,IAAI;IAC1C,MAAMS,IAAI,GAA6B;MAAC,GAAG5B,eAAe;MAAE,GAAGyB;IAAO,CAAC;IAEvE,IAAII,OAAO,GAAGV,iBAAiB,CAACW,GAAG,CAACF,IAAI,CAAC3B,UAAU,CAAC;IACpD,IAAI,CAAC4B,OAAO,EAAE;MACZA,OAAO,GAAG,EAAE;MACZV,iBAAiB,CAACY,GAAG,CAACH,IAAI,CAAC3B,UAAU,EAAE4B,OAAO,CAAC;IACjD;IACA,MAAMG,KAAK,GAAiB;MAC1BT,IAAI;MACJC,OAAO;MACPvB,UAAU,EAAE2B,IAAI,CAAC3B,UAAU;MAC3BC,QAAQ,EAAE0B,IAAI,CAAC1B;KAChB;IACD,IAAIwB,IAAI,EAAE;MACRM,KAAK,CAACN,IAAI,GAAG,IAAI;IACnB;IACA,IAAIC,OAAO,EAAE;MACXK,KAAK,CAACL,OAAO,GAAG,IAAI;IACtB;IACAT,QAAQ,CAACe,IAAI,CAACD,KAAK,CAAC;IACpB,IAAI,CAACX,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,CAACW,KAAK,CAACL,OAAO;IAE7C;IACA;IACA,IAAIO,cAAc,GAAGL,OAAO,CAACM,MAAM,GAAG,CAAC;IACvC,OAAOD,cAAc,IAAI,CAAC,EAAE;MAC1B,IAAIL,OAAO,CAACK,cAAc,CAAC,CAAChC,QAAQ,IAAI8B,KAAK,CAAC9B,QAAQ,EAAE;QACtD;MACF;MACAgC,cAAc,EAAE;IAClB;IACAL,OAAO,CAACO,MAAM,CAACF,cAAc,GAAG,CAAC,EAAE,CAAC,EAAEF,KAAK,CAAC;EAC9C;EAEAK,MAAMA,CAACd,IAAY,EAAEC,OAA4B;IAC/C,MAAM;MAACN,QAAQ;MAAEC;IAAiB,CAAC,GAAG,IAAI;IAE1C,KAAK,IAAImB,CAAC,GAAGpB,QAAQ,CAACiB,MAAM,GAAG,CAAC,EAAEG,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC7C,MAAMN,KAAK,GAAGd,QAAQ,CAACoB,CAAC,CAAC;MAEzB,IAAIN,KAAK,CAACT,IAAI,KAAKA,IAAI,IAAIS,KAAK,CAACR,OAAO,KAAKA,OAAO,EAAE;QACpDN,QAAQ,CAACkB,MAAM,CAACE,CAAC,EAAE,CAAC,CAAC;QACrB,MAAMT,OAAO,GAAGV,iBAAiB,CAACW,GAAG,CAACE,KAAK,CAAC/B,UAAU,CAAE;QACxD4B,OAAO,CAACO,MAAM,CAACP,OAAO,CAACU,OAAO,CAACP,KAAK,CAAC,EAAE,CAAC,CAAC;QACzC,IAAIH,OAAO,CAACM,MAAM,KAAK,CAAC,EAAE;UACxBhB,iBAAiB,CAACqB,MAAM,CAACR,KAAK,CAAC/B,UAAU,CAAC;QAC5C;MACF;IACF;IACA,IAAI,CAACoB,OAAO,GAAGH,QAAQ,CAACuB,IAAI,CAAET,KAAK,IAAK,CAACA,KAAK,CAACL,OAAO,CAAC;EACzD;EAuBA;;;EAGAZ,KAAKA,CACHP,KAA6B,EAC7BP,UAAgC;IAEhC,MAAM4B,OAAO,GAAG,IAAI,CAACV,iBAAiB,CAACW,GAAG,CAAC7B,UAAU,CAAC;IAEtD,IAAI4B,OAAO,EAAE;MACX,IAAIa,2BAA2B,GAAG,KAAK;MAEvC;MACA,MAAMC,eAAe,GAAGA,CAAA,KAAK;QAC3BnC,KAAK,CAACQ,OAAO,GAAG,IAAI;MACtB,CAAC;MACD;MACA,MAAM4B,wBAAwB,GAAGA,CAAA,KAAK;QACpCpC,KAAK,CAACQ,OAAO,GAAG,IAAI;QACpB0B,2BAA2B,GAAG,IAAI;MACpC,CAAC;MACD,MAAMG,eAAe,GAAmB,EAAE;MAE1C,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,OAAO,CAACM,MAAM,EAAEG,CAAC,EAAE,EAAE;QACvC,MAAM;UAACf,IAAI;UAAEC,OAAO;UAAEE;QAAI,CAAC,GAAGG,OAAO,CAACS,CAAC,CAAC;QACxC;QACAd,OAAO,CAAC;UACN,GAAGhB,KAAK;UACRe,IAAI;UACJoB,eAAe;UACfC;SACD,CAAC;QACF,IAAIlB,IAAI,EAAE;UACRmB,eAAe,CAACZ,IAAI,CAACJ,OAAO,CAACS,CAAC,CAAC,CAAC;QAClC;QACA,IAAII,2BAA2B,EAAE;UAC/B;QACF;MACF;MAEA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,eAAe,CAACV,MAAM,EAAEG,CAAC,EAAE,EAAE;QAC/C,MAAM;UAACf,IAAI;UAAEC;QAAO,CAAC,GAAGqB,eAAe,CAACP,CAAC,CAAC;QAC1C,IAAI,CAACD,MAAM,CAACd,IAAI,EAAEC,OAAO,CAAC;MAC5B;IACF;EACF;EAEA;;;EAGAb,eAAeA,CAA4BH,KAAQ;IACjD,MAAMM,WAAW,GAAG,IAAI,CAACT,YAAY,CAACyC,UAAU,EAAE;IAElD;IACA,OAAO;MACL,GAAGtC,KAAK;MACR,GAAGV,YAAY,CAACU,KAAK,CAAC;MACtB,GAAGT,iBAAiB,CAACS,KAAK,EAAEM,WAAY,CAAC;MACzCiC,cAAc,EAAEA,CAAA,KAAK;QACnBvC,KAAK,CAACK,QAAQ,CAACkC,cAAc,EAAE;MACjC,CAAC;MACDH,wBAAwB,EAAE,IAAI;MAC9BD,eAAe,EAAE,IAAI;MACrB3B,OAAO,EAAE,KAAK;MACdF;KACD;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}