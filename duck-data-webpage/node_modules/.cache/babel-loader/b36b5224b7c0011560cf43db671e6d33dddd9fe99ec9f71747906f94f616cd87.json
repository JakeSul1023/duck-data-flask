{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * (Recursively) load the service directory from an ArcGIS Server URL\n * @param url\n * @param fetchFile= Optional fetch function override\n * @returns\n */\nexport async function getArcGISServices(url) {\n  let fetchFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fetch;\n  if (url.includes('rest/services')) {\n    const serverUrl = url.replace(/rest\\/services.*$/i, 'rest/services');\n    return loadServiceDirectory(serverUrl, fetchFile, []);\n  }\n  return null;\n}\nasync function loadServiceDirectory(serverUrl, fetch, path) {\n  const serviceUrl = `${serverUrl}/${path.join('/')}`;\n  const response = await fetch(`${serviceUrl}?f=pjson`);\n  const directory = await response.json();\n  const services = extractServices(directory, serviceUrl);\n  const folders = directory.folders || [];\n  const promises = folders.map(folder => loadServiceDirectory(`${serverUrl}`, fetch, [...path, folder]));\n  for (const folderServices of await Promise.all(promises)) {\n    services.push(...folderServices);\n  }\n  return services;\n}\nfunction extractServices(directory, url) {\n  const arcgisServices = directory.services || [];\n  const services = [];\n  for (const service of arcgisServices) {\n    services.push({\n      name: service.name,\n      type: `arcgis-${service.type.toLocaleLowerCase().replace('server', '-server')}`,\n      url: `${url}${service.name}/${service.type}`\n    });\n  }\n  return services;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}