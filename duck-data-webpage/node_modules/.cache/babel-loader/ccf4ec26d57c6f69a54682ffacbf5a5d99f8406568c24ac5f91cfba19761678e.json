{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { GL } from '@luma.gl/constants';\n/** Set a raw uniform (without type conversion and caching) */\n/* eslint-disable max-len */\nexport function setUniform(gl, location, type, value) {\n  const gl2 = gl;\n  // Prepare the value for WebGL setters\n  let uniformValue = value;\n  if (uniformValue === true) {\n    uniformValue = 1;\n  }\n  if (uniformValue === false) {\n    uniformValue = 0;\n  }\n  const arrayValue = typeof uniformValue === 'number' ? [uniformValue] : uniformValue;\n  // prettier-ignore\n  switch (type) {\n    case 35678:\n    case 35680:\n    case 35679:\n    case 35682:\n    case 36289:\n    case 36292:\n    case 36293:\n    case 36298:\n    case 36299:\n    case 36300:\n    case 36303:\n    case 36306:\n    case 36307:\n    case 36308:\n    case 36311:\n      if (typeof value !== 'number') {\n        throw new Error('samplers must be set to integers');\n      }\n      return gl.uniform1i(location, value);\n    case 5126:\n      return gl.uniform1fv(location, arrayValue);\n    case 35664:\n      return gl.uniform2fv(location, arrayValue);\n    case 35665:\n      return gl.uniform3fv(location, arrayValue);\n    case 35666:\n      return gl.uniform4fv(location, arrayValue);\n    case 5124:\n      return gl.uniform1iv(location, arrayValue);\n    case 35667:\n      return gl.uniform2iv(location, arrayValue);\n    case 35668:\n      return gl.uniform3iv(location, arrayValue);\n    case 35669:\n      return gl.uniform4iv(location, arrayValue);\n    case 35670:\n      return gl.uniform1iv(location, arrayValue);\n    case 35671:\n      return gl.uniform2iv(location, arrayValue);\n    case 35672:\n      return gl.uniform3iv(location, arrayValue);\n    case 35673:\n      return gl.uniform4iv(location, arrayValue);\n    // WEBGL2 - unsigned integers\n    case 5125:\n      return gl2.uniform1uiv(location, arrayValue, 1);\n    case 36294:\n      return gl2.uniform2uiv(location, arrayValue, 2);\n    case 36295:\n      return gl2.uniform3uiv(location, arrayValue, 3);\n    case 36296:\n      return gl2.uniform4uiv(location, arrayValue, 4);\n    // WebGL2 - quadratic matrices\n    // false: don't transpose the matrix\n    case 35674:\n      return gl.uniformMatrix2fv(location, false, arrayValue);\n    case 35675:\n      return gl.uniformMatrix3fv(location, false, arrayValue);\n    case 35676:\n      return gl.uniformMatrix4fv(location, false, arrayValue);\n    // WebGL2 - rectangular matrices\n    case 35685:\n      return gl2.uniformMatrix2x3fv(location, false, arrayValue);\n    case 35686:\n      return gl2.uniformMatrix2x4fv(location, false, arrayValue);\n    case 35687:\n      return gl2.uniformMatrix3x2fv(location, false, arrayValue);\n    case 35688:\n      return gl2.uniformMatrix3x4fv(location, false, arrayValue);\n    case 35689:\n      return gl2.uniformMatrix4x2fv(location, false, arrayValue);\n    case 35690:\n      return gl2.uniformMatrix4x3fv(location, false, arrayValue);\n  }\n  throw new Error('Illegal uniform');\n}\n//# sourceMappingURL=set-uniform.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}