{"ast":null,"code":"// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { DoublyLinkedListNode } from \"./doubly-linked-list-node.js\";\n/**\n * Doubly linked list\n * @private\n */\nexport class DoublyLinkedList {\n  head = null;\n  tail = null;\n  _length = 0;\n  get length() {\n    return this._length;\n  }\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n    ++this._length;\n    return node;\n  }\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n    node.next = null;\n    node.previous = null;\n    --this._length;\n  }\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n    ++this._length;\n  }\n}","map":{"version":3,"names":["DoublyLinkedListNode","DoublyLinkedList","head","tail","_length","length","add","item","node","next","remove","previous","splice","nextNode","_insert","oldNodeNext"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/tiles/dist/utils/doubly-linked-list.js"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { DoublyLinkedListNode } from \"./doubly-linked-list-node.js\";\n/**\n * Doubly linked list\n * @private\n */\nexport class DoublyLinkedList {\n    head = null;\n    tail = null;\n    _length = 0;\n    get length() {\n        return this._length;\n    }\n    /**\n     * Adds the item to the end of the list\n     * @param {*} [item]\n     * @return {DoublyLinkedListNode}\n     */\n    add(item) {\n        const node = new DoublyLinkedListNode(item, this.tail, null);\n        if (this.tail) {\n            this.tail.next = node;\n            this.tail = node;\n        }\n        else {\n            this.head = node;\n            this.tail = node;\n        }\n        ++this._length;\n        return node;\n    }\n    /**\n     * Removes the given node from the list\n     * @param {DoublyLinkedListNode} node\n     */\n    remove(node) {\n        if (!node) {\n            return;\n        }\n        if (node.previous && node.next) {\n            node.previous.next = node.next;\n            node.next.previous = node.previous;\n        }\n        else if (node.previous) {\n            // Remove last node\n            node.previous.next = null;\n            this.tail = node.previous;\n        }\n        else if (node.next) {\n            // Remove first node\n            node.next.previous = null;\n            this.head = node.next;\n        }\n        else {\n            // Remove last node in the linked list\n            this.head = null;\n            this.tail = null;\n        }\n        node.next = null;\n        node.previous = null;\n        --this._length;\n    }\n    /**\n     * Moves nextNode after node\n     * @param {DoublyLinkedListNode} node\n     * @param {DoublyLinkedListNode} nextNode\n     */\n    splice(node, nextNode) {\n        if (node === nextNode) {\n            return;\n        }\n        // Remove nextNode, then insert after node\n        this.remove(nextNode);\n        this._insert(node, nextNode);\n    }\n    _insert(node, nextNode) {\n        const oldNodeNext = node.next;\n        node.next = nextNode;\n        // nextNode is the new tail\n        if (this.tail === node) {\n            this.tail = nextNode;\n        }\n        else {\n            oldNodeNext.previous = nextNode;\n        }\n        nextNode.next = oldNodeNext;\n        nextNode.previous = node;\n        ++this._length;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,oBAAoB,QAAQ,8BAA8B;AACnE;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,CAAC;EAC1BC,IAAI,GAAG,IAAI;EACXC,IAAI,GAAG,IAAI;EACXC,OAAO,GAAG,CAAC;EACX,IAAIC,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACD,OAAO;EACvB;EACA;AACJ;AACA;AACA;AACA;EACIE,GAAGA,CAACC,IAAI,EAAE;IACN,MAAMC,IAAI,GAAG,IAAIR,oBAAoB,CAACO,IAAI,EAAE,IAAI,CAACJ,IAAI,EAAE,IAAI,CAAC;IAC5D,IAAI,IAAI,CAACA,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,CAACM,IAAI,GAAGD,IAAI;MACrB,IAAI,CAACL,IAAI,GAAGK,IAAI;IACpB,CAAC,MACI;MACD,IAAI,CAACN,IAAI,GAAGM,IAAI;MAChB,IAAI,CAACL,IAAI,GAAGK,IAAI;IACpB;IACA,EAAE,IAAI,CAACJ,OAAO;IACd,OAAOI,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,MAAMA,CAACF,IAAI,EAAE;IACT,IAAI,CAACA,IAAI,EAAE;MACP;IACJ;IACA,IAAIA,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACC,IAAI,EAAE;MAC5BD,IAAI,CAACG,QAAQ,CAACF,IAAI,GAAGD,IAAI,CAACC,IAAI;MAC9BD,IAAI,CAACC,IAAI,CAACE,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IACtC,CAAC,MACI,IAAIH,IAAI,CAACG,QAAQ,EAAE;MACpB;MACAH,IAAI,CAACG,QAAQ,CAACF,IAAI,GAAG,IAAI;MACzB,IAAI,CAACN,IAAI,GAAGK,IAAI,CAACG,QAAQ;IAC7B,CAAC,MACI,IAAIH,IAAI,CAACC,IAAI,EAAE;MAChB;MACAD,IAAI,CAACC,IAAI,CAACE,QAAQ,GAAG,IAAI;MACzB,IAAI,CAACT,IAAI,GAAGM,IAAI,CAACC,IAAI;IACzB,CAAC,MACI;MACD;MACA,IAAI,CAACP,IAAI,GAAG,IAAI;MAChB,IAAI,CAACC,IAAI,GAAG,IAAI;IACpB;IACAK,IAAI,CAACC,IAAI,GAAG,IAAI;IAChBD,IAAI,CAACG,QAAQ,GAAG,IAAI;IACpB,EAAE,IAAI,CAACP,OAAO;EAClB;EACA;AACJ;AACA;AACA;AACA;EACIQ,MAAMA,CAACJ,IAAI,EAAEK,QAAQ,EAAE;IACnB,IAAIL,IAAI,KAAKK,QAAQ,EAAE;MACnB;IACJ;IACA;IACA,IAAI,CAACH,MAAM,CAACG,QAAQ,CAAC;IACrB,IAAI,CAACC,OAAO,CAACN,IAAI,EAAEK,QAAQ,CAAC;EAChC;EACAC,OAAOA,CAACN,IAAI,EAAEK,QAAQ,EAAE;IACpB,MAAME,WAAW,GAAGP,IAAI,CAACC,IAAI;IAC7BD,IAAI,CAACC,IAAI,GAAGI,QAAQ;IACpB;IACA,IAAI,IAAI,CAACV,IAAI,KAAKK,IAAI,EAAE;MACpB,IAAI,CAACL,IAAI,GAAGU,QAAQ;IACxB,CAAC,MACI;MACDE,WAAW,CAACJ,QAAQ,GAAGE,QAAQ;IACnC;IACAA,QAAQ,CAACJ,IAAI,GAAGM,WAAW;IAC3BF,QAAQ,CAACF,QAAQ,GAAGH,IAAI;IACxB,EAAE,IAAI,CAACJ,OAAO;EAClB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}