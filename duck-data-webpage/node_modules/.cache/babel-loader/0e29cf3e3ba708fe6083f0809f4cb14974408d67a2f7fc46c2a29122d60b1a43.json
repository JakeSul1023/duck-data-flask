{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Compression interface\nimport { concatenateArrayBuffersAsync, registerJSModules } from '@loaders.gl/loader-utils';\n/** Compression */\nexport class Compression {\n  constructor(options) {\n    this.compressBatches = this.compressBatches.bind(this);\n    this.decompressBatches = this.decompressBatches.bind(this);\n  }\n  /** Preloads any dynamic libraries. May enable sync functions */\n  async preload(modules = {}) {\n    registerJSModules(modules);\n    return;\n  }\n  /** Asynchronously compress data */\n  async compress(input) {\n    await this.preload();\n    return this.compressSync(input);\n  }\n  /** Asynchronously decompress data */\n  async decompress(input, size) {\n    await this.preload();\n    return this.decompressSync(input, size);\n  }\n  /** Synchronously compress data */\n  compressSync(input) {\n    throw new Error(`${this.name}: sync compression not supported`);\n  }\n  /** Synchronously compress data */\n  decompressSync(input, size) {\n    throw new Error(`${this.name}: sync decompression not supported`);\n  }\n  /** Compress batches */\n  async *compressBatches(asyncIterator) {\n    // TODO - implement incremental compression\n    const input = await this.concatenate(asyncIterator);\n    yield this.compress(input);\n  }\n  /** Decompress batches */\n  async *decompressBatches(asyncIterator) {\n    // TODO - implement incremental compression\n    const input = await this.concatenate(asyncIterator);\n    yield this.decompress(input);\n  }\n  // HELPERS\n  concatenate(asyncIterator) {\n    return concatenateArrayBuffersAsync(asyncIterator);\n  }\n  improveError(error) {\n    if (!error.message.includes(this.name)) {\n      error.message = `${this.name} ${error.message}`;\n    }\n    return error;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}