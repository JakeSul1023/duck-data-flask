{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { COMPONENT_SYMBOL, PROP_TYPES_SYMBOL, ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from \"./constants.js\";\nimport { createProps } from \"./create-props.js\";\nlet counter = 0;\nclass Component {\n  constructor() {\n    for (var _len = arguments.length, propObjects = new Array(_len), _key = 0; _key < _len; _key++) {\n      propObjects[_key] = arguments[_key];\n    }\n    // Merge supplied props with default props and freeze them.\n    /* eslint-disable prefer-spread */\n    this.props = createProps(this, propObjects);\n    /* eslint-enable prefer-spread */\n    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n    this.count = counter++; // Keep track of how many layer instances you are generating\n  }\n  // clone this layer with modified props\n  clone(newProps) {\n    const {\n      props\n    } = this;\n    // Async props cannot be copied with Object.assign, copy them separately\n    const asyncProps = {};\n    // See async props definition in create-props.js\n    for (const key in props[ASYNC_DEFAULTS_SYMBOL]) {\n      if (key in props[ASYNC_RESOLVED_SYMBOL]) {\n        asyncProps[key] = props[ASYNC_RESOLVED_SYMBOL][key];\n      } else if (key in props[ASYNC_ORIGINAL_SYMBOL]) {\n        asyncProps[key] = props[ASYNC_ORIGINAL_SYMBOL][key];\n      }\n    }\n    // Some custom layer implementation may not support multiple arguments in the constructor\n    // @ts-ignore\n    return new this.constructor({\n      ...props,\n      ...asyncProps,\n      ...newProps\n    });\n  }\n}\nComponent.componentName = 'Component';\nComponent.defaultProps = {};\nexport default Component;\n//# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}