{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport WorkerFarm from \"../worker-farm/worker-farm.js\";\nimport { getWorkerURL, getWorkerName } from \"./get-worker-url.js\";\nimport { getTransferListForWriter } from \"../worker-utils/get-transfer-list.js\";\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  return worker.worker && options?.worker;\n}\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(worker, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const name = getWorkerName(worker);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {\n    source\n  } = options;\n  const workerPoolProps = {\n    name,\n    source\n  };\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(jobName,\n  // eslint-disable-next-line\n  onMessage.bind(null, context));\n  // Kick off the processing in the worker\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {\n    input: data,\n    options: transferableOptions\n  });\n  const result = await job.result;\n  return result.result;\n}\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(context, job, type, payload) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {\n        id,\n        input,\n        options\n      } = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {\n            id,\n            error: 'Worker not set up to process on main thread'\n          });\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n      break;\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}