{"ast":null,"code":"import { InputEvent } from \"./input-consts.js\";\nimport { computeInputData } from \"./compute-input-data.js\";\n/**\n * handle input events\n */\nexport function inputHandler(manager, eventType, input) {\n  const pointersLen = input.pointers.length;\n  const changedPointersLen = input.changedPointers.length;\n  const isFirst = eventType & InputEvent.Start && pointersLen - changedPointersLen === 0;\n  const isFinal = eventType & (InputEvent.End | InputEvent.Cancel) && pointersLen - changedPointersLen === 0;\n  input.isFirst = Boolean(isFirst);\n  input.isFinal = Boolean(isFinal);\n  if (isFirst) {\n    manager.session = {};\n  }\n  // source event is the normalized value of the domEvents\n  // like 'touchstart, mouseup, pointerdown'\n  input.eventType = eventType;\n  // compute scale, rotation etc\n  const processedInput = computeInputData(manager, input);\n  // emit secret event\n  manager.emit('hammer.input', processedInput);\n  manager.recognize(processedInput);\n  manager.session.prevInput = processedInput;\n}\n//# sourceMappingURL=input-handler.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}