{"ast":null,"code":"import { I3SPendingTilesRegister } from \"./i3s-pending-tiles-register.js\";\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\n// A helper class to manage tile metadata fetching\nexport class I3STileManager {\n  _statusMap;\n  pendingTilesRegister = new I3SPendingTilesRegister();\n  constructor() {\n    this._statusMap = {};\n  }\n  /**\n   * Add request to map\n   * @param request - node metadata request\n   * @param key - unique key\n   * @param callback - callback after request completed\n   * @param frameState - frameState data\n   */\n  add(request, key, callback, frameState) {\n    if (!this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {\n          id\n        }\n      } = frameState;\n      this._statusMap[key] = {\n        request,\n        callback,\n        key,\n        frameState,\n        status: STATUS.REQUESTED\n      };\n      // Register pending request for the frameNumber\n      this.pendingTilesRegister.register(id, frameNumber);\n      request().then(data => {\n        this._statusMap[key].status = STATUS.COMPLETED;\n        const {\n          frameNumber: actualFrameNumber,\n          viewport: {\n            id\n          }\n        } = this._statusMap[key].frameState;\n        // Deregister pending request for the frameNumber\n        this.pendingTilesRegister.deregister(id, actualFrameNumber);\n        this._statusMap[key].callback(data, frameState);\n      }).catch(error => {\n        this._statusMap[key].status = STATUS.ERROR;\n        const {\n          frameNumber: actualFrameNumber,\n          viewport: {\n            id\n          }\n        } = this._statusMap[key].frameState;\n        // Deregister pending request for the frameNumber\n        this.pendingTilesRegister.deregister(id, actualFrameNumber);\n        callback(error);\n      });\n    }\n  }\n  /**\n   * Update request if it is still actual for the new frameState\n   * @param key - unique key\n   * @param frameState - frameState data\n   */\n  update(key, frameState) {\n    if (this._statusMap[key]) {\n      // Deregister pending request for the old frameNumber\n      const {\n        frameNumber,\n        viewport: {\n          id\n        }\n      } = this._statusMap[key].frameState;\n      this.pendingTilesRegister.deregister(id, frameNumber);\n      // Register pending request for the new frameNumber\n      const {\n        frameNumber: newFrameNumber,\n        viewport: {\n          id: newViewportId\n        }\n      } = frameState;\n      this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n  /**\n   * Find request in the map\n   * @param key - unique key\n   * @returns\n   */\n  find(key) {\n    return this._statusMap[key];\n  }\n  /**\n   * Check it there are pending tile headers for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  hasPendingTiles(viewportId, frameNumber) {\n    return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n  }\n}","map":{"version":3,"names":["I3SPendingTilesRegister","STATUS","REQUESTED","COMPLETED","ERROR","I3STileManager","_statusMap","pendingTilesRegister","constructor","add","request","key","callback","frameState","frameNumber","viewport","id","status","register","then","data","actualFrameNumber","deregister","catch","error","update","newFrameNumber","newViewportId","find","hasPendingTiles","viewportId","isZero"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/tiles/dist/tileset/format-i3s/i3s-tile-manager.js"],"sourcesContent":["import { I3SPendingTilesRegister } from \"./i3s-pending-tiles-register.js\";\nconst STATUS = {\n    REQUESTED: 'REQUESTED',\n    COMPLETED: 'COMPLETED',\n    ERROR: 'ERROR'\n};\n// A helper class to manage tile metadata fetching\nexport class I3STileManager {\n    _statusMap;\n    pendingTilesRegister = new I3SPendingTilesRegister();\n    constructor() {\n        this._statusMap = {};\n    }\n    /**\n     * Add request to map\n     * @param request - node metadata request\n     * @param key - unique key\n     * @param callback - callback after request completed\n     * @param frameState - frameState data\n     */\n    add(request, key, callback, frameState) {\n        if (!this._statusMap[key]) {\n            const { frameNumber, viewport: { id } } = frameState;\n            this._statusMap[key] = { request, callback, key, frameState, status: STATUS.REQUESTED };\n            // Register pending request for the frameNumber\n            this.pendingTilesRegister.register(id, frameNumber);\n            request()\n                .then((data) => {\n                this._statusMap[key].status = STATUS.COMPLETED;\n                const { frameNumber: actualFrameNumber, viewport: { id } } = this._statusMap[key].frameState;\n                // Deregister pending request for the frameNumber\n                this.pendingTilesRegister.deregister(id, actualFrameNumber);\n                this._statusMap[key].callback(data, frameState);\n            })\n                .catch((error) => {\n                this._statusMap[key].status = STATUS.ERROR;\n                const { frameNumber: actualFrameNumber, viewport: { id } } = this._statusMap[key].frameState;\n                // Deregister pending request for the frameNumber\n                this.pendingTilesRegister.deregister(id, actualFrameNumber);\n                callback(error);\n            });\n        }\n    }\n    /**\n     * Update request if it is still actual for the new frameState\n     * @param key - unique key\n     * @param frameState - frameState data\n     */\n    update(key, frameState) {\n        if (this._statusMap[key]) {\n            // Deregister pending request for the old frameNumber\n            const { frameNumber, viewport: { id } } = this._statusMap[key].frameState;\n            this.pendingTilesRegister.deregister(id, frameNumber);\n            // Register pending request for the new frameNumber\n            const { frameNumber: newFrameNumber, viewport: { id: newViewportId } } = frameState;\n            this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n            this._statusMap[key].frameState = frameState;\n        }\n    }\n    /**\n     * Find request in the map\n     * @param key - unique key\n     * @returns\n     */\n    find(key) {\n        return this._statusMap[key];\n    }\n    /**\n     * Check it there are pending tile headers for the particular frameNumber\n     * @param viewportId\n     * @param frameNumber\n     * @returns\n     */\n    hasPendingTiles(viewportId, frameNumber) {\n        return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}