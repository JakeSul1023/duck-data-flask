{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getAttributeInfosByLocation } from \"../../adapter-utils/get-attribute-from-layouts.js\";\nimport { Resource } from \"./resource.js\";\n/**\n * Stores attribute bindings.\n * Makes it easy to share a render pipeline and use separate vertex arrays.\n * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance\n * reducing the number of WebGL calls per draw call.\n * @note On WebGPU this is just a convenience class that collects the bindings.\n */\nexport class VertexArray extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    renderPipeline: null\n  };\n  get [Symbol.toStringTag]() {\n    return 'VertexArray';\n  }\n  /** Max number of vertex attributes */\n  maxVertexAttributes;\n  /** Attribute infos indexed by location - TODO only needed by webgl module? */\n  attributeInfos;\n  /** Index buffer */\n  indexBuffer = null;\n  /** Attributes indexed by buffer slot */\n  attributes;\n  constructor(device, props) {\n    super(device, props, VertexArray.defaultProps);\n    this.maxVertexAttributes = device.limits.maxVertexAttributes;\n    this.attributes = new Array(this.maxVertexAttributes).fill(null);\n    const {\n      shaderLayout,\n      bufferLayout\n    } = props.renderPipeline || {};\n    if (!shaderLayout || !bufferLayout) {\n      throw new Error('VertexArray');\n    }\n    this.attributeInfos = getAttributeInfosByLocation(shaderLayout, bufferLayout, this.maxVertexAttributes);\n  }\n  // DEPRECATED METHODS\n  /** @deprecated Set constant attributes (WebGL only) */\n  setConstantWebGL(location, value) {\n    this.device.reportError(new Error('constant attributes not supported'));\n  }\n}\n//# sourceMappingURL=vertex-array.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}