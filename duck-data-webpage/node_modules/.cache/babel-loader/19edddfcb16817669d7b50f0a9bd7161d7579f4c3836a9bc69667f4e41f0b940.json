{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({\n  data,\n  getIndex,\n  dataRange,\n  replace\n}) {\n  const {\n    startRow = 0,\n    endRow = Infinity\n  } = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (endChunk) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}","map":{"version":3,"names":["replaceInRange","data","getIndex","dataRange","replace","startRow","endRow","Infinity","count","length","replaceStart","replaceEnd","i","row","index","dataLengthChanged","endChunk","slice","undefined"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\layers\\src\\utils.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({\n  data,\n  getIndex,\n  dataRange,\n  replace\n}: {\n  data: any[];\n  getIndex: (d: any) => number;\n  dataRange: {startRow?: number; endRow?: number};\n  replace: any[];\n}): {startRow: Number; endRow: number} {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (endChunk) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,OAAM,SAAUA,cAAcA,CAAC;EAC7BC,IAAI;EACJC,QAAQ;EACRC,SAAS;EACTC;AAAO,CAMR;EACC,MAAM;IAACC,QAAQ,GAAG,CAAC;IAAEC,MAAM,GAAGC;EAAQ,CAAC,GAAGJ,SAAS;EACnD,MAAMK,KAAK,GAAGP,IAAI,CAACQ,MAAM;EACzB,IAAIC,YAAY,GAAGF,KAAK;EACxB,IAAIG,UAAU,GAAGH,KAAK;EACtB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;IAC9B,MAAMC,GAAG,GAAGX,QAAQ,CAACD,IAAI,CAACW,CAAC,CAAC,CAAC;IAC7B,IAAIF,YAAY,GAAGE,CAAC,IAAIC,GAAG,IAAIR,QAAQ,EAAE;MACvCK,YAAY,GAAGE,CAAC;IAClB;IACA,IAAIC,GAAG,IAAIP,MAAM,EAAE;MACjBK,UAAU,GAAGC,CAAC;MACd;IACF;EACF;EACA,IAAIE,KAAK,GAAGJ,YAAY;EACxB,MAAMK,iBAAiB,GAAGJ,UAAU,GAAGD,YAAY,KAAKN,OAAO,CAACK,MAAM;EACtE;EACA,MAAMO,QAAQ,GAAGD,iBAAiB,GAAGd,IAAI,CAACgB,KAAK,CAACN,UAAU,CAAC,GAAGO,SAAS;EACvE;EACA,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,OAAO,CAACK,MAAM,EAAEG,CAAC,EAAE,EAAE;IACvCX,IAAI,CAACa,KAAK,EAAE,CAAC,GAAGV,OAAO,CAACQ,CAAC,CAAC;EAC5B;EACA,IAAII,QAAQ,EAAE;IACZ;IACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,QAAQ,CAACP,MAAM,EAAEG,CAAC,EAAE,EAAE;MACxCX,IAAI,CAACa,KAAK,EAAE,CAAC,GAAGE,QAAQ,CAACJ,CAAC,CAAC;IAC7B;IACA;IACAX,IAAI,CAACQ,MAAM,GAAGK,KAAK;EACrB;EAEA,OAAO;IACLT,QAAQ,EAAEK,YAAY;IACtBJ,MAAM,EAAEI,YAAY,GAAGN,OAAO,CAACK;GAChC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}