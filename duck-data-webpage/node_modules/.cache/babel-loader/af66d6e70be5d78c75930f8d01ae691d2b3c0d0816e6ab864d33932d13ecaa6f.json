{"ast":null,"code":"import { getPolygonSignedArea } from '@math.gl/polygon';\n/**\n * Convert GeoJSON features to Flat GeoJSON features\n *\n * @param features\n * @param options\n * @returns an Array of Flat GeoJSON features\n */\nexport function geojsonToFlatGeojson(features, options = {\n  coordLength: 2,\n  fixRingWinding: true\n}) {\n  return features.map(feature => flattenFeature(feature, options));\n}\n/**\n * Helper function to copy Point values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenPoint(coordinates, data, indices, options) {\n  indices.push(data.length);\n  data.push(...coordinates);\n  // Pad up to coordLength\n  for (let i = coordinates.length; i < options.coordLength; i++) {\n    data.push(0);\n  }\n}\n/**\n * Helper function to copy LineString values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenLineString(coordinates, data, indices, options) {\n  indices.push(data.length);\n  for (const c of coordinates) {\n    data.push(...c);\n    // Pad up to coordLength\n    for (let i = c.length; i < options.coordLength; i++) {\n      data.push(0);\n    }\n  }\n}\n/**\n * Helper function to copy Polygon values from `coordinates` into `data` & `indices` & `areas`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param areas\n * @param options\n */\nfunction flattenPolygon(coordinates, data, indices, areas, options) {\n  let count = 0;\n  const ringAreas = [];\n  const polygons = [];\n  for (const lineString of coordinates) {\n    const lineString2d = lineString.map(p => p.slice(0, 2));\n    let area = getPolygonSignedArea(lineString2d.flat());\n    const ccw = area < 0;\n    // Exterior ring must be CCW and interior rings CW\n    if (options.fixRingWinding && (count === 0 && !ccw || count > 0 && ccw)) {\n      lineString.reverse();\n      area = -area;\n    }\n    ringAreas.push(area);\n    flattenLineString(lineString, data, polygons, options);\n    count++;\n  }\n  if (count > 0) {\n    areas.push(ringAreas);\n    indices.push(polygons);\n  }\n}\n/**\n * Flatten single GeoJSON feature into Flat GeoJSON\n *\n * @param feature\n * @param options\n * @returns A Flat GeoJSON feature\n */\nfunction flattenFeature(feature, options) {\n  const {\n    geometry\n  } = feature;\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('GeometryCollection type not supported');\n  }\n  const data = [];\n  const indices = [];\n  let areas;\n  let type;\n  switch (geometry.type) {\n    case 'Point':\n      type = 'Point';\n      flattenPoint(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiPoint':\n      type = 'Point';\n      geometry.coordinates.map(c => flattenPoint(c, data, indices, options));\n      break;\n    case 'LineString':\n      type = 'LineString';\n      flattenLineString(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiLineString':\n      type = 'LineString';\n      geometry.coordinates.map(c => flattenLineString(c, data, indices, options));\n      break;\n    case 'Polygon':\n      type = 'Polygon';\n      areas = [];\n      flattenPolygon(geometry.coordinates, data, indices, areas, options);\n      break;\n    case 'MultiPolygon':\n      type = 'Polygon';\n      areas = [];\n      geometry.coordinates.map(c => flattenPolygon(c, data, indices, areas, options));\n      break;\n    default:\n      throw new Error(`Unknown type: ${type}`);\n  }\n  return {\n    ...feature,\n    geometry: {\n      type,\n      indices,\n      data,\n      areas\n    }\n  };\n}","map":{"version":3,"names":["getPolygonSignedArea","geojsonToFlatGeojson","features","options","coordLength","fixRingWinding","map","feature","flattenFeature","flattenPoint","coordinates","data","indices","push","length","i","flattenLineString","c","flattenPolygon","areas","count","ringAreas","polygons","lineString","lineString2d","p","slice","area","flat","ccw","reverse","geometry","type","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gis/dist/lib/binary-features/geojson-to-flat-geojson.js"],"sourcesContent":["import { getPolygonSignedArea } from '@math.gl/polygon';\n/**\n * Convert GeoJSON features to Flat GeoJSON features\n *\n * @param features\n * @param options\n * @returns an Array of Flat GeoJSON features\n */\nexport function geojsonToFlatGeojson(features, options = { coordLength: 2, fixRingWinding: true }) {\n    return features.map((feature) => flattenFeature(feature, options));\n}\n/**\n * Helper function to copy Point values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenPoint(coordinates, data, indices, options) {\n    indices.push(data.length);\n    data.push(...coordinates);\n    // Pad up to coordLength\n    for (let i = coordinates.length; i < options.coordLength; i++) {\n        data.push(0);\n    }\n}\n/**\n * Helper function to copy LineString values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenLineString(coordinates, data, indices, options) {\n    indices.push(data.length);\n    for (const c of coordinates) {\n        data.push(...c);\n        // Pad up to coordLength\n        for (let i = c.length; i < options.coordLength; i++) {\n            data.push(0);\n        }\n    }\n}\n/**\n * Helper function to copy Polygon values from `coordinates` into `data` & `indices` & `areas`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param areas\n * @param options\n */\nfunction flattenPolygon(coordinates, data, indices, areas, options) {\n    let count = 0;\n    const ringAreas = [];\n    const polygons = [];\n    for (const lineString of coordinates) {\n        const lineString2d = lineString.map((p) => p.slice(0, 2));\n        let area = getPolygonSignedArea(lineString2d.flat());\n        const ccw = area < 0;\n        // Exterior ring must be CCW and interior rings CW\n        if (options.fixRingWinding && ((count === 0 && !ccw) || (count > 0 && ccw))) {\n            lineString.reverse();\n            area = -area;\n        }\n        ringAreas.push(area);\n        flattenLineString(lineString, data, polygons, options);\n        count++;\n    }\n    if (count > 0) {\n        areas.push(ringAreas);\n        indices.push(polygons);\n    }\n}\n/**\n * Flatten single GeoJSON feature into Flat GeoJSON\n *\n * @param feature\n * @param options\n * @returns A Flat GeoJSON feature\n */\nfunction flattenFeature(feature, options) {\n    const { geometry } = feature;\n    if (geometry.type === 'GeometryCollection') {\n        throw new Error('GeometryCollection type not supported');\n    }\n    const data = [];\n    const indices = [];\n    let areas;\n    let type;\n    switch (geometry.type) {\n        case 'Point':\n            type = 'Point';\n            flattenPoint(geometry.coordinates, data, indices, options);\n            break;\n        case 'MultiPoint':\n            type = 'Point';\n            geometry.coordinates.map((c) => flattenPoint(c, data, indices, options));\n            break;\n        case 'LineString':\n            type = 'LineString';\n            flattenLineString(geometry.coordinates, data, indices, options);\n            break;\n        case 'MultiLineString':\n            type = 'LineString';\n            geometry.coordinates.map((c) => flattenLineString(c, data, indices, options));\n            break;\n        case 'Polygon':\n            type = 'Polygon';\n            areas = [];\n            flattenPolygon(geometry.coordinates, data, indices, areas, options);\n            break;\n        case 'MultiPolygon':\n            type = 'Polygon';\n            areas = [];\n            geometry.coordinates.map((c) => flattenPolygon(c, data, indices, areas, options));\n            break;\n        default:\n            throw new Error(`Unknown type: ${type}`);\n    }\n    return { ...feature, geometry: { type, indices, data, areas } };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}