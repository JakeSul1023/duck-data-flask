{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Goal is to make WebGL2 contexts look like WebGL1\n// @note Partly inspired by with some older code from the `regl` library\n/* eslint-disable camelcase */\nimport { GL } from '@luma.gl/constants';\n// webgl1 extensions natively supported by webgl2\nconst WEBGL1_STATIC_EXTENSIONS = {\n  WEBGL_depth_texture: {\n    UNSIGNED_INT_24_8_WEBGL: 34042\n  },\n  OES_element_index_uint: {},\n  OES_texture_float: {},\n  OES_texture_half_float: {\n    // @ts-expect-error different numbers?\n    HALF_FLOAT_OES: 5131\n  },\n  EXT_color_buffer_float: {},\n  OES_standard_derivatives: {\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 35723\n  },\n  EXT_frag_depth: {},\n  EXT_blend_minmax: {\n    MIN_EXT: 32775,\n    MAX_EXT: 32776\n  },\n  EXT_shader_texture_lod: {}\n};\nconst getWEBGL_draw_buffers = gl => ({\n  drawBuffersWEBGL(buffers) {\n    return gl.drawBuffers(buffers);\n  },\n  COLOR_ATTACHMENT0_WEBGL: 36064,\n  COLOR_ATTACHMENT1_WEBGL: 36065,\n  COLOR_ATTACHMENT2_WEBGL: 36066,\n  COLOR_ATTACHMENT3_WEBGL: 36067\n}); // - too many fields\nconst getOES_vertex_array_object = gl => ({\n  VERTEX_ARRAY_BINDING_OES: 34229,\n  createVertexArrayOES() {\n    return gl.createVertexArray();\n  },\n  deleteVertexArrayOES(vertexArray) {\n    return gl.deleteVertexArray(vertexArray);\n  },\n  isVertexArrayOES(vertexArray) {\n    return gl.isVertexArray(vertexArray);\n  },\n  bindVertexArrayOES(vertexArray) {\n    return gl.bindVertexArray(vertexArray);\n  }\n});\nconst getANGLE_instanced_arrays = gl => ({\n  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n  drawArraysInstancedANGLE(...args) {\n    return gl.drawArraysInstanced(...args);\n  },\n  drawElementsInstancedANGLE(...args) {\n    return gl.drawElementsInstanced(...args);\n  },\n  vertexAttribDivisorANGLE(...args) {\n    return gl.vertexAttribDivisor(...args);\n  }\n});\n/**\n * Make browser return WebGL2 contexts even if WebGL1 contexts are requested\n * @param enforce\n * @returns\n */\nexport function enforceWebGL2(enforce = true) {\n  const prototype = HTMLCanvasElement.prototype;\n  if (!enforce && prototype.originalGetContext) {\n    // Reset the original getContext function\n    prototype.getContext = prototype.originalGetContext;\n    prototype.originalGetContext = undefined;\n    return;\n  }\n  // Store the original getContext function\n  prototype.originalGetContext = prototype.getContext;\n  // Override the getContext function\n  prototype.getContext = function (contextId, options) {\n    // Attempt to force WebGL2 for all WebGL1 contexts\n    if (contextId === 'webgl' || contextId === 'experimental-webgl') {\n      const context = this.originalGetContext('webgl2', options);\n      // Work around test mocking\n      if (context instanceof HTMLElement) {\n        polyfillWebGL1Extensions(context);\n      }\n      return context;\n    }\n    // For any other type, return the original context\n    return this.originalGetContext(contextId, options);\n  };\n}\n/** Install WebGL1-only extensions on WebGL2 contexts */\nexport function polyfillWebGL1Extensions(gl) {\n  // Enable, to support float and half-float textures\n  gl.getExtension('EXT_color_buffer_float');\n  // WebGL1 extensions implemented using WebGL2 APIs\n  const boundExtensions = {\n    ...WEBGL1_STATIC_EXTENSIONS,\n    WEBGL_disjoint_timer_query: gl.getExtension('EXT_disjoint_timer_query_webgl2'),\n    WEBGL_draw_buffers: getWEBGL_draw_buffers(gl),\n    OES_vertex_array_object: getOES_vertex_array_object(gl),\n    ANGLE_instanced_arrays: getANGLE_instanced_arrays(gl)\n  };\n  // Override gl.getExtension\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetExtension = gl.getExtension;\n  gl.getExtension = function (extensionName) {\n    const ext = originalGetExtension.call(gl, extensionName);\n    if (ext) {\n      return ext;\n    }\n    // Injected extensions\n    if (extensionName in boundExtensions) {\n      return boundExtensions[extensionName];\n    }\n    return null;\n  };\n  // Override gl.getSupportedExtensions\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetSupportedExtensions = gl.getSupportedExtensions;\n  gl.getSupportedExtensions = function () {\n    const extensions = originalGetSupportedExtensions.apply(gl) || [];\n    return extensions?.concat(Object.keys(boundExtensions));\n  };\n}\n// Update unsized WebGL1 formats to sized WebGL2 formats\n// todo move to texture format file\n// export function getInternalFormat(gl: WebGL2RenderingContext, format: GL, type: GL): GL {\n//   // webgl2 texture formats\n//   // https://webgl2fundamentals.org/webgl/lessons/webgl-data-textures.html\n//   switch (format) {\n//     case GL.DEPTH_COMPONENT:\n//       return GL.DEPTH_COMPONENT24;\n//     case GL.DEPTH_STENCIL:\n//       return GL.DEPTH24_STENCIL8;\n//     case GL.RGBA:\n//       return type === GL.HALF_FLOAT ? GL.RGBA16F : GL.RGBA32F;\n//     case GL.RGB:\n//       return type === GL.HALF_FLOAT ? GL.RGB16F : GL.RGB32F;\n//     default:\n//       return format;\n//   }\n// }\n/*\n// texture type to update on the fly\nexport function getTextureType(gl: WebGL2RenderingContext, type: GL): GL {\n  if (type === HALF_FLOAT_OES) {\n    return GL.HALF_FLOAT;\n  }\n  return type;\n}\n\n  // And texImage2D to convert the internalFormat to webgl2.\n  const webgl2 = this;\n  const origTexImage = gl.texImage2D;\n  gl.texImage2D = function (target, miplevel, iformat, a, typeFor6, c, d, typeFor9, f) {\n    if (arguments.length == 6) {\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor6);\n      origTexImage.apply(gl, [target, miplevel, ifmt, a, webgl.getTextureType(gl, typeFor6), c]);\n    } else {\n      // arguments.length == 9\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor9);\n      origTexImage.apply(gl, [\n        target,\n        miplevel,\n        ifmt,\n        a,\n        typeFor6,\n        c,\n        d,\n        webgl2.getTextureType(gl, typeFor9),\n        f\n      ]);\n    }\n  };\n};\n*/","map":{"version":3,"names":["GL","WEBGL1_STATIC_EXTENSIONS","WEBGL_depth_texture","UNSIGNED_INT_24_8_WEBGL","OES_element_index_uint","OES_texture_float","OES_texture_half_float","HALF_FLOAT_OES","EXT_color_buffer_float","OES_standard_derivatives","FRAGMENT_SHADER_DERIVATIVE_HINT_OES","EXT_frag_depth","EXT_blend_minmax","MIN_EXT","MAX_EXT","EXT_shader_texture_lod","getWEBGL_draw_buffers","gl","drawBuffersWEBGL","buffers","drawBuffers","COLOR_ATTACHMENT0_WEBGL","COLOR_ATTACHMENT1_WEBGL","COLOR_ATTACHMENT2_WEBGL","COLOR_ATTACHMENT3_WEBGL","getOES_vertex_array_object","VERTEX_ARRAY_BINDING_OES","createVertexArrayOES","createVertexArray","deleteVertexArrayOES","vertexArray","deleteVertexArray","isVertexArrayOES","isVertexArray","bindVertexArrayOES","bindVertexArray","getANGLE_instanced_arrays","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","drawArraysInstancedANGLE","args","drawArraysInstanced","drawElementsInstancedANGLE","drawElementsInstanced","vertexAttribDivisorANGLE","vertexAttribDivisor","enforceWebGL2","enforce","prototype","HTMLCanvasElement","originalGetContext","getContext","undefined","contextId","options","context","HTMLElement","polyfillWebGL1Extensions","getExtension","boundExtensions","WEBGL_disjoint_timer_query","WEBGL_draw_buffers","OES_vertex_array_object","ANGLE_instanced_arrays","originalGetExtension","extensionName","ext","call","originalGetSupportedExtensions","getSupportedExtensions","extensions","apply","concat","Object","keys"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\context\\polyfills\\polyfill-webgl1-extensions.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Goal is to make WebGL2 contexts look like WebGL1\n// @note Partly inspired by with some older code from the `regl` library\n\n/* eslint-disable camelcase */\n\nimport {GL} from '@luma.gl/constants';\n\n// webgl1 extensions natively supported by webgl2\nconst WEBGL1_STATIC_EXTENSIONS = {\n  WEBGL_depth_texture: {\n    UNSIGNED_INT_24_8_WEBGL: GL.UNSIGNED_INT_24_8\n  } as const satisfies WEBGL_depth_texture,\n  OES_element_index_uint: {} as const satisfies OES_element_index_uint,\n  OES_texture_float: {} as const satisfies OES_texture_float,\n  OES_texture_half_float: {\n    // @ts-expect-error different numbers?\n    HALF_FLOAT_OES: GL.HALF_FLOAT\n  } as const satisfies OES_texture_half_float,\n  EXT_color_buffer_float: {} as const satisfies EXT_color_buffer_float,\n  OES_standard_derivatives: {\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GL.FRAGMENT_SHADER_DERIVATIVE_HINT\n  } as const satisfies OES_standard_derivatives,\n  EXT_frag_depth: {} as const satisfies EXT_frag_depth,\n  EXT_blend_minmax: {\n    MIN_EXT: GL.MIN,\n    MAX_EXT: GL.MAX\n  } as const satisfies EXT_blend_minmax,\n  EXT_shader_texture_lod: {} as const satisfies EXT_shader_texture_lod\n};\n\nconst getWEBGL_draw_buffers = (gl: WebGL2RenderingContext) =>\n  ({\n    drawBuffersWEBGL(buffers: number[]) {\n      return gl.drawBuffers(buffers);\n    },\n    COLOR_ATTACHMENT0_WEBGL: GL.COLOR_ATTACHMENT0,\n    COLOR_ATTACHMENT1_WEBGL: GL.COLOR_ATTACHMENT1,\n    COLOR_ATTACHMENT2_WEBGL: GL.COLOR_ATTACHMENT2,\n    COLOR_ATTACHMENT3_WEBGL: GL.COLOR_ATTACHMENT3\n  }) as const satisfies Partial<WEBGL_draw_buffers>; // - too many fields\n\nconst getOES_vertex_array_object = (gl: WebGL2RenderingContext) =>\n  ({\n    VERTEX_ARRAY_BINDING_OES: GL.VERTEX_ARRAY_BINDING,\n    createVertexArrayOES() {\n      return gl.createVertexArray();\n    },\n    deleteVertexArrayOES(vertexArray: WebGLVertexArrayObject): void {\n      return gl.deleteVertexArray(vertexArray);\n    },\n    isVertexArrayOES(vertexArray: WebGLVertexArrayObject): boolean {\n      return gl.isVertexArray(vertexArray);\n    },\n    bindVertexArrayOES(vertexArray: WebGLVertexArrayObject): void {\n      return gl.bindVertexArray(vertexArray);\n    }\n  }) as const satisfies OES_vertex_array_object;\n\nconst getANGLE_instanced_arrays = (gl: WebGL2RenderingContext) =>\n  ({\n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n    drawArraysInstancedANGLE(...args) {\n      return gl.drawArraysInstanced(...args);\n    },\n    drawElementsInstancedANGLE(...args) {\n      return gl.drawElementsInstanced(...args);\n    },\n    vertexAttribDivisorANGLE(...args) {\n      return gl.vertexAttribDivisor(...args);\n    }\n  }) as const satisfies ANGLE_instanced_arrays;\n\n/**\n * Make browser return WebGL2 contexts even if WebGL1 contexts are requested\n * @param enforce\n * @returns\n */\nexport function enforceWebGL2(enforce: boolean = true): void {\n  const prototype = HTMLCanvasElement.prototype as any;\n  if (!enforce && prototype.originalGetContext) {\n    // Reset the original getContext function\n    prototype.getContext = prototype.originalGetContext;\n    prototype.originalGetContext = undefined;\n    return;\n  }\n\n  // Store the original getContext function\n  prototype.originalGetContext = prototype.getContext;\n\n  // Override the getContext function\n  prototype.getContext = function (contextId: string, options?: WebGLContextAttributes) {\n    // Attempt to force WebGL2 for all WebGL1 contexts\n    if (contextId === 'webgl' || contextId === 'experimental-webgl') {\n      const context = this.originalGetContext('webgl2', options) as WebGL2RenderingContext;\n      // Work around test mocking\n      if (context instanceof HTMLElement) {\n        polyfillWebGL1Extensions(context);\n      }\n      return context;\n    }\n    // For any other type, return the original context\n    return this.originalGetContext(contextId, options);\n  };\n}\n\n/** Install WebGL1-only extensions on WebGL2 contexts */\nexport function polyfillWebGL1Extensions(gl: WebGL2RenderingContext): void {\n  // Enable, to support float and half-float textures\n  gl.getExtension('EXT_color_buffer_float');\n\n  // WebGL1 extensions implemented using WebGL2 APIs\n  const boundExtensions = {\n    ...WEBGL1_STATIC_EXTENSIONS,\n    WEBGL_disjoint_timer_query: gl.getExtension('EXT_disjoint_timer_query_webgl2'),\n    WEBGL_draw_buffers: getWEBGL_draw_buffers(gl),\n    OES_vertex_array_object: getOES_vertex_array_object(gl),\n    ANGLE_instanced_arrays: getANGLE_instanced_arrays(gl)\n  };\n\n  // Override gl.getExtension\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetExtension = gl.getExtension;\n  gl.getExtension = function (extensionName: string) {\n    const ext = originalGetExtension.call(gl, extensionName);\n    if (ext) {\n      return ext;\n    }\n\n    // Injected extensions\n    if (extensionName in boundExtensions) {\n      return boundExtensions[extensionName];\n    }\n\n    return null;\n  };\n\n  // Override gl.getSupportedExtensions\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetSupportedExtensions = gl.getSupportedExtensions;\n  gl.getSupportedExtensions = function (): string[] | null {\n    const extensions = originalGetSupportedExtensions.apply(gl) || [];\n    return extensions?.concat(Object.keys(boundExtensions));\n  };\n}\n\n// Update unsized WebGL1 formats to sized WebGL2 formats\n// todo move to texture format file\n// export function getInternalFormat(gl: WebGL2RenderingContext, format: GL, type: GL): GL {\n//   // webgl2 texture formats\n//   // https://webgl2fundamentals.org/webgl/lessons/webgl-data-textures.html\n//   switch (format) {\n//     case GL.DEPTH_COMPONENT:\n//       return GL.DEPTH_COMPONENT24;\n//     case GL.DEPTH_STENCIL:\n//       return GL.DEPTH24_STENCIL8;\n//     case GL.RGBA:\n//       return type === GL.HALF_FLOAT ? GL.RGBA16F : GL.RGBA32F;\n//     case GL.RGB:\n//       return type === GL.HALF_FLOAT ? GL.RGB16F : GL.RGB32F;\n//     default:\n//       return format;\n//   }\n// }\n\n/*\n// texture type to update on the fly\nexport function getTextureType(gl: WebGL2RenderingContext, type: GL): GL {\n  if (type === HALF_FLOAT_OES) {\n    return GL.HALF_FLOAT;\n  }\n  return type;\n}\n\n  // And texImage2D to convert the internalFormat to webgl2.\n  const webgl2 = this;\n  const origTexImage = gl.texImage2D;\n  gl.texImage2D = function (target, miplevel, iformat, a, typeFor6, c, d, typeFor9, f) {\n    if (arguments.length == 6) {\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor6);\n      origTexImage.apply(gl, [target, miplevel, ifmt, a, webgl.getTextureType(gl, typeFor6), c]);\n    } else {\n      // arguments.length == 9\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor9);\n      origTexImage.apply(gl, [\n        target,\n        miplevel,\n        ifmt,\n        a,\n        typeFor6,\n        c,\n        d,\n        webgl2.getTextureType(gl, typeFor9),\n        f\n      ]);\n    }\n  };\n};\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}