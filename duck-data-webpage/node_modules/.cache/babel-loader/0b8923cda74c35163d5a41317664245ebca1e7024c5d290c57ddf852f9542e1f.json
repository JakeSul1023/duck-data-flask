{"ast":null,"code":"import { I3SPendingTilesRegister } from \"./i3s-pending-tiles-register.js\";\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\n// A helper class to manage tile metadata fetching\nexport class I3STileManager {\n  _statusMap;\n  pendingTilesRegister = new I3SPendingTilesRegister();\n  constructor() {\n    this._statusMap = {};\n  }\n  /**\n   * Add request to map\n   * @param request - node metadata request\n   * @param key - unique key\n   * @param callback - callback after request completed\n   * @param frameState - frameState data\n   */\n  add(request, key, callback, frameState) {\n    if (!this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {\n          id\n        }\n      } = frameState;\n      this._statusMap[key] = {\n        request,\n        callback,\n        key,\n        frameState,\n        status: STATUS.REQUESTED\n      };\n      // Register pending request for the frameNumber\n      this.pendingTilesRegister.register(id, frameNumber);\n      request().then(data => {\n        this._statusMap[key].status = STATUS.COMPLETED;\n        const {\n          frameNumber: actualFrameNumber,\n          viewport: {\n            id\n          }\n        } = this._statusMap[key].frameState;\n        // Deregister pending request for the frameNumber\n        this.pendingTilesRegister.deregister(id, actualFrameNumber);\n        this._statusMap[key].callback(data, frameState);\n      }).catch(error => {\n        this._statusMap[key].status = STATUS.ERROR;\n        const {\n          frameNumber: actualFrameNumber,\n          viewport: {\n            id\n          }\n        } = this._statusMap[key].frameState;\n        // Deregister pending request for the frameNumber\n        this.pendingTilesRegister.deregister(id, actualFrameNumber);\n        callback(error);\n      });\n    }\n  }\n  /**\n   * Update request if it is still actual for the new frameState\n   * @param key - unique key\n   * @param frameState - frameState data\n   */\n  update(key, frameState) {\n    if (this._statusMap[key]) {\n      // Deregister pending request for the old frameNumber\n      const {\n        frameNumber,\n        viewport: {\n          id\n        }\n      } = this._statusMap[key].frameState;\n      this.pendingTilesRegister.deregister(id, frameNumber);\n      // Register pending request for the new frameNumber\n      const {\n        frameNumber: newFrameNumber,\n        viewport: {\n          id: newViewportId\n        }\n      } = frameState;\n      this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n  /**\n   * Find request in the map\n   * @param key - unique key\n   * @returns\n   */\n  find(key) {\n    return this._statusMap[key];\n  }\n  /**\n   * Check it there are pending tile headers for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  hasPendingTiles(viewportId, frameNumber) {\n    return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}