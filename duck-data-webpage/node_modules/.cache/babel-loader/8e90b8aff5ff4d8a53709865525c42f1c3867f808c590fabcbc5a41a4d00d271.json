{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from '@luma.gl/core';\nimport { loadScript } from \"../../utils/load-script.js\";\nconst LOG_LEVEL = 1;\nlet spector = null;\nlet initialized = false;\nexport const DEFAULT_SPECTOR_PROPS = {\n  debugSpectorJS: log.get('debug-spectorjs'),\n  // https://github.com/BabylonJS/Spector.js#basic-usage\n  // https://forum.babylonjs.com/t/spectorcdn-is-temporarily-off/48241\n  // spectorUrl: 'https://spectorcdn.babylonjs.com/spector.bundle.js';\n  debugSpectorJSUrl: 'https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js',\n  gl: undefined\n};\n/** Loads spector from CDN if not already installed */\nexport async function loadSpectorJS(props) {\n  if (!globalThis.SPECTOR) {\n    try {\n      await loadScript(props.debugSpectorJSUrl || DEFAULT_SPECTOR_PROPS.debugSpectorJSUrl);\n    } catch (error) {\n      log.warn(String(error));\n    }\n  }\n}\nexport function initializeSpectorJS(props) {\n  props = {\n    ...DEFAULT_SPECTOR_PROPS,\n    ...props\n  };\n  if (!props.debugSpectorJS) {\n    return null;\n  }\n  if (!spector && globalThis.SPECTOR && !globalThis.luma?.spector) {\n    log.probe(LOG_LEVEL, 'SPECTOR found and initialized. Start with `luma.spector.displayUI()`')();\n    const {\n      Spector: SpectorJS\n    } = globalThis.SPECTOR;\n    spector = new SpectorJS();\n    if (globalThis.luma) {\n      globalThis.luma.spector = spector;\n    }\n  }\n  if (!spector) {\n    return null;\n  }\n  if (!initialized) {\n    initialized = true;\n    // enables recording some extra information merged in the capture like texture memory sizes and formats\n    spector.spyCanvases();\n    // A callback when results are ready\n    spector?.onCaptureStarted.add(capture => log.info('Spector capture started:', capture)());\n    spector?.onCapture.add(capture => {\n      log.info('Spector capture complete:', capture)();\n      // Use undocumented Spector API to open the UI with our capture\n      // See https://github.com/BabylonJS/Spector.js/blob/767ad1195a25b85a85c381f400eb50a979239eca/src/spector.ts#L124\n      spector?.getResultUI();\n      // @ts-expect-error private\n      spector?.resultView.display();\n      // @ts-expect-error private\n      spector?.resultView.addCapture(capture);\n    });\n  }\n  if (props.gl) {\n    // capture startup\n    const gl = props.gl;\n    // @ts-expect-error\n    const device = gl.device;\n    spector?.startCapture(props.gl, 500); // 500 commands\n    // @ts-expect-error\n    gl.device = device;\n    new Promise(resolve => setTimeout(resolve, 2000)).then(_ => {\n      log.info('Spector capture stopped after 2 seconds')();\n      spector?.stopCapture();\n      // spector?.displayUI();\n    });\n  }\n  return spector;\n}","map":{"version":3,"names":["log","loadScript","LOG_LEVEL","spector","initialized","DEFAULT_SPECTOR_PROPS","debugSpectorJS","get","debugSpectorJSUrl","gl","undefined","loadSpectorJS","props","globalThis","SPECTOR","error","warn","String","initializeSpectorJS","luma","probe","Spector","SpectorJS","spyCanvases","onCaptureStarted","add","capture","info","onCapture","getResultUI","resultView","display","addCapture","device","startCapture","Promise","resolve","setTimeout","then","_","stopCapture"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\context\\debug\\spector.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '@luma.gl/core';\nimport {loadScript} from '../../utils/load-script';\n\nimport type {Spector} from './spector-types';\n\n/** Spector debug initialization options */\ntype SpectorProps = {\n  /** Whether spector.js is enabled */\n  debugSpectorJS?: boolean;\n  /** URL to load spector script from. Typically a CDN URL */\n  debugSpectorJSUrl?: string;\n  /** Canvas to monitor */\n  gl?: WebGL2RenderingContext;\n};\n\nconst LOG_LEVEL = 1;\n\nlet spector: Spector = null;\nlet initialized: boolean = false;\n\ndeclare global {\n  // @ts-ignore\n  // eslint-disable-next-line no-var\n  var SPECTOR: Spector;\n}\n\nexport const DEFAULT_SPECTOR_PROPS: Required<SpectorProps> = {\n  debugSpectorJS: log.get('debug-spectorjs'),\n  // https://github.com/BabylonJS/Spector.js#basic-usage\n  // https://forum.babylonjs.com/t/spectorcdn-is-temporarily-off/48241\n  // spectorUrl: 'https://spectorcdn.babylonjs.com/spector.bundle.js';\n  debugSpectorJSUrl: 'https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js',\n  gl: undefined!\n};\n\n/** Loads spector from CDN if not already installed */\nexport async function loadSpectorJS(props: {debugSpectorJSUrl?: string}): Promise<void> {\n  if (!globalThis.SPECTOR) {\n    try {\n      await loadScript(props.debugSpectorJSUrl || DEFAULT_SPECTOR_PROPS.debugSpectorJSUrl);\n    } catch (error) {\n      log.warn(String(error));\n    }\n  }\n}\n\nexport function initializeSpectorJS(props: SpectorProps): Spector | null {\n  props = {...DEFAULT_SPECTOR_PROPS, ...props};\n  if (!props.debugSpectorJS) {\n    return null;\n  }\n\n  if (!spector && globalThis.SPECTOR && !globalThis.luma?.spector) {\n    log.probe(LOG_LEVEL, 'SPECTOR found and initialized. Start with `luma.spector.displayUI()`')();\n    const {Spector: SpectorJS} = globalThis.SPECTOR as any;\n    spector = new SpectorJS();\n    if (globalThis.luma) {\n      (globalThis.luma as any).spector = spector;\n    }\n  }\n\n  if (!spector) {\n    return null;\n  }\n\n  if (!initialized) {\n    initialized = true;\n\n    // enables recording some extra information merged in the capture like texture memory sizes and formats\n    spector.spyCanvases();\n    // A callback when results are ready\n    spector?.onCaptureStarted.add((capture: unknown) =>\n      log.info('Spector capture started:', capture)()\n    );\n    spector?.onCapture.add((capture: unknown) => {\n      log.info('Spector capture complete:', capture)();\n      // Use undocumented Spector API to open the UI with our capture\n      // See https://github.com/BabylonJS/Spector.js/blob/767ad1195a25b85a85c381f400eb50a979239eca/src/spector.ts#L124\n      spector?.getResultUI();\n      // @ts-expect-error private\n      spector?.resultView.display();\n      // @ts-expect-error private\n      spector?.resultView.addCapture(capture);\n    });\n  }\n\n  if (props.gl) {\n    // capture startup\n    const gl = props.gl;\n    // @ts-expect-error\n    const device = gl.device;\n    spector?.startCapture(props.gl, 500); // 500 commands\n    // @ts-expect-error\n    gl.device = device;\n\n    new Promise(resolve => setTimeout(resolve, 2000)).then(_ => {\n      log.info('Spector capture stopped after 2 seconds')();\n      spector?.stopCapture();\n      // spector?.displayUI();\n    });\n  }\n\n  return spector;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}