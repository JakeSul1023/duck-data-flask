{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport * as React from 'react';\nimport { createElement } from 'react';\nimport { inheritsFrom } from \"./inherits-from.js\";\nimport { Layer, View } from '@deck.gl/core';\nimport { isComponent } from \"./evaluate-children.js\";\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node) {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}) {\n  const reactChildren = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews = {};\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n  return {\n    layers,\n    children: reactChildren,\n    views\n  };\n}\nfunction createLayer(LayerType, reactProps) {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}","map":{"version":3,"names":["React","createElement","inheritsFrom","Layer","View","isComponent","wrapInView","node","Array","isArray","map","type","Fragment","props","children","extractJSXLayers","layers","views","reactChildren","jsxLayers","jsxViews","Children","forEach","reactElement","ElementType","layer","createLayer","push","id","view","Object","keys","length","values","LayerType","reactProps","defaultProps","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\react\\src\\utils\\extract-jsx-layers.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport * as React from 'react';\nimport {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\nimport {isComponent} from './evaluate-children';\nimport type {LayersList, Viewport} from '@deck.gl/core';\n\nexport type DeckGLRenderCallbackArgs = {\n  /**\n   * the left offset of the current view, in pixels\n   */\n  x: number;\n  /**\n   * the top offset of the current view, in pixels\n   */\n  y: number;\n  /**\n   * the width of the current view, in pixels\n   */\n  width: number;\n  /**\n   * the height of the current view, in pixels\n   */\n  height: number;\n  /**\n   * the view state of the current view\n   */\n  viewState: any;\n  /**\n   * the `Viewport` instance of the current view\n   */\n  viewport: Viewport;\n};\n\nexport type DeckGLRenderCallback = (args: DeckGLRenderCallbackArgs) => React.ReactNode;\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node: React.ReactNode | DeckGLRenderCallback): React.ReactNode {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}: {\n  children?: React.ReactNode | DeckGLRenderCallback;\n  layers?: LayersList;\n  views?: View | View[] | null;\n}): {\n  children: React.ReactNode[];\n  layers: LayersList;\n  views: View | View[] | null;\n} {\n  const reactChildren: React.ReactNode[] = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers: LayersList = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews: Record<string, View> = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType: typeof Layer, reactProps: any): Layer {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}