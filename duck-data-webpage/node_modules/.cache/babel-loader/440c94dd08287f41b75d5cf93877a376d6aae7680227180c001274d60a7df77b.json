{"ast":null,"code":"import { VERSION } from \"./lib/utils/version.js\";\nimport { encodeGLTFSync } from \"./lib/encoders/encode-gltf.js\";\nimport { encodeExtensions } from \"./lib/api/gltf-extensions.js\";\n/**\n * GLTF exporter\n */\nexport const GLTFWriter = {\n  dataType: null,\n  batchType: null,\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  // We only support encoding to binary GLB, not to JSON GLTF\n  mimeTypes: ['model/gltf-binary'],\n  // 'model/gltf+json',\n  binary: true,\n  options: {\n    gltf: {}\n  },\n  encode: async (gltf, options = {}) => encodeSync(gltf, options),\n  encodeSync\n};\nfunction encodeSync(gltf, options = {}) {\n  const {\n    byteOffset = 0\n  } = options;\n  const gltfToEncode = encodeExtensions(gltf);\n  // Calculate length, then create arraybuffer and encode\n  const byteLength = encodeGLTFSync(gltfToEncode, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltfToEncode, dataView, byteOffset, options);\n  return arrayBuffer;\n}","map":{"version":3,"names":["VERSION","encodeGLTFSync","encodeExtensions","GLTFWriter","dataType","batchType","name","id","module","version","extensions","mimeTypes","binary","options","gltf","encode","encodeSync","byteOffset","gltfToEncode","byteLength","arrayBuffer","ArrayBuffer","dataView","DataView"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/gltf-writer.js"],"sourcesContent":["import { VERSION } from \"./lib/utils/version.js\";\nimport { encodeGLTFSync } from \"./lib/encoders/encode-gltf.js\";\nimport { encodeExtensions } from \"./lib/api/gltf-extensions.js\";\n/**\n * GLTF exporter\n */\nexport const GLTFWriter = {\n    dataType: null,\n    batchType: null,\n    name: 'glTF',\n    id: 'gltf',\n    module: 'gltf',\n    version: VERSION,\n    extensions: ['glb'], // We only support encoding to binary GLB, not to JSON GLTF\n    mimeTypes: ['model/gltf-binary'], // 'model/gltf+json',\n    binary: true,\n    options: {\n        gltf: {}\n    },\n    encode: async (gltf, options = {}) => encodeSync(gltf, options),\n    encodeSync\n};\nfunction encodeSync(gltf, options = {}) {\n    const { byteOffset = 0 } = options;\n    const gltfToEncode = encodeExtensions(gltf);\n    // Calculate length, then create arraybuffer and encode\n    const byteLength = encodeGLTFSync(gltfToEncode, null, byteOffset, options);\n    const arrayBuffer = new ArrayBuffer(byteLength);\n    const dataView = new DataView(arrayBuffer);\n    encodeGLTFSync(gltfToEncode, dataView, byteOffset, options);\n    return arrayBuffer;\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;EACtBC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,MAAM;EACZC,EAAE,EAAE,MAAM;EACVC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAET,OAAO;EAChBU,UAAU,EAAE,CAAC,KAAK,CAAC;EAAE;EACrBC,SAAS,EAAE,CAAC,mBAAmB,CAAC;EAAE;EAClCC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;IACLC,IAAI,EAAE,CAAC;EACX,CAAC;EACDC,MAAM,EAAE,MAAAA,CAAOD,IAAI,EAAED,OAAO,GAAG,CAAC,CAAC,KAAKG,UAAU,CAACF,IAAI,EAAED,OAAO,CAAC;EAC/DG;AACJ,CAAC;AACD,SAASA,UAAUA,CAACF,IAAI,EAAED,OAAO,GAAG,CAAC,CAAC,EAAE;EACpC,MAAM;IAAEI,UAAU,GAAG;EAAE,CAAC,GAAGJ,OAAO;EAClC,MAAMK,YAAY,GAAGhB,gBAAgB,CAACY,IAAI,CAAC;EAC3C;EACA,MAAMK,UAAU,GAAGlB,cAAc,CAACiB,YAAY,EAAE,IAAI,EAAED,UAAU,EAAEJ,OAAO,CAAC;EAC1E,MAAMO,WAAW,GAAG,IAAIC,WAAW,CAACF,UAAU,CAAC;EAC/C,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAACH,WAAW,CAAC;EAC1CnB,cAAc,CAACiB,YAAY,EAAEI,QAAQ,EAAEL,UAAU,EAAEJ,OAAO,CAAC;EAC3D,OAAOO,WAAW;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}