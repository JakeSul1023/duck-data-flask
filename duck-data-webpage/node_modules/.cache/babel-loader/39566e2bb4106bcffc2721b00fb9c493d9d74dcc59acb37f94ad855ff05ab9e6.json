{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\n/**\n * Calculate simplification data using optimized Douglas-Peucker algorithm\n *\n * @param coords contiguous list of coordinates\n * @param first first coord to simplify\n * @param last last coord to simplify\n * @param sqTolerance tolerance (square distance)\n */\nexport function simplifyPath(coords, first, last, sqTolerance) {\n  let maxSqDist = sqTolerance;\n  const mid = last - first >> 1;\n  let minPosToMid = last - first;\n  let index;\n  const ax = coords[first];\n  const ay = coords[first + 1];\n  const bx = coords[last];\n  const by = coords[last + 1];\n  for (let i = first + 3; i < last; i += 3) {\n    const d = getSqSegDist(coords[i], coords[i + 1], ax, ay, bx, by);\n    if (d > maxSqDist) {\n      index = i;\n      maxSqDist = d;\n    } else if (d === maxSqDist) {\n      // a workaround to ensure we choose a pivot close to the middle of the list,\n      // reducing recursion depth, for certain degenerate inputs\n      // https://github.com/mapbox/geojson-vt/issues/104\n      const posToMid = Math.abs(i - mid);\n      if (posToMid < minPosToMid) {\n        index = i;\n        minPosToMid = posToMid;\n      }\n    }\n  }\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 3) simplifyPath(coords, first, index, sqTolerance);\n    coords[index + 2] = maxSqDist;\n    if (last - index > 3) simplifyPath(coords, index, last, sqTolerance);\n  }\n}\n/** square distance from a point to a segment */\n// eslint-disable-next-line max-params\nfunction getSqSegDist(px, py, x, y, bx, by) {\n  let dx = bx - x;\n  let dy = by - y;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x = bx;\n      y = by;\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n  dx = px - x;\n  dy = py - y;\n  return dx * dx + dy * dy;\n}","map":{"version":3,"names":["simplifyPath","coords","first","last","sqTolerance","maxSqDist","mid","minPosToMid","index","ax","ay","bx","by","i","d","getSqSegDist","posToMid","Math","abs","px","py","x","y","dx","dy","t"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/mvt/dist/lib/vector-tiler/features/simplify-path.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\n/**\n * Calculate simplification data using optimized Douglas-Peucker algorithm\n *\n * @param coords contiguous list of coordinates\n * @param first first coord to simplify\n * @param last last coord to simplify\n * @param sqTolerance tolerance (square distance)\n */\nexport function simplifyPath(coords, first, last, sqTolerance) {\n    let maxSqDist = sqTolerance;\n    const mid = (last - first) >> 1;\n    let minPosToMid = last - first;\n    let index;\n    const ax = coords[first];\n    const ay = coords[first + 1];\n    const bx = coords[last];\n    const by = coords[last + 1];\n    for (let i = first + 3; i < last; i += 3) {\n        const d = getSqSegDist(coords[i], coords[i + 1], ax, ay, bx, by);\n        if (d > maxSqDist) {\n            index = i;\n            maxSqDist = d;\n        }\n        else if (d === maxSqDist) {\n            // a workaround to ensure we choose a pivot close to the middle of the list,\n            // reducing recursion depth, for certain degenerate inputs\n            // https://github.com/mapbox/geojson-vt/issues/104\n            const posToMid = Math.abs(i - mid);\n            if (posToMid < minPosToMid) {\n                index = i;\n                minPosToMid = posToMid;\n            }\n        }\n    }\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 3)\n            simplifyPath(coords, first, index, sqTolerance);\n        coords[index + 2] = maxSqDist;\n        if (last - index > 3)\n            simplifyPath(coords, index, last, sqTolerance);\n    }\n}\n/** square distance from a point to a segment */\n// eslint-disable-next-line max-params\nfunction getSqSegDist(px, py, x, y, bx, by) {\n    let dx = bx - x;\n    let dy = by - y;\n    if (dx !== 0 || dy !== 0) {\n        const t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x = bx;\n            y = by;\n        }\n        else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n    dx = px - x;\n    dy = py - y;\n    return dx * dx + dy * dy;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAYA,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,WAAW,EAAE;EAC3D,IAAIC,SAAS,GAAGD,WAAW;EAC3B,MAAME,GAAG,GAAIH,IAAI,GAAGD,KAAK,IAAK,CAAC;EAC/B,IAAIK,WAAW,GAAGJ,IAAI,GAAGD,KAAK;EAC9B,IAAIM,KAAK;EACT,MAAMC,EAAE,GAAGR,MAAM,CAACC,KAAK,CAAC;EACxB,MAAMQ,EAAE,GAAGT,MAAM,CAACC,KAAK,GAAG,CAAC,CAAC;EAC5B,MAAMS,EAAE,GAAGV,MAAM,CAACE,IAAI,CAAC;EACvB,MAAMS,EAAE,GAAGX,MAAM,CAACE,IAAI,GAAG,CAAC,CAAC;EAC3B,KAAK,IAAIU,CAAC,GAAGX,KAAK,GAAG,CAAC,EAAEW,CAAC,GAAGV,IAAI,EAAEU,CAAC,IAAI,CAAC,EAAE;IACtC,MAAMC,CAAC,GAAGC,YAAY,CAACd,MAAM,CAACY,CAAC,CAAC,EAAEZ,MAAM,CAACY,CAAC,GAAG,CAAC,CAAC,EAAEJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IAChE,IAAIE,CAAC,GAAGT,SAAS,EAAE;MACfG,KAAK,GAAGK,CAAC;MACTR,SAAS,GAAGS,CAAC;IACjB,CAAC,MACI,IAAIA,CAAC,KAAKT,SAAS,EAAE;MACtB;MACA;MACA;MACA,MAAMW,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACL,CAAC,GAAGP,GAAG,CAAC;MAClC,IAAIU,QAAQ,GAAGT,WAAW,EAAE;QACxBC,KAAK,GAAGK,CAAC;QACTN,WAAW,GAAGS,QAAQ;MAC1B;IACJ;EACJ;EACA,IAAIX,SAAS,GAAGD,WAAW,EAAE;IACzB,IAAII,KAAK,GAAGN,KAAK,GAAG,CAAC,EACjBF,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAEM,KAAK,EAAEJ,WAAW,CAAC;IACnDH,MAAM,CAACO,KAAK,GAAG,CAAC,CAAC,GAAGH,SAAS;IAC7B,IAAIF,IAAI,GAAGK,KAAK,GAAG,CAAC,EAChBR,YAAY,CAACC,MAAM,EAAEO,KAAK,EAAEL,IAAI,EAAEC,WAAW,CAAC;EACtD;AACJ;AACA;AACA;AACA,SAASW,YAAYA,CAACI,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEX,EAAE,EAAEC,EAAE,EAAE;EACxC,IAAIW,EAAE,GAAGZ,EAAE,GAAGU,CAAC;EACf,IAAIG,EAAE,GAAGZ,EAAE,GAAGU,CAAC;EACf,IAAIC,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAK,CAAC,EAAE;IACtB,MAAMC,CAAC,GAAG,CAAC,CAACN,EAAE,GAAGE,CAAC,IAAIE,EAAE,GAAG,CAACH,EAAE,GAAGE,CAAC,IAAIE,EAAE,KAAKD,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IAC/D,IAAIC,CAAC,GAAG,CAAC,EAAE;MACPJ,CAAC,GAAGV,EAAE;MACNW,CAAC,GAAGV,EAAE;IACV,CAAC,MACI,IAAIa,CAAC,GAAG,CAAC,EAAE;MACZJ,CAAC,IAAIE,EAAE,GAAGE,CAAC;MACXH,CAAC,IAAIE,EAAE,GAAGC,CAAC;IACf;EACJ;EACAF,EAAE,GAAGJ,EAAE,GAAGE,CAAC;EACXG,EAAE,GAAGJ,EAAE,GAAGE,CAAC;EACX,OAAOC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}