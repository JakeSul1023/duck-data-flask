{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { deduceTableSchema } from \"./table-schema.js\";\nexport function makeTableFromData(data) {\n  let table;\n  switch (getTableShapeFromData(data)) {\n    case 'array-row-table':\n      table = {\n        shape: 'array-row-table',\n        data: data\n      };\n      break;\n    case 'object-row-table':\n      table = {\n        shape: 'object-row-table',\n        data: data\n      };\n      break;\n    case 'columnar-table':\n      table = {\n        shape: 'columnar-table',\n        data: data\n      };\n      break;\n    default:\n      throw new Error('table');\n  }\n  const schema = deduceTableSchema(table);\n  return {\n    ...table,\n    schema\n  };\n}\n/** Helper function to get shape of data */\nfunction getTableShapeFromData(data) {\n  if (Array.isArray(data)) {\n    if (data.length === 0) {\n      throw new Error('cannot deduce type of empty table');\n    }\n    // Deduce the table shape from the first row\n    const firstRow = data[0];\n    if (Array.isArray(firstRow)) {\n      return 'array-row-table';\n    }\n    if (firstRow && typeof firstRow === 'object') {\n      return 'object-row-table';\n    }\n  }\n  if (data && typeof data === 'object') {\n    return 'columnar-table';\n  }\n  throw new Error('invalid table');\n}\n/** Convert any table into object row format *\nexport function makeColumnarTable(table: Table): ColumnarTable {\n  if (table.shape === 'columnar-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'columnar-table',\n    schema: table.schema,\n    data\n  };\n}\n\n\n/** Convert any table into array row format *\nexport function makeArrayRowTable(table: TableLike): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format *\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n*/","map":{"version":3,"names":["deduceTableSchema","makeTableFromData","data","table","getTableShapeFromData","shape","Error","schema","Array","isArray","length","firstRow"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/simple-table/make-table.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { deduceTableSchema } from \"./table-schema.js\";\nexport function makeTableFromData(data) {\n    let table;\n    switch (getTableShapeFromData(data)) {\n        case 'array-row-table':\n            table = { shape: 'array-row-table', data: data };\n            break;\n        case 'object-row-table':\n            table = { shape: 'object-row-table', data: data };\n            break;\n        case 'columnar-table':\n            table = { shape: 'columnar-table', data: data };\n            break;\n        default:\n            throw new Error('table');\n    }\n    const schema = deduceTableSchema(table);\n    return { ...table, schema };\n}\n/** Helper function to get shape of data */\nfunction getTableShapeFromData(data) {\n    if (Array.isArray(data)) {\n        if (data.length === 0) {\n            throw new Error('cannot deduce type of empty table');\n        }\n        // Deduce the table shape from the first row\n        const firstRow = data[0];\n        if (Array.isArray(firstRow)) {\n            return 'array-row-table';\n        }\n        if (firstRow && typeof firstRow === 'object') {\n            return 'object-row-table';\n        }\n    }\n    if (data && typeof data === 'object') {\n        return 'columnar-table';\n    }\n    throw new Error('invalid table');\n}\n/** Convert any table into object row format *\nexport function makeColumnarTable(table: Table): ColumnarTable {\n  if (table.shape === 'columnar-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'columnar-table',\n    schema: table.schema,\n    data\n  };\n}\n\n\n/** Convert any table into array row format *\nexport function makeArrayRowTable(table: TableLike): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format *\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n*/\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,iBAAiB,QAAQ,mBAAmB;AACrD,OAAO,SAASC,iBAAiBA,CAACC,IAAI,EAAE;EACpC,IAAIC,KAAK;EACT,QAAQC,qBAAqB,CAACF,IAAI,CAAC;IAC/B,KAAK,iBAAiB;MAClBC,KAAK,GAAG;QAAEE,KAAK,EAAE,iBAAiB;QAAEH,IAAI,EAAEA;MAAK,CAAC;MAChD;IACJ,KAAK,kBAAkB;MACnBC,KAAK,GAAG;QAAEE,KAAK,EAAE,kBAAkB;QAAEH,IAAI,EAAEA;MAAK,CAAC;MACjD;IACJ,KAAK,gBAAgB;MACjBC,KAAK,GAAG;QAAEE,KAAK,EAAE,gBAAgB;QAAEH,IAAI,EAAEA;MAAK,CAAC;MAC/C;IACJ;MACI,MAAM,IAAII,KAAK,CAAC,OAAO,CAAC;EAChC;EACA,MAAMC,MAAM,GAAGP,iBAAiB,CAACG,KAAK,CAAC;EACvC,OAAO;IAAE,GAAGA,KAAK;IAAEI;EAAO,CAAC;AAC/B;AACA;AACA,SAASH,qBAAqBA,CAACF,IAAI,EAAE;EACjC,IAAIM,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;IACrB,IAAIA,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;MACnB,MAAM,IAAIJ,KAAK,CAAC,mCAAmC,CAAC;IACxD;IACA;IACA,MAAMK,QAAQ,GAAGT,IAAI,CAAC,CAAC,CAAC;IACxB,IAAIM,KAAK,CAACC,OAAO,CAACE,QAAQ,CAAC,EAAE;MACzB,OAAO,iBAAiB;IAC5B;IACA,IAAIA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC1C,OAAO,kBAAkB;IAC7B;EACJ;EACA,IAAIT,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAClC,OAAO,gBAAgB;EAC3B;EACA,MAAM,IAAII,KAAK,CAAC,eAAe,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}