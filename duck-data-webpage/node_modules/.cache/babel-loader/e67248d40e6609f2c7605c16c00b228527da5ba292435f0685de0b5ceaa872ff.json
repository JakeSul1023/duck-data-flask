{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parseFromContext } from '@loaders.gl/loader-utils';\nimport { parseQuantizedMesh } from \"./lib/parse-quantized-mesh.js\";\nimport { makeTerrainMeshFromImage } from \"./lib/parse-terrain.js\";\nimport { TerrainLoader as TerrainWorkerLoader } from \"./terrain-loader.js\";\nimport { QuantizedMeshLoader as QuantizedMeshWorkerLoader } from \"./quantized-mesh-loader.js\";\n// TerrainLoader\nexport { TerrainWorkerLoader };\nexport const TerrainLoader = {\n  ...TerrainWorkerLoader,\n  parse: parseTerrain\n};\nexport async function parseTerrain(arrayBuffer, options, context) {\n  const loadImageOptions = {\n    ...options,\n    mimeType: 'application/x.image',\n    image: {\n      ...options?.image,\n      type: 'data'\n    }\n  };\n  const image = await parseFromContext(arrayBuffer, [], loadImageOptions, context);\n  // Extend function to support additional mesh generation options (square grid or delatin)\n  const terrainOptions = {\n    ...TerrainLoader.options.terrain,\n    ...options?.terrain\n  };\n  // @ts-expect-error sort out image typing asap\n  return makeTerrainMeshFromImage(image, terrainOptions);\n}\n// QuantizedMeshLoader\nexport { QuantizedMeshWorkerLoader };\n/**\n * Loader for quantized meshes\n */\nexport const QuantizedMeshLoader = {\n  ...QuantizedMeshWorkerLoader,\n  parseSync: (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options?.['quantized-mesh']),\n  parse: async (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options?.['quantized-mesh'])\n};","map":{"version":3,"names":["parseFromContext","parseQuantizedMesh","makeTerrainMeshFromImage","TerrainLoader","TerrainWorkerLoader","QuantizedMeshLoader","QuantizedMeshWorkerLoader","parse","parseTerrain","arrayBuffer","options","context","loadImageOptions","mimeType","image","type","terrainOptions","terrain","parseSync"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/terrain/dist/index.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parseFromContext } from '@loaders.gl/loader-utils';\nimport { parseQuantizedMesh } from \"./lib/parse-quantized-mesh.js\";\nimport { makeTerrainMeshFromImage } from \"./lib/parse-terrain.js\";\nimport { TerrainLoader as TerrainWorkerLoader } from \"./terrain-loader.js\";\nimport { QuantizedMeshLoader as QuantizedMeshWorkerLoader } from \"./quantized-mesh-loader.js\";\n// TerrainLoader\nexport { TerrainWorkerLoader };\nexport const TerrainLoader = {\n    ...TerrainWorkerLoader,\n    parse: parseTerrain\n};\nexport async function parseTerrain(arrayBuffer, options, context) {\n    const loadImageOptions = {\n        ...options,\n        mimeType: 'application/x.image',\n        image: { ...options?.image, type: 'data' }\n    };\n    const image = await parseFromContext(arrayBuffer, [], loadImageOptions, context);\n    // Extend function to support additional mesh generation options (square grid or delatin)\n    const terrainOptions = { ...TerrainLoader.options.terrain, ...options?.terrain };\n    // @ts-expect-error sort out image typing asap\n    return makeTerrainMeshFromImage(image, terrainOptions);\n}\n// QuantizedMeshLoader\nexport { QuantizedMeshWorkerLoader };\n/**\n * Loader for quantized meshes\n */\nexport const QuantizedMeshLoader = {\n    ...QuantizedMeshWorkerLoader,\n    parseSync: (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options?.['quantized-mesh']),\n    parse: async (arrayBuffer, options) => parseQuantizedMesh(arrayBuffer, options?.['quantized-mesh'])\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,kBAAkB,QAAQ,+BAA+B;AAClE,SAASC,wBAAwB,QAAQ,wBAAwB;AACjE,SAASC,aAAa,IAAIC,mBAAmB,QAAQ,qBAAqB;AAC1E,SAASC,mBAAmB,IAAIC,yBAAyB,QAAQ,4BAA4B;AAC7F;AACA,SAASF,mBAAmB;AAC5B,OAAO,MAAMD,aAAa,GAAG;EACzB,GAAGC,mBAAmB;EACtBG,KAAK,EAAEC;AACX,CAAC;AACD,OAAO,eAAeA,YAAYA,CAACC,WAAW,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC9D,MAAMC,gBAAgB,GAAG;IACrB,GAAGF,OAAO;IACVG,QAAQ,EAAE,qBAAqB;IAC/BC,KAAK,EAAE;MAAE,GAAGJ,OAAO,EAAEI,KAAK;MAAEC,IAAI,EAAE;IAAO;EAC7C,CAAC;EACD,MAAMD,KAAK,GAAG,MAAMd,gBAAgB,CAACS,WAAW,EAAE,EAAE,EAAEG,gBAAgB,EAAED,OAAO,CAAC;EAChF;EACA,MAAMK,cAAc,GAAG;IAAE,GAAGb,aAAa,CAACO,OAAO,CAACO,OAAO;IAAE,GAAGP,OAAO,EAAEO;EAAQ,CAAC;EAChF;EACA,OAAOf,wBAAwB,CAACY,KAAK,EAAEE,cAAc,CAAC;AAC1D;AACA;AACA,SAASV,yBAAyB;AAClC;AACA;AACA;AACA,OAAO,MAAMD,mBAAmB,GAAG;EAC/B,GAAGC,yBAAyB;EAC5BY,SAAS,EAAEA,CAACT,WAAW,EAAEC,OAAO,KAAKT,kBAAkB,CAACQ,WAAW,EAAEC,OAAO,GAAG,gBAAgB,CAAC,CAAC;EACjGH,KAAK,EAAE,MAAAA,CAAOE,WAAW,EAAEC,OAAO,KAAKT,kBAAkB,CAACQ,WAAW,EAAEC,OAAO,GAAG,gBAAgB,CAAC;AACtG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}