{"ast":null,"code":"import { jsx as _jsx } from \"preact/jsx-runtime\";\n// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* global document */\nimport { WidgetImpl } from \"./widget-impl.js\";\nimport { render } from 'preact';\nimport { IconButton } from \"./components.js\";\n/**\n * A button widget that captures a screenshot of the current canvas and downloads it as a (png) file.\n * @note only captures canvas contents, not HTML DOM or CSS styles\n */\nexport class ScreenshotWidget extends WidgetImpl {\n  constructor(props = {}) {\n    super({\n      ...ScreenshotWidget.defaultProps,\n      ...props\n    });\n    this.className = 'deck-widget-screenshot';\n    this.placement = 'top-left';\n    this.placement = props.placement ?? this.placement;\n  }\n  setProps(props) {\n    this.placement = props.placement ?? this.placement;\n    super.setProps(props);\n  }\n  onRenderHTML() {\n    const element = this.element;\n    if (!element) return;\n    render(_jsx(IconButton, {\n      className: \"deck-widget-camera\",\n      label: this.props.label,\n      onClick: this.handleClick.bind(this)\n    }), element);\n  }\n  handleClick() {\n    // Allow user to override the capture logic\n    if (this.props.onCapture) {\n      this.props.onCapture(this);\n      return;\n    }\n    const dataURL = this.captureScreenToDataURL(this.props.imageFormat);\n    if (dataURL) {\n      this.downloadDataURL(dataURL, this.props.filename);\n    }\n  }\n  /** @note only captures canvas contents, not HTML DOM or CSS styles */\n  captureScreenToDataURL(imageFormat) {\n    const canvas = this.deck?.getCanvas();\n    return canvas?.toDataURL(imageFormat);\n  }\n  /** Download a data URL */\n  downloadDataURL(dataURL, filename) {\n    const link = document.createElement('a');\n    link.href = dataURL;\n    link.download = filename;\n    link.click();\n  }\n}\nScreenshotWidget.defaultProps = {\n  ...WidgetImpl.defaultProps,\n  id: 'screenshot',\n  placement: 'top-left',\n  label: 'Screenshot',\n  filename: 'screenshot.png',\n  imageFormat: 'image/png',\n  onCapture: undefined\n};","map":{"version":3,"names":["WidgetImpl","render","IconButton","ScreenshotWidget","constructor","props","defaultProps","className","placement","setProps","onRenderHTML","element","_jsx","label","onClick","handleClick","bind","onCapture","dataURL","captureScreenToDataURL","imageFormat","downloadDataURL","filename","canvas","deck","getCanvas","toDataURL","link","document","createElement","href","download","click","id","undefined"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\widgets\\src\\screenshot-widget.tsx"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* global document */\nimport {WidgetImpl, WidgetImplProps} from './widget-impl';\nimport {h, render} from 'preact';\nimport {IconButton} from './components';\nimport type {WidgetPlacement} from '@deck.gl/core';\n\n/** Properties for the ScreenshotWidget */\nexport type ScreenshotWidgetProps = WidgetImplProps & {\n  /** Widget positioning within the view. Default 'top-left'. */\n  placement?: WidgetPlacement;\n  /** Tooltip message */\n  label?: string;\n  /** Filename to save to */\n  filename?: string;\n  /** Image format */\n  imageFormat?: 'image/png' | 'image/jpeg';\n  /** Callback, if defined user overrides the capture logic */\n  onCapture?: (widget: ScreenshotWidget) => void;\n};\n\n/**\n * A button widget that captures a screenshot of the current canvas and downloads it as a (png) file.\n * @note only captures canvas contents, not HTML DOM or CSS styles\n */\nexport class ScreenshotWidget extends WidgetImpl<ScreenshotWidgetProps> {\n  static defaultProps: Required<ScreenshotWidgetProps> = {\n    ...WidgetImpl.defaultProps,\n    id: 'screenshot',\n    placement: 'top-left',\n    label: 'Screenshot',\n    filename: 'screenshot.png',\n    imageFormat: 'image/png',\n    onCapture: undefined!\n  };\n\n  className = 'deck-widget-screenshot';\n  placement: WidgetPlacement = 'top-left';\n\n  constructor(props: ScreenshotWidgetProps = {}) {\n    super({...ScreenshotWidget.defaultProps, ...props});\n    this.placement = props.placement ?? this.placement;\n  }\n\n  setProps(props: Partial<ScreenshotWidgetProps>) {\n    this.placement = props.placement ?? this.placement;\n    super.setProps(props);\n  }\n\n  onRenderHTML() {\n    const element = this.element;\n    if (!element) return;\n    render(\n      <IconButton\n        className=\"deck-widget-camera\"\n        label={this.props.label}\n        onClick={this.handleClick.bind(this)}\n      />,\n      element\n    );\n  }\n\n  handleClick() {\n    // Allow user to override the capture logic\n    if (this.props.onCapture) {\n      this.props.onCapture(this);\n      return;\n    }\n    const dataURL = this.captureScreenToDataURL(this.props.imageFormat);\n    if (dataURL) {\n      this.downloadDataURL(dataURL, this.props.filename);\n    }\n  }\n\n  /** @note only captures canvas contents, not HTML DOM or CSS styles */\n  captureScreenToDataURL(imageFormat: string): string | undefined {\n    const canvas = this.deck?.getCanvas();\n    return canvas?.toDataURL(imageFormat);\n  }\n\n  /** Download a data URL */\n  downloadDataURL(dataURL: string, filename: string): void {\n    const link = document.createElement('a');\n    link.href = dataURL;\n    link.download = filename;\n    link.click();\n  }\n}\n"],"mappings":";AAAA;AACA;AACA;AAEA;AACA,SAAQA,UAAU,QAAkB;AACpC,SAAWC,MAAM,QAAO,QAAQ;AAChC,SAAQC,UAAU,QAAC;AAiBnB;;;;AAIA,OAAM,MAAOC,gBAAiB,SAAQH,UAAiC;EAcrEI,YAAYC,KAAA,GAA+B,EAAE;IAC3C,KAAK,CAAC;MAAC,GAAGF,gBAAgB,CAACG,YAAY;MAAE,GAAGD;IAAK,CAAC,CAAC;IAJrD,KAAAE,SAAS,GAAG,wBAAwB;IACpC,KAAAC,SAAS,GAAoB,UAAU;IAIrC,IAAI,CAACA,SAAS,GAAGH,KAAK,CAACG,SAAS,IAAI,IAAI,CAACA,SAAS;EACpD;EAEAC,QAAQA,CAACJ,KAAqC;IAC5C,IAAI,CAACG,SAAS,GAAGH,KAAK,CAACG,SAAS,IAAI,IAAI,CAACA,SAAS;IAClD,KAAK,CAACC,QAAQ,CAACJ,KAAK,CAAC;EACvB;EAEAK,YAAYA,CAAA;IACV,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,CAACA,OAAO,EAAE;IACdV,MAAM,CACJW,IAAA,CAACV,UAAU;MACTK,SAAS,EAAC,oBAAoB;MAC9BM,KAAK,EAAE,IAAI,CAACR,KAAK,CAACQ,KAAK;MACvBC,OAAO,EAAE,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI;IAAC,EACpC,EACFL,OAAO,CACR;EACH;EAEAI,WAAWA,CAAA;IACT;IACA,IAAI,IAAI,CAACV,KAAK,CAACY,SAAS,EAAE;MACxB,IAAI,CAACZ,KAAK,CAACY,SAAS,CAAC,IAAI,CAAC;MAC1B;IACF;IACA,MAAMC,OAAO,GAAG,IAAI,CAACC,sBAAsB,CAAC,IAAI,CAACd,KAAK,CAACe,WAAW,CAAC;IACnE,IAAIF,OAAO,EAAE;MACX,IAAI,CAACG,eAAe,CAACH,OAAO,EAAE,IAAI,CAACb,KAAK,CAACiB,QAAQ,CAAC;IACpD;EACF;EAEA;EACAH,sBAAsBA,CAACC,WAAmB;IACxC,MAAMG,MAAM,GAAG,IAAI,CAACC,IAAI,EAAEC,SAAS,EAAE;IACrC,OAAOF,MAAM,EAAEG,SAAS,CAACN,WAAW,CAAC;EACvC;EAEA;EACAC,eAAeA,CAACH,OAAe,EAAEI,QAAgB;IAC/C,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGZ,OAAO;IACnBS,IAAI,CAACI,QAAQ,GAAGT,QAAQ;IACxBK,IAAI,CAACK,KAAK,EAAE;EACd;;AA5DO7B,gBAAA,CAAAG,YAAY,GAAoC;EACrD,GAAGN,UAAU,CAACM,YAAY;EAC1B2B,EAAE,EAAE,YAAY;EAChBzB,SAAS,EAAE,UAAU;EACrBK,KAAK,EAAE,YAAY;EACnBS,QAAQ,EAAE,gBAAgB;EAC1BF,WAAW,EAAE,WAAW;EACxBH,SAAS,EAAEiB;CACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}