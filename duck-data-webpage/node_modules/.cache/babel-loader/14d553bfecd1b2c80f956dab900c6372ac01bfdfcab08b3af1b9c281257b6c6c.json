{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst logState = {\n  attributeUpdateStart: -1,\n  attributeManagerUpdateStart: -1,\n  attributeUpdateMessages: []\n};\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\nexport const getLoggers = log => ({\n  /* Layer events */\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layer} because: ${Object.keys(flags).filter(key => flags[key]).join(', ')}`)();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n  /* CompositeLayer events */\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Composite layer rendered new subLayers ${layer}`, subLayers)();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n  /* LayerManager events */\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n  /* AttributeManager events */\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}` : `invalidated all attributes for ${attributeManager.id}`)();\n  },\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`)();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n  /* Attribute events */\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  /* Render events */\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {\n      pass,\n      redrawReason,\n      stats\n    } = opts;\n    for (const status of renderStats) {\n      const {\n        totalCount,\n        visibleCount,\n        compositeCount,\n        pickableCount\n      } = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n      log.log(LOG_LEVEL_DRAW, `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`)();\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});","map":{"version":3,"names":["logState","attributeUpdateStart","attributeManagerUpdateStart","attributeUpdateMessages","LOG_LEVEL_MAJOR_UPDATE","LOG_LEVEL_MINOR_UPDATE","LOG_LEVEL_UPDATE_DETAIL","LOG_LEVEL_INFO","LOG_LEVEL_DRAW","getLoggers","log","layer.changeFlag","layer","key","flags","id","layer.update","needsUpdate","getChangeFlags","Object","keys","filter","join","layer.matched","changed","compositeLayer.renderLayers","updated","subLayers","layerManager.setLayers","layerManager","layers","length","layerManager.activateViewport","viewport","attributeManager.invalidate","attributeManager","trigger","attributeNames","Date","now","attributeManager.updateEnd","numInstances","timeMs","Math","round","groupCollapsed","updateMessage","groupEnd","attribute","attribute.allocate","message","push","attribute.updateEnd","deckRenderer.renderLayers","deckRenderer","renderStats","opts","pass","redrawReason","stats","status","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","renderCount","get","add"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\debug\\loggers.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Log} from '@probe.gl/log';\n\nconst logState: {\n  attributeUpdateStart: number;\n  attributeManagerUpdateStart: number;\n  attributeUpdateMessages: string[];\n} = {\n  attributeUpdateStart: -1,\n  attributeManagerUpdateStart: -1,\n  attributeUpdateMessages: []\n};\n\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\n\nexport const getLoggers = (log: Log): Record<string, Function> => ({\n  /* Layer events */\n\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Updating ${layer} because: ${Object.keys(flags)\n          .filter(key => flags[key])\n          .join(', ')}`\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n\n  /* CompositeLayer events */\n\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Composite layer rendered new subLayers ${layer}`,\n        subLayers\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n\n  /* LayerManager events */\n\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n\n  /* AttributeManager events */\n\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(\n      LOG_LEVEL_MAJOR_UPDATE,\n      attributeNames\n        ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n        : `invalidated all attributes for ${attributeManager.id}`\n    )();\n  },\n\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(\n      LOG_LEVEL_MINOR_UPDATE,\n      `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`\n    )();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n\n  /* Attribute events */\n\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n\n  /* Render events */\n\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {pass, redrawReason, stats} = opts;\n    for (const status of renderStats) {\n      const {totalCount, visibleCount, compositeCount, pickableCount} = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n\n      log.log(\n        LOG_LEVEL_DRAW,\n        `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`\n      )();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}