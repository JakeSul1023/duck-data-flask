{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { compareArrayBuffers, concatenateArrayBuffers } from '@loaders.gl/loader-utils';\nimport { searchFromTheEnd } from \"./search-from-the-end.js\";\nimport { setFieldToNumber } from \"./zip64-info-generation.js\";\nconst eoCDSignature = new Uint8Array([0x50, 0x4b, 0x05, 0x06]);\nconst zip64EoCDLocatorSignature = new Uint8Array([0x50, 0x4b, 0x06, 0x07]);\nconst zip64EoCDSignature = new Uint8Array([0x50, 0x4b, 0x06, 0x06]);\n// offsets accroding to https://en.wikipedia.org/wiki/ZIP_(file_format)\nconst CD_RECORDS_NUMBER_OFFSET = 8n;\nconst CD_RECORDS_NUMBER_ON_DISC_OFFSET = 10n;\nconst CD_CD_BYTE_SIZE_OFFSET = 12n;\nconst CD_START_OFFSET_OFFSET = 16n;\nconst CD_COMMENT_OFFSET = 22n;\nconst ZIP64_EOCD_START_OFFSET_OFFSET = 8n;\nconst ZIP64_CD_RECORDS_NUMBER_OFFSET = 24n;\nconst ZIP64_CD_RECORDS_NUMBER_ON_DISC_OFFSET = 32n;\nconst ZIP64_CD_CD_BYTE_SIZE_OFFSET = 40n;\nconst ZIP64_CD_START_OFFSET_OFFSET = 48n;\nconst ZIP64_COMMENT_OFFSET = 56n;\n/**\n * Parses end of central directory record of zip file\n * @param file - FileProvider instance\n * @returns Info from the header\n */\nexport const parseEoCDRecord = async file => {\n  const zipEoCDOffset = await searchFromTheEnd(file, eoCDSignature);\n  let cdRecordsNumber = BigInt(await file.getUint16(zipEoCDOffset + CD_RECORDS_NUMBER_OFFSET));\n  let cdByteSize = BigInt(await file.getUint32(zipEoCDOffset + CD_CD_BYTE_SIZE_OFFSET));\n  let cdStartOffset = BigInt(await file.getUint32(zipEoCDOffset + CD_START_OFFSET_OFFSET));\n  let zip64EoCDLocatorOffset = zipEoCDOffset - 20n;\n  let zip64EoCDOffset = 0n;\n  const magicBytes = await file.slice(zip64EoCDLocatorOffset, zip64EoCDLocatorOffset + 4n);\n  if (compareArrayBuffers(magicBytes, zip64EoCDLocatorSignature)) {\n    zip64EoCDOffset = await file.getBigUint64(zip64EoCDLocatorOffset + ZIP64_EOCD_START_OFFSET_OFFSET);\n    const endOfCDMagicBytes = await file.slice(zip64EoCDOffset, zip64EoCDOffset + 4n);\n    if (!compareArrayBuffers(endOfCDMagicBytes, zip64EoCDSignature.buffer)) {\n      throw new Error('zip64 EoCD not found');\n    }\n    cdRecordsNumber = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_RECORDS_NUMBER_OFFSET);\n    cdByteSize = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_CD_BYTE_SIZE_OFFSET);\n    cdStartOffset = await file.getBigUint64(zip64EoCDOffset + ZIP64_CD_START_OFFSET_OFFSET);\n  } else {\n    zip64EoCDLocatorOffset = 0n;\n  }\n  return {\n    cdRecordsNumber,\n    cdStartOffset,\n    cdByteSize,\n    offsets: {\n      zip64EoCDOffset,\n      zip64EoCDLocatorOffset,\n      zipEoCDOffset\n    }\n  };\n};\n/**\n * updates EoCD record to add more files to the archieve\n * @param eocdBody buffer containing header\n * @param oldEoCDOffsets info read from EoCD record befor updating\n * @param newCDStartOffset CD start offset to be updated\n * @param eocdStartOffset EoCD start offset to be updated\n * @returns new EoCD header\n */\nexport function updateEoCD(eocdBody, oldEoCDOffsets, newCDStartOffset, eocdStartOffset, newCDRecordsNumber) {\n  const eocd = new DataView(eocdBody);\n  const classicEoCDOffset = oldEoCDOffsets.zip64EoCDOffset ? oldEoCDOffsets.zipEoCDOffset - oldEoCDOffsets.zip64EoCDOffset : 0n;\n  // updating classic EoCD record with new CD records number in general and on disc\n  if (Number(newCDRecordsNumber) <= 0xffff) {\n    setFieldToNumber(eocd, 2, classicEoCDOffset + CD_RECORDS_NUMBER_OFFSET, newCDRecordsNumber);\n    setFieldToNumber(eocd, 2, classicEoCDOffset + CD_RECORDS_NUMBER_ON_DISC_OFFSET, newCDRecordsNumber);\n  }\n  // updating zip64 EoCD record with new size of CD\n  if (eocdStartOffset - newCDStartOffset <= 0xffffffff) {\n    setFieldToNumber(eocd, 4, classicEoCDOffset + CD_CD_BYTE_SIZE_OFFSET, eocdStartOffset - newCDStartOffset);\n  }\n  // updating classic EoCD record with new CD start offset\n  if (newCDStartOffset < 0xffffffff) {\n    setFieldToNumber(eocd, 4, classicEoCDOffset + CD_START_OFFSET_OFFSET, newCDStartOffset);\n  }\n  // updating zip64 EoCD locator and record with new EoCD record start offset and cd records number\n  if (oldEoCDOffsets.zip64EoCDLocatorOffset && oldEoCDOffsets.zip64EoCDOffset) {\n    // updating zip64 EoCD locator with new EoCD record start offset\n    const locatorOffset = oldEoCDOffsets.zip64EoCDLocatorOffset - oldEoCDOffsets.zip64EoCDOffset;\n    setFieldToNumber(eocd, 8, locatorOffset + ZIP64_EOCD_START_OFFSET_OFFSET, eocdStartOffset);\n    // updating zip64 EoCD record with new cd start offset\n    setFieldToNumber(eocd, 8, ZIP64_CD_START_OFFSET_OFFSET, newCDStartOffset);\n    // updating zip64 EoCD record with new cd records number\n    setFieldToNumber(eocd, 8, ZIP64_CD_RECORDS_NUMBER_OFFSET, newCDRecordsNumber);\n    setFieldToNumber(eocd, 8, ZIP64_CD_RECORDS_NUMBER_ON_DISC_OFFSET, newCDRecordsNumber);\n    // updating zip64 EoCD record with new size of CD\n    setFieldToNumber(eocd, 8, ZIP64_CD_CD_BYTE_SIZE_OFFSET, eocdStartOffset - newCDStartOffset);\n  }\n  return new Uint8Array(eocd.buffer);\n}\n/**\n * generates EoCD record\n * @param options data to generate EoCD record\n * @returns ArrayBuffer with EoCD record\n */\nexport function generateEoCD(options) {\n  const header = new DataView(new ArrayBuffer(Number(CD_COMMENT_OFFSET)));\n  for (const field of EOCD_FIELDS) {\n    setFieldToNumber(header, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n  }\n  const locator = generateZip64InfoLocator(options);\n  const zip64Record = generateZip64Info(options);\n  return concatenateArrayBuffers(zip64Record, locator, header.buffer);\n}\n/** standart EoCD fields */\nconst EOCD_FIELDS = [\n// End of central directory signature = 0x06054b50\n{\n  offset: 0,\n  size: 4,\n  default: new DataView(eoCDSignature.buffer).getUint32(0, true)\n},\n// Number of this disk (or 0xffff for ZIP64)\n{\n  offset: 4,\n  size: 2,\n  default: 0\n},\n// Disk where central directory starts (or 0xffff for ZIP64)\n{\n  offset: 6,\n  size: 2,\n  default: 0\n},\n// Number of central directory records on this disk (or 0xffff for ZIP64)\n{\n  offset: 8,\n  size: 2,\n  name: 'recordsNumber'\n},\n// Total number of central directory records (or 0xffff for ZIP64)\n{\n  offset: 10,\n  size: 2,\n  name: 'recordsNumber'\n},\n// Size of central directory (bytes) (or 0xffffffff for ZIP64)\n{\n  offset: 12,\n  size: 4,\n  name: 'cdSize'\n},\n// Offset of start of central directory, relative to start of archive (or 0xffffffff for ZIP64)\n{\n  offset: 16,\n  size: 4,\n  name: 'cdOffset'\n},\n// Comment length (n)\n{\n  offset: 20,\n  size: 2,\n  default: 0\n}];\n/**\n * generates eocd zip64 record\n * @param options data to generate eocd zip64 record\n * @returns buffer with eocd zip64 record\n */\nfunction generateZip64Info(options) {\n  const record = new DataView(new ArrayBuffer(Number(ZIP64_COMMENT_OFFSET)));\n  for (const field of ZIP64_EOCD_FIELDS) {\n    setFieldToNumber(record, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n  }\n  return record.buffer;\n}\n/**\n * generates eocd zip64 record locator\n * @param options data to generate eocd zip64 record\n * @returns buffer with eocd zip64 record\n */\nfunction generateZip64InfoLocator(options) {\n  const locator = new DataView(new ArrayBuffer(Number(20)));\n  for (const field of ZIP64_EOCD_LOCATOR_FIELDS) {\n    setFieldToNumber(locator, field.size, field.offset, options[field.name ?? ''] ?? field.default ?? 0);\n  }\n  return locator.buffer;\n}\n/** zip64 EoCD record locater fields */\nconst ZIP64_EOCD_LOCATOR_FIELDS = [\n// zip64 end of central dir locator signature\n{\n  offset: 0,\n  size: 4,\n  default: new DataView(zip64EoCDLocatorSignature.buffer).getUint32(0, true)\n},\n// number of the disk with the start of the zip64 end of\n{\n  offset: 4,\n  size: 4,\n  default: 0\n},\n// start of the zip64 end of central directory\n{\n  offset: 8,\n  size: 8,\n  name: 'eoCDStart'\n},\n// total number of disks\n{\n  offset: 16,\n  size: 4,\n  default: 1\n}];\n/** zip64 EoCD recodrd fields */\nconst ZIP64_EOCD_FIELDS = [\n// End of central directory signature = 0x06064b50\n{\n  offset: 0,\n  size: 4,\n  default: new DataView(zip64EoCDSignature.buffer).getUint32(0, true)\n},\n// Size of the EOCD64 minus 12\n{\n  offset: 4,\n  size: 8,\n  default: 44\n},\n// Version made by\n{\n  offset: 12,\n  size: 2,\n  default: 45\n},\n// Version needed to extract (minimum)\n{\n  offset: 14,\n  size: 2,\n  default: 45\n},\n// Number of this disk\n{\n  offset: 16,\n  size: 4,\n  default: 0\n},\n// Disk where central directory starts\n{\n  offset: 20,\n  size: 4,\n  default: 0\n},\n// Number of central directory records on this disk\n{\n  offset: 24,\n  size: 8,\n  name: 'recordsNumber'\n},\n// Total number of central directory records\n{\n  offset: 32,\n  size: 8,\n  name: 'recordsNumber'\n},\n// Size of central directory (bytes)\n{\n  offset: 40,\n  size: 8,\n  name: 'cdSize'\n},\n// Offset of start of central directory, relative to start of archive\n{\n  offset: 48,\n  size: 8,\n  name: 'cdOffset'\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}