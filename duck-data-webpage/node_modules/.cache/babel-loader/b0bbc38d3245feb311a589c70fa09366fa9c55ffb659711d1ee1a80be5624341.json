{"ast":null,"code":"// probe.gl, MIT license\n/* eslint-disable no-console,prefer-rest-params */\nimport { VERSION, isBrowser } from '@probe.gl/env';\nimport { LocalStorage } from \"./utils/local-storage.js\";\nimport { formatTime, leftPad } from \"./utils/formatters.js\";\nimport { addColor } from \"./utils/color.js\";\nimport { autobind } from \"./utils/autobind.js\";\nimport assert from \"./utils/assert.js\";\nimport { getHiResTimestamp } from \"./utils/hi-res-timestamp.js\";\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser() ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\nconst DEFAULT_LOG_CONFIGURATION = {\n  enabled: true,\n  level: 0\n};\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\nconst cache = {};\nconst ONCE = {\n  once: true\n};\n/** A console wrapper */\nexport class Log {\n  constructor({\n    id\n  } = {\n    id: ''\n  }) {\n    this.VERSION = VERSION;\n    this._startTs = getHiResTimestamp();\n    this._deltaTs = getHiResTimestamp();\n    this.userData = {};\n    // TODO - fix support from throttling groups\n    this.LOG_THROTTLE_TIMEOUT = 0; // Time before throttled messages are logged again\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage(`__probe-${this.id}__`, DEFAULT_LOG_CONFIGURATION);\n    this.timeStamp(`${this.id} started`);\n    autobind(this);\n    Object.seal(this);\n  }\n  set level(newLevel) {\n    this.setLevel(newLevel);\n  }\n  get level() {\n    return this.getLevel();\n  }\n  isEnabled() {\n    return this._storage.config.enabled;\n  }\n  getLevel() {\n    return this._storage.config.level;\n  }\n  /** @return milliseconds, with fractions */\n  getTotal() {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n  /** @return milliseconds, with fractions */\n  getDelta() {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n  /** @deprecated use logLevel */\n  set priority(newPriority) {\n    this.level = newPriority;\n  }\n  /** @deprecated use logLevel */\n  get priority() {\n    return this.level;\n  }\n  /** @deprecated use logLevel */\n  getPriority() {\n    return this.level;\n  }\n  // Configure\n  enable(enabled = true) {\n    this._storage.setConfiguration({\n      enabled\n    });\n    return this;\n  }\n  setLevel(level) {\n    this._storage.setConfiguration({\n      level\n    });\n    return this;\n  }\n  /** return the current status of the setting */\n  get(setting) {\n    return this._storage.config[setting];\n  }\n  // update the status of the setting\n  set(setting, value) {\n    this._storage.setConfiguration({\n      [setting]: value\n    });\n  }\n  /** Logs the current settings as a table */\n  settings() {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n  // Unconditional logging\n  assert(condition, message) {\n    if (!condition) {\n      throw new Error(message || 'Assertion failed');\n    }\n  }\n  warn(message) {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n  error(message) {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n  /** Print a deprecation warning */\n  deprecated(oldUsage, newUsage) {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n  /** Print a removal warning */\n  removed(oldUsage, newUsage) {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n  probe(logLevel, message) {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n  log(logLevel, message) {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n  info(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n  once(logLevel, message) {\n    return this._getLogFunction(logLevel, message, originalConsole.debug || originalConsole.info, arguments, ONCE);\n  }\n  /** Logs an object as a table */\n  table(logLevel, table, columns) {\n    if (table) {\n      return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {\n        tag: getTableHeader(table)\n      });\n    }\n    return noop;\n  }\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.timeEnd ? console.timeEnd : console.info);\n  }\n  timeStamp(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n  group(logLevel, message, opts = {\n    collapsed: false\n  }) {\n    const options = normalizeArguments({\n      logLevel,\n      message,\n      opts\n    });\n    const {\n      collapsed\n    } = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n    return this._getLogFunction(options);\n  }\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {\n      collapsed: true\n    }));\n  }\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n  // EXPERIMENTAL\n  withGroup(logLevel, message, func) {\n    this.group(logLevel, message)();\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n  trace() {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n  // PRIVATE METHODS\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel) {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n  _getLogFunction(logLevel, message, method, args, opts) {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({\n        logLevel,\n        message,\n        args,\n        opts\n      });\n      method = method || opts.method;\n      assert(method);\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n      const tag = opts.tag || opts.message;\n      if (opts.once && tag) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n      message = decorateMessage(this.id, opts.message, opts);\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\nLog.VERSION = VERSION;\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel) {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n  return resolvedLevel;\n}\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts) {\n  const {\n    logLevel,\n    message\n  } = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n    default:\n  }\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {\n    args\n  }, opts.opts);\n}\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\nfunction getTableHeader(table) {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}","map":{"version":3,"names":["VERSION","isBrowser","LocalStorage","formatTime","leftPad","addColor","autobind","assert","getHiResTimestamp","originalConsole","debug","console","log","info","warn","error","DEFAULT_LOG_CONFIGURATION","enabled","level","noop","cache","ONCE","once","Log","constructor","id","_startTs","_deltaTs","userData","LOG_THROTTLE_TIMEOUT","_storage","timeStamp","Object","seal","newLevel","setLevel","getLevel","isEnabled","config","getTotal","Number","toPrecision","getDelta","priority","newPriority","getPriority","enable","setConfiguration","get","setting","set","value","settings","table","condition","message","Error","_getLogFunction","arguments","deprecated","oldUsage","newUsage","removed","probe","logLevel","time","columns","tag","getTableHeader","timeEnd","group","opts","collapsed","options","normalizeArguments","method","groupCollapsed","assign","groupEnd","withGroup","func","trace","_shouldLog","normalizeLogLevel","args","total","delta","decorateMessage","bind","resolvedLevel","isFinite","Array","from","length","shift","undefined","unshift","messageType","color","background","key","title"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@probe.gl\\log\\src\\log.ts"],"sourcesContent":["// probe.gl, MIT license\n\n/* eslint-disable no-console,prefer-rest-params */\nimport {VERSION, isBrowser} from '@probe.gl/env';\nimport {LocalStorage} from './utils/local-storage';\nimport {formatTime, leftPad} from './utils/formatters';\nimport {addColor} from './utils/color';\nimport {autobind} from './utils/autobind';\nimport assert from './utils/assert';\nimport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\n/** \"Global\" log configuration settings */\ntype LogConfiguration = {\n  enabled?: boolean;\n  level?: number;\n  [key: string]: unknown;\n};\n\n/** Options when logging a message */\ntype LogOptions = {\n  method?: Function;\n  time?: boolean;\n  total?: number;\n  delta?: number;\n  tag?: string;\n  message?: string;\n  once?: boolean;\n  nothrottle?: boolean;\n  args?: any;\n};\n\ntype LogFunction = () => void;\n\ntype Table = Record<string, any>;\n\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser() ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\nconst DEFAULT_LOG_CONFIGURATION: Required<LogConfiguration> = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nconst cache = {};\nconst ONCE = {once: true};\n\n/** A console wrapper */\n\nexport class Log {\n  static VERSION = VERSION;\n\n  id: string;\n  VERSION: string = VERSION;\n  _startTs: number = getHiResTimestamp();\n  _deltaTs: number = getHiResTimestamp();\n  _storage: LocalStorage<LogConfiguration>;\n  userData = {};\n\n  // TODO - fix support from throttling groups\n  LOG_THROTTLE_TIMEOUT: number = 0; // Time before throttled messages are logged again\n\n  constructor({id} = {id: ''}) {\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage<LogConfiguration>(\n      `__probe-${this.id}__`,\n      DEFAULT_LOG_CONFIGURATION\n    );\n\n    this.timeStamp(`${this.id} started`);\n\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel: number) {\n    this.setLevel(newLevel);\n  }\n\n  get level(): number {\n    return this.getLevel();\n  }\n\n  isEnabled(): boolean {\n    return this._storage.config.enabled;\n  }\n\n  getLevel(): number {\n    return this._storage.config.level;\n  }\n\n  /** @return milliseconds, with fractions */\n  getTotal(): number {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  /** @return milliseconds, with fractions */\n  getDelta(): number {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  /** @deprecated use logLevel */\n  set priority(newPriority: number) {\n    this.level = newPriority;\n  }\n\n  /** @deprecated use logLevel */\n  get priority(): number {\n    return this.level;\n  }\n\n  /** @deprecated use logLevel */\n  getPriority(): number {\n    return this.level;\n  }\n\n  // Configure\n\n  enable(enabled: boolean = true): this {\n    this._storage.setConfiguration({enabled});\n    return this;\n  }\n\n  setLevel(level: number): this {\n    this._storage.setConfiguration({level});\n    return this;\n  }\n\n  /** return the current status of the setting */\n  get(setting: string): any {\n    return this._storage.config[setting];\n  }\n\n  // update the status of the setting\n  set(setting: string, value: any): void {\n    this._storage.setConfiguration({[setting]: value});\n  }\n\n  /** Logs the current settings as a table */\n  settings(): void {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  // Unconditional logging\n\n  assert(condition: unknown, message?: string): asserts condition {\n    if (!condition) {\n      throw new Error(message || 'Assertion failed');\n    }\n  }\n\n  /** Warn, but only once, no console flooding */\n  warn(message: string, ...args: unknown[]): LogFunction;\n  warn(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  /** Print an error */\n  error(message: string, ...args: unknown[]): LogFunction;\n  error(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  /** Print a deprecation warning */\n  deprecated(oldUsage: string, newUsage: string): LogFunction {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n\n  /** Print a removal warning */\n  removed(oldUsage: string, newUsage: string): LogFunction {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n\n  // Conditional logging\n\n  /** Log to a group */\n  probe(logLevel, message?, ...args: unknown[]): LogFunction;\n  probe(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  /** Log a debug message */\n  log(logLevel, message?, ...args: unknown[]): LogFunction;\n  log(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  /** Log a normal message */\n  info(logLevel, message?, ...args: unknown[]): LogFunction;\n  info(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  /** Log a normal message, but only once, no console flooding */\n  once(logLevel, message?, ...args: unknown[]): LogFunction;\n  once(logLevel, message?) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      originalConsole.debug || originalConsole.info,\n      arguments,\n      ONCE\n    );\n  }\n\n  /** Logs an object as a table */\n  table(logLevel, table?, columns?): LogFunction {\n    if (table) {\n      return this._getLogFunction(\n        logLevel,\n        table,\n        console.table || noop,\n        (columns && [columns]) as unknown as IArguments,\n        {\n          tag: getTableHeader(table)\n        }\n      );\n    }\n    return noop;\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      console.timeEnd ? console.timeEnd : console.info\n    );\n  }\n\n  timeStamp(logLevel, message?) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message, opts = {collapsed: false}) {\n    const options = normalizeArguments({logLevel, message, opts});\n    const {collapsed} = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {collapsed: true}));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  // EXPERIMENTAL\n\n  withGroup(logLevel: number, message: string, func: Function): void {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace(): void {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel: unknown): boolean {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(\n    logLevel: unknown,\n    message?: unknown,\n    method?: Function,\n    args?: IArguments,\n    opts?: LogOptions\n  ): LogFunction {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({logLevel, message, args, opts});\n      method = method || opts.method;\n      assert(method);\n\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n\n      const tag = opts.tag || opts.message;\n\n      if (opts.once && tag) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n\n      message = decorateMessage(this.id, opts.message, opts);\n\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\n\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel: unknown): number {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n\n  return resolvedLevel;\n}\n\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts: {\n  logLevel;\n  message;\n  collapsed?: boolean;\n  args?: IArguments | undefined;\n  opts?;\n}): {\n  logLevel: number;\n  message: string;\n  args: any[];\n} {\n  const {logLevel, message} = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args: any[] = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {args}, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\n\nfunction getTableHeader(table: Table): string {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}