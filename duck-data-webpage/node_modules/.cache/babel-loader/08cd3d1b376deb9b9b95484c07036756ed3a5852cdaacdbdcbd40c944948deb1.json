{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { loadBasisEncoderModule } from \"../parsers/basis-module-loader.js\";\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(image, options = {}) {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {\n    useSRGB = false,\n    qualityLevel = 10,\n    encodeUASTC = false,\n    mipmaps = false\n  } = options?.['ktx2-basis-writer'] || {};\n  const {\n    BasisEncoder\n  } = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}","map":{"version":3,"names":["loadBasisEncoderModule","encodeKTX2BasisTexture","image","options","useSRGB","qualityLevel","encodeUASTC","mipmaps","BasisEncoder","basisEncoder","basisFileData","Uint8Array","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","data","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","numOutputBytes","encode","actualKTX2FileData","subarray","buffer","error","console","delete"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/textures/dist/lib/encoders/encode-ktx2-basis-texture.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { loadBasisEncoderModule } from \"../parsers/basis-module-loader.js\";\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(image, options = {}) {\n    // TODO remove default values after writer options will be normalized like it done in load module.\n    const { useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false } = options?.['ktx2-basis-writer'] || {};\n    const { BasisEncoder } = await loadBasisEncoderModule(options);\n    const basisEncoder = new BasisEncoder();\n    try {\n        const basisFileData = new Uint8Array(image.width * image.height * 4);\n        basisEncoder.setCreateKTX2File(true);\n        basisEncoder.setKTX2UASTCSupercompression(true);\n        basisEncoder.setKTX2SRGBTransferFunc(true);\n        basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n        basisEncoder.setPerceptual(useSRGB);\n        basisEncoder.setMipSRGB(useSRGB);\n        basisEncoder.setQualityLevel(qualityLevel);\n        basisEncoder.setUASTC(encodeUASTC);\n        basisEncoder.setMipGen(mipmaps);\n        const numOutputBytes = basisEncoder.encode(basisFileData);\n        const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n        return actualKTX2FileData;\n    }\n    catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n        throw error;\n    }\n    finally {\n        basisEncoder.delete();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,sBAAsB,QAAQ,mCAAmC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,sBAAsBA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9D;EACA,MAAM;IAAEC,OAAO,GAAG,KAAK;IAAEC,YAAY,GAAG,EAAE;IAAEC,WAAW,GAAG,KAAK;IAAEC,OAAO,GAAG;EAAM,CAAC,GAAGJ,OAAO,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;EACzH,MAAM;IAAEK;EAAa,CAAC,GAAG,MAAMR,sBAAsB,CAACG,OAAO,CAAC;EAC9D,MAAMM,YAAY,GAAG,IAAID,YAAY,CAAC,CAAC;EACvC,IAAI;IACA,MAAME,aAAa,GAAG,IAAIC,UAAU,CAACT,KAAK,CAACU,KAAK,GAAGV,KAAK,CAACW,MAAM,GAAG,CAAC,CAAC;IACpEJ,YAAY,CAACK,iBAAiB,CAAC,IAAI,CAAC;IACpCL,YAAY,CAACM,4BAA4B,CAAC,IAAI,CAAC;IAC/CN,YAAY,CAACO,uBAAuB,CAAC,IAAI,CAAC;IAC1CP,YAAY,CAACQ,mBAAmB,CAAC,CAAC,EAAEf,KAAK,CAACgB,IAAI,EAAEhB,KAAK,CAACU,KAAK,EAAEV,KAAK,CAACW,MAAM,EAAE,KAAK,CAAC;IACjFJ,YAAY,CAACU,aAAa,CAACf,OAAO,CAAC;IACnCK,YAAY,CAACW,UAAU,CAAChB,OAAO,CAAC;IAChCK,YAAY,CAACY,eAAe,CAAChB,YAAY,CAAC;IAC1CI,YAAY,CAACa,QAAQ,CAAChB,WAAW,CAAC;IAClCG,YAAY,CAACc,SAAS,CAAChB,OAAO,CAAC;IAC/B,MAAMiB,cAAc,GAAGf,YAAY,CAACgB,MAAM,CAACf,aAAa,CAAC;IACzD,MAAMgB,kBAAkB,GAAGhB,aAAa,CAACiB,QAAQ,CAAC,CAAC,EAAEH,cAAc,CAAC,CAACI,MAAM;IAC3E,OAAOF,kBAAkB;EAC7B,CAAC,CACD,OAAOG,KAAK,EAAE;IACV;IACAC,OAAO,CAACD,KAAK,CAAC,6DAA6D,EAAEA,KAAK,CAAC;IACnF,MAAMA,KAAK;EACf,CAAC,SACO;IACJpB,YAAY,CAACsB,MAAM,CAAC,CAAC;EACzB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}