{"ast":null,"code":"// TODO - GLTFScenegraph should use these\nimport { assert } from \"../utils/assert.js\";\nimport { getAccessorArrayTypeAndLength } from \"./gltf-utils.js\";\n// accepts buffer view index or buffer view object\n// returns a `Uint8Array`\nexport function getTypedArrayForBufferView(json, buffers, bufferViewIndex) {\n  const bufferView = json.bufferViews[bufferViewIndex];\n  assert(bufferView);\n  // Get hold of the arrayBuffer\n  const bufferIndex = bufferView.buffer;\n  const binChunk = buffers[bufferIndex];\n  assert(binChunk);\n  const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n  return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n}\n// accepts accessor index or accessor object\n// returns a `Uint8Array`\nexport function getTypedArrayForImageData(json, buffers, imageIndex) {\n  const image = json.images[imageIndex];\n  const bufferViewIndex = json.bufferViews[image.bufferView];\n  return getTypedArrayForBufferView(json, buffers, bufferViewIndex);\n}\n/**\n * Gets data pointed by the accessor.\n * @param json - json part of gltf content of a GLTF tile.\n * @param buffers - Array containing buffers of data.\n * @param accessor - accepts accessor index or accessor object.\n * @returns {TypedArray} Typed array with type matching the type of data poited by the accessor.\n */\n// eslint-disable-next-line complexity\nexport function getTypedArrayForAccessor(json, buffers, accessor) {\n  const gltfAccessor = typeof accessor === 'number' ? json.accessors?.[accessor] : accessor;\n  if (!gltfAccessor) {\n    throw new Error(`No gltf accessor ${JSON.stringify(accessor)}`);\n  }\n  const bufferView = json.bufferViews?.[gltfAccessor.bufferView || 0];\n  if (!bufferView) {\n    throw new Error(`No gltf buffer view for accessor ${bufferView}`);\n  }\n  // Get `arrayBuffer` the `bufferView` looks at\n  const {\n    arrayBuffer,\n    byteOffset: bufferByteOffset\n  } = buffers[bufferView.buffer];\n  // Resulting byteOffset is sum of the buffer, accessor and bufferView byte offsets\n  const byteOffset = (bufferByteOffset || 0) + (gltfAccessor.byteOffset || 0) + (bufferView.byteOffset || 0);\n  // Deduce TypedArray type and its length from `accessor` and `bufferView` data\n  const {\n    ArrayType,\n    length,\n    componentByteSize,\n    numberOfComponentsInElement\n  } = getAccessorArrayTypeAndLength(gltfAccessor, bufferView);\n  // 'length' is a whole number of components of all elements in the buffer pointed by the accessor\n  // Multiplier to calculate the address of the element in the arrayBuffer\n  const elementByteSize = componentByteSize * numberOfComponentsInElement;\n  const elementAddressScale = bufferView.byteStride || elementByteSize;\n  // Creare an array of component's type where all components (not just elements) will reside\n  if (typeof bufferView.byteStride === 'undefined' || bufferView.byteStride === elementByteSize) {\n    // No iterleaving\n    const result = new ArrayType(arrayBuffer, byteOffset, length);\n    return result;\n  }\n  // Iterleaving\n  const result = new ArrayType(length);\n  for (let i = 0; i < gltfAccessor.count; i++) {\n    const values = new ArrayType(arrayBuffer, byteOffset + i * elementAddressScale, numberOfComponentsInElement);\n    result.set(values, i * numberOfComponentsInElement);\n  }\n  return result;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}