{"ast":null,"code":"// @eslint-disable\n// @ts-nocheck\nimport * as glMatrix from './common.js';\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * symmetric round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function slerp(out, a, b, t) {\n  const angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\n  const sinTotal = Math.sin(angle);\n  const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n  const ratioB = Math.sin(t * angle) / sinTotal;\n  out[0] = ratioA * a[0] + ratioB * b[0];\n  out[1] = ratioA * a[1] + ratioB * b[1];\n  out[2] = ratioA * a[2] + ratioB * b[2];\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  const factorTimes2 = t * t;\n  const factor1 = factorTimes2 * (2 * t - 3) + 1;\n  const factor2 = factorTimes2 * (t - 2) + t;\n  const factor3 = factorTimes2 * (t - 1);\n  const factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  const inverseFactor = 1 - t;\n  const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  const factorTimes2 = t * t;\n  const factor1 = inverseFactorTimesTwo * inverseFactor;\n  const factor2 = 3 * t * inverseFactorTimesTwo;\n  const factor3 = 3 * factorTimes2 * inverseFactor;\n  const factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  const z = glMatrix.RANDOM() * 2.0 - 1.0;\n  const zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  const w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n  // perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = function () {\n  const vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 3;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n    return a;\n  };\n}();","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","length","x","y","z","Math","sqrt","fromValues","copy","set","add","b","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","slerp","angle","acos","sinTotal","sin","ratioA","ratioB","hermite","c","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","undefined","r","RANDOM","PI","zScale","cos","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","mag","cosine","zero","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\gl-matrix\\vec3.ts"],"sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function slerp(out, a, b, t) {\n  const angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\n  const sinTotal = Math.sin(angle);\n\n  const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n  const ratioB = Math.sin(t * angle) / sinTotal;\n  out[0] = ratioA * a[0] + ratioB * b[0];\n  out[1] = ratioA * a[1] + ratioB * b[1];\n  out[2] = ratioA * a[2] + ratioB * b[2];\n\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  const factorTimes2 = t * t;\n  const factor1 = factorTimes2 * (2 * t - 3) + 1;\n  const factor2 = factorTimes2 * (t - 2) + t;\n  const factor3 = factorTimes2 * (t - 1);\n  const factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  const inverseFactor = 1 - t;\n  const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  const factorTimes2 = t * t;\n  const factor1 = inverseFactorTimesTwo * inverseFactor;\n  const factor2 = 3 * t * inverseFactorTimesTwo;\n  const factor3 = 3 * factorTimes2 * inverseFactor;\n  const factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  const z = glMatrix.RANDOM() * 2.0 - 1.0;\n  const zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  const w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n  );\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}