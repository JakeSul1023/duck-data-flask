{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { MathArray } from \"./base/math-array.js\";\nimport { Quaternion } from \"./quaternion.js\";\nimport { clamp } from \"../lib/common.js\";\nimport { checkNumber } from \"../lib/validators.js\";\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n// eslint-disable-next-line no-shadow\nvar RotationOrder;\n(function (RotationOrder) {\n  RotationOrder[RotationOrder[\"ZYX\"] = 0] = \"ZYX\";\n  RotationOrder[RotationOrder[\"YXZ\"] = 1] = \"YXZ\";\n  RotationOrder[RotationOrder[\"XZY\"] = 2] = \"XZY\";\n  RotationOrder[RotationOrder[\"ZXY\"] = 3] = \"ZXY\";\n  RotationOrder[RotationOrder[\"YZX\"] = 4] = \"YZX\";\n  RotationOrder[RotationOrder[\"XYZ\"] = 5] = \"XYZ\";\n})(RotationOrder || (RotationOrder = {}));\nexport class Euler extends MathArray {\n  // Constants\n  static get ZYX() {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ() {\n    return RotationOrder.YXZ;\n  }\n  static get XZY() {\n    return RotationOrder.XZY;\n  }\n  static get ZXY() {\n    return RotationOrder.ZXY;\n  }\n  static get YZX() {\n    return RotationOrder.YZX;\n  }\n  static get XYZ() {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw() {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder() {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders() {\n    return RotationOrder;\n  }\n  static rotationOrder(order) {\n    return RotationOrder[order];\n  }\n  get ELEMENTS() {\n    return 4;\n  }\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // @ts-expect-error\n      // eslint-disable-next-line prefer-rest-params\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object) {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n  validate() {\n    return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n  }\n  // Does not copy the orientation element\n  toArray(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n  // Copies the orientation element\n  toArray4(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n  toVector3(result = [-0, -0, -0]) {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha() {\n    return this[0];\n  }\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n  get beta() {\n    return this[1];\n  }\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n  get gamma() {\n    return this[2];\n  }\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n  // phi, theta, psi angle notation\n  get phi() {\n    return this[0];\n  }\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n  get theta() {\n    return this[1];\n  }\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n  get psi() {\n    return this[2];\n  }\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n  get roll() {\n    return this[0];\n  }\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n  get pitch() {\n    return this[1];\n  }\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n  get yaw() {\n    return this[2];\n  }\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n  // rotation order, in all three angle notations\n  get order() {\n    return this[3];\n  }\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n  // Constructors\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n  // TODO - with and without 4th element\n  fromArray(array, offset = 0) {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n  fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n  // ACCESSORS\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n  // TODO - move to Quaternion\n  getQuaternion() {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ:\n        {\n          const ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n          te[0] = c * e;\n          te[4] = -c * f;\n          te[8] = d;\n          te[1] = af + be * d;\n          te[5] = ae - bf * d;\n          te[9] = -b * c;\n          te[2] = bf - ae * d;\n          te[6] = be + af * d;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.YXZ:\n        {\n          const ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n          te[0] = ce + df * b;\n          te[4] = de * b - cf;\n          te[8] = a * d;\n          te[1] = a * f;\n          te[5] = a * e;\n          te[9] = -b;\n          te[2] = cf * b - de;\n          te[6] = df + ce * b;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.ZXY:\n        {\n          const ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n          te[0] = ce - df * b;\n          te[4] = -a * f;\n          te[8] = de + cf * b;\n          te[1] = cf + de * b;\n          te[5] = a * e;\n          te[9] = df - ce * b;\n          te[2] = -a * d;\n          te[6] = b;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.ZYX:\n        {\n          const ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n          te[0] = c * e;\n          te[4] = be * d - af;\n          te[8] = ae * d + bf;\n          te[1] = c * f;\n          te[5] = bf * d + ae;\n          te[9] = af * d - be;\n          te[2] = -d;\n          te[6] = b * c;\n          te[10] = a * c;\n          break;\n        }\n      case Euler.YZX:\n        {\n          const ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n          te[0] = c * e;\n          te[4] = bd - ac * f;\n          te[8] = bc * f + ad;\n          te[1] = f;\n          te[5] = a * e;\n          te[9] = -b * e;\n          te[2] = -d * e;\n          te[6] = ad * f + bc;\n          te[10] = ac - bd * f;\n          break;\n        }\n      case Euler.XZY:\n        {\n          const ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n          te[0] = c * e;\n          te[4] = -f;\n          te[8] = d * e;\n          te[1] = ac * f + bd;\n          te[5] = a * e;\n          te[9] = ad * f - bc;\n          te[2] = bc * f - ad;\n          te[6] = b * e;\n          te[10] = bd * f + ac;\n          break;\n        }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n  toQuaternion() {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n// HELPER FUNCTIONS\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}","map":{"version":3,"names":["MathArray","Quaternion","clamp","checkNumber","ERR_UNKNOWN_ORDER","ALMOST_ONE","RotationOrder","Euler","ZYX","YXZ","XZY","ZXY","YZX","XYZ","RollPitchYaw","DefaultOrder","RotationOrders","rotationOrder","order","ELEMENTS","constructor","x","y","z","arguments","length","Array","isArray","fromVector3","set","fromQuaternion","quaternion","w","ysqr","t0","t1","t2","t3","t4","roll","Math","atan2","pitch","asin","yaw","fromObject","object","Error","copy","array","Number","isFinite","check","validate","validateOrder","toArray","offset","toArray4","toVector3","result","value","alpha","beta","gamma","phi","theta","psi","checkOrder","v","fromArray","undefined","fromRollPitchYaw","fromRotationMatrix","m","_fromRotationMatrix","getRotationMatrix","_getRotationMatrix","getQuaternion","q","rotateX","rotateY","rotateZ","m11","m12","m13","m21","m22","m23","m31","m32","m33","abs","te","a","cos","c","e","b","sin","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","toQuaternion","cy","sy","cr","sr","cp","sp"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\classes\\euler.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {MathArray} from './base/math-array';\nimport {Quaternion} from './quaternion';\nimport {NumericArray} from '@math.gl/types';\n\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\n// eslint-disable-next-line no-shadow\nenum RotationOrder {\n  ZYX = 0,\n  YXZ = 1,\n  XZY = 2,\n  ZXY = 3,\n  YZX = 4,\n  XYZ = 5\n}\n\nexport class Euler extends MathArray {\n  // Constants\n  static get ZYX(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ(): RotationOrder {\n    return RotationOrder.YXZ;\n  }\n  static get XZY(): RotationOrder {\n    return RotationOrder.XZY;\n  }\n  static get ZXY(): RotationOrder {\n    return RotationOrder.ZXY;\n  }\n  static get YZX(): RotationOrder {\n    return RotationOrder.YZX;\n  }\n  static get XYZ(): RotationOrder {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders(): typeof RotationOrder {\n    return RotationOrder;\n  }\n  static rotationOrder(order: RotationOrder): string {\n    return RotationOrder[order];\n  }\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // @ts-expect-error\n      // eslint-disable-next-line prefer-rest-params\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: Record<string, unknown>): this {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order: RotationOrder): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  override validate(): boolean {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  override toArray(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha(): number {\n    return this[0];\n  }\n  set alpha(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta(): number {\n    return this[1];\n  }\n  set beta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma(): number {\n    return this[2];\n  }\n  set gamma(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi(): number {\n    return this[0];\n  }\n  set phi(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta(): number {\n    return this[1];\n  }\n  set theta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi(): number {\n    return this[2];\n  }\n  set psi(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n\n  get roll(): number {\n    return this[0];\n  }\n  set roll(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch(): number {\n    return this[1];\n  }\n  set pitch(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw(): number {\n    return this[2];\n  }\n  set yaw(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order(): RotationOrder {\n    return this[3];\n  }\n  set order(value: RotationOrder) {\n    this[3] = checkOrder(value);\n  }\n\n  // Constructors\n  fromVector3(v: Readonly<NumericArray>, order: RotationOrder): this {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  override fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll: number, pitch: number, yaw: number): this {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n\n  fromRotationMatrix(m: Readonly<NumericArray>, order: RotationOrder = Euler.DefaultOrder): this {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m: NumericArray): NumericArray {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion(): Quaternion {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m: Readonly<NumericArray>, order = Euler.DefaultOrder): this {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result: NumericArray): NumericArray {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion(): Quaternion {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction validateOrder(value: number): boolean {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value: number) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}