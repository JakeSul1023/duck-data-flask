{"ast":null,"code":"// GLTF 1.0 extensions (decode only)\n// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';\n// GLTF 2.0 Vendor extensions\nimport * as EXT_mesh_features from \"../extensions/EXT_mesh_features.js\";\nimport * as EXT_structural_metadata from \"../extensions/EXT_structural_metadata.js\";\n// GLTF 2.0 Khronos extensions (decode/encode)\nimport * as EXT_meshopt_compression from \"../extensions/EXT_meshopt_compression.js\";\nimport * as EXT_texture_webp from \"../extensions/EXT_texture_webp.js\";\nimport * as KHR_texture_basisu from \"../extensions/KHR_texture_basisu.js\";\nimport * as KHR_draco_mesh_compression from \"../extensions/KHR_draco_mesh_compression.js\";\nimport * as KHR_texture_transform from \"../extensions/KHR_texture_transform.js\";\n// Deprecated. These should be handled by rendering library (e.g. luma.gl), not the loader.\nimport * as KHR_lights_punctual from \"../extensions/deprecated/KHR_lights_punctual.js\";\nimport * as KHR_materials_unlit from \"../extensions/deprecated/KHR_materials_unlit.js\";\nimport * as KHR_techniques_webgl from \"../extensions/deprecated/KHR_techniques_webgl.js\";\nimport * as EXT_feature_metadata from \"../extensions/deprecated/EXT_feature_metadata.js\";\n/**\n * List of extensions processed by the GLTFLoader\n * Note that may extensions can only be handled on the rendering stage and are left out here\n * These are just extensions that can be handled fully or partially during loading.\n */\nexport const EXTENSIONS = [\n// 1.0\n// KHR_binary_gltf is handled separately - must be processed before other parsing starts\n// KHR_binary_gltf,\n// 2.0\nEXT_structural_metadata, EXT_mesh_features, EXT_meshopt_compression, EXT_texture_webp,\n// Basisu should come after webp, we want basisu to be preferred if both are provided\nKHR_texture_basisu, KHR_draco_mesh_compression, KHR_lights_punctual, KHR_materials_unlit, KHR_techniques_webgl, KHR_texture_transform, EXT_feature_metadata];\n/**\n * List of extensions processed by the GLTFWriter\n */\nconst EXTENSIONS_ENCODING = [EXT_structural_metadata, EXT_mesh_features];\n/** Call before any resource loading starts */\nexport function preprocessExtensions(gltf, options = {}, context) {\n  const extensions = EXTENSIONS.filter(extension => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    extension.preprocess?.(gltf, options, context);\n  }\n}\n/** Call after resource loading */\nexport async function decodeExtensions(gltf, options = {}, context) {\n  const extensions = EXTENSIONS.filter(extension => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    // Note: We decode async extensions sequentially, this might not be necessary\n    // Currently we only have Draco, but when we add Basis we may revisit\n    await extension.decode?.(gltf, options, context);\n  }\n}\n/** Call before resource writing */\nexport function encodeExtensions(gltf, options = {}) {\n  for (const extension of EXTENSIONS_ENCODING) {\n    gltf = extension.encode?.(gltf, options) ?? gltf;\n  }\n  return gltf;\n}\nfunction useExtension(extensionName, options) {\n  const excludes = options?.gltf?.excludeExtensions || {};\n  const exclude = extensionName in excludes && !excludes[extensionName];\n  return !exclude;\n}","map":{"version":3,"names":["EXT_mesh_features","EXT_structural_metadata","EXT_meshopt_compression","EXT_texture_webp","KHR_texture_basisu","KHR_draco_mesh_compression","KHR_texture_transform","KHR_lights_punctual","KHR_materials_unlit","KHR_techniques_webgl","EXT_feature_metadata","EXTENSIONS","EXTENSIONS_ENCODING","preprocessExtensions","gltf","options","context","extensions","filter","extension","useExtension","name","preprocess","decodeExtensions","decode","encodeExtensions","encode","extensionName","excludes","excludeExtensions","exclude"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/lib/api/gltf-extensions.js"],"sourcesContent":["// GLTF 1.0 extensions (decode only)\n// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';\n// GLTF 2.0 Vendor extensions\nimport * as EXT_mesh_features from \"../extensions/EXT_mesh_features.js\";\nimport * as EXT_structural_metadata from \"../extensions/EXT_structural_metadata.js\";\n// GLTF 2.0 Khronos extensions (decode/encode)\nimport * as EXT_meshopt_compression from \"../extensions/EXT_meshopt_compression.js\";\nimport * as EXT_texture_webp from \"../extensions/EXT_texture_webp.js\";\nimport * as KHR_texture_basisu from \"../extensions/KHR_texture_basisu.js\";\nimport * as KHR_draco_mesh_compression from \"../extensions/KHR_draco_mesh_compression.js\";\nimport * as KHR_texture_transform from \"../extensions/KHR_texture_transform.js\";\n// Deprecated. These should be handled by rendering library (e.g. luma.gl), not the loader.\nimport * as KHR_lights_punctual from \"../extensions/deprecated/KHR_lights_punctual.js\";\nimport * as KHR_materials_unlit from \"../extensions/deprecated/KHR_materials_unlit.js\";\nimport * as KHR_techniques_webgl from \"../extensions/deprecated/KHR_techniques_webgl.js\";\nimport * as EXT_feature_metadata from \"../extensions/deprecated/EXT_feature_metadata.js\";\n/**\n * List of extensions processed by the GLTFLoader\n * Note that may extensions can only be handled on the rendering stage and are left out here\n * These are just extensions that can be handled fully or partially during loading.\n */\nexport const EXTENSIONS = [\n    // 1.0\n    // KHR_binary_gltf is handled separately - must be processed before other parsing starts\n    // KHR_binary_gltf,\n    // 2.0\n    EXT_structural_metadata,\n    EXT_mesh_features,\n    EXT_meshopt_compression,\n    EXT_texture_webp,\n    // Basisu should come after webp, we want basisu to be preferred if both are provided\n    KHR_texture_basisu,\n    KHR_draco_mesh_compression,\n    KHR_lights_punctual,\n    KHR_materials_unlit,\n    KHR_techniques_webgl,\n    KHR_texture_transform,\n    EXT_feature_metadata\n];\n/**\n * List of extensions processed by the GLTFWriter\n */\nconst EXTENSIONS_ENCODING = [EXT_structural_metadata, EXT_mesh_features];\n/** Call before any resource loading starts */\nexport function preprocessExtensions(gltf, options = {}, context) {\n    const extensions = EXTENSIONS.filter((extension) => useExtension(extension.name, options));\n    for (const extension of extensions) {\n        extension.preprocess?.(gltf, options, context);\n    }\n}\n/** Call after resource loading */\nexport async function decodeExtensions(gltf, options = {}, context) {\n    const extensions = EXTENSIONS.filter((extension) => useExtension(extension.name, options));\n    for (const extension of extensions) {\n        // Note: We decode async extensions sequentially, this might not be necessary\n        // Currently we only have Draco, but when we add Basis we may revisit\n        await extension.decode?.(gltf, options, context);\n    }\n}\n/** Call before resource writing */\nexport function encodeExtensions(gltf, options = {}) {\n    for (const extension of EXTENSIONS_ENCODING) {\n        gltf = extension.encode?.(gltf, options) ?? gltf;\n    }\n    return gltf;\n}\nfunction useExtension(extensionName, options) {\n    const excludes = options?.gltf?.excludeExtensions || {};\n    const exclude = extensionName in excludes && !excludes[extensionName];\n    return !exclude;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,KAAKA,iBAAiB,MAAM,oCAAoC;AACvE,OAAO,KAAKC,uBAAuB,MAAM,0CAA0C;AACnF;AACA,OAAO,KAAKC,uBAAuB,MAAM,0CAA0C;AACnF,OAAO,KAAKC,gBAAgB,MAAM,mCAAmC;AACrE,OAAO,KAAKC,kBAAkB,MAAM,qCAAqC;AACzE,OAAO,KAAKC,0BAA0B,MAAM,6CAA6C;AACzF,OAAO,KAAKC,qBAAqB,MAAM,wCAAwC;AAC/E;AACA,OAAO,KAAKC,mBAAmB,MAAM,iDAAiD;AACtF,OAAO,KAAKC,mBAAmB,MAAM,iDAAiD;AACtF,OAAO,KAAKC,oBAAoB,MAAM,kDAAkD;AACxF,OAAO,KAAKC,oBAAoB,MAAM,kDAAkD;AACxF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;AACtB;AACA;AACA;AACA;AACAV,uBAAuB,EACvBD,iBAAiB,EACjBE,uBAAuB,EACvBC,gBAAgB;AAChB;AACAC,kBAAkB,EAClBC,0BAA0B,EAC1BE,mBAAmB,EACnBC,mBAAmB,EACnBC,oBAAoB,EACpBH,qBAAqB,EACrBI,oBAAoB,CACvB;AACD;AACA;AACA;AACA,MAAME,mBAAmB,GAAG,CAACX,uBAAuB,EAAED,iBAAiB,CAAC;AACxE;AACA,OAAO,SAASa,oBAAoBA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,OAAO,EAAE;EAC9D,MAAMC,UAAU,GAAGN,UAAU,CAACO,MAAM,CAAEC,SAAS,IAAKC,YAAY,CAACD,SAAS,CAACE,IAAI,EAAEN,OAAO,CAAC,CAAC;EAC1F,KAAK,MAAMI,SAAS,IAAIF,UAAU,EAAE;IAChCE,SAAS,CAACG,UAAU,GAAGR,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAClD;AACJ;AACA;AACA,OAAO,eAAeO,gBAAgBA,CAACT,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,OAAO,EAAE;EAChE,MAAMC,UAAU,GAAGN,UAAU,CAACO,MAAM,CAAEC,SAAS,IAAKC,YAAY,CAACD,SAAS,CAACE,IAAI,EAAEN,OAAO,CAAC,CAAC;EAC1F,KAAK,MAAMI,SAAS,IAAIF,UAAU,EAAE;IAChC;IACA;IACA,MAAME,SAAS,CAACK,MAAM,GAAGV,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACpD;AACJ;AACA;AACA,OAAO,SAASS,gBAAgBA,CAACX,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACjD,KAAK,MAAMI,SAAS,IAAIP,mBAAmB,EAAE;IACzCE,IAAI,GAAGK,SAAS,CAACO,MAAM,GAAGZ,IAAI,EAAEC,OAAO,CAAC,IAAID,IAAI;EACpD;EACA,OAAOA,IAAI;AACf;AACA,SAASM,YAAYA,CAACO,aAAa,EAAEZ,OAAO,EAAE;EAC1C,MAAMa,QAAQ,GAAGb,OAAO,EAAED,IAAI,EAAEe,iBAAiB,IAAI,CAAC,CAAC;EACvD,MAAMC,OAAO,GAAGH,aAAa,IAAIC,QAAQ,IAAI,CAACA,QAAQ,CAACD,aAAa,CAAC;EACrE,OAAO,CAACG,OAAO;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}