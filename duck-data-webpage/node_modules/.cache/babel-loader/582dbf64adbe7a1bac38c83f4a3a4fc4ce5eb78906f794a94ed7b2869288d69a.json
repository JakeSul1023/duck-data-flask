{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parseXMLSync } from \"./lib/parsers/parse-xml.js\";\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\n/**\n * Loader for XML files\n */\nexport const XMLLoader = {\n  dataType: null,\n  batchType: null,\n  name: 'XML',\n  id: 'xml',\n  module: 'xml',\n  version: VERSION,\n  worker: false,\n  extensions: ['xml'],\n  mimeTypes: ['application/xml', 'text/xml'],\n  testText: testXMLFile,\n  options: {\n    xml: {\n      _parser: 'fast-xml-parser',\n      uncapitalizeKeys: false,\n      removeNSPrefix: false,\n      textNodeName: 'value',\n      arrayPaths: []\n    }\n  },\n  parse: async (arrayBuffer, options) => parseXMLSync(new TextDecoder().decode(arrayBuffer), {\n    ...XMLLoader.options.xml,\n    ...options?.xml\n  }),\n  parseTextSync: (text, options) => parseXMLSync(text, {\n    ...XMLLoader.options.xml,\n    ...options?.xml\n  })\n};\nfunction testXMLFile(text) {\n  // TODO - There could be space first.\n  return text.startsWith('<?xml');\n}","map":{"version":3,"names":["parseXMLSync","VERSION","XMLLoader","dataType","batchType","name","id","module","version","worker","extensions","mimeTypes","testText","testXMLFile","options","xml","_parser","uncapitalizeKeys","removeNSPrefix","textNodeName","arrayPaths","parse","arrayBuffer","TextDecoder","decode","parseTextSync","text","startsWith"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/xml/dist/xml-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parseXMLSync } from \"./lib/parsers/parse-xml.js\";\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\n/**\n * Loader for XML files\n */\nexport const XMLLoader = {\n    dataType: null,\n    batchType: null,\n    name: 'XML',\n    id: 'xml',\n    module: 'xml',\n    version: VERSION,\n    worker: false,\n    extensions: ['xml'],\n    mimeTypes: ['application/xml', 'text/xml'],\n    testText: testXMLFile,\n    options: {\n        xml: {\n            _parser: 'fast-xml-parser',\n            uncapitalizeKeys: false,\n            removeNSPrefix: false,\n            textNodeName: 'value',\n            arrayPaths: []\n        }\n    },\n    parse: async (arrayBuffer, options) => parseXMLSync(new TextDecoder().decode(arrayBuffer), {\n        ...XMLLoader.options.xml,\n        ...options?.xml\n    }),\n    parseTextSync: (text, options) => parseXMLSync(text, { ...XMLLoader.options.xml, ...options?.xml })\n};\nfunction testXMLFile(text) {\n    // TODO - There could be space first.\n    return text.startsWith('<?xml');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,4BAA4B;AACzD;AACA;AACA,MAAMC,OAAO,GAAG,OAAO,OAAO,KAAK,WAAW,GAAG,OAAO,GAAG,QAAQ;AACnE;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG;EACrBC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,KAAK;EACXC,EAAE,EAAE,KAAK;EACTC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAEP,OAAO;EAChBQ,MAAM,EAAE,KAAK;EACbC,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,SAAS,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC;EAC1CC,QAAQ,EAAEC,WAAW;EACrBC,OAAO,EAAE;IACLC,GAAG,EAAE;MACDC,OAAO,EAAE,iBAAiB;MAC1BC,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,KAAK;MACrBC,YAAY,EAAE,OAAO;MACrBC,UAAU,EAAE;IAChB;EACJ,CAAC;EACDC,KAAK,EAAE,MAAAA,CAAOC,WAAW,EAAER,OAAO,KAAKd,YAAY,CAAC,IAAIuB,WAAW,CAAC,CAAC,CAACC,MAAM,CAACF,WAAW,CAAC,EAAE;IACvF,GAAGpB,SAAS,CAACY,OAAO,CAACC,GAAG;IACxB,GAAGD,OAAO,EAAEC;EAChB,CAAC,CAAC;EACFU,aAAa,EAAEA,CAACC,IAAI,EAAEZ,OAAO,KAAKd,YAAY,CAAC0B,IAAI,EAAE;IAAE,GAAGxB,SAAS,CAACY,OAAO,CAACC,GAAG;IAAE,GAAGD,OAAO,EAAEC;EAAI,CAAC;AACtG,CAAC;AACD,SAASF,WAAWA,CAACa,IAAI,EAAE;EACvB;EACA,OAAOA,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}