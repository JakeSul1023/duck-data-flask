{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// @ts-nocheck\nimport { getJSModuleOrNull, registerJSModules } from '@loaders.gl/loader-utils';\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nexport const CRUNCH_EXTERNAL_LIBRARIES = {\n  /** Crunch decoder library. It is used as dynamically imported script */\n  DECODER: 'crunch.js'\n};\n/**\n * Load crunch decoder module\n * @param options - loader options\n * @returns Promise of module object\n */\nexport async function loadCrunchModule(options) {\n  registerJSModules(options.modules);\n  const crunch = getJSModuleOrNull('crunch');\n  if (crunch) {\n    return crunch;\n  }\n  return loadCrunch(options);\n}\nlet crunchModule;\n/**\n * Load crunch decoder module\n * @param {any} options - Loader options\n * @returns {Promise<any>} Promise of Module object\n */\nasync function loadCrunch(options) {\n  if (crunchModule) {\n    return crunchModule;\n  }\n  let loadCrunchDecoder = await loadLibrary(CRUNCH_EXTERNAL_LIBRARIES.DECODER, 'textures', options);\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  loadCrunchDecoder ||= globalThis.LoadCrunchDecoder;\n  crunchModule = loadCrunchDecoder();\n  return crunchModule;\n}","map":{"version":3,"names":["getJSModuleOrNull","registerJSModules","loadLibrary","CRUNCH_EXTERNAL_LIBRARIES","DECODER","loadCrunchModule","options","modules","crunch","loadCrunch","crunchModule","loadCrunchDecoder","globalThis","LoadCrunchDecoder"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/textures/dist/lib/parsers/crunch-module-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// @ts-nocheck\nimport { getJSModuleOrNull, registerJSModules } from '@loaders.gl/loader-utils';\nimport { loadLibrary } from '@loaders.gl/worker-utils';\nexport const CRUNCH_EXTERNAL_LIBRARIES = {\n    /** Crunch decoder library. It is used as dynamically imported script */\n    DECODER: 'crunch.js'\n};\n/**\n * Load crunch decoder module\n * @param options - loader options\n * @returns Promise of module object\n */\nexport async function loadCrunchModule(options) {\n    registerJSModules(options.modules);\n    const crunch = getJSModuleOrNull('crunch');\n    if (crunch) {\n        return crunch;\n    }\n    return loadCrunch(options);\n}\nlet crunchModule;\n/**\n * Load crunch decoder module\n * @param {any} options - Loader options\n * @returns {Promise<any>} Promise of Module object\n */\nasync function loadCrunch(options) {\n    if (crunchModule) {\n        return crunchModule;\n    }\n    let loadCrunchDecoder = await loadLibrary(CRUNCH_EXTERNAL_LIBRARIES.DECODER, 'textures', options);\n    // Depends on how import happened...\n    // @ts-ignore TS2339: Property does not exist on type\n    loadCrunchDecoder ||= globalThis.LoadCrunchDecoder;\n    crunchModule = loadCrunchDecoder();\n    return crunchModule;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,EAAEC,iBAAiB,QAAQ,0BAA0B;AAC/E,SAASC,WAAW,QAAQ,0BAA0B;AACtD,OAAO,MAAMC,yBAAyB,GAAG;EACrC;EACAC,OAAO,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,gBAAgBA,CAACC,OAAO,EAAE;EAC5CL,iBAAiB,CAACK,OAAO,CAACC,OAAO,CAAC;EAClC,MAAMC,MAAM,GAAGR,iBAAiB,CAAC,QAAQ,CAAC;EAC1C,IAAIQ,MAAM,EAAE;IACR,OAAOA,MAAM;EACjB;EACA,OAAOC,UAAU,CAACH,OAAO,CAAC;AAC9B;AACA,IAAII,YAAY;AAChB;AACA;AACA;AACA;AACA;AACA,eAAeD,UAAUA,CAACH,OAAO,EAAE;EAC/B,IAAII,YAAY,EAAE;IACd,OAAOA,YAAY;EACvB;EACA,IAAIC,iBAAiB,GAAG,MAAMT,WAAW,CAACC,yBAAyB,CAACC,OAAO,EAAE,UAAU,EAAEE,OAAO,CAAC;EACjG;EACA;EACAK,iBAAiB,KAAKC,UAAU,CAACC,iBAAiB;EAClDH,YAAY,GAAGC,iBAAiB,CAAC,CAAC;EAClC,OAAOD,YAAY;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}