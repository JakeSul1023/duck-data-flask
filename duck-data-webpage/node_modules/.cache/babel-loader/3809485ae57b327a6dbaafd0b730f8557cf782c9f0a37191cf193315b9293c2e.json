{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport View from \"./view.js\";\nimport OrthographicViewport from \"../viewports/orthographic-viewport.js\";\nimport OrthographicController from \"../controllers/orthographic-controller.js\";\nclass OrthographicView extends View {\n  constructor(props = {}) {\n    super(props);\n  }\n  getViewportType() {\n    return OrthographicViewport;\n  }\n  get ControllerType() {\n    return OrthographicController;\n  }\n}\nOrthographicView.displayName = 'OrthographicView';\nexport default OrthographicView;","map":{"version":3,"names":["View","OrthographicViewport","OrthographicController","OrthographicView","constructor","props","getViewportType","ControllerType","displayName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\views\\orthographic-view.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport View, {CommonViewState, CommonViewProps} from './view';\nimport OrthographicViewport from '../viewports/orthographic-viewport';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nexport type OrthographicViewState = {\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target?: [number, number, number] | [number, number];\n  /**  The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large.\n   *   To apply independent zoom levels to the X and Y axes, supply an array `[zoomX, zoomY]`. Default `0`. */\n  zoom?: number | [number, number];\n  /** The min zoom level of the viewport. Default `-Infinity`. */\n  minZoom?: number;\n  /** The max zoom level of the viewport. Default `Infinity`. */\n  maxZoom?: number;\n} & CommonViewState;\n\nexport type OrthographicViewProps = {\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to use top-left coordinates (`true`) or bottom-left coordinates (`false`). Default `true`. */\n  flipY?: boolean;\n} & CommonViewProps<OrthographicViewState>;\n\nexport default class OrthographicView extends View<OrthographicViewState, OrthographicViewProps> {\n  static displayName = 'OrthographicView';\n\n  constructor(props: OrthographicViewProps = {}) {\n    super(props);\n  }\n\n  getViewportType() {\n    return OrthographicViewport;\n  }\n\n  get ControllerType() {\n    return OrthographicController;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,IAAwC;AAC/C,OAAOC,oBAAoB;AAC3B,OAAOC,sBAAsB;AAuB7B,MAAqBC,gBAAiB,SAAQH,IAAkD;EAG9FI,YAAYC,KAAA,GAA+B,EAAE;IAC3C,KAAK,CAACA,KAAK,CAAC;EACd;EAEAC,eAAeA,CAAA;IACb,OAAOL,oBAAoB;EAC7B;EAEA,IAAIM,cAAcA,CAAA;IAChB,OAAOL,sBAAsB;EAC/B;;AAZOC,gBAAA,CAAAK,WAAW,GAAG,kBAAkB;eADpBL,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}