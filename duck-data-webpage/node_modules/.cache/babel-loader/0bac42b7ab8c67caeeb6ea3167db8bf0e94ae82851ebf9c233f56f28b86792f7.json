{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { PathLayer } from '@deck.gl/layers';\nimport { tripsUniforms } from \"./trips-layer-uniforms.js\";\nconst defaultProps = {\n  fadeTrail: true,\n  trailLength: {\n    type: 'number',\n    value: 120,\n    min: 0\n  },\n  currentTime: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  getTimestamps: {\n    type: 'accessor',\n    value: d => d.timestamps\n  }\n};\n/** Render animated paths that represent vehicle trips. */\nclass TripsLayer extends PathLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      'vs:#decl': `\\\nin float instanceTimestamps;\nin float instanceNextTimestamps;\nout float vTime;\n`,\n      // Timestamp of the vertex\n      'vs:#main-end': `\\\nvTime = instanceTimestamps + (instanceNextTimestamps - instanceTimestamps) * vPathPosition.y / vPathLength;\n`,\n      'fs:#decl': `\\\nin float vTime;\n`,\n      // Drop the segments outside of the time window\n      'fs:#main-start': `\\\nif(vTime > trips.currentTime || (trips.fadeTrail && (vTime < trips.currentTime - trips.trailLength))) {\n  discard;\n}\n`,\n      // Fade the color (currentTime - 100%, end of trail - 0%)\n      'fs:DECKGL_FILTER_COLOR': `\\\nif(trips.fadeTrail) {\n  color.a *= 1.0 - (trips.currentTime - vTime) / trips.trailLength;\n}\n`\n    };\n    shaders.modules = [...shaders.modules, tripsUniforms];\n    return shaders;\n  }\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      timestamps: {\n        size: 1,\n        accessor: 'getTimestamps',\n        shaderAttributes: {\n          instanceTimestamps: {\n            vertexOffset: 0\n          },\n          instanceNextTimestamps: {\n            vertexOffset: 1\n          }\n        }\n      }\n    });\n  }\n  draw(params) {\n    const {\n      fadeTrail,\n      trailLength,\n      currentTime\n    } = this.props;\n    const tripsProps = {\n      fadeTrail,\n      trailLength,\n      currentTime\n    };\n    const model = this.state.model;\n    model.shaderInputs.setProps({\n      trips: tripsProps\n    });\n    super.draw(params);\n  }\n}\nTripsLayer.layerName = 'TripsLayer';\nTripsLayer.defaultProps = defaultProps;\nexport default TripsLayer;","map":{"version":3,"names":["PathLayer","tripsUniforms","defaultProps","fadeTrail","trailLength","type","value","min","currentTime","getTimestamps","d","timestamps","TripsLayer","getShaders","shaders","inject","modules","initializeState","attributeManager","getAttributeManager","addInstanced","size","accessor","shaderAttributes","instanceTimestamps","vertexOffset","instanceNextTimestamps","draw","params","props","tripsProps","model","state","shaderInputs","setProps","trips","layerName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\geo-layers\\src\\trips-layer\\trips-layer.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumericArray} from '@math.gl/core';\nimport {AccessorFunction, DefaultProps} from '@deck.gl/core';\nimport {PathLayer, PathLayerProps} from '@deck.gl/layers';\n\nimport {tripsUniforms, TripsProps} from './trips-layer-uniforms';\n\nconst defaultProps: DefaultProps<TripsLayerProps> = {\n  fadeTrail: true,\n  trailLength: {type: 'number', value: 120, min: 0},\n  currentTime: {type: 'number', value: 0, min: 0},\n  getTimestamps: {type: 'accessor', value: (d: any) => d.timestamps}\n};\n\n/** All properties supported by TripsLayer. */\nexport type TripsLayerProps<DataT = unknown> = _TripsLayerProps<DataT> & PathLayerProps<DataT>;\n\n/** Properties added by TripsLayer. */\ntype _TripsLayerProps<DataT = unknown> = {\n  /**\n   * Whether or not the path fades out.\n   * @default true\n   */\n  fadeTrail?: boolean;\n  /**\n   * Trail length.\n   * @default 120\n   */\n  trailLength?: number;\n  /**\n   * The current time of the frame.\n   * @default 0\n   */\n  currentTime?: number;\n  /**\n   * Timestamp accessor.\n   */\n  getTimestamps?: AccessorFunction<DataT, NumericArray>;\n};\n\n/** Render animated paths that represent vehicle trips. */\nexport default class TripsLayer<DataT = any, ExtraProps extends {} = {}> extends PathLayer<\n  DataT,\n  Required<_TripsLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'TripsLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      'vs:#decl': `\\\nin float instanceTimestamps;\nin float instanceNextTimestamps;\nout float vTime;\n`,\n      // Timestamp of the vertex\n      'vs:#main-end': `\\\nvTime = instanceTimestamps + (instanceNextTimestamps - instanceTimestamps) * vPathPosition.y / vPathLength;\n`,\n      'fs:#decl': `\\\nin float vTime;\n`,\n      // Drop the segments outside of the time window\n      'fs:#main-start': `\\\nif(vTime > trips.currentTime || (trips.fadeTrail && (vTime < trips.currentTime - trips.trailLength))) {\n  discard;\n}\n`,\n      // Fade the color (currentTime - 100%, end of trail - 0%)\n      'fs:DECKGL_FILTER_COLOR': `\\\nif(trips.fadeTrail) {\n  color.a *= 1.0 - (trips.currentTime - vTime) / trips.trailLength;\n}\n`\n    };\n    shaders.modules = [...shaders.modules, tripsUniforms];\n    return shaders;\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.addInstanced({\n      timestamps: {\n        size: 1,\n        accessor: 'getTimestamps',\n        shaderAttributes: {\n          instanceTimestamps: {\n            vertexOffset: 0\n          },\n          instanceNextTimestamps: {\n            vertexOffset: 1\n          }\n        }\n      }\n    });\n  }\n\n  draw(params) {\n    const {fadeTrail, trailLength, currentTime} = this.props;\n    const tripsProps: TripsProps = {fadeTrail, trailLength, currentTime};\n\n    const model = this.state.model!;\n    model.shaderInputs.setProps({trips: tripsProps});\n    super.draw(params);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,SAAS,QAAuB,iBAAiB;AAEzD,SAAQC,aAAa,QAAa;AAElC,MAAMC,YAAY,GAAkC;EAClDC,SAAS,EAAE,IAAI;EACfC,WAAW,EAAE;IAACC,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE,GAAG;IAAEC,GAAG,EAAE;EAAC,CAAC;EACjDC,WAAW,EAAE;IAACH,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAC,CAAC;EAC/CE,aAAa,EAAE;IAACJ,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAGI,CAAM,IAAKA,CAAC,CAACC;EAAU;CAClE;AA4BD;AACA,MAAqBC,UAAoD,SAAQZ,SAGhF;EAICa,UAAUA,CAAA;IACR,MAAMC,OAAO,GAAG,KAAK,CAACD,UAAU,EAAE;IAClCC,OAAO,CAACC,MAAM,GAAG;MACf,UAAU,EAAE;;;;CAIjB;MACK;MACA,cAAc,EAAE;;CAErB;MACK,UAAU,EAAE;;CAEjB;MACK;MACA,gBAAgB,EAAE;;;;CAIvB;MACK;MACA,wBAAwB,EAAE;;;;;KAK3B;IACDD,OAAO,CAACE,OAAO,GAAG,CAAC,GAAGF,OAAO,CAACE,OAAO,EAAEf,aAAa,CAAC;IACrD,OAAOa,OAAO;EAChB;EAEAG,eAAeA,CAAA;IACb,KAAK,CAACA,eAAe,EAAE;IAEvB,MAAMC,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,EAAE;IACnDD,gBAAiB,CAACE,YAAY,CAAC;MAC7BT,UAAU,EAAE;QACVU,IAAI,EAAE,CAAC;QACPC,QAAQ,EAAE,eAAe;QACzBC,gBAAgB,EAAE;UAChBC,kBAAkB,EAAE;YAClBC,YAAY,EAAE;WACf;UACDC,sBAAsB,EAAE;YACtBD,YAAY,EAAE;;;;KAIrB,CAAC;EACJ;EAEAE,IAAIA,CAACC,MAAM;IACT,MAAM;MAACzB,SAAS;MAAEC,WAAW;MAAEI;IAAW,CAAC,GAAG,IAAI,CAACqB,KAAK;IACxD,MAAMC,UAAU,GAAe;MAAC3B,SAAS;MAAEC,WAAW;MAAEI;IAAW,CAAC;IAEpE,MAAMuB,KAAK,GAAG,IAAI,CAACC,KAAK,CAACD,KAAM;IAC/BA,KAAK,CAACE,YAAY,CAACC,QAAQ,CAAC;MAACC,KAAK,EAAEL;IAAU,CAAC,CAAC;IAChD,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC;EACpB;;AA9DOhB,UAAA,CAAAwB,SAAS,GAAG,YAAY;AACxBxB,UAAA,CAAAV,YAAY,GAAGA,YAAY;eALfU,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}