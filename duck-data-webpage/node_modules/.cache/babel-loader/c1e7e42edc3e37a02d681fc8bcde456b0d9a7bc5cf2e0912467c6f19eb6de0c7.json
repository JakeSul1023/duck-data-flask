{"ast":null,"code":"import { addEventListeners, removeEventListeners } from \"../utils/event-listeners.js\";\nimport { getWindowForElement } from \"../utils/get-window-for-element.js\";\nimport { inputHandler } from \"./input-handler.js\";\n/**\n * create new input type manager\n */\nexport class Input {\n  constructor(manager) {\n    this.evEl = '';\n    this.evWin = '';\n    this.evTarget = '';\n    /** smaller wrapper around the handler, for the scope and the enabled state of the manager,\n     * so when disabled the input events are completely bypassed.\n     */\n    this.domHandler = ev => {\n      if (this.manager.options.enable) {\n        this.handler(ev);\n      }\n    };\n    this.manager = manager;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget || manager.element;\n  }\n  callback(eventType, input) {\n    inputHandler(this.manager, eventType, input);\n  }\n  // eslint-disable @typescript-eslint/unbound-method\n  /**\n   * bind the events\n   */\n  init() {\n    addEventListeners(this.element, this.evEl, this.domHandler);\n    addEventListeners(this.target, this.evTarget, this.domHandler);\n    addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  }\n  /**\n   * unbind the events\n   */\n  destroy() {\n    removeEventListeners(this.element, this.evEl, this.domHandler);\n    removeEventListeners(this.target, this.evTarget, this.domHandler);\n    removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  }\n}","map":{"version":3,"names":["addEventListeners","removeEventListeners","getWindowForElement","inputHandler","Input","constructor","manager","evEl","evWin","evTarget","domHandler","ev","options","enable","handler","element","target","inputTarget","callback","eventType","input","init","destroy"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\input\\input.ts"],"sourcesContent":["import {addEventListeners, removeEventListeners} from '../utils/event-listeners';\nimport {getWindowForElement} from '../utils/get-window-for-element';\nimport {inputHandler} from './input-handler';\n\nimport {InputEvent} from './input-consts';\nimport type {RawInput} from './types';\nimport type {Manager} from '../manager';\n\n/**\n * create new input type manager\n */\nexport abstract class Input {\n  manager: Manager;\n  element: HTMLElement;\n  target: EventTarget;\n\n  evEl: string = '';\n  evWin: string = '';\n  evTarget: string = '';\n\n  constructor(manager: Manager) {\n    this.manager = manager;\n    this.element = manager.element!;\n    this.target = manager.options.inputTarget || manager.element!;\n  }\n\n  /** smaller wrapper around the handler, for the scope and the enabled state of the manager,\n   * so when disabled the input events are completely bypassed.\n   */\n  protected domHandler = (ev: Event) => {\n    if (this.manager.options.enable) {\n      this.handler(ev);\n    }\n  };\n\n  protected callback(eventType: InputEvent, input: RawInput) {\n    inputHandler(this.manager, eventType, input);\n  }\n\n  /**\n   * should handle the inputEvent data and trigger the callback\n   */\n  abstract handler(ev: Event): void;\n\n  // eslint-disable @typescript-eslint/unbound-method\n  /**\n   * bind the events\n   */\n  init() {\n    addEventListeners(this.element, this.evEl, this.domHandler);\n    addEventListeners(this.target, this.evTarget, this.domHandler);\n    addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  }\n\n  /**\n   * unbind the events\n   */\n  destroy() {\n    removeEventListeners(this.element, this.evEl, this.domHandler);\n    removeEventListeners(this.target, this.evTarget, this.domHandler);\n    removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  }\n  // eslint-enable @typescript-eslint/unbound-method\n}\n"],"mappings":"AAAA,SAAQA,iBAAiB,EAAEC,oBAAoB,QAAC;AAChD,SAAQC,mBAAmB,QAAC;AAC5B,SAAQC,YAAY,QAAC;AAMrB;;;AAGA,OAAM,MAAgBC,KAAK;EASzBC,YAAYC,OAAgB;IAJ5B,KAAAC,IAAI,GAAW,EAAE;IACjB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IAQrB;;;IAGU,KAAAC,UAAU,GAAIC,EAAS,IAAI;MACnC,IAAI,IAAI,CAACL,OAAO,CAACM,OAAO,CAACC,MAAM,EAAE;QAC/B,IAAI,CAACC,OAAO,CAACH,EAAE,CAAC;MAClB;IACF,CAAC;IAZC,IAAI,CAACL,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACS,OAAO,GAAGT,OAAO,CAACS,OAAQ;IAC/B,IAAI,CAACC,MAAM,GAAGV,OAAO,CAACM,OAAO,CAACK,WAAW,IAAIX,OAAO,CAACS,OAAQ;EAC/D;EAWUG,QAAQA,CAACC,SAAqB,EAAEC,KAAe;IACvDjB,YAAY,CAAC,IAAI,CAACG,OAAO,EAAEa,SAAS,EAAEC,KAAK,CAAC;EAC9C;EAOA;EACA;;;EAGAC,IAAIA,CAAA;IACFrB,iBAAiB,CAAC,IAAI,CAACe,OAAO,EAAE,IAAI,CAACR,IAAI,EAAE,IAAI,CAACG,UAAU,CAAC;IAC3DV,iBAAiB,CAAC,IAAI,CAACgB,MAAM,EAAE,IAAI,CAACP,QAAQ,EAAE,IAAI,CAACC,UAAU,CAAC;IAC9DV,iBAAiB,CAACE,mBAAmB,CAAC,IAAI,CAACa,OAAO,CAAC,EAAE,IAAI,CAACP,KAAK,EAAE,IAAI,CAACE,UAAU,CAAC;EACnF;EAEA;;;EAGAY,OAAOA,CAAA;IACLrB,oBAAoB,CAAC,IAAI,CAACc,OAAO,EAAE,IAAI,CAACR,IAAI,EAAE,IAAI,CAACG,UAAU,CAAC;IAC9DT,oBAAoB,CAAC,IAAI,CAACe,MAAM,EAAE,IAAI,CAACP,QAAQ,EAAE,IAAI,CAACC,UAAU,CAAC;IACjET,oBAAoB,CAACC,mBAAmB,CAAC,IAAI,CAACa,OAAO,CAAC,EAAE,IAAI,CAACP,KAAK,EAAE,IAAI,CAACE,UAAU,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}