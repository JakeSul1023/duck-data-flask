{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst buffLength = 1024;\n/**\n * looking for the last occurrence of the provided\n * @param file\n * @param target\n * @returns\n */\nexport const searchFromTheEnd = async (file, target) => {\n  const searchWindow = [await file.getUint8(file.length - 1n), await file.getUint8(file.length - 2n), await file.getUint8(file.length - 3n), undefined];\n  let targetOffset = -1;\n  // looking for the last record in the central directory\n  let point = file.length - 4n;\n  do {\n    const prevPoint = point;\n    point -= BigInt(buffLength);\n    point = point >= 0n ? point : 0n;\n    const buff = new Uint8Array(await file.slice(point, prevPoint));\n    for (let i = buff.length - 1; i > -1; i--) {\n      searchWindow[3] = searchWindow[2];\n      searchWindow[2] = searchWindow[1];\n      searchWindow[1] = searchWindow[0];\n      searchWindow[0] = buff[i];\n      if (searchWindow.every((val, index) => val === target[index])) {\n        targetOffset = i;\n        break;\n      }\n    }\n  } while (targetOffset === -1 && point > 0n);\n  return point + BigInt(targetOffset);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}