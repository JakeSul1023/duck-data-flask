{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from '@luma.gl/core';\n// Rename constant to prevent inlining. We need the full set of constants for generating debug strings.\nimport { GL as GLEnum } from '@luma.gl/constants';\nimport { isBrowser } from '@probe.gl/env';\nimport { loadScript } from \"../../utils/load-script.js\";\nconst WEBGL_DEBUG_CDN_URL = 'https://unpkg.com/webgl-debug@2.0.1/index.js';\n// Helper to get shared context data\nfunction getWebGLContextData(gl) {\n  gl.luma = gl.luma || {};\n  return gl.luma;\n}\n/**\n * Loads Khronos WebGLDeveloperTools from CDN if not already installed\n * const WebGLDebugUtils = require('webgl-debug');\n * @see https://github.com/KhronosGroup/WebGLDeveloperTools\n * @see https://github.com/vorg/webgl-debug\n */\nexport async function loadWebGLDeveloperTools() {\n  if (isBrowser() && !globalThis.WebGLDebugUtils) {\n    globalThis.global = globalThis.global || globalThis;\n    // @ts-expect-error Developer tools expects global to be set\n    globalThis.global.module = {};\n    await loadScript(WEBGL_DEBUG_CDN_URL);\n  }\n}\n// Returns (a potentially new) context with debug instrumentation turned off or on.\n// Note that this actually returns a new context\nexport function makeDebugContext(gl, props = {}) {\n  return props.debugWebGL || props.traceWebGL ? getDebugContext(gl, props) : getRealContext(gl);\n}\n// Returns the real context from either of the real/debug contexts\nfunction getRealContext(gl) {\n  const data = getWebGLContextData(gl);\n  // If the context has a realContext member, it is a debug context so return the realContext\n  return data.realContext ? data.realContext : gl;\n}\n// Returns the debug context from either of the real/debug contexts\nfunction getDebugContext(gl, props) {\n  if (!globalThis.WebGLDebugUtils) {\n    log.warn('webgl-debug not loaded')();\n    return gl;\n  }\n  const data = getWebGLContextData(gl);\n  // If this already has a debug context, return it.\n  if (data.debugContext) {\n    return data.debugContext;\n  }\n  // Create a new debug context\n  globalThis.WebGLDebugUtils.init({\n    ...GLEnum,\n    ...gl\n  });\n  const glDebug = globalThis.WebGLDebugUtils.makeDebugContext(gl, onGLError.bind(null, props), onValidateGLFunc.bind(null, props));\n  // Make sure we have all WebGL2 and extension constants (todo dynamic import to circumvent minification?)\n  for (const key in GLEnum) {\n    if (!(key in glDebug) && typeof GLEnum[key] === 'number') {\n      glDebug[key] = GLEnum[key];\n    }\n  }\n  // Ensure we have a clean prototype on the instrumented object\n  // Note: setPrototypeOf does come with perf warnings, but we already take a bigger perf reduction\n  // by synchronizing the WebGL errors after each WebGL call.\n  class WebGLDebugContext {}\n  Object.setPrototypeOf(glDebug, Object.getPrototypeOf(gl));\n  Object.setPrototypeOf(WebGLDebugContext, glDebug);\n  const debugContext = Object.create(WebGLDebugContext);\n  // Store the debug context\n  data.realContext = gl;\n  data.debugContext = debugContext;\n  debugContext.debug = true;\n  // Return it\n  return debugContext;\n}\n// DEBUG TRACING\nfunction getFunctionString(functionName, functionArgs) {\n  // Cover bug in webgl-debug-tools\n  functionArgs = Array.from(functionArgs).map(arg => arg === undefined ? 'undefined' : arg);\n  let args = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, functionArgs);\n  args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;\n  return `gl.${functionName}(${args})`;\n}\nfunction onGLError(props, err, functionName, args) {\n  // Cover bug in webgl-debug-tools\n  args = Array.from(args).map(arg => arg === undefined ? 'undefined' : arg);\n  const errorMessage = globalThis.WebGLDebugUtils.glEnumToString(err);\n  const functionArgs = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, args);\n  const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;\n  log.error(message)();\n  debugger; // eslint-disable-line\n  // throw new Error(message);\n}\n// Don't generate function string until it is needed\nfunction onValidateGLFunc(props, functionName, functionArgs) {\n  let functionString = '';\n  if (log.level >= 1) {\n    functionString = getFunctionString(functionName, functionArgs);\n    if (props.traceWebGL) {\n      log.log(1, functionString)();\n    }\n  }\n  for (const arg of functionArgs) {\n    if (arg === undefined) {\n      functionString = functionString || getFunctionString(functionName, functionArgs);\n      debugger; // eslint-disable-line\n      // throw new Error(`Undefined argument: ${functionString}`);\n    }\n  }\n}","map":{"version":3,"names":["log","GL","GLEnum","isBrowser","loadScript","WEBGL_DEBUG_CDN_URL","getWebGLContextData","gl","luma","loadWebGLDeveloperTools","globalThis","WebGLDebugUtils","global","module","makeDebugContext","props","debugWebGL","traceWebGL","getDebugContext","getRealContext","data","realContext","warn","debugContext","init","glDebug","onGLError","bind","onValidateGLFunc","key","WebGLDebugContext","Object","setPrototypeOf","getPrototypeOf","create","debug","getFunctionString","functionName","functionArgs","Array","from","map","arg","undefined","args","glFunctionArgsToString","slice","length","err","errorMessage","glEnumToString","message","error","functionString","level"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\context\\debug\\webgl-developer-tools.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '@luma.gl/core';\n// Rename constant to prevent inlining. We need the full set of constants for generating debug strings.\nimport {GL as GLEnum} from '@luma.gl/constants';\nimport {isBrowser} from '@probe.gl/env';\nimport {loadScript} from '../../utils/load-script';\n\nconst WEBGL_DEBUG_CDN_URL = 'https://unpkg.com/webgl-debug@2.0.1/index.js';\n\ntype DebugContextProps = {\n  debugWebGL?: boolean;\n  traceWebGL?: boolean;\n};\n\ntype ContextData = {\n  realContext?: WebGL2RenderingContext;\n  debugContext?: WebGL2RenderingContext;\n};\n\n// Helper to get shared context data\nfunction getWebGLContextData(gl: any): ContextData {\n  gl.luma = gl.luma || {};\n  return gl.luma;\n}\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var WebGLDebugUtils: any;\n}\n\n/**\n * Loads Khronos WebGLDeveloperTools from CDN if not already installed\n * const WebGLDebugUtils = require('webgl-debug');\n * @see https://github.com/KhronosGroup/WebGLDeveloperTools\n * @see https://github.com/vorg/webgl-debug\n */\nexport async function loadWebGLDeveloperTools(): Promise<void> {\n  if (isBrowser() && !globalThis.WebGLDebugUtils) {\n    globalThis.global = globalThis.global || globalThis;\n    // @ts-expect-error Developer tools expects global to be set\n    globalThis.global.module = {};\n    await loadScript(WEBGL_DEBUG_CDN_URL);\n  }\n}\n\n// Returns (a potentially new) context with debug instrumentation turned off or on.\n// Note that this actually returns a new context\nexport function makeDebugContext(\n  gl: WebGL2RenderingContext,\n  props: DebugContextProps = {}\n): WebGL2RenderingContext {\n  return props.debugWebGL || props.traceWebGL ? getDebugContext(gl, props) : getRealContext(gl);\n}\n\n// Returns the real context from either of the real/debug contexts\nfunction getRealContext(gl: WebGL2RenderingContext): WebGL2RenderingContext {\n  const data = getWebGLContextData(gl);\n  // If the context has a realContext member, it is a debug context so return the realContext\n  return data.realContext ? data.realContext : gl;\n}\n\n// Returns the debug context from either of the real/debug contexts\nfunction getDebugContext(\n  gl: WebGL2RenderingContext,\n  props: DebugContextProps\n): WebGL2RenderingContext {\n  if (!globalThis.WebGLDebugUtils) {\n    log.warn('webgl-debug not loaded')();\n    return gl;\n  }\n\n  const data = getWebGLContextData(gl);\n\n  // If this already has a debug context, return it.\n  if (data.debugContext) {\n    return data.debugContext;\n  }\n\n  // Create a new debug context\n  globalThis.WebGLDebugUtils.init({...GLEnum, ...gl});\n  const glDebug = globalThis.WebGLDebugUtils.makeDebugContext(\n    gl,\n    onGLError.bind(null, props),\n    onValidateGLFunc.bind(null, props)\n  );\n\n  // Make sure we have all WebGL2 and extension constants (todo dynamic import to circumvent minification?)\n  for (const key in GLEnum) {\n    if (!(key in glDebug) && typeof GLEnum[key] === 'number') {\n      glDebug[key] = GLEnum[key];\n    }\n  }\n\n  // Ensure we have a clean prototype on the instrumented object\n  // Note: setPrototypeOf does come with perf warnings, but we already take a bigger perf reduction\n  // by synchronizing the WebGL errors after each WebGL call.\n  class WebGLDebugContext {}\n  Object.setPrototypeOf(glDebug, Object.getPrototypeOf(gl));\n  Object.setPrototypeOf(WebGLDebugContext, glDebug);\n  const debugContext = Object.create(WebGLDebugContext);\n  // Store the debug context\n  data.realContext = gl;\n  data.debugContext = debugContext;\n  debugContext.debug = true;\n\n  // Return it\n  return debugContext;\n}\n\n// DEBUG TRACING\n\nfunction getFunctionString(functionName: string, functionArgs): string {\n  // Cover bug in webgl-debug-tools\n  functionArgs = Array.from(functionArgs).map(arg => (arg === undefined ? 'undefined' : arg));\n  let args = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, functionArgs);\n  args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;\n  return `gl.${functionName}(${args})`;\n}\n\nfunction onGLError(props: DebugContextProps, err, functionName: string, args: any[]): void {\n  // Cover bug in webgl-debug-tools\n  args = Array.from(args).map(arg => (arg === undefined ? 'undefined' : arg));\n  const errorMessage = globalThis.WebGLDebugUtils.glEnumToString(err);\n  const functionArgs = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, args);\n  const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;\n  log.error(message)();\n  debugger; // eslint-disable-line\n  // throw new Error(message);\n}\n\n// Don't generate function string until it is needed\nfunction onValidateGLFunc(\n  props: DebugContextProps,\n  functionName: string,\n  functionArgs: any[]\n): void {\n  let functionString: string = '';\n  if (log.level >= 1) {\n    functionString = getFunctionString(functionName, functionArgs);\n    if (props.traceWebGL) {\n      log.log(1, functionString)();\n    }\n  }\n\n  for (const arg of functionArgs) {\n    if (arg === undefined) {\n      functionString = functionString || getFunctionString(functionName, functionArgs);\n      debugger; // eslint-disable-line\n      // throw new Error(`Undefined argument: ${functionString}`);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}