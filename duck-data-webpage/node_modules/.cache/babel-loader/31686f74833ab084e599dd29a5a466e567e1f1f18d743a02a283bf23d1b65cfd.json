{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { Tiles3DLoader } from \"./tiles-3d-loader.js\";\nimport { getIonTilesetMetadata } from \"./lib/ion/ion.js\";\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  // @ts-ignore\n  const {\n    accessToken\n  } = options;\n  // @ts-ignore\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n/**\n * Loader for 3D tiles from Cesium ION\n */\nexport const CesiumIonLoader = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  // @ts-ignore\n  preload,\n  parse: async (data, options, context) => {\n    options = {\n      ...options\n    };\n    options['3d-tiles'] = options['cesium-ion'];\n    // @ts-ignore\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context); // , loader);\n  },\n  options: {\n    'cesium-ion': {\n      ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};","map":{"version":3,"names":["Tiles3DLoader","getIonTilesetMetadata","preload","url","options","accessToken","assetId","Number","isFinite","matched","match","CesiumIonLoader","id","name","parse","data","context","loader"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/cesium-ion-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { Tiles3DLoader } from \"./tiles-3d-loader.js\";\nimport { getIonTilesetMetadata } from \"./lib/ion/ion.js\";\nasync function preload(url, options = {}) {\n    options = options['cesium-ion'] || {};\n    // @ts-ignore\n    const { accessToken } = options;\n    // @ts-ignore\n    let assetId = options.assetId;\n    if (!Number.isFinite(assetId)) {\n        const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n        assetId = matched && matched[1];\n    }\n    return getIonTilesetMetadata(accessToken, assetId);\n}\n/**\n * Loader for 3D tiles from Cesium ION\n */\nexport const CesiumIonLoader = {\n    ...Tiles3DLoader,\n    id: 'cesium-ion',\n    name: 'Cesium Ion',\n    // @ts-ignore\n    preload,\n    parse: async (data, options, context) => {\n        options = { ...options };\n        options['3d-tiles'] = options['cesium-ion'];\n        // @ts-ignore\n        options.loader = CesiumIonLoader;\n        return Tiles3DLoader.parse(data, options, context); // , loader);\n    },\n    options: {\n        'cesium-ion': {\n            ...Tiles3DLoader.options['3d-tiles'],\n            accessToken: null\n        }\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,sBAAsB;AACpD,SAASC,qBAAqB,QAAQ,kBAAkB;AACxD,eAAeC,OAAOA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACtCA,OAAO,GAAGA,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;EACrC;EACA,MAAM;IAAEC;EAAY,CAAC,GAAGD,OAAO;EAC/B;EACA,IAAIE,OAAO,GAAGF,OAAO,CAACE,OAAO;EAC7B,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACF,OAAO,CAAC,EAAE;IAC3B,MAAMG,OAAO,GAAGN,GAAG,CAACO,KAAK,CAAC,0BAA0B,CAAC;IACrDJ,OAAO,GAAGG,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;EACnC;EACA,OAAOR,qBAAqB,CAACI,WAAW,EAAEC,OAAO,CAAC;AACtD;AACA;AACA;AACA;AACA,OAAO,MAAMK,eAAe,GAAG;EAC3B,GAAGX,aAAa;EAChBY,EAAE,EAAE,YAAY;EAChBC,IAAI,EAAE,YAAY;EAClB;EACAX,OAAO;EACPY,KAAK,EAAE,MAAAA,CAAOC,IAAI,EAAEX,OAAO,EAAEY,OAAO,KAAK;IACrCZ,OAAO,GAAG;MAAE,GAAGA;IAAQ,CAAC;IACxBA,OAAO,CAAC,UAAU,CAAC,GAAGA,OAAO,CAAC,YAAY,CAAC;IAC3C;IACAA,OAAO,CAACa,MAAM,GAAGN,eAAe;IAChC,OAAOX,aAAa,CAACc,KAAK,CAACC,IAAI,EAAEX,OAAO,EAAEY,OAAO,CAAC,CAAC,CAAC;EACxD,CAAC;EACDZ,OAAO,EAAE;IACL,YAAY,EAAE;MACV,GAAGJ,aAAa,CAACI,OAAO,CAAC,UAAU,CAAC;MACpCC,WAAW,EAAE;IACjB;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}