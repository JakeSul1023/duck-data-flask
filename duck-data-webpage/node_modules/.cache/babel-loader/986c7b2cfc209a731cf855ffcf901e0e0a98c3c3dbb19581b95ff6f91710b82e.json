{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { makeStringIterator } from \"./make-string-iterator.js\";\nimport { makeArrayBufferIterator } from \"./make-array-buffer-iterator.js\";\nimport { makeBlobIterator } from \"./make-blob-iterator.js\";\nimport { makeStreamIterator } from \"./make-stream-iterator.js\";\nimport { isBlob, isReadableStream, isResponse } from \"../../javascript-utils/is-type.js\";\n/**\n * Returns an iterator that breaks its input into chunks and yields them one-by-one.\n * @param data\n * @param options\n * @returns\n * This function can e.g. be used to enable data sources that can only be read atomically\n * (such as `Blob` and `File` via `FileReader`) to still be parsed in batches.\n */\nexport function makeIterator(data, options) {\n  if (typeof data === 'string') {\n    // Note: Converts string chunks to binary\n    return makeStringIterator(data, options);\n  }\n  if (data instanceof ArrayBuffer) {\n    return makeArrayBufferIterator(data, options);\n  }\n  if (isBlob(data)) {\n    return makeBlobIterator(data, options);\n  }\n  if (isReadableStream(data)) {\n    return makeStreamIterator(data, options);\n  }\n  if (isResponse(data)) {\n    const response = data;\n    return makeStreamIterator(response.body, options);\n  }\n  throw new Error('makeIterator');\n}","map":{"version":3,"names":["makeStringIterator","makeArrayBufferIterator","makeBlobIterator","makeStreamIterator","isBlob","isReadableStream","isResponse","makeIterator","data","options","ArrayBuffer","response","body","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-iterator.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { makeStringIterator } from \"./make-string-iterator.js\";\nimport { makeArrayBufferIterator } from \"./make-array-buffer-iterator.js\";\nimport { makeBlobIterator } from \"./make-blob-iterator.js\";\nimport { makeStreamIterator } from \"./make-stream-iterator.js\";\nimport { isBlob, isReadableStream, isResponse } from \"../../javascript-utils/is-type.js\";\n/**\n * Returns an iterator that breaks its input into chunks and yields them one-by-one.\n * @param data\n * @param options\n * @returns\n * This function can e.g. be used to enable data sources that can only be read atomically\n * (such as `Blob` and `File` via `FileReader`) to still be parsed in batches.\n */\nexport function makeIterator(data, options) {\n    if (typeof data === 'string') {\n        // Note: Converts string chunks to binary\n        return makeStringIterator(data, options);\n    }\n    if (data instanceof ArrayBuffer) {\n        return makeArrayBufferIterator(data, options);\n    }\n    if (isBlob(data)) {\n        return makeBlobIterator(data, options);\n    }\n    if (isReadableStream(data)) {\n        return makeStreamIterator(data, options);\n    }\n    if (isResponse(data)) {\n        const response = data;\n        return makeStreamIterator(response.body, options);\n    }\n    throw new Error('makeIterator');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,MAAM,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,mCAAmC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACxC,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC1B;IACA,OAAOR,kBAAkB,CAACQ,IAAI,EAAEC,OAAO,CAAC;EAC5C;EACA,IAAID,IAAI,YAAYE,WAAW,EAAE;IAC7B,OAAOT,uBAAuB,CAACO,IAAI,EAAEC,OAAO,CAAC;EACjD;EACA,IAAIL,MAAM,CAACI,IAAI,CAAC,EAAE;IACd,OAAON,gBAAgB,CAACM,IAAI,EAAEC,OAAO,CAAC;EAC1C;EACA,IAAIJ,gBAAgB,CAACG,IAAI,CAAC,EAAE;IACxB,OAAOL,kBAAkB,CAACK,IAAI,EAAEC,OAAO,CAAC;EAC5C;EACA,IAAIH,UAAU,CAACE,IAAI,CAAC,EAAE;IAClB,MAAMG,QAAQ,GAAGH,IAAI;IACrB,OAAOL,kBAAkB,CAACQ,QAAQ,CAACC,IAAI,EAAEH,OAAO,CAAC;EACrD;EACA,MAAM,IAAII,KAAK,CAAC,cAAc,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}