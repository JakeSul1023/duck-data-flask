{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport { uid } from \"../utils/uid.js\";\nexport class ScenegraphNode {\n  id;\n  matrix = new Matrix4();\n  display = true;\n  position = new Vector3();\n  rotation = new Vector3();\n  scale = new Vector3(1, 1, 1);\n  userData = {};\n  props = {};\n  constructor(props = {}) {\n    const {\n      id\n    } = props;\n    this.id = id || uid(this.constructor.name);\n    this._setScenegraphNodeProps(props);\n  }\n  getBounds() {\n    return null;\n  }\n  destroy() {}\n  /** @deprecated use .destroy() */\n  delete() {\n    this.destroy();\n  }\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n  setPosition(position) {\n    // assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n  setRotation(rotation) {\n    // assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n  setScale(scale) {\n    // assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n  setMatrixComponents(components) {\n    const {\n      position,\n      rotation,\n      scale,\n      update = true\n    } = components;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n  update(options = {}) {\n    const {\n      position,\n      rotation,\n      scale\n    } = options;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    // assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n       const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n       return this;\n  }\n  */\n  _setScenegraphNodeProps(props) {\n    // if ('display' in props) {\n    //   this.display = props.display;\n    // }\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n    Object.assign(this.props, props);\n  }\n}","map":{"version":3,"names":["Vector3","Matrix4","uid","ScenegraphNode","id","matrix","display","position","rotation","scale","userData","props","constructor","name","_setScenegraphNodeProps","getBounds","destroy","delete","setProps","toString","setPosition","setRotation","setScale","setMatrix","copyMatrix","copy","setMatrixComponents","components","update","updateMatrix","pos","rot","identity","translate","rotateXYZ","options","getCoordinateUniforms","viewMatrix","modelMatrix","worldMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","Object","assign"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\engine\\src\\scenegraph\\scenegraph-node.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Vector3, Matrix4, NumericArray} from '@math.gl/core';\nimport {uid} from '../utils/uid';\n\n/** Properties for creating a new Scenegraph */\nexport type ScenegraphNodeProps = {\n  id?: string;\n  /** whether to display the object at all */\n  display?: boolean;\n  matrix?: NumericArray;\n  position?: NumericArray;\n  rotation?: NumericArray;\n  scale?: NumericArray;\n  update?: boolean;\n};\n\nexport class ScenegraphNode {\n  readonly id: string;\n  matrix: Matrix4 = new Matrix4();\n\n  display = true;\n  position = new Vector3();\n  rotation = new Vector3();\n  scale = new Vector3(1, 1, 1);\n  userData: Record<string, unknown> = {};\n\n  props: ScenegraphNodeProps = {};\n\n  constructor(props: ScenegraphNodeProps = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this._setScenegraphNodeProps(props);\n  }\n\n  getBounds(): [number[], number[]] | null {\n    return null;\n  }\n\n  destroy(): void {}\n\n  /** @deprecated use .destroy() */\n  delete(): void {\n    this.destroy();\n  }\n  setProps(props: ScenegraphNodeProps): this {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString(): string {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position: any): this {\n    // assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation: any): this {\n    // assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale: any): this {\n    // assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix: any, copyMatrix: boolean = true): void {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents(components: {\n    position?: any;\n    rotation?: any;\n    scale?: any;\n    update?: boolean;\n  }): this {\n    const {position, rotation, scale, update = true} = components;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix(): this {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update(options: {position?: any; rotation?: any; scale?: any} = {}): this {\n    const {position, rotation, scale} = options;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(\n    viewMatrix: any,\n    modelMatrix?: any\n  ): {\n    viewMatrix: any;\n    modelMatrix: any;\n    objectMatrix: any;\n    worldMatrix: any;\n    worldInverseMatrix: any;\n    worldInverseTransposeMatrix: any;\n  } {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    // assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props: ScenegraphNodeProps): void {\n    // if ('display' in props) {\n    //   this.display = props.display;\n    // }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}