{"ast":null,"code":"// probe.gl, MIT license\n/**\n * Format time\n */\nexport function formatTime(ms) {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\nexport function leftPad(string, length = 8) {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\nexport function rightPad(string, length = 8) {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\nexport function formatValue(v, options = {}) {\n  const EPSILON = 1e-16;\n  const {\n    isInteger = false\n  } = options;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, options);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n/** Helper to formatValue */\nfunction formatArrayValue(v, options) {\n  const {\n    maxElts = 16,\n    size = 1\n  } = options;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], options);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}","map":{"version":3,"names":["formatTime","ms","formatted","toFixed","leftPad","string","length","padLength","Math","max","repeat","rightPad","formatValue","v","options","EPSILON","isInteger","Array","isArray","ArrayBuffer","isView","formatArrayValue","Number","isFinite","String","abs","toPrecision","decimal","indexOf","slice","maxElts","size","i","terminator"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@probe.gl\\log\\src\\utils\\formatters.ts"],"sourcesContent":["// probe.gl, MIT license\n\nexport type FormatValueOptions = {\n  isInteger?: boolean;\n  maxElts?: number;\n  size?: number;\n};\n\n/**\n * Format time\n */\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, options: FormatValueOptions = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = options;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, options);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v: any, options: FormatValueOptions) {\n  const {maxElts = 16, size = 1} = options;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], options);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}