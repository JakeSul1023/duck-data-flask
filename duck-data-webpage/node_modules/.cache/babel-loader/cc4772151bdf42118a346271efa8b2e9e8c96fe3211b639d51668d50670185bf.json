{"ast":null,"code":"import { AttrRecognizer } from \"./attribute.js\";\nimport { TOUCH_ACTION_NONE } from \"../touchaction/touchaction-Consts.js\";\nimport { RecognizerState } from \"../recognizer/recognizer-state.js\";\nconst EVENT_NAMES = ['', 'start', 'move', 'end', 'cancel', 'in', 'out'];\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n */\nexport class PinchRecognizer extends AttrRecognizer {\n  constructor(options = {}) {\n    super({\n      enable: true,\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2,\n      ...options\n    });\n  }\n  getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  }\n  getEventNames() {\n    return EVENT_NAMES.map(suffix => this.options.event + suffix);\n  }\n  attrTest(input) {\n    return super.attrTest(input) && (Math.abs(input.scale - 1) > this.options.threshold || Boolean(this.state & RecognizerState.Began));\n  }\n  emit(input) {\n    if (input.scale !== 1) {\n      const inOut = input.scale < 1 ? 'in' : 'out';\n      input.additionalEvent = this.options.event + inOut;\n    }\n    super.emit(input);\n  }\n}","map":{"version":3,"names":["AttrRecognizer","TOUCH_ACTION_NONE","RecognizerState","EVENT_NAMES","PinchRecognizer","constructor","options","enable","event","threshold","pointers","getTouchAction","getEventNames","map","suffix","attrTest","input","Math","abs","scale","Boolean","state","Began","emit","inOut","additionalEvent"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\mjolnir.js\\src\\hammerjs\\recognizers\\pinch.ts"],"sourcesContent":["import {AttrRecognizer} from './attribute';\nimport {TOUCH_ACTION_NONE} from '../touchaction/touchaction-Consts';\nimport {RecognizerState} from '../recognizer/recognizer-state';\nimport type {HammerInput} from '../input/types';\n\nexport type PinchRecognizerOptions = {\n  /** Name of the event.\n   * @default 'pinch'\n   */\n  event?: string;\n  /** Enable this event.\n   * @default true\n   */\n  enable?: boolean;\n  /** Required number of pointers, with a minimum of 2.\n   * @default 2\n   */\n  pointers?: number;\n  /** Minimal scale before recognizing.\n   * @default 0\n   */\n  threshold?: number;\n};\n\nconst EVENT_NAMES = ['', 'start', 'move', 'end', 'cancel', 'in', 'out'] as const;\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n */\nexport class PinchRecognizer extends AttrRecognizer<Required<PinchRecognizerOptions>> {\n  constructor(options: PinchRecognizerOptions = {}) {\n    super({\n      enable: true,\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2,\n      ...options\n    });\n  }\n\n  getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  }\n\n  getEventNames(): string[] {\n    return EVENT_NAMES.map((suffix) => this.options.event + suffix);\n  }\n\n  attrTest(input: HammerInput): boolean {\n    return (\n      super.attrTest(input) &&\n      (Math.abs(input.scale - 1) > this.options.threshold ||\n        Boolean(this.state & RecognizerState.Began))\n    );\n  }\n\n  emit(input: HammerInput) {\n    if (input.scale !== 1) {\n      const inOut = input.scale < 1 ? 'in' : 'out';\n      input.additionalEvent = this.options.event + inOut;\n    }\n    super.emit(input);\n  }\n}\n"],"mappings":"AAAA,SAAQA,cAAc,QAAC;AACvB,SAAQC,iBAAiB,QAAC;AAC1B,SAAQC,eAAe,QAAC;AAsBxB,MAAMC,WAAW,GAAG,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAU;AAEhF;;;;AAIA,OAAM,MAAOC,eAAgB,SAAQJ,cAAgD;EACnFK,YAAYC,OAAA,GAAkC,EAAE;IAC9C,KAAK,CAAC;MACJC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,OAAO;MACdC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE,CAAC;MACX,GAAGJ;KACJ,CAAC;EACJ;EAEAK,cAAcA,CAAA;IACZ,OAAO,CAACV,iBAAiB,CAAC;EAC5B;EAEAW,aAAaA,CAAA;IACX,OAAOT,WAAW,CAACU,GAAG,CAAEC,MAAM,IAAK,IAAI,CAACR,OAAO,CAACE,KAAK,GAAGM,MAAM,CAAC;EACjE;EAEAC,QAAQA,CAACC,KAAkB;IACzB,OACE,KAAK,CAACD,QAAQ,CAACC,KAAK,CAAC,KACpBC,IAAI,CAACC,GAAG,CAACF,KAAK,CAACG,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAACb,OAAO,CAACG,SAAS,IACjDW,OAAO,CAAC,IAAI,CAACC,KAAK,GAAGnB,eAAe,CAACoB,KAAK,CAAC,CAAC;EAElD;EAEAC,IAAIA,CAACP,KAAkB;IACrB,IAAIA,KAAK,CAACG,KAAK,KAAK,CAAC,EAAE;MACrB,MAAMK,KAAK,GAAGR,KAAK,CAACG,KAAK,GAAG,CAAC,GAAG,IAAI,GAAG,KAAK;MAC5CH,KAAK,CAACS,eAAe,GAAG,IAAI,CAACnB,OAAO,CAACE,KAAK,GAAGgB,KAAK;IACpD;IACA,KAAK,CAACD,IAAI,CAACP,KAAK,CAAC;EACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}