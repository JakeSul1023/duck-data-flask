{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport default class Transition {\n  /**\n   * @params timeline {Timeline}\n   */\n  constructor(timeline) {\n    this._inProgress = false;\n    this._handle = null;\n    this.time = 0;\n    // @ts-expect-error\n    this.settings = {\n      duration: 0\n    };\n    this._timeline = timeline;\n  }\n  /* Public API */\n  get inProgress() {\n    return this._inProgress;\n  }\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(settings) {\n    this.cancel();\n    // @ts-expect-error\n    this.settings = settings;\n    this._inProgress = true;\n    this.settings.onStart?.(this);\n  }\n  /**\n   * end this transition if it is in progress.\n   */\n  end() {\n    if (this._inProgress) {\n      this._timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n      this.settings.onEnd?.(this);\n    }\n  }\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this._inProgress) {\n      this.settings.onInterrupt?.(this);\n      this._timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n    }\n  }\n  /**\n   * update this transition. Returns `true` if updated.\n   */\n  update() {\n    if (!this._inProgress) {\n      return false;\n    }\n    // It is important to initialize the handle during `update` instead of `start`.\n    // The CPU time that the `start` frame takes should not be counted towards the duration.\n    // On the other hand, `update` always happens during a render cycle. The clock starts when the\n    // transition is rendered for the first time.\n    if (this._handle === null) {\n      const {\n        _timeline: timeline,\n        settings\n      } = this;\n      this._handle = timeline.addChannel({\n        delay: timeline.getTime(),\n        duration: settings.duration\n      });\n    }\n    this.time = this._timeline.getTime(this._handle);\n    // Call subclass method\n    this._onUpdate();\n    // Call user callback\n    this.settings.onUpdate?.(this);\n    // This only works if `settings.duration` is set\n    // Spring transition must call `end` manually\n    if (this._timeline.isFinished(this._handle)) {\n      this.end();\n    }\n    return true;\n  }\n  /* Private API */\n  _onUpdate() {\n    // for subclass override\n  }\n}","map":{"version":3,"names":["Transition","constructor","timeline","_inProgress","_handle","time","settings","duration","_timeline","inProgress","start","cancel","onStart","end","removeChannel","onEnd","onInterrupt","update","addChannel","delay","getTime","_onUpdate","onUpdate","isFinished"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\transitions\\transition.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Timeline} from '@luma.gl/engine';\n\nexport type TransitionSettings = {\n  duration: number;\n  onStart?: (transition: Transition) => void;\n  onUpdate?: (transition: Transition) => void;\n  onInterrupt?: (transition: Transition) => void;\n  onEnd?: (transition: Transition) => void;\n};\n\nexport default class Transition {\n  private _inProgress: boolean = false;\n  private _handle: number | null = null;\n  private _timeline: Timeline;\n\n  time: number = 0;\n  // @ts-expect-error\n  settings: TransitionSettings & {fromValue; toValue; duration; easing; damping; stiffness} = {\n    duration: 0\n  };\n\n  /**\n   * @params timeline {Timeline}\n   */\n  constructor(timeline: Timeline) {\n    this._timeline = timeline;\n  }\n\n  /* Public API */\n  get inProgress(): boolean {\n    return this._inProgress;\n  }\n\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(settings: TransitionSettings) {\n    this.cancel();\n    // @ts-expect-error\n    this.settings = settings;\n    this._inProgress = true;\n    this.settings.onStart?.(this);\n  }\n\n  /**\n   * end this transition if it is in progress.\n   */\n  end() {\n    if (this._inProgress) {\n      this._timeline.removeChannel(this._handle as number);\n      this._handle = null;\n      this._inProgress = false;\n      this.settings.onEnd?.(this);\n    }\n  }\n\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this._inProgress) {\n      this.settings.onInterrupt?.(this);\n      this._timeline.removeChannel(this._handle as number);\n      this._handle = null;\n      this._inProgress = false;\n    }\n  }\n\n  /**\n   * update this transition. Returns `true` if updated.\n   */\n  update() {\n    if (!this._inProgress) {\n      return false;\n    }\n\n    // It is important to initialize the handle during `update` instead of `start`.\n    // The CPU time that the `start` frame takes should not be counted towards the duration.\n    // On the other hand, `update` always happens during a render cycle. The clock starts when the\n    // transition is rendered for the first time.\n    if (this._handle === null) {\n      const {_timeline: timeline, settings} = this;\n      this._handle = timeline.addChannel({\n        delay: timeline.getTime(),\n        duration: settings.duration\n      });\n    }\n\n    this.time = this._timeline.getTime(this._handle);\n    // Call subclass method\n    this._onUpdate();\n    // Call user callback\n    this.settings.onUpdate?.(this);\n\n    // This only works if `settings.duration` is set\n    // Spring transition must call `end` manually\n    if (this._timeline.isFinished(this._handle)) {\n      this.end();\n    }\n    return true;\n  }\n\n  /* Private API */\n\n  protected _onUpdate() {\n    // for subclass override\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAYA,eAAc,MAAOA,UAAU;EAW7B;;;EAGAC,YAAYC,QAAkB;IAbtB,KAAAC,WAAW,GAAY,KAAK;IAC5B,KAAAC,OAAO,GAAkB,IAAI;IAGrC,KAAAC,IAAI,GAAW,CAAC;IAChB;IACA,KAAAC,QAAQ,GAAoF;MAC1FC,QAAQ,EAAE;KACX;IAMC,IAAI,CAACC,SAAS,GAAGN,QAAQ;EAC3B;EAEA;EACA,IAAIO,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACN,WAAW;EACzB;EAEA;;;;EAIAO,KAAKA,CAACJ,QAA4B;IAChC,IAAI,CAACK,MAAM,EAAE;IACb;IACA,IAAI,CAACL,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACH,WAAW,GAAG,IAAI;IACvB,IAAI,CAACG,QAAQ,CAACM,OAAO,GAAG,IAAI,CAAC;EAC/B;EAEA;;;EAGAC,GAAGA,CAAA;IACD,IAAI,IAAI,CAACV,WAAW,EAAE;MACpB,IAAI,CAACK,SAAS,CAACM,aAAa,CAAC,IAAI,CAACV,OAAiB,CAAC;MACpD,IAAI,CAACA,OAAO,GAAG,IAAI;MACnB,IAAI,CAACD,WAAW,GAAG,KAAK;MACxB,IAAI,CAACG,QAAQ,CAACS,KAAK,GAAG,IAAI,CAAC;IAC7B;EACF;EAEA;;;EAGAJ,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACR,WAAW,EAAE;MACpB,IAAI,CAACG,QAAQ,CAACU,WAAW,GAAG,IAAI,CAAC;MACjC,IAAI,CAACR,SAAS,CAACM,aAAa,CAAC,IAAI,CAACV,OAAiB,CAAC;MACpD,IAAI,CAACA,OAAO,GAAG,IAAI;MACnB,IAAI,CAACD,WAAW,GAAG,KAAK;IAC1B;EACF;EAEA;;;EAGAc,MAAMA,CAAA;IACJ,IAAI,CAAC,IAAI,CAACd,WAAW,EAAE;MACrB,OAAO,KAAK;IACd;IAEA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACC,OAAO,KAAK,IAAI,EAAE;MACzB,MAAM;QAACI,SAAS,EAAEN,QAAQ;QAAEI;MAAQ,CAAC,GAAG,IAAI;MAC5C,IAAI,CAACF,OAAO,GAAGF,QAAQ,CAACgB,UAAU,CAAC;QACjCC,KAAK,EAAEjB,QAAQ,CAACkB,OAAO,EAAE;QACzBb,QAAQ,EAAED,QAAQ,CAACC;OACpB,CAAC;IACJ;IAEA,IAAI,CAACF,IAAI,GAAG,IAAI,CAACG,SAAS,CAACY,OAAO,CAAC,IAAI,CAAChB,OAAO,CAAC;IAChD;IACA,IAAI,CAACiB,SAAS,EAAE;IAChB;IACA,IAAI,CAACf,QAAQ,CAACgB,QAAQ,GAAG,IAAI,CAAC;IAE9B;IACA;IACA,IAAI,IAAI,CAACd,SAAS,CAACe,UAAU,CAAC,IAAI,CAACnB,OAAO,CAAC,EAAE;MAC3C,IAAI,CAACS,GAAG,EAAE;IACZ;IACA,OAAO,IAAI;EACb;EAEA;EAEUQ,SAASA,CAAA;IACjB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}