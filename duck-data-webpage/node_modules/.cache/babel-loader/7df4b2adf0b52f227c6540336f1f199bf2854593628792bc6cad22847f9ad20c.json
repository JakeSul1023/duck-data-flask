{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\n/**\n * Parse subtree file\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format\n * @param data\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport default async function parse3DTilesSubtree(data, options, context) {\n  const magic = new Uint32Array(data.slice(0, 4));\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n  const version = new Uint32Array(data.slice(4, 8));\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n  await loadExplicitBitstream(subtree, subtree.tileAvailability, internalBinaryBuffer, context);\n  if (Array.isArray(subtree.contentAvailability)) {\n    for (const contentAvailability of subtree.contentAvailability) {\n      await loadExplicitBitstream(subtree, contentAvailability, internalBinaryBuffer, context);\n    }\n  } else {\n    await loadExplicitBitstream(subtree, subtree.contentAvailability, internalBinaryBuffer, context);\n  }\n  await loadExplicitBitstream(subtree, subtree.childSubtreeAvailability, internalBinaryBuffer, context);\n  return subtree;\n}\n/**\n * Load explicit bitstream for subtree availability data.\n * @param subtree - subtree data\n * @param availabilityObject - tileAvailability / contentAvailability / childSubtreeAvailability object\n * @param internalBinaryBuffer - subtree binary buffer\n * @param context - loaders.gl context\n */\nexport async function loadExplicitBitstream(subtree, availabilityObject, internalBinaryBuffer, context) {\n  const bufferViewIndex = Number.isFinite(availabilityObject.bitstream) ? availabilityObject.bitstream : availabilityObject.bufferView;\n  if (typeof bufferViewIndex !== 'number') {\n    return;\n  }\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n  if (!context?.baseUrl) {\n    throw new Error('Url is not provided');\n  }\n  if (!context.fetch) {\n    throw new Error('fetch is not provided');\n  }\n  // External bitstream loading\n  if (buffer.uri) {\n    const bufferUri = `${context?.baseUrl || ''}/${buffer.uri}`;\n    const response = await context.fetch(bufferUri);\n    const data = await response.arrayBuffer();\n    availabilityObject.explicitBitstream = new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n    return;\n  }\n  const bufferStart = subtree.buffers.slice(0, bufferView.buffer).reduce((offset, buf) => offset + buf.byteLength, 0);\n  availabilityObject.explicitBitstream = new Uint8Array(internalBinaryBuffer.slice(bufferStart, bufferStart + buffer.byteLength), bufferView.byteOffset, bufferView.byteLength);\n}\n/**\n * Parse buffer to return uint64 value\n * @param buffer\n * @returns 64-bit value until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Value(buffer) {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  // combine the two 32-bit values\n  return left + 2 ** 32 * right;\n}","map":{"version":3,"names":["SUBTREE_FILE_MAGIC","SUBTREE_FILE_VERSION","parse3DTilesSubtree","data","options","context","magic","Uint32Array","slice","Error","version","jsonByteLength","parseUint64Value","stringAttribute","Uint8Array","textDecoder","TextDecoder","string","decode","subtree","JSON","parse","binaryByteLength","internalBinaryBuffer","ArrayBuffer","loadExplicitBitstream","tileAvailability","Array","isArray","contentAvailability","childSubtreeAvailability","availabilityObject","bufferViewIndex","Number","isFinite","bitstream","bufferView","bufferViews","buffer","buffers","baseUrl","fetch","uri","bufferUri","response","arrayBuffer","explicitBitstream","byteOffset","byteLength","bufferStart","reduce","offset","buf","dataView","DataView","left","getUint32","right"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-tile-subtree.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\n/**\n * Parse subtree file\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format\n * @param data\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport default async function parse3DTilesSubtree(data, options, context) {\n    const magic = new Uint32Array(data.slice(0, 4));\n    if (magic[0] !== SUBTREE_FILE_MAGIC) {\n        throw new Error('Wrong subtree file magic number');\n    }\n    const version = new Uint32Array(data.slice(4, 8));\n    if (version[0] !== SUBTREE_FILE_VERSION) {\n        throw new Error('Wrong subtree file verson, must be 1');\n    }\n    const jsonByteLength = parseUint64Value(data.slice(8, 16));\n    const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n    const textDecoder = new TextDecoder('utf8');\n    const string = textDecoder.decode(stringAttribute);\n    const subtree = JSON.parse(string);\n    const binaryByteLength = parseUint64Value(data.slice(16, 24));\n    let internalBinaryBuffer = new ArrayBuffer(0);\n    if (binaryByteLength) {\n        internalBinaryBuffer = data.slice(24 + jsonByteLength);\n    }\n    await loadExplicitBitstream(subtree, subtree.tileAvailability, internalBinaryBuffer, context);\n    if (Array.isArray(subtree.contentAvailability)) {\n        for (const contentAvailability of subtree.contentAvailability) {\n            await loadExplicitBitstream(subtree, contentAvailability, internalBinaryBuffer, context);\n        }\n    }\n    else {\n        await loadExplicitBitstream(subtree, subtree.contentAvailability, internalBinaryBuffer, context);\n    }\n    await loadExplicitBitstream(subtree, subtree.childSubtreeAvailability, internalBinaryBuffer, context);\n    return subtree;\n}\n/**\n * Load explicit bitstream for subtree availability data.\n * @param subtree - subtree data\n * @param availabilityObject - tileAvailability / contentAvailability / childSubtreeAvailability object\n * @param internalBinaryBuffer - subtree binary buffer\n * @param context - loaders.gl context\n */\nexport async function loadExplicitBitstream(subtree, availabilityObject, internalBinaryBuffer, context) {\n    const bufferViewIndex = Number.isFinite(availabilityObject.bitstream)\n        ? availabilityObject.bitstream\n        : availabilityObject.bufferView;\n    if (typeof bufferViewIndex !== 'number') {\n        return;\n    }\n    const bufferView = subtree.bufferViews[bufferViewIndex];\n    const buffer = subtree.buffers[bufferView.buffer];\n    if (!context?.baseUrl) {\n        throw new Error('Url is not provided');\n    }\n    if (!context.fetch) {\n        throw new Error('fetch is not provided');\n    }\n    // External bitstream loading\n    if (buffer.uri) {\n        const bufferUri = `${context?.baseUrl || ''}/${buffer.uri}`;\n        const response = await context.fetch(bufferUri);\n        const data = await response.arrayBuffer();\n        availabilityObject.explicitBitstream = new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n        return;\n    }\n    const bufferStart = subtree.buffers\n        .slice(0, bufferView.buffer)\n        .reduce((offset, buf) => offset + buf.byteLength, 0);\n    availabilityObject.explicitBitstream = new Uint8Array(internalBinaryBuffer.slice(bufferStart, bufferStart + buffer.byteLength), bufferView.byteOffset, bufferView.byteLength);\n}\n/**\n * Parse buffer to return uint64 value\n * @param buffer\n * @returns 64-bit value until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Value(buffer) {\n    const dataView = new DataView(buffer);\n    const left = dataView.getUint32(0, true);\n    const right = dataView.getUint32(4, true);\n    // combine the two 32-bit values\n    return left + 2 ** 32 * right;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}