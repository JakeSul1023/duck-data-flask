{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nexport class Accessor {\n  offset;\n  stride;\n  type;\n  size;\n  divisor;\n  normalized;\n  integer;\n  buffer;\n  index;\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  static getBytesPerVertex(accessor) {\n    // assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n  constructor(...accessors) {\n    log.warn('Accessor will be removed in next minor release');\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  // ACCESSORS\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n  // PRIVATE\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    if (props.type !== undefined) {\n      this.type = props.type;\n      // Auto-deduce integer type?\n      if (props.type === 5124 || props.type === 5125) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    // @ts-expect-error\n    if (props.normalize !== undefined) {\n      // @ts-expect-error\n      this.normalized = props.normalize;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n    // DEPRECATED\n    // @ts-expect-error\n    if (props.instanced !== undefined) {\n      // @ts-expect-error\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    // @ts-expect-error\n    if (props.isInstanced !== undefined) {\n      // @ts-expect-error\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n    if (this.offset === undefined) delete this.offset;\n    if (this.stride === undefined) delete this.stride;\n    if (this.type === undefined) delete this.type;\n    if (this.size === undefined) delete this.size;\n    if (this.divisor === undefined) delete this.divisor;\n    if (this.normalized === undefined) delete this.normalized;\n    if (this.integer === undefined) delete this.integer;\n    if (this.buffer === undefined) delete this.buffer;\n    if (this.index === undefined) delete this.index;\n    return this;\n  }\n}\n/**\n * Converts GL constant to corresponding TYPED ARRAY\n * Used to auto deduce gl parameter types\n * @deprecated Use getTypedArrayFromDataType\n * @param glType\n * @param param1\n * @returns\n */\n// eslint-disable-next-line complexity\nfunction getTypedArrayFromGLType(glType, options) {\n  const {\n    clamped = true\n  } = options || {};\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case 5126:\n      return Float32Array;\n    case 5123:\n    case 33635:\n    case 32819:\n    case 32820:\n      return Uint16Array;\n    case 5125:\n      return Uint32Array;\n    case 5121:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case 5120:\n      return Int8Array;\n    case 5122:\n      return Int16Array;\n    case 5124:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n// TEST EXPORTS\nexport { DEFAULT_ACCESSOR_VALUES };","map":{"version":3,"names":["log","GL","DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","Accessor","buffer","index","getBytesPerElement","accessor","ArrayType","getTypedArrayFromGLType","BYTES_PER_ELEMENT","getBytesPerVertex","resolve","accessors","constructor","warn","forEach","_assign","Object","freeze","toString","JSON","stringify","BYTES_PER_VERTEX","props","undefined","normalize","instanced","isInstanced","glType","options","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array","Error"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\deprecated\\accessor.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Buffer, log} from '@luma.gl/core';\nimport {GL, GLDataType, GLPixelType} from '@luma.gl/constants';\nimport {TypedArrayConstructor} from '@math.gl/types';\n\n/**\n * Attribute descriptor object\n * @deprecated Use ShaderLayout\n */\nexport interface AccessorObject {\n  buffer?: Buffer;\n  // format: VertexFormat;\n  offset?: number;\n  // can now be described with single WebGPU-style `format` string\n\n  //\n  stride?: number;\n\n  /** @deprecated - Use accessor.stepMode */\n  divisor?: number;\n\n  /** @deprecated - Infer from format */\n  type?: number;\n  /** @deprecated - Infer from format */\n  size?: number;\n  /** @deprecated - Infer from format */\n  normalized?: boolean;\n  /** @deprecated - Infer from format */\n  integer?: boolean;\n\n  /** @deprecated */\n  index?: number;\n}\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nexport class Accessor implements AccessorObject {\n  offset?: number;\n  stride?: number;\n  type?: number;\n  size?: number;\n  divisor?: number;\n  normalized?: boolean;\n  integer?: boolean;\n\n  buffer?: Buffer;\n  index?: number;\n\n  static getBytesPerElement(accessor: Accessor | AccessorObject): number {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor: AccessorObject): number {\n    // assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors: AccessorObject[]): Accessor {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors: AccessorObject[]) {\n    log.warn('Accessor will be removed in next minor release');\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT(): number {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX(): number {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props: AccessorObject = {}): this {\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if ((props.type as GL) === GL.INT || (props.type as GL) === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    // @ts-expect-error\n    if (props.normalize !== undefined) {\n      // @ts-expect-error\n      this.normalized = props.normalize;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    // @ts-expect-error\n    if (props.instanced !== undefined) {\n      // @ts-expect-error\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    // @ts-expect-error\n    if (props.isInstanced !== undefined) {\n      // @ts-expect-error\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    if (this.offset === undefined) delete this.offset;\n    if (this.stride === undefined) delete this.stride;\n    if (this.type === undefined) delete this.type;\n    if (this.size === undefined) delete this.size;\n    if (this.divisor === undefined) delete this.divisor;\n    if (this.normalized === undefined) delete this.normalized;\n    if (this.integer === undefined) delete this.integer;\n\n    if (this.buffer === undefined) delete this.buffer;\n    if (this.index === undefined) delete this.index;\n\n    return this;\n  }\n}\n\n/**\n * Converts GL constant to corresponding TYPED ARRAY\n * Used to auto deduce gl parameter types\n * @deprecated Use getTypedArrayFromDataType\n * @param glType\n * @param param1\n * @returns\n */\n// eslint-disable-next-line complexity\nfunction getTypedArrayFromGLType(\n  glType: GLDataType | GLPixelType,\n  options?: {\n    clamped?: boolean;\n  }\n): TypedArrayConstructor {\n  const {clamped = true} = options || {};\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}