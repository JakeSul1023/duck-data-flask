{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Device, log } from '@luma.gl/core';\nimport { WebGLStateTracker } from \"../context/state-tracker/webgl-state-tracker.js\";\nimport { createBrowserContext } from \"../context/helpers/create-browser-context.js\";\nimport { getDeviceInfo } from \"./device-helpers/webgl-device-info.js\";\nimport { WebGLDeviceFeatures } from \"./device-helpers/webgl-device-features.js\";\nimport { WebGLDeviceLimits } from \"./device-helpers/webgl-device-limits.js\";\nimport { WebGLCanvasContext } from \"./webgl-canvas-context.js\";\nimport { initializeSpectorJS } from \"../context/debug/spector.js\";\nimport { makeDebugContext } from \"../context/debug/webgl-developer-tools.js\";\nimport { getTextureFormatCapabilitiesWebGL } from \"./converters/webgl-texture-table.js\";\nimport { uid } from \"../utils/uid.js\";\nimport { WEBGLBuffer } from \"./resources/webgl-buffer.js\";\nimport { WEBGLShader } from \"./resources/webgl-shader.js\";\nimport { WEBGLSampler } from \"./resources/webgl-sampler.js\";\nimport { WEBGLTexture } from \"./resources/webgl-texture.js\";\nimport { WEBGLFramebuffer } from \"./resources/webgl-framebuffer.js\";\nimport { WEBGLRenderPass } from \"./resources/webgl-render-pass.js\";\nimport { WEBGLRenderPipeline } from \"./resources/webgl-render-pipeline.js\";\nimport { WEBGLCommandEncoder } from \"./resources/webgl-command-encoder.js\";\nimport { WEBGLVertexArray } from \"./resources/webgl-vertex-array.js\";\nimport { WEBGLTransformFeedback } from \"./resources/webgl-transform-feedback.js\";\nimport { WEBGLQuerySet } from \"./resources/webgl-query-set.js\";\nimport { readPixelsToArray, readPixelsToBuffer } from \"./helpers/webgl-texture-utils.js\";\nimport { setGLParameters, getGLParameters, resetGLParameters } from \"../context/parameters/unified-parameter-api.js\";\nimport { withGLParameters } from \"../context/state-tracker/with-parameters.js\";\nimport { getWebGLExtension } from \"../context/helpers/webgl-extensions.js\";\n/** WebGPU style Device API for a WebGL context */\nexport class WebGLDevice extends Device {\n  //\n  // Public `Device` API\n  //\n  /** type of this device */\n  type = 'webgl';\n  // Use the ! assertion to handle the case where _reuseDevices causes the constructor to return early\n  /** The underlying WebGL context */\n  handle;\n  features;\n  limits;\n  info;\n  canvasContext;\n  lost;\n  _resolveContextLost;\n  /** WebGL2 context. */\n  gl;\n  debug = false;\n  /** State used by luma.gl classes: TODO - move to canvasContext*/\n  _canvasSizeInfo = {\n    clientWidth: 0,\n    clientHeight: 0,\n    devicePixelRatio: 1\n  };\n  /** State used by luma.gl classes - TODO - not used? */\n  _extensions = {};\n  _polyfilled = false;\n  /** Instance of Spector.js (if initialized) */\n  spectorJS;\n  //\n  // Public API\n  //\n  constructor(props) {\n    super({\n      ...props,\n      id: props.id || uid('webgl-device')\n    });\n    const canvasContextProps = Device._getCanvasContextProps(props);\n    // WebGL requires a canvas to be created before creating the context\n    if (!canvasContextProps) {\n      throw new Error('WebGLDevice requires props.createCanvasContext to be set');\n    }\n    // Check if the WebGL context is already associated with a device\n    // Note that this can be avoided in webgl2adapter.create() if\n    // DeviceProps._reuseDevices is set.\n    // @ts-expect-error device is attached to context\n    let device = canvasContextProps.canvas?.gl?.device;\n    if (device) {\n      throw new Error(`WebGL context already attached to device ${device.id}`);\n    }\n    // Create and instrument context\n    this.canvasContext = new WebGLCanvasContext(this, canvasContextProps);\n    this.lost = new Promise(resolve => {\n      this._resolveContextLost = resolve;\n    });\n    const webglContextAttributes = {\n      ...props.webgl\n    };\n    // Copy props from CanvasContextProps\n    if (canvasContextProps.alphaMode === 'premultiplied') {\n      webglContextAttributes.premultipliedAlpha = true;\n    }\n    if (props.powerPreference !== undefined) {\n      webglContextAttributes.powerPreference = props.powerPreference;\n    }\n    // Check if we should attach to an externally created context or create a new context\n    const externalGLContext = this.props._handle;\n    const gl = externalGLContext || createBrowserContext(this.canvasContext.canvas, {\n      onContextLost: event => this._resolveContextLost?.({\n        reason: 'destroyed',\n        message: 'Entered sleep mode, or too many apps or browser tabs are using the GPU.'\n      }),\n      // eslint-disable-next-line no-console\n      onContextRestored: event => console.log('WebGL context restored')\n    }, webglContextAttributes);\n    if (!gl) {\n      throw new Error('WebGL context creation failed');\n    }\n    // Note that the browser will only create one WebGL context per canvas.\n    // This means that a newly created gl context may already have a device attached to it.\n    // @ts-expect-error luma.gl stores a device reference on the context.\n    device = gl.device;\n    if (device) {\n      if (props._reuseDevices) {\n        log.log(1, `Not creating a new Device, instead returning a reference to Device ${device.id} already attached to WebGL context`, device)();\n        device._reused = true;\n        return device;\n      }\n      throw new Error(`WebGL context already attached to device ${device.id}`);\n    }\n    this.handle = gl;\n    this.gl = gl;\n    // Add spector debug instrumentation to context\n    // We need to trust spector integration to decide if spector should be initialized\n    // We also run spector instrumentation first, otherwise spector can clobber luma instrumentation.\n    this.spectorJS = initializeSpectorJS({\n      ...this.props,\n      gl: this.handle\n    });\n    // Instrument context\n    this.gl.device = this; // Update GL context: Link webgl context back to device\n    // TODO - remove, this is only used to detect debug contexts.\n    this.gl._version = 2; // Update GL context: Store WebGL version field on gl context (HACK to identify debug contexts)\n    // initialize luma Device fields\n    this.info = getDeviceInfo(this.gl, this._extensions);\n    this.limits = new WebGLDeviceLimits(this.gl);\n    this.features = new WebGLDeviceFeatures(this.gl, this._extensions, this.props._disabledFeatures);\n    if (this.props._initializeFeatures) {\n      this.features.initializeFeatures();\n    }\n    if (canvasContextProps.autoResize !== false) {\n      this.canvasContext.resize();\n    }\n    // Install context state tracking\n    const glState = new WebGLStateTracker(this.gl, {\n      log: (...args) => log.log(1, ...args)()\n    });\n    glState.trackState(this.gl, {\n      copyState: false\n    });\n    // DEBUG contexts: Add luma debug instrumentation to the context, force log level to at least 1\n    const debugWebGL = props.debugWebGL || props.debug;\n    const traceWebGL = props.debugWebGL;\n    if (debugWebGL) {\n      this.gl = makeDebugContext(this.gl, {\n        debugWebGL,\n        traceWebGL\n      });\n      log.warn('WebGL debug mode activated. Performance reduced.')();\n      if (props.debugWebGL) {\n        log.level = Math.max(log.level, 1);\n      }\n    }\n  }\n  /**\n   * Destroys the device\n   *\n   * @note \"Detaches\" from the WebGL context unless _reuseDevices is true.\n   *\n   * @note The underlying WebGL context is not immediately destroyed,\n   * but may be destroyed later through normal JavaScript garbage collection.\n   * This is a fundamental limitation since WebGL does not offer any\n   * browser API for destroying WebGL contexts.\n   */\n  destroy() {\n    // Note that deck.gl (especially in React strict mode) depends on being able\n    // to asynchronously create a Device against the same canvas (i.e. WebGL context)\n    // multiple times and getting the same device back. Since deck.gl is not aware\n    // of this sharing, it might call destroy() multiple times on the same device.\n    // Therefore we must do nothing in destroy() if props._reuseDevices is true\n    if (!this.props._reuseDevices && !this._reused) {\n      // Delete the reference to the device that we store on the WebGL context\n      delete this.gl.device;\n    }\n  }\n  get isLost() {\n    return this.gl.isContextLost();\n  }\n  // IMPLEMENTATION OF ABSTRACT DEVICE\n  createCanvasContext(props) {\n    throw new Error('WebGL only supports a single canvas');\n  }\n  createBuffer(props) {\n    const newProps = this._normalizeBufferProps(props);\n    return new WEBGLBuffer(this, newProps);\n  }\n  createTexture(props) {\n    return new WEBGLTexture(this, props);\n  }\n  createExternalTexture(props) {\n    throw new Error('createExternalTexture() not implemented'); // return new Program(props);\n  }\n  createSampler(props) {\n    return new WEBGLSampler(this, props);\n  }\n  createShader(props) {\n    return new WEBGLShader(this, props);\n  }\n  createFramebuffer(props) {\n    return new WEBGLFramebuffer(this, props);\n  }\n  createVertexArray(props) {\n    return new WEBGLVertexArray(this, props);\n  }\n  createTransformFeedback(props) {\n    return new WEBGLTransformFeedback(this, props);\n  }\n  createQuerySet(props) {\n    return new WEBGLQuerySet(this, props);\n  }\n  createRenderPipeline(props) {\n    return new WEBGLRenderPipeline(this, props);\n  }\n  beginRenderPass(props) {\n    return new WEBGLRenderPass(this, props);\n  }\n  createComputePipeline(props) {\n    throw new Error('ComputePipeline not supported in WebGL');\n  }\n  beginComputePass(props) {\n    throw new Error('ComputePass not supported in WebGL');\n  }\n  renderPass = null;\n  createCommandEncoder(props = {}) {\n    return new WEBGLCommandEncoder(this, props);\n  }\n  /**\n   * Offscreen Canvas Support: Commit the frame\n   * https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/commit\n   * Chrome's offscreen canvas does not require gl.commit\n   */\n  submit() {\n    this.renderPass?.end();\n    this.renderPass = null;\n    // this.canvasContext.commit();\n  }\n  //\n  // TEMPORARY HACKS - will be removed in v9.1\n  //\n  /** @deprecated - should use command encoder */\n  readPixelsToArrayWebGL(source, options) {\n    return readPixelsToArray(source, options);\n  }\n  /** @deprecated - should use command encoder */\n  readPixelsToBufferWebGL(source, options) {\n    return readPixelsToBuffer(source, options);\n  }\n  setParametersWebGL(parameters) {\n    setGLParameters(this.gl, parameters);\n  }\n  getParametersWebGL(parameters) {\n    return getGLParameters(this.gl, parameters);\n  }\n  withParametersWebGL(parameters, func) {\n    return withGLParameters(this.gl, parameters, func);\n  }\n  resetWebGL() {\n    log.warn('WebGLDevice.resetWebGL is deprecated, use only for debugging')();\n    resetGLParameters(this.gl);\n  }\n  _getDeviceSpecificTextureFormatCapabilities(capabilities) {\n    return getTextureFormatCapabilitiesWebGL(this.gl, capabilities, this._extensions);\n  }\n  //\n  // WebGL-only API (not part of `Device` API)\n  //\n  /**\n   * Triggers device (or WebGL context) loss.\n   * @note primarily intended for testing how application reacts to device loss\n   */\n  loseDevice() {\n    let deviceLossTriggered = false;\n    const extensions = this.getExtension('WEBGL_lose_context');\n    const ext = extensions.WEBGL_lose_context;\n    if (ext) {\n      deviceLossTriggered = true;\n      ext.loseContext();\n      // ext.loseContext should trigger context loss callback but the platform may not do this, so do it explicitly\n    }\n    this._resolveContextLost?.({\n      reason: 'destroyed',\n      message: 'Application triggered context loss'\n    });\n    return deviceLossTriggered;\n  }\n  /** Save current WebGL context state onto an internal stack */\n  pushState() {\n    const webglState = WebGLStateTracker.get(this.gl);\n    webglState.push();\n  }\n  /** Restores previously saved context state */\n  popState() {\n    const webglState = WebGLStateTracker.get(this.gl);\n    webglState.pop();\n  }\n  /**\n   * Storing data on a special field on WebGLObjects makes that data visible in SPECTOR chrome debug extension\n   * luma.gl ids and props can be inspected\n   */\n  setSpectorMetadata(handle, props) {\n    // @ts-expect-error\n    // eslint-disable-next-line camelcase\n    handle.__SPECTOR_Metadata = props;\n  }\n  /**\n   * Returns the GL.<KEY> constant that corresponds to a numeric value of a GL constant\n   * Be aware that there are some duplicates especially for constants that are 0,\n   * so this isn't guaranteed to return the right key in all cases.\n   */\n  getGLKey(value, options) {\n    const number = Number(value);\n    for (const key in this.gl) {\n      // @ts-ignore expect-error depends on settings\n      if (this.gl[key] === number) {\n        return `GL.${key}`;\n      }\n    }\n    // No constant found. Stringify the value and return it.\n    return options?.emptyIfUnknown ? '' : String(value);\n  }\n  /**\n   * Returns a map with any GL.<KEY> constants mapped to strings, both for keys and values\n   */\n  getGLKeys(glParameters) {\n    const opts = {\n      emptyIfUnknown: true\n    };\n    return Object.entries(glParameters).reduce((keys, [key, value]) => {\n      // eslint-disable-next-line @typescript-eslint/no-base-to-string\n      keys[`${key}:${this.getGLKey(key, opts)}`] = `${value}:${this.getGLKey(value, opts)}`;\n      return keys;\n    }, {});\n  }\n  /** Store constants */\n  _constants;\n  /**\n   * Set a constant value for a location. Disabled attributes at that location will read from this value\n   * @note WebGL constants are stored globally on the WebGL context, not the VertexArray\n   * so they need to be updated before every render\n   * @todo - remember/cache values to avoid setting them unnecessarily?\n   */\n  setConstantAttributeWebGL(location, constant) {\n    const maxVertexAttributes = this.limits.maxVertexAttributes;\n    this._constants = this._constants || new Array(maxVertexAttributes).fill(null);\n    const currentConstant = this._constants[location];\n    if (currentConstant && compareConstantArrayValues(currentConstant, constant)) {\n      log.info(1, `setConstantAttributeWebGL(${location}) could have been skipped, value unchanged`)();\n    }\n    this._constants[location] = constant;\n    switch (constant.constructor) {\n      case Float32Array:\n        setConstantFloatArray(this, location, constant);\n        break;\n      case Int32Array:\n        setConstantIntArray(this, location, constant);\n        break;\n      case Uint32Array:\n        setConstantUintArray(this, location, constant);\n        break;\n      default:\n        throw new Error('constant');\n    }\n  }\n  /** Ensure extensions are only requested once */\n  getExtension(name) {\n    getWebGLExtension(this.gl, name, this._extensions);\n    return this._extensions;\n  }\n}\n/** Set constant float array attribute */\nfunction setConstantFloatArray(device, location, array) {\n  switch (array.length) {\n    case 1:\n      device.gl.vertexAttrib1fv(location, array);\n      break;\n    case 2:\n      device.gl.vertexAttrib2fv(location, array);\n      break;\n    case 3:\n      device.gl.vertexAttrib3fv(location, array);\n      break;\n    case 4:\n      device.gl.vertexAttrib4fv(location, array);\n      break;\n    default:\n    // assert(false);\n  }\n}\n/** Set constant signed int array attribute */\nfunction setConstantIntArray(device, location, array) {\n  device.gl.vertexAttribI4iv(location, array);\n  // TODO - not clear if we need to use the special forms, more testing needed\n  // switch (array.length) {\n  //   case 1:\n  //     gl.vertexAttribI1iv(location, array);\n  //     break;\n  //   case 2:\n  //     gl.vertexAttribI2iv(location, array);\n  //     break;\n  //   case 3:\n  //     gl.vertexAttribI3iv(location, array);\n  //     break;\n  //   case 4:\n  //     break;\n  //   default:\n  //     assert(false);\n  // }\n}\n/** Set constant unsigned int array attribute */\nfunction setConstantUintArray(device, location, array) {\n  device.gl.vertexAttribI4uiv(location, array);\n  // TODO - not clear if we need to use the special forms, more testing needed\n  // switch (array.length) {\n  //   case 1:\n  //     gl.vertexAttribI1uiv(location, array);\n  //     break;\n  //   case 2:\n  //     gl.vertexAttribI2uiv(location, array);\n  //     break;\n  //   case 3:\n  //     gl.vertexAttribI3uiv(location, array);\n  //     break;\n  //   case 4:\n  //     gl.vertexAttribI4uiv(location, array);\n  //     break;\n  //   default:\n  //     assert(false);\n  // }\n}\n/**\n * Compares contents of two typed arrays\n * @todo max length?\n */\nfunction compareConstantArrayValues(v1, v2) {\n  if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n    return false;\n  }\n  for (let i = 0; i < v1.length; ++i) {\n    if (v1[i] !== v2[i]) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["Device","log","WebGLStateTracker","createBrowserContext","getDeviceInfo","WebGLDeviceFeatures","WebGLDeviceLimits","WebGLCanvasContext","initializeSpectorJS","makeDebugContext","getTextureFormatCapabilitiesWebGL","uid","WEBGLBuffer","WEBGLShader","WEBGLSampler","WEBGLTexture","WEBGLFramebuffer","WEBGLRenderPass","WEBGLRenderPipeline","WEBGLCommandEncoder","WEBGLVertexArray","WEBGLTransformFeedback","WEBGLQuerySet","readPixelsToArray","readPixelsToBuffer","setGLParameters","getGLParameters","resetGLParameters","withGLParameters","getWebGLExtension","WebGLDevice","type","handle","features","limits","info","canvasContext","lost","_resolveContextLost","gl","debug","_canvasSizeInfo","clientWidth","clientHeight","devicePixelRatio","_extensions","_polyfilled","spectorJS","constructor","props","id","canvasContextProps","_getCanvasContextProps","Error","device","canvas","Promise","resolve","webglContextAttributes","webgl","alphaMode","premultipliedAlpha","powerPreference","undefined","externalGLContext","_handle","onContextLost","event","reason","message","onContextRestored","console","_reuseDevices","_reused","_version","_disabledFeatures","_initializeFeatures","initializeFeatures","autoResize","resize","glState","args","trackState","copyState","debugWebGL","traceWebGL","warn","level","Math","max","destroy","isLost","isContextLost","createCanvasContext","createBuffer","newProps","_normalizeBufferProps","createTexture","createExternalTexture","createSampler","createShader","createFramebuffer","createVertexArray","createTransformFeedback","createQuerySet","createRenderPipeline","beginRenderPass","createComputePipeline","beginComputePass","renderPass","createCommandEncoder","submit","end","readPixelsToArrayWebGL","source","options","readPixelsToBufferWebGL","setParametersWebGL","parameters","getParametersWebGL","withParametersWebGL","func","resetWebGL","_getDeviceSpecificTextureFormatCapabilities","capabilities","loseDevice","deviceLossTriggered","extensions","getExtension","ext","WEBGL_lose_context","loseContext","pushState","webglState","get","push","popState","pop","setSpectorMetadata","__SPECTOR_Metadata","getGLKey","value","number","Number","key","emptyIfUnknown","String","getGLKeys","glParameters","opts","Object","entries","reduce","keys","_constants","setConstantAttributeWebGL","location","constant","maxVertexAttributes","Array","fill","currentConstant","compareConstantArrayValues","Float32Array","setConstantFloatArray","Int32Array","setConstantIntArray","Uint32Array","setConstantUintArray","name","array","length","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI4iv","vertexAttribI4uiv","v1","v2","i"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\webgl-device.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray} from '@math.gl/types';\nimport type {\n  DeviceProps,\n  DeviceInfo,\n  DeviceTextureFormatCapabilities,\n  CanvasContextProps,\n  Buffer,\n  Texture,\n  Framebuffer,\n  VertexArray,\n  VertexArrayProps,\n  BufferProps,\n  ShaderProps,\n  // Sampler,\n  SamplerProps,\n  TextureProps,\n  ExternalTexture,\n  ExternalTextureProps,\n  FramebufferProps,\n  // RenderPipeline,\n  RenderPipelineProps,\n  ComputePipeline,\n  ComputePipelineProps,\n  // RenderPass,\n  RenderPassProps,\n  ComputePass,\n  ComputePassProps,\n  // CommandEncoder,\n  CommandEncoderProps,\n  TransformFeedbackProps,\n  QuerySetProps\n} from '@luma.gl/core';\nimport {Device, CanvasContext, log} from '@luma.gl/core';\nimport type {GLExtensions} from '@luma.gl/constants';\nimport {WebGLStateTracker} from '../context/state-tracker/webgl-state-tracker';\nimport {createBrowserContext} from '../context/helpers/create-browser-context';\nimport {getDeviceInfo} from './device-helpers/webgl-device-info';\nimport {WebGLDeviceFeatures} from './device-helpers/webgl-device-features';\nimport {WebGLDeviceLimits} from './device-helpers/webgl-device-limits';\nimport {WebGLCanvasContext} from './webgl-canvas-context';\nimport type {Spector} from '../context/debug/spector-types';\nimport {initializeSpectorJS} from '../context/debug/spector';\nimport {makeDebugContext} from '../context/debug/webgl-developer-tools';\nimport {getTextureFormatCapabilitiesWebGL} from './converters/webgl-texture-table';\nimport {uid} from '../utils/uid';\n\nimport {WEBGLBuffer} from './resources/webgl-buffer';\nimport {WEBGLShader} from './resources/webgl-shader';\nimport {WEBGLSampler} from './resources/webgl-sampler';\nimport {WEBGLTexture} from './resources/webgl-texture';\nimport {WEBGLFramebuffer} from './resources/webgl-framebuffer';\nimport {WEBGLRenderPass} from './resources/webgl-render-pass';\nimport {WEBGLRenderPipeline} from './resources/webgl-render-pipeline';\nimport {WEBGLCommandEncoder} from './resources/webgl-command-encoder';\nimport {WEBGLVertexArray} from './resources/webgl-vertex-array';\nimport {WEBGLTransformFeedback} from './resources/webgl-transform-feedback';\nimport {WEBGLQuerySet} from './resources/webgl-query-set';\n\nimport {readPixelsToArray, readPixelsToBuffer} from './helpers/webgl-texture-utils';\nimport {\n  setGLParameters,\n  getGLParameters,\n  resetGLParameters\n} from '../context/parameters/unified-parameter-api';\nimport {withGLParameters} from '../context/state-tracker/with-parameters';\nimport {getWebGLExtension} from '../context/helpers/webgl-extensions';\n\n/** WebGPU style Device API for a WebGL context */\nexport class WebGLDevice extends Device {\n  //\n  // Public `Device` API\n  //\n\n  /** type of this device */\n  readonly type = 'webgl';\n\n  // Use the ! assertion to handle the case where _reuseDevices causes the constructor to return early\n  /** The underlying WebGL context */\n  readonly handle!: WebGL2RenderingContext;\n  features!: WebGLDeviceFeatures;\n  limits!: WebGLDeviceLimits;\n\n  readonly info!: DeviceInfo;\n  readonly canvasContext!: WebGLCanvasContext;\n\n  readonly lost: Promise<{reason: 'destroyed'; message: string}>;\n\n  private _resolveContextLost?: (value: {reason: 'destroyed'; message: string}) => void;\n\n  /** WebGL2 context. */\n  readonly gl!: WebGL2RenderingContext;\n  readonly debug: boolean = false;\n\n  /** State used by luma.gl classes: TODO - move to canvasContext*/\n  readonly _canvasSizeInfo = {clientWidth: 0, clientHeight: 0, devicePixelRatio: 1};\n\n  /** State used by luma.gl classes - TODO - not used? */\n  readonly _extensions: GLExtensions = {};\n  _polyfilled: boolean = false;\n\n  /** Instance of Spector.js (if initialized) */\n  spectorJS!: Spector | null;\n\n  //\n  // Public API\n  //\n\n  constructor(props: DeviceProps) {\n    super({...props, id: props.id || uid('webgl-device')});\n\n    const canvasContextProps = Device._getCanvasContextProps(props);\n\n    // WebGL requires a canvas to be created before creating the context\n    if (!canvasContextProps) {\n      throw new Error('WebGLDevice requires props.createCanvasContext to be set');\n    }\n\n    // Check if the WebGL context is already associated with a device\n    // Note that this can be avoided in webgl2adapter.create() if\n    // DeviceProps._reuseDevices is set.\n    // @ts-expect-error device is attached to context\n    let device: WebGLDevice | undefined = canvasContextProps.canvas?.gl?.device;\n    if (device) {\n      throw new Error(`WebGL context already attached to device ${device.id}`);\n    }\n\n    // Create and instrument context\n    this.canvasContext = new WebGLCanvasContext(this, canvasContextProps);\n\n    this.lost = new Promise<{reason: 'destroyed'; message: string}>(resolve => {\n      this._resolveContextLost = resolve;\n    });\n\n    const webglContextAttributes: WebGLContextAttributes = {...props.webgl};\n    // Copy props from CanvasContextProps\n    if (canvasContextProps.alphaMode === 'premultiplied') {\n      webglContextAttributes.premultipliedAlpha = true;\n    }\n    if (props.powerPreference !== undefined) {\n      webglContextAttributes.powerPreference = props.powerPreference;\n    }\n\n    // Check if we should attach to an externally created context or create a new context\n    const externalGLContext = this.props._handle as WebGL2RenderingContext | null;\n\n    const gl =\n      externalGLContext ||\n      createBrowserContext(\n        this.canvasContext.canvas,\n        {\n          onContextLost: (event: Event) =>\n            this._resolveContextLost?.({\n              reason: 'destroyed',\n              message: 'Entered sleep mode, or too many apps or browser tabs are using the GPU.'\n            }),\n          // eslint-disable-next-line no-console\n          onContextRestored: (event: Event) => console.log('WebGL context restored')\n        },\n        webglContextAttributes\n      );\n\n    if (!gl) {\n      throw new Error('WebGL context creation failed');\n    }\n\n    // Note that the browser will only create one WebGL context per canvas.\n    // This means that a newly created gl context may already have a device attached to it.\n    // @ts-expect-error luma.gl stores a device reference on the context.\n    device = gl.device;\n    if (device) {\n      if (props._reuseDevices) {\n        log.log(\n          1,\n          `Not creating a new Device, instead returning a reference to Device ${device.id} already attached to WebGL context`,\n          device\n        )();\n        device._reused = true;\n        return device;\n      }\n      throw new Error(`WebGL context already attached to device ${device.id}`);\n    }\n\n    this.handle = gl;\n    this.gl = gl;\n\n    // Add spector debug instrumentation to context\n    // We need to trust spector integration to decide if spector should be initialized\n    // We also run spector instrumentation first, otherwise spector can clobber luma instrumentation.\n    this.spectorJS = initializeSpectorJS({...this.props, gl: this.handle});\n\n    // Instrument context\n    (this.gl as any).device = this; // Update GL context: Link webgl context back to device\n    // TODO - remove, this is only used to detect debug contexts.\n    (this.gl as any)._version = 2; // Update GL context: Store WebGL version field on gl context (HACK to identify debug contexts)\n\n    // initialize luma Device fields\n    this.info = getDeviceInfo(this.gl, this._extensions);\n    this.limits = new WebGLDeviceLimits(this.gl);\n    this.features = new WebGLDeviceFeatures(\n      this.gl,\n      this._extensions,\n      this.props._disabledFeatures\n    );\n    if (this.props._initializeFeatures) {\n      this.features.initializeFeatures();\n    }\n\n    if (canvasContextProps.autoResize !== false) {\n      this.canvasContext.resize();\n    }\n\n    // Install context state tracking\n    const glState = new WebGLStateTracker(this.gl, {\n      log: (...args: any[]) => log.log(1, ...args)()\n    });\n    glState.trackState(this.gl, {copyState: false});\n\n    // DEBUG contexts: Add luma debug instrumentation to the context, force log level to at least 1\n    const debugWebGL = props.debugWebGL || props.debug;\n    const traceWebGL = props.debugWebGL;\n    if (debugWebGL) {\n      this.gl = makeDebugContext(this.gl, {debugWebGL, traceWebGL});\n      log.warn('WebGL debug mode activated. Performance reduced.')();\n      if (props.debugWebGL) {\n        log.level = Math.max(log.level, 1);\n      }\n    }\n  }\n\n  /**\n   * Destroys the device\n   *\n   * @note \"Detaches\" from the WebGL context unless _reuseDevices is true.\n   *\n   * @note The underlying WebGL context is not immediately destroyed,\n   * but may be destroyed later through normal JavaScript garbage collection.\n   * This is a fundamental limitation since WebGL does not offer any\n   * browser API for destroying WebGL contexts.\n   */\n  destroy(): void {\n    // Note that deck.gl (especially in React strict mode) depends on being able\n    // to asynchronously create a Device against the same canvas (i.e. WebGL context)\n    // multiple times and getting the same device back. Since deck.gl is not aware\n    // of this sharing, it might call destroy() multiple times on the same device.\n    // Therefore we must do nothing in destroy() if props._reuseDevices is true\n    if (!this.props._reuseDevices && !this._reused) {\n      // Delete the reference to the device that we store on the WebGL context\n      delete (this.gl as any).device;\n    }\n  }\n\n  get isLost(): boolean {\n    return this.gl.isContextLost();\n  }\n\n  // IMPLEMENTATION OF ABSTRACT DEVICE\n\n  createCanvasContext(props?: CanvasContextProps): CanvasContext {\n    throw new Error('WebGL only supports a single canvas');\n  }\n\n  createBuffer(props: BufferProps | ArrayBuffer | ArrayBufferView): WEBGLBuffer {\n    const newProps = this._normalizeBufferProps(props);\n    return new WEBGLBuffer(this, newProps);\n  }\n\n  createTexture(props: TextureProps): WEBGLTexture {\n    return new WEBGLTexture(this, props);\n  }\n\n  createExternalTexture(props: ExternalTextureProps): ExternalTexture {\n    throw new Error('createExternalTexture() not implemented'); // return new Program(props);\n  }\n\n  createSampler(props: SamplerProps): WEBGLSampler {\n    return new WEBGLSampler(this, props);\n  }\n\n  createShader(props: ShaderProps): WEBGLShader {\n    return new WEBGLShader(this, props);\n  }\n\n  createFramebuffer(props: FramebufferProps): WEBGLFramebuffer {\n    return new WEBGLFramebuffer(this, props);\n  }\n\n  createVertexArray(props: VertexArrayProps): VertexArray {\n    return new WEBGLVertexArray(this, props);\n  }\n\n  createTransformFeedback(props: TransformFeedbackProps): WEBGLTransformFeedback {\n    return new WEBGLTransformFeedback(this, props);\n  }\n\n  createQuerySet(props: QuerySetProps): WEBGLQuerySet {\n    return new WEBGLQuerySet(this, props);\n  }\n\n  createRenderPipeline(props: RenderPipelineProps): WEBGLRenderPipeline {\n    return new WEBGLRenderPipeline(this, props);\n  }\n\n  beginRenderPass(props: RenderPassProps): WEBGLRenderPass {\n    return new WEBGLRenderPass(this, props);\n  }\n\n  createComputePipeline(props?: ComputePipelineProps): ComputePipeline {\n    throw new Error('ComputePipeline not supported in WebGL');\n  }\n\n  beginComputePass(props: ComputePassProps): ComputePass {\n    throw new Error('ComputePass not supported in WebGL');\n  }\n\n  private renderPass: WEBGLRenderPass | null = null;\n\n  override createCommandEncoder(props: CommandEncoderProps = {}): WEBGLCommandEncoder {\n    return new WEBGLCommandEncoder(this, props);\n  }\n\n  /**\n   * Offscreen Canvas Support: Commit the frame\n   * https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/commit\n   * Chrome's offscreen canvas does not require gl.commit\n   */\n  submit(): void {\n    this.renderPass?.end();\n    this.renderPass = null;\n    // this.canvasContext.commit();\n  }\n\n  //\n  // TEMPORARY HACKS - will be removed in v9.1\n  //\n\n  /** @deprecated - should use command encoder */\n  override readPixelsToArrayWebGL(\n    source: Framebuffer | Texture,\n    options?: {\n      sourceX?: number;\n      sourceY?: number;\n      sourceFormat?: number;\n      sourceAttachment?: number;\n      target?: Uint8Array | Uint16Array | Float32Array;\n      // following parameters are auto deduced if not provided\n      sourceWidth?: number;\n      sourceHeight?: number;\n      sourceType?: number;\n    }\n  ): Uint8Array | Uint16Array | Float32Array {\n    return readPixelsToArray(source, options);\n  }\n\n  /** @deprecated - should use command encoder */\n  override readPixelsToBufferWebGL(\n    source: Framebuffer | Texture,\n    options?: {\n      sourceX?: number;\n      sourceY?: number;\n      sourceFormat?: number;\n      target?: Buffer; // A new Buffer object is created when not provided.\n      targetByteOffset?: number; // byte offset in buffer object\n      // following parameters are auto deduced if not provided\n      sourceWidth?: number;\n      sourceHeight?: number;\n      sourceType?: number;\n    }\n  ): Buffer {\n    return readPixelsToBuffer(source, options);\n  }\n\n  override setParametersWebGL(parameters: any): void {\n    setGLParameters(this.gl, parameters);\n  }\n\n  override getParametersWebGL(parameters: any): any {\n    return getGLParameters(this.gl, parameters);\n  }\n\n  override withParametersWebGL(parameters: any, func: any): any {\n    return withGLParameters(this.gl, parameters, func);\n  }\n\n  override resetWebGL(): void {\n    log.warn('WebGLDevice.resetWebGL is deprecated, use only for debugging')();\n    resetGLParameters(this.gl);\n  }\n\n  override _getDeviceSpecificTextureFormatCapabilities(\n    capabilities: DeviceTextureFormatCapabilities\n  ): DeviceTextureFormatCapabilities {\n    return getTextureFormatCapabilitiesWebGL(this.gl, capabilities, this._extensions);\n  }\n\n  //\n  // WebGL-only API (not part of `Device` API)\n  //\n\n  /**\n   * Triggers device (or WebGL context) loss.\n   * @note primarily intended for testing how application reacts to device loss\n   */\n  override loseDevice(): boolean {\n    let deviceLossTriggered = false;\n    const extensions = this.getExtension('WEBGL_lose_context');\n    const ext = extensions.WEBGL_lose_context;\n    if (ext) {\n      deviceLossTriggered = true;\n      ext.loseContext();\n      // ext.loseContext should trigger context loss callback but the platform may not do this, so do it explicitly\n    }\n    this._resolveContextLost?.({\n      reason: 'destroyed',\n      message: 'Application triggered context loss'\n    });\n    return deviceLossTriggered;\n  }\n\n  /** Save current WebGL context state onto an internal stack */\n  pushState(): void {\n    const webglState = WebGLStateTracker.get(this.gl);\n    webglState.push();\n  }\n\n  /** Restores previously saved context state */\n  popState(): void {\n    const webglState = WebGLStateTracker.get(this.gl);\n    webglState.pop();\n  }\n\n  /**\n   * Storing data on a special field on WebGLObjects makes that data visible in SPECTOR chrome debug extension\n   * luma.gl ids and props can be inspected\n   */\n  setSpectorMetadata(handle: unknown, props: Record<string, unknown>) {\n    // @ts-expect-error\n    // eslint-disable-next-line camelcase\n    handle.__SPECTOR_Metadata = props;\n  }\n\n  /**\n   * Returns the GL.<KEY> constant that corresponds to a numeric value of a GL constant\n   * Be aware that there are some duplicates especially for constants that are 0,\n   * so this isn't guaranteed to return the right key in all cases.\n   */\n  getGLKey(value: unknown, options?: {emptyIfUnknown?: boolean}): string {\n    const number = Number(value);\n    for (const key in this.gl) {\n      // @ts-ignore expect-error depends on settings\n      if (this.gl[key] === number) {\n        return `GL.${key}`;\n      }\n    }\n    // No constant found. Stringify the value and return it.\n    return options?.emptyIfUnknown ? '' : String(value);\n  }\n\n  /**\n   * Returns a map with any GL.<KEY> constants mapped to strings, both for keys and values\n   */\n  getGLKeys(glParameters: Record<number, unknown>): Record<string, string> {\n    const opts = {emptyIfUnknown: true};\n    return Object.entries(glParameters).reduce<Record<string, string>>((keys, [key, value]) => {\n      // eslint-disable-next-line @typescript-eslint/no-base-to-string\n      keys[`${key}:${this.getGLKey(key, opts)}`] = `${value}:${this.getGLKey(value, opts)}`;\n      return keys;\n    }, {});\n  }\n\n  /** Store constants */\n  _constants: (TypedArray | null)[];\n\n  /**\n   * Set a constant value for a location. Disabled attributes at that location will read from this value\n   * @note WebGL constants are stored globally on the WebGL context, not the VertexArray\n   * so they need to be updated before every render\n   * @todo - remember/cache values to avoid setting them unnecessarily?\n   */\n  setConstantAttributeWebGL(location: number, constant: TypedArray): void {\n    const maxVertexAttributes = this.limits.maxVertexAttributes;\n    this._constants = this._constants || new Array(maxVertexAttributes).fill(null);\n    const currentConstant = this._constants[location];\n    if (currentConstant && compareConstantArrayValues(currentConstant, constant)) {\n      log.info(\n        1,\n        `setConstantAttributeWebGL(${location}) could have been skipped, value unchanged`\n      )();\n    }\n    this._constants[location] = constant;\n\n    switch (constant.constructor) {\n      case Float32Array:\n        setConstantFloatArray(this, location, constant as Float32Array);\n        break;\n      case Int32Array:\n        setConstantIntArray(this, location, constant as Int32Array);\n        break;\n      case Uint32Array:\n        setConstantUintArray(this, location, constant as Uint32Array);\n        break;\n      default:\n        throw new Error('constant');\n    }\n  }\n\n  /** Ensure extensions are only requested once */\n  getExtension(name: keyof GLExtensions): GLExtensions {\n    getWebGLExtension(this.gl, name, this._extensions);\n    return this._extensions;\n  }\n}\n\n/** Set constant float array attribute */\nfunction setConstantFloatArray(device: WebGLDevice, location: number, array: Float32Array): void {\n  switch (array.length) {\n    case 1:\n      device.gl.vertexAttrib1fv(location, array);\n      break;\n    case 2:\n      device.gl.vertexAttrib2fv(location, array);\n      break;\n    case 3:\n      device.gl.vertexAttrib3fv(location, array);\n      break;\n    case 4:\n      device.gl.vertexAttrib4fv(location, array);\n      break;\n    default:\n    // assert(false);\n  }\n}\n\n/** Set constant signed int array attribute */\nfunction setConstantIntArray(device: WebGLDevice, location: number, array: Int32Array): void {\n  device.gl.vertexAttribI4iv(location, array);\n  // TODO - not clear if we need to use the special forms, more testing needed\n  // switch (array.length) {\n  //   case 1:\n  //     gl.vertexAttribI1iv(location, array);\n  //     break;\n  //   case 2:\n  //     gl.vertexAttribI2iv(location, array);\n  //     break;\n  //   case 3:\n  //     gl.vertexAttribI3iv(location, array);\n  //     break;\n  //   case 4:\n  //     break;\n  //   default:\n  //     assert(false);\n  // }\n}\n\n/** Set constant unsigned int array attribute */\nfunction setConstantUintArray(device: WebGLDevice, location: number, array: Uint32Array) {\n  device.gl.vertexAttribI4uiv(location, array);\n  // TODO - not clear if we need to use the special forms, more testing needed\n  // switch (array.length) {\n  //   case 1:\n  //     gl.vertexAttribI1uiv(location, array);\n  //     break;\n  //   case 2:\n  //     gl.vertexAttribI2uiv(location, array);\n  //     break;\n  //   case 3:\n  //     gl.vertexAttribI3uiv(location, array);\n  //     break;\n  //   case 4:\n  //     gl.vertexAttribI4uiv(location, array);\n  //     break;\n  //   default:\n  //     assert(false);\n  // }\n}\n\n/**\n * Compares contents of two typed arrays\n * @todo max length?\n */\nfunction compareConstantArrayValues(v1: TypedArray, v2: TypedArray): boolean {\n  if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n    return false;\n  }\n  for (let i = 0; i < v1.length; ++i) {\n    if (v1[i] !== v2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}