{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { initializeShaderModule } from '@luma.gl/shadertools';\nimport ScreenPass from \"../passes/screen-pass.js\";\nexport default class PostProcessEffect {\n  constructor(module, props) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    initializeShaderModule(module);\n    this.module = module;\n  }\n  setup({\n    device\n  }) {\n    this.passes = createPasses(device, this.module, this.id);\n  }\n  setProps(props) {\n    this.props = props;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender() {}\n  postRender(params) {\n    const passes = this.passes;\n    const {\n      target\n    } = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n    for (let index = 0; index < passes.length; index++) {\n      const isLastPass = index === passes.length - 1;\n      const renderToTarget = target !== undefined && isLastPass;\n      if (renderToTarget) {\n        outputBuffer = target;\n      }\n      const clearCanvas = !renderToTarget || Boolean(params.clearCanvas);\n      const moduleProps = {};\n      const uniforms = this.module.passes[index].uniforms;\n      moduleProps[this.module.name] = {\n        ...this.props,\n        ...uniforms\n      };\n      passes[index].render({\n        clearCanvas,\n        inputBuffer,\n        outputBuffer,\n        moduleProps\n      });\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\nfunction createPasses(device, module, id) {\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n    return new ScreenPass(device, {\n      id: idn,\n      module,\n      fs\n    });\n  });\n}\nconst FS_TEMPLATE_INPUTS = `\\\n#version 300 es\nuniform sampler2D texSrc;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n`;\nconst FILTER_FS_TEMPLATE = func => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = texture(texSrc, coordinate);\n  fragColor = ${func}(fragColor, screen.texSize, coordinate);\n}\n`;\nconst SAMPLER_FS_TEMPLATE = func => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = ${func}(texSrc, screen.texSize, coordinate);\n}\n`;\nfunction getFragmentShaderForRenderPass(module, pass) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor_ext`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n  // console.error(`${module.name} no fragment shader generated`);\n  return '';\n}","map":{"version":3,"names":["initializeShaderModule","ScreenPass","PostProcessEffect","constructor","module","props","id","name","setup","device","passes","createPasses","setProps","preRender","postRender","params","target","inputBuffer","outputBuffer","swapBuffer","index","length","isLastPass","renderToTarget","undefined","clearCanvas","Boolean","moduleProps","uniforms","render","switchBuffer","cleanup","pass","delete","map","fs","getFragmentShaderForRenderPass","idn","FS_TEMPLATE_INPUTS","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE","filter","sampler"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\effects\\post-process-effect.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device, Framebuffer} from '@luma.gl/core';\nimport {initializeShaderModule, ShaderPass} from '@luma.gl/shadertools';\n\nimport ScreenPass from '../passes/screen-pass';\n\nimport type {Effect, EffectContext, PostRenderOptions} from '../lib/effect';\n\nexport default class PostProcessEffect<ShaderPassT extends ShaderPass> implements Effect {\n  id: string;\n  props: ShaderPassT['props'];\n  module: ShaderPassT;\n  passes?: ScreenPass[];\n\n  constructor(module: ShaderPassT, props: ShaderPassT['props']) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    initializeShaderModule(module);\n    this.module = module;\n  }\n\n  setup({device}: EffectContext) {\n    this.passes = createPasses(device, this.module, this.id);\n  }\n\n  setProps(props: ShaderPassT['props']) {\n    this.props = props;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender(): void {}\n\n  postRender(params: PostRenderOptions): Framebuffer {\n    const passes = this.passes!;\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer: Framebuffer | null = params.swapBuffer;\n\n    for (let index = 0; index < passes.length; index++) {\n      const isLastPass = index === passes.length - 1;\n      const renderToTarget = target !== undefined && isLastPass;\n      if (renderToTarget) {\n        outputBuffer = target;\n      }\n      const clearCanvas = !renderToTarget || Boolean(params.clearCanvas);\n      const moduleProps = {};\n      const uniforms = this.module.passes![index].uniforms;\n      moduleProps[this.module.name] = {...this.props, ...uniforms};\n      passes[index].render({clearCanvas, inputBuffer, outputBuffer, moduleProps});\n\n      const switchBuffer = outputBuffer as Framebuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup(): void {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\n\nfunction createPasses(device: Device, module: ShaderPass, id: string): ScreenPass[] {\n  return module.passes!.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n    return new ScreenPass(device, {id: idn, module, fs});\n  });\n}\n\nconst FS_TEMPLATE_INPUTS = `\\\n#version 300 es\nuniform sampler2D texSrc;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n`;\n\nconst FILTER_FS_TEMPLATE = (func: string) => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = texture(texSrc, coordinate);\n  fragColor = ${func}(fragColor, screen.texSize, coordinate);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = (func: string) => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = ${func}(texSrc, screen.texSize, coordinate);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(\n  module: ShaderPass,\n  pass: NonNullable<ShaderPass['passes']>[0]\n): string {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor_ext`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return '';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}