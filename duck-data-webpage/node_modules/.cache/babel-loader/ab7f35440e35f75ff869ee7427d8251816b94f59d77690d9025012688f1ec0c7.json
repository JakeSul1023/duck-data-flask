{"ast":null,"code":"/**\n * Provides file data using range requests to the server\n * @deprecated - will be replaced with ReadableFile\n */\nexport class FileProvider {\n  /** The File object from which data is provided */\n  file;\n  size;\n  /** Create a new BrowserFile */\n  constructor(file, size) {\n    this.file = file;\n    this.size = BigInt(size);\n  }\n  static async create(file) {\n    let size = 0n;\n    if (file.bigsize > 0n) {\n      size = file.bigsize;\n    } else if (file.size > 0) {\n      size = file.size;\n    } else {\n      const stats = await file.stat?.();\n      size = stats?.bigsize ?? 0n;\n    }\n    return new FileProvider(file, size);\n  }\n  /**\n   * Truncates the file descriptor.\n   * @param length desired file lenght\n   */\n  async truncate(length) {\n    throw new Error('file loaded via range requests cannot be changed');\n  }\n  /**\n   * Append data to a file.\n   * @param buffer data to append\n   */\n  async append(buffer) {\n    throw new Error('file loaded via range requests cannot be changed');\n  }\n  /** Close file */\n  async destroy() {\n    throw new Error('file loaded via range requests cannot be changed');\n  }\n  /**\n   * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint8(offset) {\n    const arrayBuffer = await this.file.read(offset, 1);\n    const val = new Uint8Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 16-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint16(offset) {\n    const arrayBuffer = await this.file.read(offset, 2);\n    const val = new Uint16Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint32(offset) {\n    const arrayBuffer = await this.file.read(offset, 4);\n    const val = new Uint32Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getBigUint64(offset) {\n    const arrayBuffer = await this.file.read(offset, 8);\n    const val = new BigInt64Array(arrayBuffer).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in byte, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  async slice(startOffset, endOffset) {\n    const bigLength = BigInt(endOffset) - BigInt(startOffset);\n    if (bigLength > Number.MAX_SAFE_INTEGER) {\n      throw new Error('too big slice');\n    }\n    const length = Number(bigLength);\n    return await this.file.read(startOffset, length);\n  }\n  /**\n   * the length (in bytes) of the data.\n   */\n  get length() {\n    return this.size;\n  }\n}","map":{"version":3,"names":["FileProvider","file","size","constructor","BigInt","create","bigsize","stats","stat","truncate","length","Error","append","buffer","destroy","getUint8","offset","arrayBuffer","read","val","Uint8Array","at","undefined","getUint16","Uint16Array","getUint32","Uint32Array","getBigUint64","BigInt64Array","slice","startOffset","endOffset","bigLength","Number","MAX_SAFE_INTEGER"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/loader-utils/dist/lib/file-provider/file-provider.js"],"sourcesContent":["/**\n * Provides file data using range requests to the server\n * @deprecated - will be replaced with ReadableFile\n */\nexport class FileProvider {\n    /** The File object from which data is provided */\n    file;\n    size;\n    /** Create a new BrowserFile */\n    constructor(file, size) {\n        this.file = file;\n        this.size = BigInt(size);\n    }\n    static async create(file) {\n        let size = 0n;\n        if (file.bigsize > 0n) {\n            size = file.bigsize;\n        }\n        else if (file.size > 0) {\n            size = file.size;\n        }\n        else {\n            const stats = await file.stat?.();\n            size = stats?.bigsize ?? 0n;\n        }\n        return new FileProvider(file, size);\n    }\n    /**\n     * Truncates the file descriptor.\n     * @param length desired file lenght\n     */\n    async truncate(length) {\n        throw new Error('file loaded via range requests cannot be changed');\n    }\n    /**\n     * Append data to a file.\n     * @param buffer data to append\n     */\n    async append(buffer) {\n        throw new Error('file loaded via range requests cannot be changed');\n    }\n    /** Close file */\n    async destroy() {\n        throw new Error('file loaded via range requests cannot be changed');\n    }\n    /**\n     * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint8(offset) {\n        const arrayBuffer = await this.file.read(offset, 1);\n        const val = new Uint8Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * Gets an unsigned 16-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint16(offset) {\n        const arrayBuffer = await this.file.read(offset, 2);\n        const val = new Uint16Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getUint32(offset) {\n        const arrayBuffer = await this.file.read(offset, 4);\n        const val = new Uint32Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n     * @param offset The offset, in bytes, from the start of the file where to read the data.\n     */\n    async getBigUint64(offset) {\n        const arrayBuffer = await this.file.read(offset, 8);\n        const val = new BigInt64Array(arrayBuffer).at(0);\n        if (val === undefined) {\n            throw new Error('something went wrong');\n        }\n        return val;\n    }\n    /**\n     * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n     * @param startOffset The offset, in byte, from the start of the file where to start reading the data.\n     * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n     */\n    async slice(startOffset, endOffset) {\n        const bigLength = BigInt(endOffset) - BigInt(startOffset);\n        if (bigLength > Number.MAX_SAFE_INTEGER) {\n            throw new Error('too big slice');\n        }\n        const length = Number(bigLength);\n        return await this.file.read(startOffset, length);\n    }\n    /**\n     * the length (in bytes) of the data.\n     */\n    get length() {\n        return this.size;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}