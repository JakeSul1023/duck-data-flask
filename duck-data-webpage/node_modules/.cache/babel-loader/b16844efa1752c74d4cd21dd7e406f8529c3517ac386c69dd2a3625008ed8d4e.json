{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Group data points into bins */\nexport function sortBins({\n  pointCount,\n  getBinId\n}) {\n  const binsById = new Map();\n  for (let i = 0; i < pointCount; i++) {\n    const id = getBinId(i);\n    if (id === null) {\n      continue;\n    }\n    let bin = binsById.get(String(id));\n    if (bin) {\n      bin.points.push(i);\n    } else {\n      bin = {\n        id,\n        index: binsById.size,\n        points: [i]\n      };\n      binsById.set(String(id), bin);\n    }\n  }\n  return Array.from(binsById.values());\n}\n/** Pack bin ids into a typed array */\nexport function packBinIds({\n  bins,\n  dimensions,\n  target\n}) {\n  const targetLength = bins.length * dimensions;\n  if (!target || target.length < targetLength) {\n    target = new Float32Array(targetLength);\n  }\n  for (let i = 0; i < bins.length; i++) {\n    const {\n      id\n    } = bins[i];\n    if (Array.isArray(id)) {\n      target.set(id, i * dimensions);\n    } else {\n      target[i] = id;\n    }\n  }\n  return target;\n}","map":{"version":3,"names":["sortBins","pointCount","getBinId","binsById","Map","i","id","bin","get","String","points","push","index","size","set","Array","from","values","packBinIds","bins","dimensions","target","targetLength","length","Float32Array","isArray"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\common\\aggregator\\cpu-aggregator\\sort-bins.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Bin} from './cpu-aggregator';\n\n/** Group data points into bins */\nexport function sortBins({\n  pointCount,\n  getBinId\n}: {\n  pointCount: number;\n  getBinId: (index: number) => number[] | null;\n}): Bin[] {\n  const binsById: Map<string, Bin> = new Map();\n\n  for (let i = 0; i < pointCount; i++) {\n    const id = getBinId(i);\n    if (id === null) {\n      continue;\n    }\n    let bin = binsById.get(String(id));\n    if (bin) {\n      bin.points.push(i);\n    } else {\n      bin = {\n        id,\n        index: binsById.size,\n        points: [i]\n      };\n      binsById.set(String(id), bin);\n    }\n  }\n  return Array.from(binsById.values());\n}\n\n/** Pack bin ids into a typed array */\nexport function packBinIds({\n  bins,\n  dimensions,\n  target\n}: {\n  bins: Bin[];\n  /** Size of bin IDs */\n  dimensions: number;\n  /** Array to write output into */\n  target?: Float32Array | null;\n}): Float32Array {\n  const targetLength = bins.length * dimensions;\n  if (!target || target.length < targetLength) {\n    target = new Float32Array(targetLength);\n  }\n\n  for (let i = 0; i < bins.length; i++) {\n    const {id} = bins[i];\n    if (Array.isArray(id)) {\n      target.set(id, i * dimensions);\n    } else {\n      target[i] = id;\n    }\n  }\n  return target;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA;AACA,OAAM,SAAUA,QAAQA,CAAC;EACvBC,UAAU;EACVC;AAAQ,CAIT;EACC,MAAMC,QAAQ,GAAqB,IAAIC,GAAG,EAAE;EAE5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;IACnC,MAAMC,EAAE,GAAGJ,QAAQ,CAACG,CAAC,CAAC;IACtB,IAAIC,EAAE,KAAK,IAAI,EAAE;MACf;IACF;IACA,IAAIC,GAAG,GAAGJ,QAAQ,CAACK,GAAG,CAACC,MAAM,CAACH,EAAE,CAAC,CAAC;IAClC,IAAIC,GAAG,EAAE;MACPA,GAAG,CAACG,MAAM,CAACC,IAAI,CAACN,CAAC,CAAC;IACpB,CAAC,MAAM;MACLE,GAAG,GAAG;QACJD,EAAE;QACFM,KAAK,EAAET,QAAQ,CAACU,IAAI;QACpBH,MAAM,EAAE,CAACL,CAAC;OACX;MACDF,QAAQ,CAACW,GAAG,CAACL,MAAM,CAACH,EAAE,CAAC,EAAEC,GAAG,CAAC;IAC/B;EACF;EACA,OAAOQ,KAAK,CAACC,IAAI,CAACb,QAAQ,CAACc,MAAM,EAAE,CAAC;AACtC;AAEA;AACA,OAAM,SAAUC,UAAUA,CAAC;EACzBC,IAAI;EACJC,UAAU;EACVC;AAAM,CAOP;EACC,MAAMC,YAAY,GAAGH,IAAI,CAACI,MAAM,GAAGH,UAAU;EAC7C,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACE,MAAM,GAAGD,YAAY,EAAE;IAC3CD,MAAM,GAAG,IAAIG,YAAY,CAACF,YAAY,CAAC;EACzC;EAEA,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,IAAI,CAACI,MAAM,EAAElB,CAAC,EAAE,EAAE;IACpC,MAAM;MAACC;IAAE,CAAC,GAAGa,IAAI,CAACd,CAAC,CAAC;IACpB,IAAIU,KAAK,CAACU,OAAO,CAACnB,EAAE,CAAC,EAAE;MACrBe,MAAM,CAACP,GAAG,CAACR,EAAE,EAAED,CAAC,GAAGe,UAAU,CAAC;IAChC,CAAC,MAAM;MACLC,MAAM,CAAChB,CAAC,CAAC,GAAGC,EAAE;IAChB;EACF;EACA,OAAOe,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}