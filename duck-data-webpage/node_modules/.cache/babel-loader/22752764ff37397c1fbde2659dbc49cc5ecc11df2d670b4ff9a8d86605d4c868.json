{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\n/**\n * Create a tile from features and tile index\n */\nexport function createProtoTile(features, z, tx, ty, options) {\n  const tolerance = z === options.maxZoom ? 0 : options.tolerance / ((1 << z) * options.extent);\n  const tile = {\n    protoFeatures: [],\n    sourceFeatures: null,\n    numPoints: 0,\n    numSimplified: 0,\n    numFeatures: features.length,\n    x: tx,\n    y: ty,\n    z,\n    transformed: false,\n    minX: 2,\n    minY: 1,\n    maxX: -1,\n    maxY: 0\n  };\n  for (const feature of features) {\n    addProtoFeature(tile, feature, tolerance, options);\n  }\n  return tile;\n}\n// eslint-disable-next-line complexity, max-statements\nfunction addProtoFeature(tile, feature, tolerance, options) {\n  const geometry = feature.geometry;\n  const type = feature.type;\n  const simplifiedGeometry = [];\n  tile.minX = Math.min(tile.minX, feature.minX);\n  tile.minY = Math.min(tile.minY, feature.minY);\n  tile.maxX = Math.max(tile.maxX, feature.maxX);\n  tile.maxY = Math.max(tile.maxY, feature.maxY);\n  let simplifiedType;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      simplifiedType = 1;\n      for (let i = 0; i < geometry.length; i += 3) {\n        simplifiedGeometry.push(geometry[i], geometry[i + 1]);\n        tile.numPoints++;\n        tile.numSimplified++;\n      }\n      break;\n    case 'LineString':\n      simplifiedType = 2;\n      addProtoLine(simplifiedGeometry, geometry, tile, tolerance, false, false);\n      break;\n    case 'MultiLineString':\n      simplifiedType = 2;\n      for (let i = 0; i < geometry.length; i++) {\n        addProtoLine(simplifiedGeometry, geometry[i], tile, tolerance, false, i === 0);\n      }\n      break;\n    case 'Polygon':\n      simplifiedType = 3;\n      for (let i = 0; i < geometry.length; i++) {\n        addProtoLine(simplifiedGeometry, geometry[i], tile, tolerance, true, i === 0);\n      }\n      break;\n    case 'MultiPolygon':\n      simplifiedType = 3;\n      for (let k = 0; k < geometry.length; k++) {\n        const polygon = geometry[k];\n        for (let i = 0; i < polygon.length; i++) {\n          addProtoLine(simplifiedGeometry, polygon[i], tile, tolerance, true, i === 0);\n        }\n      }\n      break;\n    default:\n      throw new Error(`Unknown geometry type: ${type}`);\n  }\n  if (simplifiedGeometry.length) {\n    let tags = feature.tags || null;\n    if (type === 'LineString' && options.lineMetrics) {\n      tags = {};\n      for (const key in feature.tags) {\n        tags[key] = feature.tags[key];\n      }\n      // @ts-expect-error adding fields to arrays\n      // eslint-disable-next-line camelcase\n      tags.mapbox_clip_start = geometry.start / geometry.size;\n      // @ts-expect-error adding fields to arrays\n      // eslint-disable-next-line camelcase\n      tags.mapbox_clip_end = geometry.end / geometry.size;\n    }\n    const tileFeature = {\n      geometry: simplifiedGeometry,\n      simplifiedType,\n      // @ts-expect-error\n      tags\n    };\n    if (feature.id !== null) {\n      tileFeature.id = feature.id;\n    }\n    tile.protoFeatures.push(tileFeature);\n  }\n}\n// eslint-disable-next-line max-params, max-statements\nfunction addProtoLine(result, geometry, tile, tolerance, isPolygon, isOuter) {\n  const sqTolerance = tolerance * tolerance;\n  if (tolerance > 0 && geometry.size < (isPolygon ? sqTolerance : tolerance)) {\n    tile.numPoints += geometry.length / 3;\n    return;\n  }\n  const ring = [];\n  for (let i = 0; i < geometry.length; i += 3) {\n    if (tolerance === 0 || geometry[i + 2] > sqTolerance) {\n      tile.numSimplified++;\n      ring.push(geometry[i], geometry[i + 1]);\n    }\n    tile.numPoints++;\n  }\n  if (isPolygon) rewind(ring, isOuter);\n  result.push(ring);\n}\nfunction rewind(ring, clockwise) {\n  let area = 0;\n  for (let i = 0, j = ring.length - 2; i < ring.length; j = i, i += 2) {\n    area += (ring[i] - ring[j]) * (ring[i + 1] + ring[j + 1]);\n  }\n  if (area > 0 === clockwise) {\n    for (let i = 0, len = ring.length; i < len / 2; i += 2) {\n      const x = ring[i];\n      const y = ring[i + 1];\n      ring[i] = ring[len - 2 - i];\n      ring[i + 1] = ring[len - 1 - i];\n      ring[len - 2 - i] = x;\n      ring[len - 1 - i] = y;\n    }\n  }\n}","map":{"version":3,"names":["createProtoTile","features","z","tx","ty","options","tolerance","maxZoom","extent","tile","protoFeatures","sourceFeatures","numPoints","numSimplified","numFeatures","length","x","y","transformed","minX","minY","maxX","maxY","feature","addProtoFeature","geometry","type","simplifiedGeometry","Math","min","max","simplifiedType","i","push","addProtoLine","k","polygon","Error","tags","lineMetrics","key","mapbox_clip_start","start","size","mapbox_clip_end","end","tileFeature","id","result","isPolygon","isOuter","sqTolerance","ring","rewind","clockwise","area","j","len"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/mvt/dist/lib/vector-tiler/proto-tile.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\n/**\n * Create a tile from features and tile index\n */\nexport function createProtoTile(features, z, tx, ty, options) {\n    const tolerance = z === options.maxZoom ? 0 : options.tolerance / ((1 << z) * options.extent);\n    const tile = {\n        protoFeatures: [],\n        sourceFeatures: null,\n        numPoints: 0,\n        numSimplified: 0,\n        numFeatures: features.length,\n        x: tx,\n        y: ty,\n        z,\n        transformed: false,\n        minX: 2,\n        minY: 1,\n        maxX: -1,\n        maxY: 0\n    };\n    for (const feature of features) {\n        addProtoFeature(tile, feature, tolerance, options);\n    }\n    return tile;\n}\n// eslint-disable-next-line complexity, max-statements\nfunction addProtoFeature(tile, feature, tolerance, options) {\n    const geometry = feature.geometry;\n    const type = feature.type;\n    const simplifiedGeometry = [];\n    tile.minX = Math.min(tile.minX, feature.minX);\n    tile.minY = Math.min(tile.minY, feature.minY);\n    tile.maxX = Math.max(tile.maxX, feature.maxX);\n    tile.maxY = Math.max(tile.maxY, feature.maxY);\n    let simplifiedType;\n    switch (type) {\n        case 'Point':\n        case 'MultiPoint':\n            simplifiedType = 1;\n            for (let i = 0; i < geometry.length; i += 3) {\n                simplifiedGeometry.push(geometry[i], geometry[i + 1]);\n                tile.numPoints++;\n                tile.numSimplified++;\n            }\n            break;\n        case 'LineString':\n            simplifiedType = 2;\n            addProtoLine(simplifiedGeometry, geometry, tile, tolerance, false, false);\n            break;\n        case 'MultiLineString':\n            simplifiedType = 2;\n            for (let i = 0; i < geometry.length; i++) {\n                addProtoLine(simplifiedGeometry, geometry[i], tile, tolerance, false, i === 0);\n            }\n            break;\n        case 'Polygon':\n            simplifiedType = 3;\n            for (let i = 0; i < geometry.length; i++) {\n                addProtoLine(simplifiedGeometry, geometry[i], tile, tolerance, true, i === 0);\n            }\n            break;\n        case 'MultiPolygon':\n            simplifiedType = 3;\n            for (let k = 0; k < geometry.length; k++) {\n                const polygon = geometry[k];\n                for (let i = 0; i < polygon.length; i++) {\n                    addProtoLine(simplifiedGeometry, polygon[i], tile, tolerance, true, i === 0);\n                }\n            }\n            break;\n        default:\n            throw new Error(`Unknown geometry type: ${type}`);\n    }\n    if (simplifiedGeometry.length) {\n        let tags = feature.tags || null;\n        if (type === 'LineString' && options.lineMetrics) {\n            tags = {};\n            for (const key in feature.tags) {\n                tags[key] = feature.tags[key];\n            }\n            // @ts-expect-error adding fields to arrays\n            // eslint-disable-next-line camelcase\n            tags.mapbox_clip_start = geometry.start / geometry.size;\n            // @ts-expect-error adding fields to arrays\n            // eslint-disable-next-line camelcase\n            tags.mapbox_clip_end = geometry.end / geometry.size;\n        }\n        const tileFeature = {\n            geometry: simplifiedGeometry,\n            simplifiedType,\n            // @ts-expect-error\n            tags\n        };\n        if (feature.id !== null) {\n            tileFeature.id = feature.id;\n        }\n        tile.protoFeatures.push(tileFeature);\n    }\n}\n// eslint-disable-next-line max-params, max-statements\nfunction addProtoLine(result, geometry, tile, tolerance, isPolygon, isOuter) {\n    const sqTolerance = tolerance * tolerance;\n    if (tolerance > 0 && geometry.size < (isPolygon ? sqTolerance : tolerance)) {\n        tile.numPoints += geometry.length / 3;\n        return;\n    }\n    const ring = [];\n    for (let i = 0; i < geometry.length; i += 3) {\n        if (tolerance === 0 || geometry[i + 2] > sqTolerance) {\n            tile.numSimplified++;\n            ring.push(geometry[i], geometry[i + 1]);\n        }\n        tile.numPoints++;\n    }\n    if (isPolygon)\n        rewind(ring, isOuter);\n    result.push(ring);\n}\nfunction rewind(ring, clockwise) {\n    let area = 0;\n    for (let i = 0, j = ring.length - 2; i < ring.length; j = i, i += 2) {\n        area += (ring[i] - ring[j]) * (ring[i + 1] + ring[j + 1]);\n    }\n    if (area > 0 === clockwise) {\n        for (let i = 0, len = ring.length; i < len / 2; i += 2) {\n            const x = ring[i];\n            const y = ring[i + 1];\n            ring[i] = ring[len - 2 - i];\n            ring[i + 1] = ring[len - 1 - i];\n            ring[len - 2 - i] = x;\n            ring[len - 1 - i] = y;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}