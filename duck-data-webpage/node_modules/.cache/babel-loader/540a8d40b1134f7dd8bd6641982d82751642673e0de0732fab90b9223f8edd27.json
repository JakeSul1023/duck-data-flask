{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { BufferTransform } from '@luma.gl/engine';\nimport { padBuffer, matchBuffer, getAttributeTypeFromSize, getFloat32VertexFormat, cycleBuffers } from \"./gpu-transition-utils.js\";\nimport { GPUTransitionBase } from \"./gpu-transition.js\";\nexport default class GPUSpringTransition extends GPUTransitionBase {\n  constructor({\n    device,\n    attribute,\n    timeline\n  }) {\n    super({\n      device,\n      attribute,\n      timeline\n    });\n    this.type = 'spring';\n    this.texture = getTexture(device);\n    this.framebuffer = getFramebuffer(device, this.texture);\n    this.transform = getTransform(device, attribute);\n  }\n  start(transitionSettings, numInstances) {\n    const prevLength = this.currentLength;\n    const prevStartIndices = this.currentStartIndices;\n    super.start(transitionSettings, numInstances);\n    const {\n      buffers,\n      attribute\n    } = this;\n    for (let i = 0; i < 2; i++) {\n      buffers[i] = padBuffer({\n        device: this.device,\n        buffer: buffers[i],\n        attribute,\n        fromLength: prevLength,\n        toLength: this.currentLength,\n        fromStartIndices: prevStartIndices,\n        getData: transitionSettings.enter\n      });\n    }\n    buffers[2] = matchBuffer({\n      device: this.device,\n      source: buffers[0],\n      target: buffers[2]\n    });\n    this.setBuffer(buffers[1]);\n    const {\n      model\n    } = this.transform;\n    model.setVertexCount(Math.floor(this.currentLength / attribute.size));\n    if (attribute.isConstant) {\n      model.setConstantAttributes({\n        aTo: attribute.value\n      });\n    } else {\n      model.setAttributes({\n        aTo: attribute.getBuffer()\n      });\n    }\n  }\n  onUpdate() {\n    const {\n      buffers,\n      transform,\n      framebuffer,\n      transition\n    } = this;\n    const settings = this.settings;\n    transform.model.setAttributes({\n      aPrev: buffers[0],\n      aCur: buffers[1]\n    });\n    transform.transformFeedback.setBuffers({\n      vNext: buffers[2]\n    });\n    const springProps = {\n      stiffness: settings.stiffness,\n      damping: settings.damping\n    };\n    transform.model.shaderInputs.setProps({\n      spring: springProps\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      parameters: {\n        viewport: [0, 0, 1, 1]\n      },\n      clearColor: [0, 0, 0, 0]\n    });\n    cycleBuffers(buffers);\n    this.setBuffer(buffers[1]);\n    const isTransitioning = this.device.readPixelsToArrayWebGL(framebuffer)[0] > 0;\n    if (!isTransitioning) {\n      transition.end();\n    }\n  }\n  delete() {\n    super.delete();\n    this.transform.destroy();\n    this.texture.destroy();\n    this.framebuffer.destroy();\n  }\n}\nconst uniformBlock = `\\\nuniform springUniforms {\n  float damping;\n  float stiffness;\n} spring;\n`;\nconst springUniforms = {\n  name: 'spring',\n  vs: uniformBlock,\n  uniformTypes: {\n    damping: 'f32',\n    stiffness: 'f32'\n  }\n};\nconst vs = `\\\n#version 300 es\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nin ATTRIBUTE_TYPE aPrev;\nin ATTRIBUTE_TYPE aCur;\nin ATTRIBUTE_TYPE aTo;\nout ATTRIBUTE_TYPE vNext;\nout float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE force = delta * spring.stiffness;\n  ATTRIBUTE_TYPE resistance = velocity * spring.damping;\n  return force - resistance + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`;\nconst fs = `\\\n#version 300 es\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nin float vIsTransitioningFlag;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  fragColor = vec4(1.0);\n}`;\nfunction getTransform(device, attribute) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  const format = getFloat32VertexFormat(attribute.size);\n  return new BufferTransform(device, {\n    vs,\n    fs,\n    bufferLayout: [{\n      name: 'aPrev',\n      format\n    }, {\n      name: 'aCur',\n      format\n    }, {\n      name: 'aTo',\n      format: attribute.getBufferLayout().attributes[0].format\n    }],\n    varyings: ['vNext'],\n    modules: [springUniforms],\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    parameters: {\n      depthCompare: 'always',\n      blendColorOperation: 'max',\n      blendColorSrcFactor: 'one',\n      blendColorDstFactor: 'one',\n      blendAlphaOperation: 'max',\n      blendAlphaSrcFactor: 'one',\n      blendAlphaDstFactor: 'one'\n    }\n  });\n}\nfunction getTexture(device) {\n  return device.createTexture({\n    data: new Uint8Array(4),\n    format: 'rgba8unorm',\n    mipmaps: false,\n    width: 1,\n    height: 1\n  });\n}\nfunction getFramebuffer(device, texture) {\n  return device.createFramebuffer({\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    colorAttachments: [texture]\n  });\n}","map":{"version":3,"names":["BufferTransform","padBuffer","matchBuffer","getAttributeTypeFromSize","getFloat32VertexFormat","cycleBuffers","GPUTransitionBase","GPUSpringTransition","constructor","device","attribute","timeline","type","texture","getTexture","framebuffer","getFramebuffer","transform","getTransform","start","transitionSettings","numInstances","prevLength","currentLength","prevStartIndices","currentStartIndices","buffers","i","buffer","fromLength","toLength","fromStartIndices","getData","enter","source","target","setBuffer","model","setVertexCount","Math","floor","size","isConstant","setConstantAttributes","aTo","value","setAttributes","getBuffer","onUpdate","transition","settings","aPrev","aCur","transformFeedback","setBuffers","vNext","springProps","stiffness","damping","shaderInputs","setProps","spring","run","discard","parameters","viewport","clearColor","isTransitioning","readPixelsToArrayWebGL","end","delete","destroy","uniformBlock","springUniforms","name","vs","uniformTypes","fs","attributeType","format","bufferLayout","getBufferLayout","attributes","varyings","modules","defines","ATTRIBUTE_TYPE","depthCompare","blendColorOperation","blendColorSrcFactor","blendColorDstFactor","blendAlphaOperation","blendAlphaSrcFactor","blendAlphaDstFactor","createTexture","data","Uint8Array","mipmaps","width","height","createFramebuffer","id","colorAttachments"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\transitions\\gpu-spring-transition.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device, Framebuffer, Texture} from '@luma.gl/core';\nimport {Timeline, BufferTransform} from '@luma.gl/engine';\nimport type {ShaderModule} from '@luma.gl/shadertools';\nimport {\n  padBuffer,\n  matchBuffer,\n  getAttributeTypeFromSize,\n  getFloat32VertexFormat,\n  cycleBuffers\n} from './gpu-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport {GPUTransitionBase} from './gpu-transition';\n\nimport type {SpringTransitionSettings} from '../lib/attribute/transition-settings';\nimport type {TypedArray} from '../types/types';\n\nexport default class GPUSpringTransition extends GPUTransitionBase<SpringTransitionSettings> {\n  type = 'spring';\n\n  private texture: Texture;\n  private framebuffer: Framebuffer;\n  private transform: BufferTransform;\n\n  constructor({\n    device,\n    attribute,\n    timeline\n  }: {\n    device: Device;\n    attribute: Attribute;\n    timeline: Timeline;\n  }) {\n    super({device, attribute, timeline});\n    this.texture = getTexture(device);\n    this.framebuffer = getFramebuffer(device, this.texture);\n    this.transform = getTransform(device, attribute);\n  }\n\n  override start(transitionSettings: SpringTransitionSettings, numInstances: number): void {\n    const prevLength = this.currentLength;\n    const prevStartIndices = this.currentStartIndices;\n    super.start(transitionSettings, numInstances);\n\n    const {buffers, attribute} = this;\n\n    for (let i = 0; i < 2; i++) {\n      buffers[i] = padBuffer({\n        device: this.device,\n        buffer: buffers[i],\n        attribute,\n        fromLength: prevLength,\n        toLength: this.currentLength,\n        fromStartIndices: prevStartIndices,\n        getData: transitionSettings.enter\n      });\n    }\n    buffers[2] = matchBuffer({\n      device: this.device,\n      source: buffers[0],\n      target: buffers[2]\n    });\n\n    this.setBuffer(buffers[1]);\n\n    const {model} = this.transform;\n    model.setVertexCount(Math.floor(this.currentLength / attribute.size));\n    if (attribute.isConstant) {\n      model.setConstantAttributes({aTo: attribute.value as TypedArray});\n    } else {\n      model.setAttributes({aTo: attribute.getBuffer()!});\n    }\n  }\n\n  onUpdate() {\n    const {buffers, transform, framebuffer, transition} = this;\n\n    const settings = this.settings as SpringTransitionSettings;\n\n    transform.model.setAttributes({\n      aPrev: buffers[0],\n      aCur: buffers[1]\n    });\n    transform.transformFeedback.setBuffers({vNext: buffers[2]});\n    const springProps: SpringProps = {\n      stiffness: settings.stiffness,\n      damping: settings.damping\n    };\n    transform.model.shaderInputs.setProps({spring: springProps});\n    transform.run({\n      framebuffer,\n      discard: false,\n      parameters: {viewport: [0, 0, 1, 1]},\n      clearColor: [0, 0, 0, 0]\n    });\n\n    cycleBuffers(buffers);\n    this.setBuffer(buffers[1]);\n\n    const isTransitioning = this.device.readPixelsToArrayWebGL(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n  }\n\n  override delete() {\n    super.delete();\n    this.transform.destroy();\n    this.texture.destroy();\n    this.framebuffer.destroy();\n  }\n}\n\nconst uniformBlock = `\\\nuniform springUniforms {\n  float damping;\n  float stiffness;\n} spring;\n`;\n\ntype SpringProps = {\n  damping: number;\n  stiffness: number;\n};\n\nconst springUniforms = {\n  name: 'spring',\n  vs: uniformBlock,\n  uniformTypes: {\n    damping: 'f32',\n    stiffness: 'f32'\n  }\n} as const satisfies ShaderModule<SpringProps>;\n\nconst vs = `\\\n#version 300 es\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nin ATTRIBUTE_TYPE aPrev;\nin ATTRIBUTE_TYPE aCur;\nin ATTRIBUTE_TYPE aTo;\nout ATTRIBUTE_TYPE vNext;\nout float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE force = delta * spring.stiffness;\n  ATTRIBUTE_TYPE resistance = velocity * spring.damping;\n  return force - resistance + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`;\n\nconst fs = `\\\n#version 300 es\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nin float vIsTransitioningFlag;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  fragColor = vec4(1.0);\n}`;\n\nfunction getTransform(device: Device, attribute: Attribute): BufferTransform {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  const format = getFloat32VertexFormat(attribute.size);\n  return new BufferTransform(device, {\n    vs,\n    fs,\n    bufferLayout: [\n      {name: 'aPrev', format},\n      {name: 'aCur', format},\n      {name: 'aTo', format: attribute.getBufferLayout().attributes![0].format}\n    ],\n    varyings: ['vNext'],\n    modules: [springUniforms],\n    defines: {ATTRIBUTE_TYPE: attributeType},\n    parameters: {\n      depthCompare: 'always',\n      blendColorOperation: 'max',\n      blendColorSrcFactor: 'one',\n      blendColorDstFactor: 'one',\n      blendAlphaOperation: 'max',\n      blendAlphaSrcFactor: 'one',\n      blendAlphaDstFactor: 'one'\n    }\n  });\n}\n\nfunction getTexture(device: Device): Texture {\n  return device.createTexture({\n    data: new Uint8Array(4),\n    format: 'rgba8unorm',\n    mipmaps: false,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(device: Device, texture: Texture): Framebuffer {\n  return device.createFramebuffer({\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    colorAttachments: [texture]\n  });\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAAkBA,eAAe,QAAO,iBAAiB;AAEzD,SACEC,SAAS,EACTC,WAAW,EACXC,wBAAwB,EACxBC,sBAAsB,EACtBC,YAAY,QACb;AAED,SAAQC,iBAAiB,QAAC;AAK1B,eAAc,MAAOC,mBAAoB,SAAQD,iBAA2C;EAO1FE,YAAY;IACVC,MAAM;IACNC,SAAS;IACTC;EAAQ,CAKT;IACC,KAAK,CAAC;MAACF,MAAM;MAAEC,SAAS;MAAEC;IAAQ,CAAC,CAAC;IAftC,KAAAC,IAAI,GAAG,QAAQ;IAgBb,IAAI,CAACC,OAAO,GAAGC,UAAU,CAACL,MAAM,CAAC;IACjC,IAAI,CAACM,WAAW,GAAGC,cAAc,CAACP,MAAM,EAAE,IAAI,CAACI,OAAO,CAAC;IACvD,IAAI,CAACI,SAAS,GAAGC,YAAY,CAACT,MAAM,EAAEC,SAAS,CAAC;EAClD;EAESS,KAAKA,CAACC,kBAA4C,EAAEC,YAAoB;IAC/E,MAAMC,UAAU,GAAG,IAAI,CAACC,aAAa;IACrC,MAAMC,gBAAgB,GAAG,IAAI,CAACC,mBAAmB;IACjD,KAAK,CAACN,KAAK,CAACC,kBAAkB,EAAEC,YAAY,CAAC;IAE7C,MAAM;MAACK,OAAO;MAAEhB;IAAS,CAAC,GAAG,IAAI;IAEjC,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,OAAO,CAACC,CAAC,CAAC,GAAG1B,SAAS,CAAC;QACrBQ,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBmB,MAAM,EAAEF,OAAO,CAACC,CAAC,CAAC;QAClBjB,SAAS;QACTmB,UAAU,EAAEP,UAAU;QACtBQ,QAAQ,EAAE,IAAI,CAACP,aAAa;QAC5BQ,gBAAgB,EAAEP,gBAAgB;QAClCQ,OAAO,EAAEZ,kBAAkB,CAACa;OAC7B,CAAC;IACJ;IACAP,OAAO,CAAC,CAAC,CAAC,GAAGxB,WAAW,CAAC;MACvBO,MAAM,EAAE,IAAI,CAACA,MAAM;MACnByB,MAAM,EAAER,OAAO,CAAC,CAAC,CAAC;MAClBS,MAAM,EAAET,OAAO,CAAC,CAAC;KAClB,CAAC;IAEF,IAAI,CAACU,SAAS,CAACV,OAAO,CAAC,CAAC,CAAC,CAAC;IAE1B,MAAM;MAACW;IAAK,CAAC,GAAG,IAAI,CAACpB,SAAS;IAC9BoB,KAAK,CAACC,cAAc,CAACC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACjB,aAAa,GAAGb,SAAS,CAAC+B,IAAI,CAAC,CAAC;IACrE,IAAI/B,SAAS,CAACgC,UAAU,EAAE;MACxBL,KAAK,CAACM,qBAAqB,CAAC;QAACC,GAAG,EAAElC,SAAS,CAACmC;MAAmB,CAAC,CAAC;IACnE,CAAC,MAAM;MACLR,KAAK,CAACS,aAAa,CAAC;QAACF,GAAG,EAAElC,SAAS,CAACqC,SAAS;MAAG,CAAC,CAAC;IACpD;EACF;EAEAC,QAAQA,CAAA;IACN,MAAM;MAACtB,OAAO;MAAET,SAAS;MAAEF,WAAW;MAAEkC;IAAU,CAAC,GAAG,IAAI;IAE1D,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAoC;IAE1DjC,SAAS,CAACoB,KAAK,CAACS,aAAa,CAAC;MAC5BK,KAAK,EAAEzB,OAAO,CAAC,CAAC,CAAC;MACjB0B,IAAI,EAAE1B,OAAO,CAAC,CAAC;KAChB,CAAC;IACFT,SAAS,CAACoC,iBAAiB,CAACC,UAAU,CAAC;MAACC,KAAK,EAAE7B,OAAO,CAAC,CAAC;IAAC,CAAC,CAAC;IAC3D,MAAM8B,WAAW,GAAgB;MAC/BC,SAAS,EAAEP,QAAQ,CAACO,SAAS;MAC7BC,OAAO,EAAER,QAAQ,CAACQ;KACnB;IACDzC,SAAS,CAACoB,KAAK,CAACsB,YAAY,CAACC,QAAQ,CAAC;MAACC,MAAM,EAAEL;IAAW,CAAC,CAAC;IAC5DvC,SAAS,CAAC6C,GAAG,CAAC;MACZ/C,WAAW;MACXgD,OAAO,EAAE,KAAK;MACdC,UAAU,EAAE;QAACC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;MAAC,CAAC;MACpCC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;KACxB,CAAC;IAEF7D,YAAY,CAACqB,OAAO,CAAC;IACrB,IAAI,CAACU,SAAS,CAACV,OAAO,CAAC,CAAC,CAAC,CAAC;IAE1B,MAAMyC,eAAe,GAAG,IAAI,CAAC1D,MAAM,CAAC2D,sBAAsB,CAACrD,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAE9E,IAAI,CAACoD,eAAe,EAAE;MACpBlB,UAAU,CAACoB,GAAG,EAAE;IAClB;EACF;EAESC,MAAMA,CAAA;IACb,KAAK,CAACA,MAAM,EAAE;IACd,IAAI,CAACrD,SAAS,CAACsD,OAAO,EAAE;IACxB,IAAI,CAAC1D,OAAO,CAAC0D,OAAO,EAAE;IACtB,IAAI,CAACxD,WAAW,CAACwD,OAAO,EAAE;EAC5B;;AAGF,MAAMC,YAAY,GAAG;;;;;CAKpB;AAOD,MAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE,QAAQ;EACdC,EAAE,EAAEH,YAAY;EAChBI,YAAY,EAAE;IACZlB,OAAO,EAAE,KAAK;IACdD,SAAS,EAAE;;CAE+B;AAE9C,MAAMkB,EAAE,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BV;AAED,MAAME,EAAE,GAAG;;;;;;;;;;;;;EAaT;AAEF,SAAS3D,YAAYA,CAACT,MAAc,EAAEC,SAAoB;EACxD,MAAMoE,aAAa,GAAG3E,wBAAwB,CAACO,SAAS,CAAC+B,IAAI,CAAC;EAC9D,MAAMsC,MAAM,GAAG3E,sBAAsB,CAACM,SAAS,CAAC+B,IAAI,CAAC;EACrD,OAAO,IAAIzC,eAAe,CAACS,MAAM,EAAE;IACjCkE,EAAE;IACFE,EAAE;IACFG,YAAY,EAAE,CACZ;MAACN,IAAI,EAAE,OAAO;MAAEK;IAAM,CAAC,EACvB;MAACL,IAAI,EAAE,MAAM;MAAEK;IAAM,CAAC,EACtB;MAACL,IAAI,EAAE,KAAK;MAAEK,MAAM,EAAErE,SAAS,CAACuE,eAAe,EAAE,CAACC,UAAW,CAAC,CAAC,CAAC,CAACH;IAAM,CAAC,CACzE;IACDI,QAAQ,EAAE,CAAC,OAAO,CAAC;IACnBC,OAAO,EAAE,CAACX,cAAc,CAAC;IACzBY,OAAO,EAAE;MAACC,cAAc,EAAER;IAAa,CAAC;IACxCd,UAAU,EAAE;MACVuB,YAAY,EAAE,QAAQ;MACtBC,mBAAmB,EAAE,KAAK;MAC1BC,mBAAmB,EAAE,KAAK;MAC1BC,mBAAmB,EAAE,KAAK;MAC1BC,mBAAmB,EAAE,KAAK;MAC1BC,mBAAmB,EAAE,KAAK;MAC1BC,mBAAmB,EAAE;;GAExB,CAAC;AACJ;AAEA,SAAS/E,UAAUA,CAACL,MAAc;EAChC,OAAOA,MAAM,CAACqF,aAAa,CAAC;IAC1BC,IAAI,EAAE,IAAIC,UAAU,CAAC,CAAC,CAAC;IACvBjB,MAAM,EAAE,YAAY;IACpBkB,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;GACT,CAAC;AACJ;AAEA,SAASnF,cAAcA,CAACP,MAAc,EAAEI,OAAgB;EACtD,OAAOJ,MAAM,CAAC2F,iBAAiB,CAAC;IAC9BC,EAAE,EAAE,gDAAgD;IACpDH,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE,CAAC;IACTG,gBAAgB,EAAE,CAACzF,OAAO;GAC3B,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}