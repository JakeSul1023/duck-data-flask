{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue {\n  _values;\n  _settlers;\n  _closed;\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value) {\n    return this.enqueue(value);\n  }\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close() {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({\n        done: true\n      });\n    }\n    this._closed = true;\n  }\n  // ITERATOR IMPLEMENTATION\n  /** @returns a Promise for an IteratorResult */\n  next() {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({\n        done: false,\n        value\n      });\n    }\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({\n        done: true,\n        value: undefined\n      });\n    }\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({\n        resolve,\n        reject\n      });\n    });\n  }\n}","map":{"version":3,"names":["AsyncQueue","_values","_settlers","_closed","constructor","Symbol","asyncIterator","push","value","enqueue","Error","length","settler","shift","reject","resolve","close","done","next","Promise","undefined"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/async-queue/async-queue.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue {\n    _values;\n    _settlers;\n    _closed;\n    constructor() {\n        this._values = []; // enqueues > dequeues\n        this._settlers = []; // dequeues > enqueues\n        this._closed = false;\n    }\n    /** Return an async iterator for this queue */\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    /** Push a new value - the async iterator will yield a promise resolved to this value */\n    push(value) {\n        return this.enqueue(value);\n    }\n    /**\n     * Push a new value - the async iterator will yield a promise resolved to this value\n     * Add an error - the async iterator will yield a promise rejected with this value\n     */\n    enqueue(value) {\n        if (this._closed) {\n            throw new Error('Closed');\n        }\n        if (this._settlers.length > 0) {\n            if (this._values.length > 0) {\n                throw new Error('Illegal internal state');\n            }\n            const settler = this._settlers.shift();\n            if (value instanceof Error) {\n                settler.reject(value);\n            }\n            else {\n                settler.resolve({ value });\n            }\n        }\n        else {\n            this._values.push(value);\n        }\n    }\n    /** Indicate that we not waiting for more values - The async iterator will be done */\n    close() {\n        while (this._settlers.length > 0) {\n            const settler = this._settlers.shift();\n            settler.resolve({ done: true });\n        }\n        this._closed = true;\n    }\n    // ITERATOR IMPLEMENTATION\n    /** @returns a Promise for an IteratorResult */\n    next() {\n        // If values in queue, yield the first value\n        if (this._values.length > 0) {\n            const value = this._values.shift();\n            if (value instanceof Error) {\n                return Promise.reject(value);\n            }\n            return Promise.resolve({ done: false, value });\n        }\n        // If queue is closed, the iterator is done\n        if (this._closed) {\n            if (this._settlers.length > 0) {\n                throw new Error('Illegal internal state');\n            }\n            return Promise.resolve({ done: true, value: undefined });\n        }\n        // Yield a promise that waits for new values to be enqueued\n        return new Promise((resolve, reject) => {\n            this._settlers.push({ resolve, reject });\n        });\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,UAAU,CAAC;EAC5BC,OAAO;EACPC,SAAS;EACTC,OAAO;EACPC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACH,OAAO,GAAG,EAAE,CAAC,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,EAAE,CAAC,CAAC;IACrB,IAAI,CAACC,OAAO,GAAG,KAAK;EACxB;EACA;EACA,CAACE,MAAM,CAACC,aAAa,IAAI;IACrB,OAAO,IAAI;EACf;EACA;EACAC,IAAIA,CAACC,KAAK,EAAE;IACR,OAAO,IAAI,CAACC,OAAO,CAACD,KAAK,CAAC;EAC9B;EACA;AACJ;AACA;AACA;EACIC,OAAOA,CAACD,KAAK,EAAE;IACX,IAAI,IAAI,CAACL,OAAO,EAAE;MACd,MAAM,IAAIO,KAAK,CAAC,QAAQ,CAAC;IAC7B;IACA,IAAI,IAAI,CAACR,SAAS,CAACS,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,IAAI,CAACV,OAAO,CAACU,MAAM,GAAG,CAAC,EAAE;QACzB,MAAM,IAAID,KAAK,CAAC,wBAAwB,CAAC;MAC7C;MACA,MAAME,OAAO,GAAG,IAAI,CAACV,SAAS,CAACW,KAAK,CAAC,CAAC;MACtC,IAAIL,KAAK,YAAYE,KAAK,EAAE;QACxBE,OAAO,CAACE,MAAM,CAACN,KAAK,CAAC;MACzB,CAAC,MACI;QACDI,OAAO,CAACG,OAAO,CAAC;UAAEP;QAAM,CAAC,CAAC;MAC9B;IACJ,CAAC,MACI;MACD,IAAI,CAACP,OAAO,CAACM,IAAI,CAACC,KAAK,CAAC;IAC5B;EACJ;EACA;EACAQ,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACd,SAAS,CAACS,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAMC,OAAO,GAAG,IAAI,CAACV,SAAS,CAACW,KAAK,CAAC,CAAC;MACtCD,OAAO,CAACG,OAAO,CAAC;QAAEE,IAAI,EAAE;MAAK,CAAC,CAAC;IACnC;IACA,IAAI,CAACd,OAAO,GAAG,IAAI;EACvB;EACA;EACA;EACAe,IAAIA,CAAA,EAAG;IACH;IACA,IAAI,IAAI,CAACjB,OAAO,CAACU,MAAM,GAAG,CAAC,EAAE;MACzB,MAAMH,KAAK,GAAG,IAAI,CAACP,OAAO,CAACY,KAAK,CAAC,CAAC;MAClC,IAAIL,KAAK,YAAYE,KAAK,EAAE;QACxB,OAAOS,OAAO,CAACL,MAAM,CAACN,KAAK,CAAC;MAChC;MACA,OAAOW,OAAO,CAACJ,OAAO,CAAC;QAAEE,IAAI,EAAE,KAAK;QAAET;MAAM,CAAC,CAAC;IAClD;IACA;IACA,IAAI,IAAI,CAACL,OAAO,EAAE;MACd,IAAI,IAAI,CAACD,SAAS,CAACS,MAAM,GAAG,CAAC,EAAE;QAC3B,MAAM,IAAID,KAAK,CAAC,wBAAwB,CAAC;MAC7C;MACA,OAAOS,OAAO,CAACJ,OAAO,CAAC;QAAEE,IAAI,EAAE,IAAI;QAAET,KAAK,EAAEY;MAAU,CAAC,CAAC;IAC5D;IACA;IACA,OAAO,IAAID,OAAO,CAAC,CAACJ,OAAO,EAAED,MAAM,KAAK;MACpC,IAAI,CAACZ,SAAS,CAACK,IAAI,CAAC;QAAEQ,OAAO;QAAED;MAAO,CAAC,CAAC;IAC5C,CAAC,CAAC;EACN;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}