{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport debug from \"../debug/index.js\";\nimport DrawLayersPass from \"../passes/draw-layers-pass.js\";\nimport PickLayersPass from \"../passes/pick-layers-pass.js\";\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\nexport default class DeckRenderer {\n  constructor(device) {\n    this.device = device;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(device);\n    this.pickLayersPass = new PickLayersPass(device);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n  setProps(props) {\n    if (this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n    if (this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n  renderLayers(opts) {\n    if (!opts.viewports.length) {\n      return;\n    }\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const renderOpts = {\n      layerFilter: this.layerFilter,\n      isPicking: this.drawPickingColors,\n      ...opts\n    };\n    if (renderOpts.effects) {\n      this._preRender(renderOpts.effects, renderOpts);\n    }\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;\n    if (this.lastPostProcessEffect) {\n      renderOpts.clearColor = [0, 0, 0, 0];\n      renderOpts.clearCanvas = true;\n    }\n    const renderStats = layerPass.render({\n      ...renderOpts,\n      target: outputBuffer\n    });\n    if (renderOpts.effects) {\n      this._postRender(renderOpts.effects, renderOpts);\n    }\n    this.renderCount++;\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n  finalize() {\n    const {\n      renderBuffers\n    } = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n  _preRender(effects, opts) {\n    this.lastPostProcessEffect = null;\n    opts.preRenderStats = opts.preRenderStats || {};\n    for (const effect of effects) {\n      opts.preRenderStats[effect.id] = effect.preRender(opts);\n      if (effect.postRender) {\n        this.lastPostProcessEffect = effect.id;\n      }\n    }\n    if (this.lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n  }\n  _resizeRenderBuffers() {\n    const {\n      renderBuffers\n    } = this;\n    const size = this.device.canvasContext.getDrawingBufferSize();\n    if (renderBuffers.length === 0) {\n      [0, 1].map(i => {\n        const texture = this.device.createTexture({\n          sampler: {\n            minFilter: 'linear',\n            magFilter: 'linear'\n          }\n        });\n        renderBuffers.push(this.device.createFramebuffer({\n          id: `deck-renderbuffer-${i}`,\n          colorAttachments: [texture]\n        }));\n      });\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize(size);\n    }\n  }\n  _postRender(effects, opts) {\n    const {\n      renderBuffers\n    } = this;\n    const params = {\n      ...opts,\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1]\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        // If not the last post processing effect, unset the target so that\n        // it only renders between the swap buffers\n        params.target = effect.id === this.lastPostProcessEffect ? opts.target : undefined;\n        const buffer = effect.postRender(params);\n        // Buffer cannot be null if target is unset\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n//# sourceMappingURL=deck-renderer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}