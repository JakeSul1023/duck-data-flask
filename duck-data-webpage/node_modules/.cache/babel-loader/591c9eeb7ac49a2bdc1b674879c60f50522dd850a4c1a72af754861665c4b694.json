{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\n// Minimal support to load tilsets from the Cesium ION services\nimport { fetchFile } from '@loaders.gl/core';\nimport { assert } from '@loaders.gl/loader-utils';\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {\n    type,\n    url\n  } = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {\n    Authorization: `Bearer ${accessToken}`\n  };\n  const response = await fetchFile(url, {\n    headers\n  });\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return await response.json();\n}\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {\n    Authorization: `Bearer ${accessToken}`\n  };\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {\n    headers\n  });\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  let metadata = await response.json();\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {\n    headers\n  });\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const tilesetInfo = await response.json();\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n  return metadata;\n}","map":{"version":3,"names":["fetchFile","assert","CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","assets","getIonAssets","item","items","type","id","ionAssetMetadata","getIonAssetMetadata","url","headers","Authorization","response","ok","Error","statusText","json","metadata","tilesetInfo"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/ion/ion.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\n// Minimal support to load tilsets from the Cesium ION services\nimport { fetchFile } from '@loaders.gl/core';\nimport { assert } from '@loaders.gl/loader-utils';\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n    // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n    if (!assetId) {\n        const assets = await getIonAssets(accessToken);\n        for (const item of assets.items) {\n            if (item.type === '3DTILES') {\n                assetId = item.id;\n            }\n        }\n    }\n    // Step 2: Query metdatadata for this asset.\n    const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n    const { type, url } = ionAssetMetadata;\n    assert(type === '3DTILES' && url);\n    // Prepare a headers object for fetch\n    ionAssetMetadata.headers = {\n        Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n    };\n    return ionAssetMetadata;\n}\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n    assert(accessToken);\n    const url = CESIUM_ION_URL;\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    const response = await fetchFile(url, { headers });\n    if (!response.ok) {\n        throw new Error(response.statusText);\n    }\n    return await response.json();\n}\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n    assert(accessToken, assetId);\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    const url = `${CESIUM_ION_URL}/${assetId}`;\n    // https://cesium.com/docs/rest-api/#operation/getAsset\n    // Retrieves metadata information about a specific asset.\n    let response = await fetchFile(`${url}`, { headers });\n    if (!response.ok) {\n        throw new Error(response.statusText);\n    }\n    let metadata = await response.json();\n    // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n    // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n    response = await fetchFile(`${url}/endpoint`, { headers });\n    if (!response.ok) {\n        throw new Error(response.statusText);\n    }\n    const tilesetInfo = await response.json();\n    // extract dataset description\n    metadata = {\n        ...metadata,\n        ...tilesetInfo\n    };\n    return metadata;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,MAAM,QAAQ,0BAA0B;AACjD,MAAMC,cAAc,GAAG,kCAAkC;AACzD;AACA,OAAO,eAAeC,qBAAqBA,CAACC,WAAW,EAAEC,OAAO,EAAE;EAC9D;EACA,IAAI,CAACA,OAAO,EAAE;IACV,MAAMC,MAAM,GAAG,MAAMC,YAAY,CAACH,WAAW,CAAC;IAC9C,KAAK,MAAMI,IAAI,IAAIF,MAAM,CAACG,KAAK,EAAE;MAC7B,IAAID,IAAI,CAACE,IAAI,KAAK,SAAS,EAAE;QACzBL,OAAO,GAAGG,IAAI,CAACG,EAAE;MACrB;IACJ;EACJ;EACA;EACA,MAAMC,gBAAgB,GAAG,MAAMC,mBAAmB,CAACT,WAAW,EAAEC,OAAO,CAAC;EACxE,MAAM;IAAEK,IAAI;IAAEI;EAAI,CAAC,GAAGF,gBAAgB;EACtCX,MAAM,CAACS,IAAI,KAAK,SAAS,IAAII,GAAG,CAAC;EACjC;EACAF,gBAAgB,CAACG,OAAO,GAAG;IACvBC,aAAa,EAAE,UAAUJ,gBAAgB,CAACR,WAAW;EACzD,CAAC;EACD,OAAOQ,gBAAgB;AAC3B;AACA;AACA,OAAO,eAAeL,YAAYA,CAACH,WAAW,EAAE;EAC5CH,MAAM,CAACG,WAAW,CAAC;EACnB,MAAMU,GAAG,GAAGZ,cAAc;EAC1B,MAAMa,OAAO,GAAG;IAAEC,aAAa,EAAE,UAAUZ,WAAW;EAAG,CAAC;EAC1D,MAAMa,QAAQ,GAAG,MAAMjB,SAAS,CAACc,GAAG,EAAE;IAAEC;EAAQ,CAAC,CAAC;EAClD,IAAI,CAACE,QAAQ,CAACC,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;EACxC;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC;AACA;AACA,OAAO,eAAeR,mBAAmBA,CAACT,WAAW,EAAEC,OAAO,EAAE;EAC5DJ,MAAM,CAACG,WAAW,EAAEC,OAAO,CAAC;EAC5B,MAAMU,OAAO,GAAG;IAAEC,aAAa,EAAE,UAAUZ,WAAW;EAAG,CAAC;EAC1D,MAAMU,GAAG,GAAG,GAAGZ,cAAc,IAAIG,OAAO,EAAE;EAC1C;EACA;EACA,IAAIY,QAAQ,GAAG,MAAMjB,SAAS,CAAC,GAAGc,GAAG,EAAE,EAAE;IAAEC;EAAQ,CAAC,CAAC;EACrD,IAAI,CAACE,QAAQ,CAACC,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;EACxC;EACA,IAAIE,QAAQ,GAAG,MAAML,QAAQ,CAACI,IAAI,CAAC,CAAC;EACpC;EACA;EACAJ,QAAQ,GAAG,MAAMjB,SAAS,CAAC,GAAGc,GAAG,WAAW,EAAE;IAAEC;EAAQ,CAAC,CAAC;EAC1D,IAAI,CAACE,QAAQ,CAACC,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;EACxC;EACA,MAAMG,WAAW,GAAG,MAAMN,QAAQ,CAACI,IAAI,CAAC,CAAC;EACzC;EACAC,QAAQ,GAAG;IACP,GAAGA,QAAQ;IACX,GAAGC;EACP,CAAC;EACD,OAAOD,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}