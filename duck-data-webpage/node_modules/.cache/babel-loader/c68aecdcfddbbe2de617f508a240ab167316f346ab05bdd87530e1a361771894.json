{"ast":null,"code":"// TODO - GLTFScenegraph should use these\nimport { assert } from \"../utils/assert.js\";\nimport { getAccessorArrayTypeAndLength } from \"./gltf-utils.js\";\n// accepts buffer view index or buffer view object\n// returns a `Uint8Array`\nexport function getTypedArrayForBufferView(json, buffers, bufferViewIndex) {\n  const bufferView = json.bufferViews[bufferViewIndex];\n  assert(bufferView);\n  // Get hold of the arrayBuffer\n  const bufferIndex = bufferView.buffer;\n  const binChunk = buffers[bufferIndex];\n  assert(binChunk);\n  const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n  return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n}\n// accepts accessor index or accessor object\n// returns a `Uint8Array`\nexport function getTypedArrayForImageData(json, buffers, imageIndex) {\n  const image = json.images[imageIndex];\n  const bufferViewIndex = json.bufferViews[image.bufferView];\n  return getTypedArrayForBufferView(json, buffers, bufferViewIndex);\n}\n/**\n * Gets data pointed by the accessor.\n * @param json - json part of gltf content of a GLTF tile.\n * @param buffers - Array containing buffers of data.\n * @param accessor - accepts accessor index or accessor object.\n * @returns {TypedArray} Typed array with type matching the type of data poited by the accessor.\n */\n// eslint-disable-next-line complexity\nexport function getTypedArrayForAccessor(json, buffers, accessor) {\n  const gltfAccessor = typeof accessor === 'number' ? json.accessors?.[accessor] : accessor;\n  if (!gltfAccessor) {\n    throw new Error(`No gltf accessor ${JSON.stringify(accessor)}`);\n  }\n  const bufferView = json.bufferViews?.[gltfAccessor.bufferView || 0];\n  if (!bufferView) {\n    throw new Error(`No gltf buffer view for accessor ${bufferView}`);\n  }\n  // Get `arrayBuffer` the `bufferView` looks at\n  const {\n    arrayBuffer,\n    byteOffset: bufferByteOffset\n  } = buffers[bufferView.buffer];\n  // Resulting byteOffset is sum of the buffer, accessor and bufferView byte offsets\n  const byteOffset = (bufferByteOffset || 0) + (gltfAccessor.byteOffset || 0) + (bufferView.byteOffset || 0);\n  // Deduce TypedArray type and its length from `accessor` and `bufferView` data\n  const {\n    ArrayType,\n    length,\n    componentByteSize,\n    numberOfComponentsInElement\n  } = getAccessorArrayTypeAndLength(gltfAccessor, bufferView);\n  // 'length' is a whole number of components of all elements in the buffer pointed by the accessor\n  // Multiplier to calculate the address of the element in the arrayBuffer\n  const elementByteSize = componentByteSize * numberOfComponentsInElement;\n  const elementAddressScale = bufferView.byteStride || elementByteSize;\n  // Creare an array of component's type where all components (not just elements) will reside\n  if (typeof bufferView.byteStride === 'undefined' || bufferView.byteStride === elementByteSize) {\n    // No iterleaving\n    const result = new ArrayType(arrayBuffer, byteOffset, length);\n    return result;\n  }\n  // Iterleaving\n  const result = new ArrayType(length);\n  for (let i = 0; i < gltfAccessor.count; i++) {\n    const values = new ArrayType(arrayBuffer, byteOffset + i * elementAddressScale, numberOfComponentsInElement);\n    result.set(values, i * numberOfComponentsInElement);\n  }\n  return result;\n}","map":{"version":3,"names":["assert","getAccessorArrayTypeAndLength","getTypedArrayForBufferView","json","buffers","bufferViewIndex","bufferView","bufferViews","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","byteLength","getTypedArrayForImageData","imageIndex","image","images","getTypedArrayForAccessor","accessor","gltfAccessor","accessors","Error","JSON","stringify","bufferByteOffset","ArrayType","length","componentByteSize","numberOfComponentsInElement","elementByteSize","elementAddressScale","byteStride","result","i","count","values","set"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/lib/gltf-utils/get-typed-array.js"],"sourcesContent":["// TODO - GLTFScenegraph should use these\nimport { assert } from \"../utils/assert.js\";\nimport { getAccessorArrayTypeAndLength } from \"./gltf-utils.js\";\n// accepts buffer view index or buffer view object\n// returns a `Uint8Array`\nexport function getTypedArrayForBufferView(json, buffers, bufferViewIndex) {\n    const bufferView = json.bufferViews[bufferViewIndex];\n    assert(bufferView);\n    // Get hold of the arrayBuffer\n    const bufferIndex = bufferView.buffer;\n    const binChunk = buffers[bufferIndex];\n    assert(binChunk);\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n}\n// accepts accessor index or accessor object\n// returns a `Uint8Array`\nexport function getTypedArrayForImageData(json, buffers, imageIndex) {\n    const image = json.images[imageIndex];\n    const bufferViewIndex = json.bufferViews[image.bufferView];\n    return getTypedArrayForBufferView(json, buffers, bufferViewIndex);\n}\n/**\n * Gets data pointed by the accessor.\n * @param json - json part of gltf content of a GLTF tile.\n * @param buffers - Array containing buffers of data.\n * @param accessor - accepts accessor index or accessor object.\n * @returns {TypedArray} Typed array with type matching the type of data poited by the accessor.\n */\n// eslint-disable-next-line complexity\nexport function getTypedArrayForAccessor(json, buffers, accessor) {\n    const gltfAccessor = typeof accessor === 'number' ? json.accessors?.[accessor] : accessor;\n    if (!gltfAccessor) {\n        throw new Error(`No gltf accessor ${JSON.stringify(accessor)}`);\n    }\n    const bufferView = json.bufferViews?.[gltfAccessor.bufferView || 0];\n    if (!bufferView) {\n        throw new Error(`No gltf buffer view for accessor ${bufferView}`);\n    }\n    // Get `arrayBuffer` the `bufferView` looks at\n    const { arrayBuffer, byteOffset: bufferByteOffset } = buffers[bufferView.buffer];\n    // Resulting byteOffset is sum of the buffer, accessor and bufferView byte offsets\n    const byteOffset = (bufferByteOffset || 0) + (gltfAccessor.byteOffset || 0) + (bufferView.byteOffset || 0);\n    // Deduce TypedArray type and its length from `accessor` and `bufferView` data\n    const { ArrayType, length, componentByteSize, numberOfComponentsInElement } = getAccessorArrayTypeAndLength(gltfAccessor, bufferView);\n    // 'length' is a whole number of components of all elements in the buffer pointed by the accessor\n    // Multiplier to calculate the address of the element in the arrayBuffer\n    const elementByteSize = componentByteSize * numberOfComponentsInElement;\n    const elementAddressScale = bufferView.byteStride || elementByteSize;\n    // Creare an array of component's type where all components (not just elements) will reside\n    if (typeof bufferView.byteStride === 'undefined' || bufferView.byteStride === elementByteSize) {\n        // No iterleaving\n        const result = new ArrayType(arrayBuffer, byteOffset, length);\n        return result;\n    }\n    // Iterleaving\n    const result = new ArrayType(length);\n    for (let i = 0; i < gltfAccessor.count; i++) {\n        const values = new ArrayType(arrayBuffer, byteOffset + i * elementAddressScale, numberOfComponentsInElement);\n        result.set(values, i * numberOfComponentsInElement);\n    }\n    return result;\n}\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,6BAA6B,QAAQ,iBAAiB;AAC/D;AACA;AACA,OAAO,SAASC,0BAA0BA,CAACC,IAAI,EAAEC,OAAO,EAAEC,eAAe,EAAE;EACvE,MAAMC,UAAU,GAAGH,IAAI,CAACI,WAAW,CAACF,eAAe,CAAC;EACpDL,MAAM,CAACM,UAAU,CAAC;EAClB;EACA,MAAME,WAAW,GAAGF,UAAU,CAACG,MAAM;EACrC,MAAMC,QAAQ,GAAGN,OAAO,CAACI,WAAW,CAAC;EACrCR,MAAM,CAACU,QAAQ,CAAC;EAChB,MAAMC,UAAU,GAAG,CAACL,UAAU,CAACK,UAAU,IAAI,CAAC,IAAID,QAAQ,CAACC,UAAU;EACrE,OAAO,IAAIC,UAAU,CAACF,QAAQ,CAACG,WAAW,EAAEF,UAAU,EAAEL,UAAU,CAACQ,UAAU,CAAC;AAClF;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACZ,IAAI,EAAEC,OAAO,EAAEY,UAAU,EAAE;EACjE,MAAMC,KAAK,GAAGd,IAAI,CAACe,MAAM,CAACF,UAAU,CAAC;EACrC,MAAMX,eAAe,GAAGF,IAAI,CAACI,WAAW,CAACU,KAAK,CAACX,UAAU,CAAC;EAC1D,OAAOJ,0BAA0B,CAACC,IAAI,EAAEC,OAAO,EAAEC,eAAe,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASc,wBAAwBA,CAAChB,IAAI,EAAEC,OAAO,EAAEgB,QAAQ,EAAE;EAC9D,MAAMC,YAAY,GAAG,OAAOD,QAAQ,KAAK,QAAQ,GAAGjB,IAAI,CAACmB,SAAS,GAAGF,QAAQ,CAAC,GAAGA,QAAQ;EACzF,IAAI,CAACC,YAAY,EAAE;IACf,MAAM,IAAIE,KAAK,CAAC,oBAAoBC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC,EAAE,CAAC;EACnE;EACA,MAAMd,UAAU,GAAGH,IAAI,CAACI,WAAW,GAAGc,YAAY,CAACf,UAAU,IAAI,CAAC,CAAC;EACnE,IAAI,CAACA,UAAU,EAAE;IACb,MAAM,IAAIiB,KAAK,CAAC,oCAAoCjB,UAAU,EAAE,CAAC;EACrE;EACA;EACA,MAAM;IAAEO,WAAW;IAAEF,UAAU,EAAEe;EAAiB,CAAC,GAAGtB,OAAO,CAACE,UAAU,CAACG,MAAM,CAAC;EAChF;EACA,MAAME,UAAU,GAAG,CAACe,gBAAgB,IAAI,CAAC,KAAKL,YAAY,CAACV,UAAU,IAAI,CAAC,CAAC,IAAIL,UAAU,CAACK,UAAU,IAAI,CAAC,CAAC;EAC1G;EACA,MAAM;IAAEgB,SAAS;IAAEC,MAAM;IAAEC,iBAAiB;IAAEC;EAA4B,CAAC,GAAG7B,6BAA6B,CAACoB,YAAY,EAAEf,UAAU,CAAC;EACrI;EACA;EACA,MAAMyB,eAAe,GAAGF,iBAAiB,GAAGC,2BAA2B;EACvE,MAAME,mBAAmB,GAAG1B,UAAU,CAAC2B,UAAU,IAAIF,eAAe;EACpE;EACA,IAAI,OAAOzB,UAAU,CAAC2B,UAAU,KAAK,WAAW,IAAI3B,UAAU,CAAC2B,UAAU,KAAKF,eAAe,EAAE;IAC3F;IACA,MAAMG,MAAM,GAAG,IAAIP,SAAS,CAACd,WAAW,EAAEF,UAAU,EAAEiB,MAAM,CAAC;IAC7D,OAAOM,MAAM;EACjB;EACA;EACA,MAAMA,MAAM,GAAG,IAAIP,SAAS,CAACC,MAAM,CAAC;EACpC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,YAAY,CAACe,KAAK,EAAED,CAAC,EAAE,EAAE;IACzC,MAAME,MAAM,GAAG,IAAIV,SAAS,CAACd,WAAW,EAAEF,UAAU,GAAGwB,CAAC,GAAGH,mBAAmB,EAAEF,2BAA2B,CAAC;IAC5GI,MAAM,CAACI,GAAG,CAACD,MAAM,EAAEF,CAAC,GAAGL,2BAA2B,CAAC;EACvD;EACA,OAAOI,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}