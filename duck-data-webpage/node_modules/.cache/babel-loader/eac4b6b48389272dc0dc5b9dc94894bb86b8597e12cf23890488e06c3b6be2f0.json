{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { clamp } from '@math.gl/core';\nimport Controller from \"./controller.js\";\nimport ViewState from \"./view-state.js\";\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from \"../utils/assert.js\";\nimport LinearInterpolator from \"../transitions/linear-interpolator.js\";\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n/* Utils */\nexport class MapState extends ViewState {\n  constructor(options) {\n    const {\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing = 0,\n      /** The pitch of the viewport in degrees */\n      pitch = 0,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude = 1.5,\n      /** Viewport position */\n      position = [0, 0, 0],\n      /** Viewport constraints */\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n      /** Normalize viewport props to fit map height into viewport */\n      normalize = true\n    } = options;\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    }, {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    });\n    this.makeViewport = options.makeViewport;\n  }\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({\n    pos,\n    startPos\n  }) {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n    if (!startPanLngLat) {\n      return this;\n    }\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n    return this._getUpdatedState(newProps);\n  }\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }) {\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this.getState();\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {\n      startZoom,\n      startZoomLngLat\n    } = this.getState();\n    if (!startZoomLngLat) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n    let zoom = startZoom + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n    const zoomedViewport = this.makeViewport({\n      ...this.getViewportProps(),\n      zoom\n    });\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {\n      ...this.getViewportProps()\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    // Ensure pitch is within specified range\n    const {\n      maxPitch,\n      minPitch,\n      pitch\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n    // Normalize viewport props to fit map height into viewport\n    const {\n      normalize = true\n    } = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n    return props;\n  }\n  /* Private methods */\n  _zoomFromCenter(scale) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n  _panFromCenter(offset) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n  _getUpdatedState(newProps) {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n  _unproject(pos) {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n  _getNewRotation(pos, startPos, startPitch, startBearing) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n    const {\n      minPitch,\n      maxPitch\n    } = this.getViewportProps();\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\nexport default class MapController extends Controller {\n  constructor() {\n    super(...arguments);\n    this.ControllerState = MapState;\n    this.transition = {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: {\n          compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n          required: ['longitude', 'latitude', 'zoom']\n        }\n      })\n    };\n    this.dragMode = 'pan';\n  }\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n    super.setProps(props);\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(new this.ControllerState({\n        makeViewport: this.makeViewport,\n        ...props,\n        ...this.state\n      }));\n    }\n  }\n}","map":{"version":3,"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","LinearInterpolator","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","constructor","options","width","height","latitude","longitude","zoom","bearing","pitch","altitude","position","maxZoom","minZoom","maxPitch","minPitch","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","makeViewport","panStart","pos","_getUpdatedState","_unproject","pan","startPos","getState","viewport","getViewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","undefined","newRotation","_getNewRotation","rotateEnd","zoomStart","scale","Math","log2","zoomedViewport","zoomEnd","zoomIn","speed","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","props","abs","applyConstraints","Object","assign","offset","unproject","deltaX","deltaY","centerY","startY","deltaScaleX","deltaScaleY","MapController","ControllerState","transition","transitionDuration","transitionInterpolator","transitionProps","compare","required","dragMode","setProps","oldProps","dimensionChanged","updateViewport","state"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\controllers\\map-controller.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport type Viewport from '../viewports/viewport';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport type MapStateProps = {\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width: number;\n  /** The height of the viewport */\n  height: number;\n  /** The latitude at the center of the viewport */\n  latitude: number;\n  /** The longitude at the center of the viewport */\n  longitude: number;\n  /** The tile zoom level of the map. */\n  zoom: number;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize?: boolean;\n};\n\ntype MapStateInternal = {\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat?: [number, number];\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat?: [number, number];\n  /* Pointer position when rotation started */\n  startRotatePos?: [number, number];\n  /** Bearing when current perspective rotate operation started */\n  startBearing?: number;\n  /** Pitch when current perspective rotate operation started */\n  startPitch?: number;\n  /** Zoom when current zoom operation started */\n  startZoom?: number;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState<MapState, MapStateProps, MapStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: MapStateProps &\n      MapStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing = 0,\n      /** The pitch of the viewport in degrees */\n      pitch = 0,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude = 1.5,\n      /** Viewport position */\n      position = [0, 0, 0],\n\n      /** Viewport constraints */\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport */\n      normalize = true\n    } = options;\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super(\n      {\n        width,\n        height,\n        latitude,\n        longitude,\n        zoom,\n        bearing,\n        pitch,\n        altitude,\n        maxZoom,\n        minZoom,\n        maxPitch,\n        minPitch,\n        normalize,\n        position\n      },\n      {\n        startPanLngLat,\n        startZoomLngLat,\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): MapState {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): MapState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): MapState {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): MapState {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this.getState();\n\n    if (!startZoomLngLat) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {maxZoom, minZoom} = this.getViewportProps();\n    let zoom = (startZoom as number) + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): MapState {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed: number = 2): MapState {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed: number = 100): MapState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed: number = 100): MapState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed: number = 100): MapState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed: number = 100): MapState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState: MapState): MapStateProps {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): MapState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos?: [number, number]): [number, number] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(\n    pos: [number, number],\n    startPos: [number, number],\n    startPitch: number,\n    startBearing: number\n  ): {\n    pitch: number;\n    bearing: number;\n  } {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this.getViewportProps();\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller<MapState> {\n  ControllerState = MapState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n        required: ['longitude', 'latitude', 'zoom']\n      }\n    })\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps & MapStateProps) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...props,\n          ...this.state\n        })\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}