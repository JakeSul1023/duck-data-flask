{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { capitalize } from \"../utils/capitalize.js\";\nexport function generateGLSLForModule(module, options) {\n  return generateGLSLUniformDeclarations(module, options);\n}\nfunction generateGLSLUniformDeclarations(module, options) {\n  const glsl = [];\n  // => uniform UniformBlockName {\n  switch (options.uniforms) {\n    case 'scoped-interface-blocks':\n    case 'unscoped-interface-blocks':\n      glsl.push(`uniform ${capitalize(module.name)} {`);\n      break;\n    case 'uniforms':\n    // ignore\n  }\n  for (const [uniformName, uniformFormat] of Object.entries(module.uniformTypes || {})) {\n    const glslUniformType = getGLSLUniformType(uniformFormat);\n    switch (options.uniforms) {\n      case 'scoped-interface-blocks':\n        // => uniform UniformBlockName {\n        glsl.push(`  ${glslUniformType} ${uniformName};`);\n        break;\n      case 'unscoped-interface-blocks':\n        // => uniform UniformBlockName {\n        glsl.push(`  ${glslUniformType} ${module.name}_${uniformName};`);\n        break;\n      case 'uniforms':\n        glsl.push(`uniform ${glslUniformType} ${module.name}_${uniformName};`);\n    }\n  }\n  switch (options.uniforms) {\n    case 'scoped-interface-blocks':\n      glsl.push(`} ${module.name};`);\n      break;\n    case 'unscoped-interface-blocks':\n      glsl.push('};');\n      break;\n    case 'uniforms':\n    // ignore\n  }\n  // final new line\n  glsl.push('');\n  return glsl.join('\\n');\n}\n/** Map a luma.gl WebGPU style uniform type to GLSL */\nfunction getGLSLUniformType(uniformFormat) {\n  const UNIFORM_TYPE_TO_GLSL = {\n    f32: 'float',\n    i32: 'int',\n    u32: 'uint',\n    'vec2<f32>': 'vec2',\n    'vec3<f32>': 'vec3',\n    'vec4<f32>': 'vec4',\n    'vec2<i32>': 'ivec2',\n    'vec3<i32>': 'ivec3',\n    'vec4<i32>': 'ivec4',\n    'vec2<u32>': 'uvec2',\n    'vec3<u32>': 'uvec3',\n    'vec4<u32>': 'uvec4',\n    'mat2x2<f32>': 'mat2',\n    'mat2x3<f32>': 'mat2x3',\n    'mat2x4<f32>': 'mat2x4',\n    'mat3x2<f32>': 'mat3x2',\n    'mat3x3<f32>': 'mat3',\n    'mat3x4<f32>': 'mat3x4',\n    'mat4x2<f32>': 'mat4x2',\n    'mat4x3<f32>': 'mat4x3',\n    'mat4x4<f32>': 'mat4'\n  };\n  const glsl = UNIFORM_TYPE_TO_GLSL[uniformFormat];\n  return glsl;\n}","map":{"version":3,"names":["capitalize","generateGLSLForModule","module","options","generateGLSLUniformDeclarations","glsl","uniforms","push","name","uniformName","uniformFormat","Object","entries","uniformTypes","glslUniformType","getGLSLUniformType","join","UNIFORM_TYPE_TO_GLSL","f32","i32","u32"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\lib\\shader-generator\\glsl\\generate-glsl.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {UniformFormat} from '../../../types';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {capitalize} from '../utils/capitalize';\n\nexport type GLSLGenerationOptions = {\n  shaderLanguage: 'glsl';\n  uniforms: 'scoped-interface-blocks' | 'unscoped-interface-blocks' | 'uniforms';\n};\n\nexport function generateGLSLForModule(module: ShaderModule, options: GLSLGenerationOptions) {\n  return generateGLSLUniformDeclarations(module, options);\n}\n\nfunction generateGLSLUniformDeclarations(\n  module: ShaderModule,\n  options: GLSLGenerationOptions\n): string {\n  const glsl: string[] = [];\n\n  // => uniform UniformBlockName {\n  switch (options.uniforms) {\n    case 'scoped-interface-blocks':\n    case 'unscoped-interface-blocks':\n      glsl.push(`uniform ${capitalize(module.name)} {`);\n      break;\n    case 'uniforms':\n    // ignore\n  }\n\n  for (const [uniformName, uniformFormat] of Object.entries(module.uniformTypes || {})) {\n    const glslUniformType = getGLSLUniformType(uniformFormat);\n    switch (options.uniforms) {\n      case 'scoped-interface-blocks':\n        // => uniform UniformBlockName {\n        glsl.push(`  ${glslUniformType} ${uniformName};`);\n        break;\n      case 'unscoped-interface-blocks':\n        // => uniform UniformBlockName {\n        glsl.push(`  ${glslUniformType} ${module.name}_${uniformName};`);\n        break;\n      case 'uniforms':\n        glsl.push(`uniform ${glslUniformType} ${module.name}_${uniformName};`);\n    }\n  }\n\n  switch (options.uniforms) {\n    case 'scoped-interface-blocks':\n      glsl.push(`} ${module.name};`);\n      break;\n    case 'unscoped-interface-blocks':\n      glsl.push('};');\n      break;\n    case 'uniforms':\n    // ignore\n  }\n\n  // final new line\n  glsl.push('');\n\n  return glsl.join('\\n');\n}\n\n/** Map a luma.gl WebGPU style uniform type to GLSL */\nfunction getGLSLUniformType(uniformFormat: UniformFormat): string {\n  const UNIFORM_TYPE_TO_GLSL: Record<UniformFormat, string> = {\n    f32: 'float',\n    i32: 'int',\n    u32: 'uint',\n    'vec2<f32>': 'vec2',\n    'vec3<f32>': 'vec3',\n    'vec4<f32>': 'vec4',\n    'vec2<i32>': 'ivec2',\n    'vec3<i32>': 'ivec3',\n    'vec4<i32>': 'ivec4',\n    'vec2<u32>': 'uvec2',\n    'vec3<u32>': 'uvec3',\n    'vec4<u32>': 'uvec4',\n    'mat2x2<f32>': 'mat2',\n    'mat2x3<f32>': 'mat2x3',\n    'mat2x4<f32>': 'mat2x4',\n    'mat3x2<f32>': 'mat3x2',\n    'mat3x3<f32>': 'mat3',\n    'mat3x4<f32>': 'mat3x4',\n    'mat4x2<f32>': 'mat4x2',\n    'mat4x3<f32>': 'mat4x3',\n    'mat4x4<f32>': 'mat4'\n  };\n\n  const glsl = UNIFORM_TYPE_TO_GLSL[uniformFormat];\n  return glsl;\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,UAAU,QAAC;AAOnB,OAAM,SAAUC,qBAAqBA,CAACC,MAAoB,EAAEC,OAA8B;EACxF,OAAOC,+BAA+B,CAACF,MAAM,EAAEC,OAAO,CAAC;AACzD;AAEA,SAASC,+BAA+BA,CACtCF,MAAoB,EACpBC,OAA8B;EAE9B,MAAME,IAAI,GAAa,EAAE;EAEzB;EACA,QAAQF,OAAO,CAACG,QAAQ;IACtB,KAAK,yBAAyB;IAC9B,KAAK,2BAA2B;MAC9BD,IAAI,CAACE,IAAI,CAAC,WAAWP,UAAU,CAACE,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC;MACjD;IACF,KAAK,UAAU;IACf;EACF;EAEA,KAAK,MAAM,CAACC,WAAW,EAAEC,aAAa,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACV,MAAM,CAACW,YAAY,IAAI,EAAE,CAAC,EAAE;IACpF,MAAMC,eAAe,GAAGC,kBAAkB,CAACL,aAAa,CAAC;IACzD,QAAQP,OAAO,CAACG,QAAQ;MACtB,KAAK,yBAAyB;QAC5B;QACAD,IAAI,CAACE,IAAI,CAAC,KAAKO,eAAe,IAAIL,WAAW,GAAG,CAAC;QACjD;MACF,KAAK,2BAA2B;QAC9B;QACAJ,IAAI,CAACE,IAAI,CAAC,KAAKO,eAAe,IAAIZ,MAAM,CAACM,IAAI,IAAIC,WAAW,GAAG,CAAC;QAChE;MACF,KAAK,UAAU;QACbJ,IAAI,CAACE,IAAI,CAAC,WAAWO,eAAe,IAAIZ,MAAM,CAACM,IAAI,IAAIC,WAAW,GAAG,CAAC;IAC1E;EACF;EAEA,QAAQN,OAAO,CAACG,QAAQ;IACtB,KAAK,yBAAyB;MAC5BD,IAAI,CAACE,IAAI,CAAC,KAAKL,MAAM,CAACM,IAAI,GAAG,CAAC;MAC9B;IACF,KAAK,2BAA2B;MAC9BH,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC;MACf;IACF,KAAK,UAAU;IACf;EACF;EAEA;EACAF,IAAI,CAACE,IAAI,CAAC,EAAE,CAAC;EAEb,OAAOF,IAAI,CAACW,IAAI,CAAC,IAAI,CAAC;AACxB;AAEA;AACA,SAASD,kBAAkBA,CAACL,aAA4B;EACtD,MAAMO,oBAAoB,GAAkC;IAC1DC,GAAG,EAAE,OAAO;IACZC,GAAG,EAAE,KAAK;IACVC,GAAG,EAAE,MAAM;IACX,WAAW,EAAE,MAAM;IACnB,WAAW,EAAE,MAAM;IACnB,WAAW,EAAE,MAAM;IACnB,WAAW,EAAE,OAAO;IACpB,WAAW,EAAE,OAAO;IACpB,WAAW,EAAE,OAAO;IACpB,WAAW,EAAE,OAAO;IACpB,WAAW,EAAE,OAAO;IACpB,WAAW,EAAE,OAAO;IACpB,aAAa,EAAE,MAAM;IACrB,aAAa,EAAE,QAAQ;IACvB,aAAa,EAAE,QAAQ;IACvB,aAAa,EAAE,QAAQ;IACvB,aAAa,EAAE,MAAM;IACrB,aAAa,EAAE,QAAQ;IACvB,aAAa,EAAE,QAAQ;IACvB,aAAa,EAAE,QAAQ;IACvB,aAAa,EAAE;GAChB;EAED,MAAMf,IAAI,GAAGY,oBAAoB,CAACP,aAAa,CAAC;EAChD,OAAOL,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}