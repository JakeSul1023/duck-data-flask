{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport View from \"./view.js\";\nimport WebMercatorViewport from \"../viewports/web-mercator-viewport.js\";\nimport MapController from \"../controllers/map-controller.js\";\nclass MapView extends View {\n  constructor(props = {}) {\n    super(props);\n  }\n  getViewportType() {\n    return WebMercatorViewport;\n  }\n  get ControllerType() {\n    return MapController;\n  }\n}\nMapView.displayName = 'MapView';\nexport default MapView;","map":{"version":3,"names":["View","WebMercatorViewport","MapController","MapView","constructor","props","getViewportType","ControllerType","displayName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\views\\map-view.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport View, {CommonViewState, CommonViewProps} from './view';\nimport WebMercatorViewport from '../viewports/web-mercator-viewport';\nimport MapController from '../controllers/map-controller';\n\nimport type {NumericArray} from '../types/types';\n\nexport type MapViewState = {\n  /** Longitude of the map center */\n  longitude: number;\n  /** Latitude of the map center */\n  latitude: number;\n  /** Zoom level */\n  zoom: number;\n  /** Pitch (tilt) of the map, in degrees. `0` looks top down */\n  pitch?: number;\n  /** Bearing (rotation) of the map, in degrees. `0` is north up */\n  bearing?: number;\n  /** Min zoom, default `0` */\n  minZoom?: number;\n  /** Max zoom, default `20` */\n  maxZoom?: number;\n  /** Min pitch, default `0` */\n  minPitch?: number;\n  /** Max pitch, default `60` */\n  maxPitch?: number;\n  /** Viewport center offsets from lng, lat in meters */\n  position?: number[];\n  /** The near plane position */\n  nearZ?: number;\n  /** The far plane position */\n  farZ?: number;\n} & CommonViewState;\n\nexport type MapViewProps = {\n  /** Whether to render multiple copies of the map at low zoom levels. Default `false`. */\n  repeat?: boolean;\n  /** Scaler for the near plane, 1 unit equals to the height of the viewport. Default to `0.1`. Overwrites the `near` parameter. */\n  nearZMultiplier?: number;\n  /** Scaler for the far plane, 1 unit equals to the distance from the camera to the top edge of the screen. Default to `1.01`. Overwrites the `far` parameter. */\n  farZMultiplier?: number;\n  /** Custom projection matrix */\n  projectionMatrix?: NumericArray;\n  /** Field of view covered by the camera, in the perspective case. In degrees. If not supplied, will be calculated from `altitude`. */\n  fovy?: number;\n  /** Distance of the camera relative to viewport height. Default `1.5`. */\n  altitude?: number;\n  /** Whether to create an orthographic or perspective projection matrix. Default is `false` (perspective projection). */\n  orthographic?: boolean;\n} & CommonViewProps<MapViewState>;\n\nexport default class MapView extends View<MapViewState, MapViewProps> {\n  static displayName = 'MapView';\n\n  constructor(props: MapViewProps = {}) {\n    super(props);\n  }\n\n  getViewportType() {\n    return WebMercatorViewport;\n  }\n\n  get ControllerType() {\n    return MapController;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,IAAwC;AAC/C,OAAOC,mBAAmB;AAC1B,OAAOC,aAAa;AAgDpB,MAAqBC,OAAQ,SAAQH,IAAgC;EAGnEI,YAAYC,KAAA,GAAsB,EAAE;IAClC,KAAK,CAACA,KAAK,CAAC;EACd;EAEAC,eAAeA,CAAA;IACb,OAAOL,mBAAmB;EAC5B;EAEA,IAAIM,cAAcA,CAAA;IAChB,OAAOL,aAAa;EACtB;;AAZOC,OAAA,CAAAK,WAAW,GAAG,SAAS;eADXL,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}