{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { registerLoaders } from '@loaders.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport log from \"../utils/log.js\";\nimport { register } from \"../debug/index.js\";\nimport jsonLoader from \"../utils/json-loader.js\";\nfunction checkVersion() {\n  // Version detection using typescript plugin.\n  // Fallback for tests and SSR since global variable is defined by esbuild.\n  const version = typeof \"9.1.8\" !== 'undefined' ? \"9.1.8\" : globalThis.DECK_VERSION || 'untranspiled source';\n  // Note: a `deck` object not created by deck.gl may exist in the global scope\n  const existingVersion = globalThis.deck && globalThis.deck.VERSION;\n  if (existingVersion && existingVersion !== version) {\n    throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);\n  }\n  if (!existingVersion) {\n    log.log(1, `deck.gl ${version}`)();\n    globalThis.deck = {\n      ...globalThis.deck,\n      VERSION: version,\n      version,\n      log,\n      // experimental\n      _registerLoggers: register\n    };\n    registerLoaders([jsonLoader,\n    // @ts-expect-error non-standard Loader format\n    [ImageLoader, {\n      imagebitmap: {\n        premultiplyAlpha: 'none'\n      }\n    }]]);\n  }\n  return version;\n}\nexport const VERSION = checkVersion();","map":{"version":3,"names":["registerLoaders","ImageLoader","log","register","jsonLoader","checkVersion","version","globalThis","DECK_VERSION","existingVersion","deck","VERSION","Error","_registerLoggers","imagebitmap","premultiplyAlpha"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\lib\\init.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {registerLoaders} from '@loaders.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport log from '../utils/log';\nimport {register} from '../debug/index';\nimport jsonLoader from '../utils/json-loader';\n\ndeclare global {\n  const __VERSION__: string;\n}\n\nfunction checkVersion() {\n  // Version detection using typescript plugin.\n  // Fallback for tests and SSR since global variable is defined by esbuild.\n  const version =\n    typeof __VERSION__ !== 'undefined'\n      ? __VERSION__\n      : globalThis.DECK_VERSION || 'untranspiled source';\n\n  // Note: a `deck` object not created by deck.gl may exist in the global scope\n  const existingVersion = globalThis.deck && globalThis.deck.VERSION;\n\n  if (existingVersion && existingVersion !== version) {\n    throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);\n  }\n\n  if (!existingVersion) {\n    log.log(1, `deck.gl ${version}`)();\n\n    globalThis.deck = {\n      ...globalThis.deck,\n      VERSION: version,\n      version,\n      log,\n      // experimental\n      _registerLoggers: register\n    };\n\n    registerLoaders([\n      jsonLoader,\n      // @ts-expect-error non-standard Loader format\n      [ImageLoader, {imagebitmap: {premultiplyAlpha: 'none'}}]\n    ]);\n  }\n\n  return version;\n}\n\nexport const VERSION = checkVersion();\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,eAAe,QAAO,kBAAkB;AAChD,SAAQC,WAAW,QAAO,oBAAoB;AAE9C,OAAOC,GAAG;AACV,SAAQC,QAAQ,QAAC;AACjB,OAAOC,UAAU;AAMjB,SAASC,YAAYA,CAAA;EACnB;EACA;EACA,MAAMC,OAAO,GACX,cAAkB,KAAK,WAAW,GAC/B,UACCC,UAAU,CAACC,YAAY,IAAI,qBAAqB;EAEtD;EACA,MAAMC,eAAe,GAAGF,UAAU,CAACG,IAAI,IAAIH,UAAU,CAACG,IAAI,CAACC,OAAO;EAElE,IAAIF,eAAe,IAAIA,eAAe,KAAKH,OAAO,EAAE;IAClD,MAAM,IAAIM,KAAK,CAAC,yCAAyCH,eAAe,OAAOH,OAAO,EAAE,CAAC;EAC3F;EAEA,IAAI,CAACG,eAAe,EAAE;IACpBP,GAAG,CAACA,GAAG,CAAC,CAAC,EAAE,WAAWI,OAAO,EAAE,CAAC,EAAE;IAElCC,UAAU,CAACG,IAAI,GAAG;MAChB,GAAGH,UAAU,CAACG,IAAI;MAClBC,OAAO,EAAEL,OAAO;MAChBA,OAAO;MACPJ,GAAG;MACH;MACAW,gBAAgB,EAAEV;KACnB;IAEDH,eAAe,CAAC,CACdI,UAAU;IACV;IACA,CAACH,WAAW,EAAE;MAACa,WAAW,EAAE;QAACC,gBAAgB,EAAE;MAAM;IAAC,CAAC,CAAC,CACzD,CAAC;EACJ;EAEA,OAAOT,OAAO;AAChB;AAEA,OAAO,MAAMK,OAAO,GAAGN,YAAY,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}