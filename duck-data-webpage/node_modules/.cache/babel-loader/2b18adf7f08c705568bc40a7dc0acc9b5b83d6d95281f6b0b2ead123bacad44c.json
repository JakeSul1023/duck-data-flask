{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Deduce column types from values */\nexport function getDataTypeFromValue(value) {\n  let defaultNumberType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'float32';\n  if (value instanceof Date) {\n    return 'date-millisecond';\n  }\n  if (value instanceof Number) {\n    return defaultNumberType;\n  }\n  if (typeof value === 'string') {\n    return 'utf8';\n  }\n  if (value === null || value === 'undefined') {\n    return 'null';\n  }\n  return 'null';\n}\n/**\n * Deduces a simple data type \"descriptor from a typed array instance\n */\nexport function getDataTypeFromArray(array) {\n  let type = getDataTypeFromTypedArray(array);\n  if (type !== 'null') {\n    return {\n      type,\n      nullable: false\n    };\n  }\n  if (array.length > 0) {\n    type = getDataTypeFromValue(array[0]);\n    return {\n      type,\n      nullable: true\n    };\n  }\n  return {\n    type: 'null',\n    nullable: true\n  };\n}\n/**\n * Deduces a simple data type \"descriptor from a typed array instance\n */\nexport function getDataTypeFromTypedArray(array) {\n  switch (array.constructor) {\n    case Int8Array:\n      return 'int8';\n    case Uint8Array:\n    case Uint8ClampedArray:\n      return 'uint8';\n    case Int16Array:\n      return 'int16';\n    case Uint16Array:\n      return 'uint16';\n    case Int32Array:\n      return 'int32';\n    case Uint32Array:\n      return 'uint32';\n    case Float32Array:\n      return 'float32';\n    case Float64Array:\n      return 'float64';\n    default:\n      return 'null';\n  }\n}\nexport function getArrayTypeFromDataType(type, nullable) {\n  if (!nullable) {\n    switch (type) {\n      case 'int8':\n        return Int8Array;\n      case 'uint8':\n        return Uint8Array;\n      case 'int16':\n        return Int16Array;\n      case 'uint16':\n        return Uint16Array;\n      case 'int32':\n        return Int32Array;\n      case 'uint32':\n        return Uint32Array;\n      case 'float32':\n        return Float32Array;\n      case 'float64':\n        return Float64Array;\n      default:\n        break;\n    }\n  }\n  // if (typeof BigInt64Array !== 'undefined') {\n  //   TYPED_ARRAY_TO_TYPE.BigInt64Array = new Int64();\n  //   TYPED_ARRAY_TO_TYPE.BigUint64Array = new Uint64();\n  // }\n  return Array;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}