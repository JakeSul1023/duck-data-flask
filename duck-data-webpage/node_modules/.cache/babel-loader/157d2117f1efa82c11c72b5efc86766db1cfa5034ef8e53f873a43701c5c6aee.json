{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"preact/jsx-runtime\";\n// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* global document */\nimport { FlyToInterpolator, WebMercatorViewport, _GlobeViewport, _deepEqual as deepEqual, _applyStyles as applyStyles, _removeStyles as removeStyles } from '@deck.gl/core';\nimport { render } from 'preact';\nexport class CompassWidget {\n  constructor(props) {\n    this.id = 'compass';\n    this.placement = 'top-left';\n    this.viewId = null;\n    this.viewports = {};\n    this.id = props.id ?? this.id;\n    this.viewId = props.viewId ?? this.viewId;\n    this.placement = props.placement ?? this.placement;\n    this.props = {\n      ...props,\n      transitionDuration: props.transitionDuration ?? 200,\n      label: props.label ?? 'Reset Compass',\n      style: props.style ?? {}\n    };\n  }\n  setProps(props) {\n    this.placement = props.placement ?? this.placement;\n    this.viewId = props.viewId ?? this.viewId;\n    const oldProps = this.props;\n    const el = this.element;\n    if (el) {\n      if (oldProps.className !== props.className) {\n        if (oldProps.className) el.classList.remove(oldProps.className);\n        if (props.className) el.classList.add(props.className);\n      }\n      if (!deepEqual(oldProps.style, props.style, 1)) {\n        removeStyles(el, oldProps.style);\n        applyStyles(el, props.style);\n      }\n    }\n    Object.assign(this.props, props);\n    this.update();\n  }\n  onViewportChange(viewport) {\n    // no need to update if viewport is the same\n    if (!viewport.equals(this.viewports[viewport.id])) {\n      this.viewports[viewport.id] = viewport;\n      this.update();\n    }\n  }\n  onAdd(_ref) {\n    let {\n      deck\n    } = _ref;\n    const {\n      style,\n      className\n    } = this.props;\n    const element = document.createElement('div');\n    element.classList.add('deck-widget', 'deck-widget-compass');\n    if (className) element.classList.add(className);\n    applyStyles(element, style);\n    this.deck = deck;\n    this.element = element;\n    this.update();\n    return element;\n  }\n  getRotation(viewport) {\n    if (viewport instanceof WebMercatorViewport) {\n      return [-viewport.bearing, viewport.pitch];\n    } else if (viewport instanceof _GlobeViewport) {\n      return [0, Math.max(-80, Math.min(80, viewport.latitude))];\n    }\n    return [0, 0];\n  }\n  update() {\n    const viewId = this.viewId || Object.values(this.viewports)[0]?.id || 'default-view';\n    const viewport = this.viewports[viewId];\n    const [rz, rx] = this.getRotation(viewport);\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n    const ui = _jsx(\"div\", {\n      className: \"deck-widget-button\",\n      style: {\n        perspective: 100\n      },\n      children: _jsx(\"button\", {\n        type: \"button\",\n        onClick: () => {\n          for (const viewport of Object.values(this.viewports)) {\n            this.handleCompassReset(viewport);\n          }\n        },\n        title: this.props.label,\n        style: {\n          transform: `rotateX(${rx}deg)`\n        },\n        children: _jsx(\"svg\", {\n          fill: \"none\",\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: \"0 0 26 26\",\n          children: _jsxs(\"g\", {\n            transform: `rotate(${rz},13,13)`,\n            children: [_jsx(\"path\", {\n              d: \"M10 13.0001L12.9999 5L15.9997 13.0001H10Z\",\n              fill: \"var(--icon-compass-north-color, #F05C44)\"\n            }), _jsx(\"path\", {\n              d: \"M16.0002 12.9999L13.0004 21L10.0005 12.9999H16.0002Z\",\n              fill: \"var(--icon-compass-south-color, #C2C2CC)\"\n            })]\n          })\n        })\n      })\n    });\n    render(ui, element);\n  }\n  onRemove() {\n    this.deck = undefined;\n    this.element = undefined;\n  }\n  handleCompassReset(viewport) {\n    const viewId = this.viewId || viewport.id || 'default-view';\n    if (viewport instanceof WebMercatorViewport) {\n      const nextViewState = {\n        ...viewport,\n        bearing: 0,\n        ...(this.getRotation(viewport)[0] === 0 ? {\n          pitch: 0\n        } : {}),\n        transitionDuration: this.props.transitionDuration,\n        transitionInterpolator: new FlyToInterpolator()\n      };\n      // @ts-ignore Using private method temporary until there's a public one\n      this.deck._onViewStateChange({\n        viewId,\n        viewState: nextViewState,\n        interactionState: {}\n      });\n    }\n  }\n}\n//# sourceMappingURL=compass-widget.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}