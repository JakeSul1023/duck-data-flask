{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { LayerExtension } from '@deck.gl/core';\nimport { patternShaders } from \"./shader-module.js\";\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: {\n    type: 'image',\n    value: null,\n    async: true,\n    parameters: {\n      lodMaxClamp: 0\n    }\n  },\n  fillPatternMapping: {\n    type: 'object',\n    value: {},\n    async: true\n  },\n  fillPatternMask: true,\n  getFillPattern: {\n    type: 'accessor',\n    value: d => d.pattern\n  },\n  getFillPatternScale: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillPatternOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  }\n};\n/** Adds selected features to layers that render a \"fill\", such as the `PolygonLayer` and `ScatterplotLayer`. */\nclass FillStyleExtension extends LayerExtension {\n  constructor({\n    pattern = false\n  } = {}) {\n    super({\n      pattern\n    });\n  }\n  isEnabled(layer) {\n    return layer.getAttributeManager() !== null && !('pathTesselator' in layer.state);\n  }\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n  initializeState(context, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n    const attributeManager = this.getAttributeManager();\n    if (extension.opts.pattern) {\n      attributeManager.add({\n        fillPatternFrames: {\n          size: 4,\n          stepMode: 'dynamic',\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this)\n        },\n        fillPatternScales: {\n          size: 1,\n          stepMode: 'dynamic',\n          accessor: 'getFillPatternScale',\n          defaultValue: 1\n        },\n        fillPatternOffsets: {\n          size: 2,\n          stepMode: 'dynamic',\n          accessor: 'getFillPatternOffset'\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: this.context.device.createTexture({\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n  updateState({\n    props,\n    oldProps\n  }, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      this.getAttributeManager().invalidate('getFillPattern');\n    }\n  }\n  draw(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n    const {\n      fillPatternAtlas,\n      fillPatternEnabled,\n      fillPatternMask\n    } = this.props;\n    const fillProps = {\n      project: params.shaderModuleProps.project,\n      fillPatternEnabled,\n      fillPatternMask,\n      fillPatternTexture: fillPatternAtlas || this.state.emptyTexture\n    };\n    this.setShaderModuleProps({\n      fill: fillProps\n    });\n  }\n  finalizeState() {\n    const emptyTexture = this.state.emptyTexture;\n    emptyTexture?.delete();\n  }\n  getPatternFrame(name) {\n    const {\n      fillPatternMapping\n    } = this.getCurrentLayer().props;\n    const def = fillPatternMapping && fillPatternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\nFillStyleExtension.defaultProps = defaultProps;\nFillStyleExtension.extensionName = 'FillStyleExtension';\nexport default FillStyleExtension;\n//# sourceMappingURL=fill-style-extension.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}