{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { Matrix4 } from \"./matrix4.js\";\nimport { Vector3 } from \"./vector3.js\";\nimport { Euler } from \"./euler.js\";\nexport class Pose {\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position,\n    orientation\n  } = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      // @ts-expect-error\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    this.position.x = value;\n  }\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    this.position.y = value;\n  }\n  get z() {\n    return this.position.z;\n  }\n  set z(value) {\n    this.position.z = value;\n  }\n  get roll() {\n    return this.orientation.roll;\n  }\n  set roll(value) {\n    this.orientation.roll = value;\n  }\n  get pitch() {\n    return this.orientation.pitch;\n  }\n  set pitch(value) {\n    this.orientation.pitch = value;\n  }\n  get yaw() {\n    return this.orientation.yaw;\n  }\n  set yaw(value) {\n    this.orientation.yaw = value;\n  }\n  getPosition() {\n    return this.position;\n  }\n  getOrientation() {\n    return this.orientation;\n  }\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation);\n  }\n  getTransformationMatrix() {\n    // setup pre computations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n    // Create matrix\n    return new Matrix4().setRowMajor(cw * cp,\n    // 0,0\n    -sw * cr + cw * sp * sr,\n    // 0,1\n    sw * sr + cw * sp * cr,\n    // 0,2\n    this.x,\n    // 0,3\n    sw * cp,\n    // 1,0\n    cw * cr + sw * sp * sr,\n    // 1,1\n    -cw * sr + sw * sp * cr,\n    // 1,2\n    this.y,\n    // 1,3\n    -sp,\n    // 2,0\n    cp * sr,\n    // 2,1\n    cp * cr,\n    // 2,2\n    this.z,\n    // 2,3\n    0, 0, 0, 1);\n  }\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4().multiplyRight(this.getTransformationMatrix()).multiplyRight(pose.getTransformationMatrix().invert());\n  }\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4().multiplyRight(pose.getTransformationMatrix()).multiplyRight(this.getTransformationMatrix().invert());\n  }\n}","map":{"version":3,"names":["Matrix4","Vector3","Euler","Pose","constructor","x","y","z","roll","pitch","yaw","position","orientation","Array","isArray","length","RollPitchYaw","value","getPosition","getOrientation","equals","pose","exactEquals","getTransformationMatrix","sr","Math","sin","sp","sw","cr","cos","cp","cw","setRowMajor","getTransformationMatrixFromPose","multiplyRight","invert","getTransformationMatrixToPose"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\classes\\pose.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {Matrix4} from './matrix4';\nimport {Vector3} from './vector3';\nimport {Euler} from './euler';\nimport {NumericArray} from '@math.gl/types';\n\ntype PoseOptions = {\n  position?: Readonly<NumericArray>;\n  orientation?: Readonly<NumericArray>;\n  x?: number;\n  y?: number;\n  z?: number;\n  roll?: number;\n  pitch?: number;\n  yaw?: number;\n};\n\nexport class Pose {\n  readonly position: Vector3;\n  readonly orientation: Euler;\n\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position,\n    orientation\n  }: PoseOptions = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      // @ts-expect-error\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x(): number {\n    return this.position.x;\n  }\n\n  set x(value: number) {\n    this.position.x = value;\n  }\n\n  get y(): number {\n    return this.position.y;\n  }\n\n  set y(value: number) {\n    this.position.y = value;\n  }\n\n  get z(): number {\n    return this.position.z;\n  }\n\n  set z(value: number) {\n    this.position.z = value;\n  }\n\n  get roll(): number {\n    return this.orientation.roll;\n  }\n\n  set roll(value: number) {\n    this.orientation.roll = value;\n  }\n\n  get pitch(): number {\n    return this.orientation.pitch;\n  }\n  set pitch(value: number) {\n    this.orientation.pitch = value;\n  }\n\n  get yaw(): number {\n    return this.orientation.yaw;\n  }\n\n  set yaw(value: number) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition(): Vector3 {\n    return this.position;\n  }\n\n  getOrientation(): Euler {\n    return this.orientation;\n  }\n\n  equals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  getTransformationMatrix(): Matrix4 {\n    // setup pre computations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    // Create matrix\n    return new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n      0,\n      0,\n      0,\n      1\n    );\n  }\n\n  getTransformationMatrixFromPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}