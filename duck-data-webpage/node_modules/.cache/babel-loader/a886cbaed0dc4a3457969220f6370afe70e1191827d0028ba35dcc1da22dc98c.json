{"ast":null,"code":"// GLTF EXTENSION: EXT_TEXTURE_WEBP\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/EXT_TEXTURE_WEBP\n/* eslint-disable camelcase */\nimport { isImageFormatSupported } from '@loaders.gl/images';\nimport { GLTFScenegraph } from \"../api/gltf-scenegraph.js\";\nconst EXT_TEXTURE_WEBP = 'EXT_texture_webp';\n/** Extension name */\nexport const name = EXT_TEXTURE_WEBP;\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData, options) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n  if (!isImageFormatSupported('image/webp')) {\n    if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {\n      throw new Error(`gltf: Required extension ${EXT_TEXTURE_WEBP} not supported by browser`);\n    }\n    return;\n  }\n  const {\n    json\n  } = scenegraph;\n  for (const texture of json.textures || []) {\n    const extension = scenegraph.getObjectExtension(texture, EXT_TEXTURE_WEBP);\n    if (extension) {\n      // TODO - if multiple texture extensions are present which one wins?\n      texture.source = extension.source;\n    }\n    scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);\n  }\n  // Remove the top-level extension\n  scenegraph.removeExtension(EXT_TEXTURE_WEBP);\n}","map":{"version":3,"names":["isImageFormatSupported","GLTFScenegraph","EXT_TEXTURE_WEBP","name","preprocess","gltfData","options","scenegraph","getRequiredExtensions","includes","Error","json","texture","textures","extension","getObjectExtension","source","removeObjectExtension","removeExtension"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/gltf/dist/lib/extensions/EXT_texture_webp.js"],"sourcesContent":["// GLTF EXTENSION: EXT_TEXTURE_WEBP\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/EXT_TEXTURE_WEBP\n/* eslint-disable camelcase */\nimport { isImageFormatSupported } from '@loaders.gl/images';\nimport { GLTFScenegraph } from \"../api/gltf-scenegraph.js\";\nconst EXT_TEXTURE_WEBP = 'EXT_texture_webp';\n/** Extension name */\nexport const name = EXT_TEXTURE_WEBP;\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData, options) {\n    const scenegraph = new GLTFScenegraph(gltfData);\n    if (!isImageFormatSupported('image/webp')) {\n        if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {\n            throw new Error(`gltf: Required extension ${EXT_TEXTURE_WEBP} not supported by browser`);\n        }\n        return;\n    }\n    const { json } = scenegraph;\n    for (const texture of json.textures || []) {\n        const extension = scenegraph.getObjectExtension(texture, EXT_TEXTURE_WEBP);\n        if (extension) {\n            // TODO - if multiple texture extensions are present which one wins?\n            texture.source = extension.source;\n        }\n        scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);\n    }\n    // Remove the top-level extension\n    scenegraph.removeExtension(EXT_TEXTURE_WEBP);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,MAAMC,gBAAgB,GAAG,kBAAkB;AAC3C;AACA,OAAO,MAAMC,IAAI,GAAGD,gBAAgB;AACpC;AACA;AACA;AACA;AACA,OAAO,SAASE,UAAUA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAC1C,MAAMC,UAAU,GAAG,IAAIN,cAAc,CAACI,QAAQ,CAAC;EAC/C,IAAI,CAACL,sBAAsB,CAAC,YAAY,CAAC,EAAE;IACvC,IAAIO,UAAU,CAACC,qBAAqB,CAAC,CAAC,CAACC,QAAQ,CAACP,gBAAgB,CAAC,EAAE;MAC/D,MAAM,IAAIQ,KAAK,CAAC,4BAA4BR,gBAAgB,2BAA2B,CAAC;IAC5F;IACA;EACJ;EACA,MAAM;IAAES;EAAK,CAAC,GAAGJ,UAAU;EAC3B,KAAK,MAAMK,OAAO,IAAID,IAAI,CAACE,QAAQ,IAAI,EAAE,EAAE;IACvC,MAAMC,SAAS,GAAGP,UAAU,CAACQ,kBAAkB,CAACH,OAAO,EAAEV,gBAAgB,CAAC;IAC1E,IAAIY,SAAS,EAAE;MACX;MACAF,OAAO,CAACI,MAAM,GAAGF,SAAS,CAACE,MAAM;IACrC;IACAT,UAAU,CAACU,qBAAqB,CAACL,OAAO,EAAEV,gBAAgB,CAAC;EAC/D;EACA;EACAK,UAAU,CAACW,eAAe,CAAChB,gBAAgB,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}