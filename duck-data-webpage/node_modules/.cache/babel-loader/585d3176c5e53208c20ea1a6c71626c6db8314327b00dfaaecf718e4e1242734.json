{"ast":null,"code":"// luma.gl, MIT license\nimport { AsyncTexture } from '@luma.gl/engine';\nimport { loadImageTexture } from '@loaders.gl/textures';\n/** Loads textures for PBR environment */\nexport function loadPBREnvironment(device, props) {\n  const brdfLutTexture = new AsyncTexture(device, {\n    id: 'brdfLUT',\n    sampler: {\n      wrapS: 'clamp-to-edge',\n      wrapT: 'clamp-to-edge',\n      minFilter: 'linear',\n      maxFilter: 'linear'\n    },\n    // Texture accepts a promise that returns an image as data (Async Textures)\n    data: loadImageTexture(props.brdfLutUrl)\n  });\n  const diffuseEnvSampler = makeCube(device, {\n    id: 'DiffuseEnvSampler',\n    getTextureForFace: dir => loadImageTexture(props.getTexUrl('diffuse', dir, 0)),\n    sampler: {\n      wrapS: 'clamp-to-edge',\n      wrapT: 'clamp-to-edge',\n      minFilter: 'linear',\n      maxFilter: 'linear'\n    }\n  });\n  const specularEnvSampler = makeCube(device, {\n    id: 'SpecularEnvSampler',\n    getTextureForFace: dir => {\n      const imageArray = [];\n      for (let lod = 0; lod <= props.specularMipLevels - 1; lod++) {\n        imageArray.push(loadImageTexture(props.getTexUrl('specular', dir, lod)));\n      }\n      return imageArray;\n    },\n    sampler: {\n      wrapS: 'clamp-to-edge',\n      wrapT: 'clamp-to-edge',\n      minFilter: 'linear',\n      // [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n      maxFilter: 'linear'\n    }\n  });\n  return {\n    brdfLutTexture,\n    diffuseEnvSampler,\n    specularEnvSampler\n  };\n}\n// TODO put somewhere common\nconst FACES = [0, 1, 2, 3, 4, 5];\nfunction makeCube(device, {\n  id,\n  getTextureForFace,\n  sampler\n}) {\n  const data = {};\n  FACES.forEach(face => {\n    data[String(face)] = getTextureForFace(face);\n  });\n  return new AsyncTexture(device, {\n    id,\n    dimension: 'cube',\n    mipmaps: false,\n    sampler,\n    // @ts-expect-error\n    data\n  });\n}\n//# sourceMappingURL=pbr-environment.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}