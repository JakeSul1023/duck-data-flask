{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { getS2CellFromQuadKey, getS2QuadkeyFromCellId } from \"./s2-geometry.js\";\nimport { getS2CellIdFromToken } from \"../s2-token-functions.js\";\n/**\n * Return the S2Cell from the cell's hex token or the Hilbert quad key\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @returns {@link S2Cell}\n */\nexport function getS2Cell(tokenOrKey) {\n  const key = getS2QuadKey(tokenOrKey);\n  const s2cell = getS2CellFromQuadKey(key);\n  return s2cell;\n}\n/**\n * Get the underlying Hilbert quad key\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @returns Hilbert quad key\n */\nexport function getS2QuadKey(tokenOrKey) {\n  if (tokenOrKey.indexOf('/') > 0) {\n    // is Hilbert quad key\n    return tokenOrKey;\n  }\n  // is S2 cell's hex token\n  const id = getS2CellIdFromToken(tokenOrKey);\n  return getS2QuadkeyFromCellId(id);\n}","map":{"version":3,"names":["getS2CellFromQuadKey","getS2QuadkeyFromCellId","getS2CellIdFromToken","getS2Cell","tokenOrKey","key","getS2QuadKey","s2cell","indexOf","id"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/s2geometry/s2-cell-utils.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { getS2CellFromQuadKey, getS2QuadkeyFromCellId } from \"./s2-geometry.js\";\nimport { getS2CellIdFromToken } from \"../s2-token-functions.js\";\n/**\n * Return the S2Cell from the cell's hex token or the Hilbert quad key\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @returns {@link S2Cell}\n */\nexport function getS2Cell(tokenOrKey) {\n    const key = getS2QuadKey(tokenOrKey);\n    const s2cell = getS2CellFromQuadKey(key);\n    return s2cell;\n}\n/**\n * Get the underlying Hilbert quad key\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @returns Hilbert quad key\n */\nexport function getS2QuadKey(tokenOrKey) {\n    if (tokenOrKey.indexOf('/') > 0) {\n        // is Hilbert quad key\n        return tokenOrKey;\n    }\n    // is S2 cell's hex token\n    const id = getS2CellIdFromToken(tokenOrKey);\n    return getS2QuadkeyFromCellId(id);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,oBAAoB,EAAEC,sBAAsB,QAAQ,kBAAkB;AAC/E,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,UAAU,EAAE;EAClC,MAAMC,GAAG,GAAGC,YAAY,CAACF,UAAU,CAAC;EACpC,MAAMG,MAAM,GAAGP,oBAAoB,CAACK,GAAG,CAAC;EACxC,OAAOE,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASD,YAAYA,CAACF,UAAU,EAAE;EACrC,IAAIA,UAAU,CAACI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IAC7B;IACA,OAAOJ,UAAU;EACrB;EACA;EACA,MAAMK,EAAE,GAAGP,oBAAoB,CAACE,UAAU,CAAC;EAC3C,OAAOH,sBAAsB,CAACQ,EAAE,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}