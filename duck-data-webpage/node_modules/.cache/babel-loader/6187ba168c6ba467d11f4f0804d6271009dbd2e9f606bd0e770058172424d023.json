{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// @ts-nocheck\n/* eslint-disable */\nimport { SAXParser } from \"../../sax-ts/sax.js\";\n/**\n * StreamingXMLParser builds a JSON object using the events emitted by the SAX parser\n */\nexport class StreamingXMLParser {\n  parser;\n  result = (() => undefined)();\n  previousStates = [];\n  currentState = (() => Object.freeze({\n    container: [],\n    key: null\n  }))();\n  // jsonpath: JSONPath = new JSONPath();\n  constructor(options) {\n    this.reset();\n    this.parser = new SAXParser({\n      onready: () => {\n        this.previousStates.length = 0;\n        this.currentState.container.length = 0;\n      },\n      onopentag: _ref => {\n        let {\n          name,\n          attributes,\n          isSelfClosing\n        } = _ref;\n        this._openObject({});\n        if (typeof name !== 'undefined') {\n          this.parser.emit('onkey', name);\n        }\n      },\n      onkey: name => {\n        this.currentState.key = name;\n      },\n      onclosetag: () => {\n        this._closeObject();\n      },\n      onopenarray: () => {\n        this._openArray();\n      },\n      onclosearray: () => {\n        this._closeArray();\n      },\n      ontext: value => {\n        this._pushOrSet(value);\n      },\n      onerror: error => {\n        throw error;\n      },\n      onend: () => {\n        this.result = this.currentState.container.pop();\n      },\n      ...options\n    });\n  }\n  reset() {\n    this.result = undefined;\n    this.previousStates = [];\n    this.currentState = Object.freeze({\n      container: [],\n      key: null\n    });\n  }\n  write(chunk) {\n    this.parser.write(chunk);\n  }\n  close() {\n    this.parser.close();\n  }\n  // PRIVATE METHODS\n  _pushOrSet(value) {\n    const {\n      container,\n      key\n    } = this.currentState;\n    if (key !== null) {\n      container[key] = value;\n      this.currentState.key = null;\n    } else if (Array.isArray(container)) {\n      container.push(value);\n    } else if (container) {\n      // break for debug\n    }\n  }\n  _openArray() {\n    let newContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    // this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {\n      container: newContainer,\n      isArray: true,\n      key: null\n    };\n  }\n  _closeArray() {\n    // this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n  _openObject() {\n    let newContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {\n      container: newContainer,\n      isArray: false,\n      key: null\n    };\n  }\n  _closeObject() {\n    // this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}