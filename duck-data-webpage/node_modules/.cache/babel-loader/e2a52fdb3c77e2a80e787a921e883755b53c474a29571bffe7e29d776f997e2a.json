{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst THIRD_PI = Math.PI / 3;\nconst DIST_X = 2 * Math.sin(THIRD_PI);\nconst DIST_Y = 1.5;\nexport const HexbinVertices = Array.from({\n  length: 6\n}, (_, i) => {\n  const angle = i * THIRD_PI;\n  return [Math.sin(angle), -Math.cos(angle)];\n});\n/**\n * Adapted from d3-hexbin\n * Copyright Mike Bostock, 2012-2016\n   All rights reserved.\n * https://github.com/d3/d3-hexbin/blob/master/src/hexbin.js\n *\n * Returns the hexbin that a point (x,y) falls into\n */\nexport function pointToHexbin([px, py], radius) {\n  let pj = Math.round(py = py / radius / DIST_Y);\n  let pi = Math.round(px = px / radius / DIST_X - (pj & 1) / 2);\n  const py1 = py - pj;\n  if (Math.abs(py1) * 3 > 1) {\n    const px1 = px - pi;\n    const pi2 = pi + (px < pi ? -1 : 1) / 2;\n    const pj2 = pj + (py < pj ? -1 : 1);\n    const px2 = px - pi2;\n    const py2 = py - pj2;\n    if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) {\n      pi = pi2 + (pj & 1 ? 1 : -1) / 2;\n      pj = pj2;\n    }\n  }\n  return [pi, pj];\n}\nexport const pointToHexbinGLSL = /* glsl */`\nconst vec2 DIST = vec2(${DIST_X}, ${DIST_Y});\n\nivec2 pointToHexbin(vec2 p, float radius) {\n  p /= radius * DIST;\n  float pj = round(p.y);\n  float pjm2 = mod(pj, 2.0);\n  p.x -= pjm2 * 0.5;\n  float pi = round(p.x);\n  vec2 d1 = p - vec2(pi, pj);\n\n  if (abs(d1.y) * 3. > 1.) {\n    vec2 v2 = step(0.0, d1) - 0.5;\n    v2.y *= 2.0;\n    vec2 d2 = d1 - v2;\n    if (dot(d1, d1) > dot(d2, d2)) {\n      pi += v2.x + pjm2 - 0.5;\n      pj += v2.y;\n    }\n  }\n  return ivec2(pi, pj);\n}\n`;\nexport function getHexbinCentroid([i, j], radius) {\n  return [(i + (j & 1) / 2) * radius * DIST_X, j * radius * DIST_Y];\n}\nexport const getHexbinCentroidGLSL = `\nconst vec2 DIST = vec2(${DIST_X}, ${DIST_Y});\n\nvec2 hexbinCentroid(vec2 binId, float radius) {\n  binId.x += fract(binId.y * 0.5);\n  return binId * DIST * radius;\n}\n`;","map":{"version":3,"names":["THIRD_PI","Math","PI","DIST_X","sin","DIST_Y","HexbinVertices","Array","from","length","_","i","angle","cos","pointToHexbin","px","py","radius","pj","round","pi","py1","abs","px1","pi2","pj2","px2","py2","pointToHexbinGLSL","getHexbinCentroid","j","getHexbinCentroidGLSL"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\hexagon-layer\\hexbin.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst THIRD_PI = Math.PI / 3;\nconst DIST_X = 2 * Math.sin(THIRD_PI);\nconst DIST_Y = 1.5;\n\ntype HexBin = [i: number, j: number];\ntype Point = [x: number, y: number];\n\nexport const HexbinVertices = Array.from({length: 6}, (_, i) => {\n  const angle = i * THIRD_PI;\n  return [Math.sin(angle), -Math.cos(angle)];\n});\n\n/**\n * Adapted from d3-hexbin\n * Copyright Mike Bostock, 2012-2016\n   All rights reserved.\n * https://github.com/d3/d3-hexbin/blob/master/src/hexbin.js\n *\n * Returns the hexbin that a point (x,y) falls into\n */\nexport function pointToHexbin([px, py]: Point, radius: number): HexBin {\n  let pj = Math.round((py = py / radius / DIST_Y));\n  let pi = Math.round((px = px / radius / DIST_X - (pj & 1) / 2));\n  const py1 = py - pj;\n\n  if (Math.abs(py1) * 3 > 1) {\n    const px1 = px - pi;\n    const pi2 = pi + (px < pi ? -1 : 1) / 2;\n    const pj2 = pj + (py < pj ? -1 : 1);\n    const px2 = px - pi2;\n    const py2 = py - pj2;\n    if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) {\n      pi = pi2 + (pj & 1 ? 1 : -1) / 2;\n      pj = pj2;\n    }\n  }\n  return [pi, pj];\n}\n\nexport const pointToHexbinGLSL = /* glsl */ `\nconst vec2 DIST = vec2(${DIST_X}, ${DIST_Y});\n\nivec2 pointToHexbin(vec2 p, float radius) {\n  p /= radius * DIST;\n  float pj = round(p.y);\n  float pjm2 = mod(pj, 2.0);\n  p.x -= pjm2 * 0.5;\n  float pi = round(p.x);\n  vec2 d1 = p - vec2(pi, pj);\n\n  if (abs(d1.y) * 3. > 1.) {\n    vec2 v2 = step(0.0, d1) - 0.5;\n    v2.y *= 2.0;\n    vec2 d2 = d1 - v2;\n    if (dot(d1, d1) > dot(d2, d2)) {\n      pi += v2.x + pjm2 - 0.5;\n      pj += v2.y;\n    }\n  }\n  return ivec2(pi, pj);\n}\n`;\n\nexport function getHexbinCentroid([i, j]: HexBin, radius: number): Point {\n  return [(i + (j & 1) / 2) * radius * DIST_X, j * radius * DIST_Y];\n}\n\nexport const getHexbinCentroidGLSL = `\nconst vec2 DIST = vec2(${DIST_X}, ${DIST_Y});\n\nvec2 hexbinCentroid(vec2 binId, float radius) {\n  binId.x += fract(binId.y * 0.5);\n  return binId * DIST * radius;\n}\n`;\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;AAC5B,MAAMC,MAAM,GAAG,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACJ,QAAQ,CAAC;AACrC,MAAMK,MAAM,GAAG,GAAG;AAKlB,OAAO,MAAMC,cAAc,GAAGC,KAAK,CAACC,IAAI,CAAC;EAACC,MAAM,EAAE;AAAC,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAI;EAC7D,MAAMC,KAAK,GAAGD,CAAC,GAAGX,QAAQ;EAC1B,OAAO,CAACC,IAAI,CAACG,GAAG,CAACQ,KAAK,CAAC,EAAE,CAACX,IAAI,CAACY,GAAG,CAACD,KAAK,CAAC,CAAC;AAC5C,CAAC,CAAC;AAEF;;;;;;;;AAQA,OAAM,SAAUE,aAAaA,CAAC,CAACC,EAAE,EAAEC,EAAE,CAAQ,EAAEC,MAAc;EAC3D,IAAIC,EAAE,GAAGjB,IAAI,CAACkB,KAAK,CAAEH,EAAE,GAAGA,EAAE,GAAGC,MAAM,GAAGZ,MAAO,CAAC;EAChD,IAAIe,EAAE,GAAGnB,IAAI,CAACkB,KAAK,CAAEJ,EAAE,GAAGA,EAAE,GAAGE,MAAM,GAAGd,MAAM,GAAG,CAACe,EAAE,GAAG,CAAC,IAAI,CAAE,CAAC;EAC/D,MAAMG,GAAG,GAAGL,EAAE,GAAGE,EAAE;EAEnB,IAAIjB,IAAI,CAACqB,GAAG,CAACD,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACzB,MAAME,GAAG,GAAGR,EAAE,GAAGK,EAAE;IACnB,MAAMI,GAAG,GAAGJ,EAAE,GAAG,CAACL,EAAE,GAAGK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;IACvC,MAAMK,GAAG,GAAGP,EAAE,IAAIF,EAAE,GAAGE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACnC,MAAMQ,GAAG,GAAGX,EAAE,GAAGS,GAAG;IACpB,MAAMG,GAAG,GAAGX,EAAE,GAAGS,GAAG;IACpB,IAAIF,GAAG,GAAGA,GAAG,GAAGF,GAAG,GAAGA,GAAG,GAAGK,GAAG,GAAGA,GAAG,GAAGC,GAAG,GAAGA,GAAG,EAAE;MACjDP,EAAE,GAAGI,GAAG,GAAG,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;MAChCA,EAAE,GAAGO,GAAG;IACV;EACF;EACA,OAAO,CAACL,EAAE,EAAEF,EAAE,CAAC;AACjB;AAEA,OAAO,MAAMU,iBAAiB,GAAG,UAAW;yBACnBzB,MAAM,KAAKE,MAAM;;;;;;;;;;;;;;;;;;;;;CAqBzC;AAED,OAAM,SAAUwB,iBAAiBA,CAAC,CAAClB,CAAC,EAAEmB,CAAC,CAAS,EAAEb,MAAc;EAC9D,OAAO,CAAC,CAACN,CAAC,GAAG,CAACmB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAIb,MAAM,GAAGd,MAAM,EAAE2B,CAAC,GAAGb,MAAM,GAAGZ,MAAM,CAAC;AACnE;AAEA,OAAO,MAAM0B,qBAAqB,GAAG;yBACZ5B,MAAM,KAAKE,MAAM;;;;;;CAMzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}