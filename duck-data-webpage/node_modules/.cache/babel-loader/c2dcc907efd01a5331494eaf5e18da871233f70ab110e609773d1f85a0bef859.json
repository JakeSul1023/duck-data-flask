{"ast":null,"code":"/**\n * Counter to register pending tile headers for the particular frameNumber\n * Until all tiles are loaded we won't call `onTraversalEnd` callback\n */\nexport class I3SPendingTilesRegister {\n  frameNumberMap = new Map();\n  /**\n   * Register a new pending tile header for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   */\n  register(viewportId, frameNumber) {\n    const viewportMap = this.frameNumberMap.get(viewportId) || new Map();\n    const oldCount = viewportMap.get(frameNumber) || 0;\n    viewportMap.set(frameNumber, oldCount + 1);\n    this.frameNumberMap.set(viewportId, viewportMap);\n  }\n  /**\n   * Deregister a pending tile header for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   */\n  deregister(viewportId, frameNumber) {\n    const viewportMap = this.frameNumberMap.get(viewportId);\n    if (!viewportMap) {\n      return;\n    }\n    const oldCount = viewportMap.get(frameNumber) || 1;\n    viewportMap.set(frameNumber, oldCount - 1);\n  }\n  /**\n   * Check is there are no pending tile headers registered for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  isZero(viewportId, frameNumber) {\n    const count = this.frameNumberMap.get(viewportId)?.get(frameNumber) || 0;\n    return count === 0;\n  }\n}","map":{"version":3,"names":["I3SPendingTilesRegister","frameNumberMap","Map","register","viewportId","frameNumber","viewportMap","get","oldCount","set","deregister","isZero","count"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/tiles/dist/tileset/format-i3s/i3s-pending-tiles-register.js"],"sourcesContent":["/**\n * Counter to register pending tile headers for the particular frameNumber\n * Until all tiles are loaded we won't call `onTraversalEnd` callback\n */\nexport class I3SPendingTilesRegister {\n    frameNumberMap = new Map();\n    /**\n     * Register a new pending tile header for the particular frameNumber\n     * @param viewportId\n     * @param frameNumber\n     */\n    register(viewportId, frameNumber) {\n        const viewportMap = this.frameNumberMap.get(viewportId) || new Map();\n        const oldCount = viewportMap.get(frameNumber) || 0;\n        viewportMap.set(frameNumber, oldCount + 1);\n        this.frameNumberMap.set(viewportId, viewportMap);\n    }\n    /**\n     * Deregister a pending tile header for the particular frameNumber\n     * @param viewportId\n     * @param frameNumber\n     */\n    deregister(viewportId, frameNumber) {\n        const viewportMap = this.frameNumberMap.get(viewportId);\n        if (!viewportMap) {\n            return;\n        }\n        const oldCount = viewportMap.get(frameNumber) || 1;\n        viewportMap.set(frameNumber, oldCount - 1);\n    }\n    /**\n     * Check is there are no pending tile headers registered for the particular frameNumber\n     * @param viewportId\n     * @param frameNumber\n     * @returns\n     */\n    isZero(viewportId, frameNumber) {\n        const count = this.frameNumberMap.get(viewportId)?.get(frameNumber) || 0;\n        return count === 0;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,CAAC;EACjCC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC1B;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAACC,UAAU,EAAEC,WAAW,EAAE;IAC9B,MAAMC,WAAW,GAAG,IAAI,CAACL,cAAc,CAACM,GAAG,CAACH,UAAU,CAAC,IAAI,IAAIF,GAAG,CAAC,CAAC;IACpE,MAAMM,QAAQ,GAAGF,WAAW,CAACC,GAAG,CAACF,WAAW,CAAC,IAAI,CAAC;IAClDC,WAAW,CAACG,GAAG,CAACJ,WAAW,EAAEG,QAAQ,GAAG,CAAC,CAAC;IAC1C,IAAI,CAACP,cAAc,CAACQ,GAAG,CAACL,UAAU,EAAEE,WAAW,CAAC;EACpD;EACA;AACJ;AACA;AACA;AACA;EACII,UAAUA,CAACN,UAAU,EAAEC,WAAW,EAAE;IAChC,MAAMC,WAAW,GAAG,IAAI,CAACL,cAAc,CAACM,GAAG,CAACH,UAAU,CAAC;IACvD,IAAI,CAACE,WAAW,EAAE;MACd;IACJ;IACA,MAAME,QAAQ,GAAGF,WAAW,CAACC,GAAG,CAACF,WAAW,CAAC,IAAI,CAAC;IAClDC,WAAW,CAACG,GAAG,CAACJ,WAAW,EAAEG,QAAQ,GAAG,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,MAAMA,CAACP,UAAU,EAAEC,WAAW,EAAE;IAC5B,MAAMO,KAAK,GAAG,IAAI,CAACX,cAAc,CAACM,GAAG,CAACH,UAAU,CAAC,EAAEG,GAAG,CAACF,WAAW,CAAC,IAAI,CAAC;IACxE,OAAOO,KAAK,KAAK,CAAC;EACtB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}