{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { asciiToBase64, base64ToAscii } from \"./base64-utils.js\";\n/**\n * Encode a number (usually a digest from a hash function / cipher) as either hex or base64\n * Suitable for hashes like CRC32 where the number of required bits fit withing a JavaScript number.\n */\nexport function encodeNumber(number, encoding) {\n  switch (encoding) {\n    case 'hex':\n      return convertNumberToHex(number);\n    case 'base64':\n      return convertHexToBase64(convertNumberToHex(number));\n    default:\n      throw new Error(encoding);\n  }\n}\n/** Encode a hex string, aeither return hex or re-encode as base64 */\nexport function encodeHex(hex, encoding) {\n  switch (encoding) {\n    case 'hex':\n      return hex;\n    case 'base64':\n      return convertHexToBase64(hex);\n    default:\n      throw new Error(encoding);\n  }\n}\nexport function encodeBase64(base64, encoding) {\n  switch (encoding) {\n    case 'hex':\n      return convertBase64ToHex(base64);\n    case 'base64':\n      return base64;\n    default:\n      throw new Error(encoding);\n  }\n}\n/**\n * Convert a hexadecimal string to base64 encoded string representation\n */\nfunction convertHexToBase64(hexstring) {\n  // Add leading zero to keep even count of digits\n  // eg. f85d741 => 0f85d741\n  if (hexstring.length % 2 !== 0) {\n    hexstring = `0${hexstring}`;\n  }\n  const matches = hexstring.match(/\\w{2}/g) || [];\n  const string = matches.map(a => String.fromCharCode(parseInt(a, 16))).join('');\n  // TODO - define how to handle failures\n  return asciiToBase64(string) || '';\n}\n/**\n * Convert a base64 encoded string to hexadecimal encoded string representation\n */\nfunction convertBase64ToHex(base64String) {\n  return [...base64ToAscii(base64String)].map(c => c.charCodeAt(0).toString(16).padStart(2, '0')).join('');\n}\n/**\n * Converts a number to hex\n */\nfunction convertNumberToHex(cipher) {\n  const hexString = cipher.toString(16);\n  return hexString === '0' ? `0${hexString}` : hexString;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}