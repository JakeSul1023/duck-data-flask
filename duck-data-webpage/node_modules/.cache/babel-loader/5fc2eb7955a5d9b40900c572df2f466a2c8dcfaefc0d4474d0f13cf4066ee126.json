{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\n// import { log } from '../../utils/log';\nimport { uid } from \"../../utils/uid.js\";\nimport { formatCompilerLog } from \"../../adapter-utils/format-compiler-log.js\";\n/**\n * Immutable Shader object\n * In WebGPU the handle can be copied between threads\n */\nexport class Shader extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    language: 'auto',\n    stage: undefined,\n    source: '',\n    sourceMap: null,\n    entryPoint: 'main',\n    debugShaders: undefined\n  };\n  get [Symbol.toStringTag]() {\n    return 'Shader';\n  }\n  /** The stage of this shader */\n  stage;\n  /** The source code of this shader */\n  source;\n  /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */\n  compilationStatus = 'pending';\n  /** Create a new Shader instance */\n  constructor(device, props) {\n    props = {\n      ...props,\n      debugShaders: props.debugShaders || device.props.debugShaders || 'errors'\n    };\n    super(device, {\n      id: getShaderIdFromProps(props),\n      ...props\n    }, Shader.defaultProps);\n    this.stage = this.props.stage;\n    this.source = this.props.source;\n  }\n  /** Get compiler log synchronously (WebGL only) */\n  getCompilationInfoSync() {\n    return null;\n  }\n  /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */\n  getTranslatedSource() {\n    return null;\n  }\n  // PORTABLE HELPERS\n  /** In browser logging of errors */\n  async debugShader() {\n    const trigger = this.props.debugShaders;\n    switch (trigger) {\n      case 'never':\n        return;\n      case 'errors':\n        // On WebGL - Don't extract the log unless errors\n        if (this.compilationStatus === 'success') {\n          return;\n        }\n        break;\n      case 'warnings':\n      case 'always':\n        break;\n    }\n    const messages = await this.getCompilationInfo();\n    if (trigger === 'warnings' && messages?.length === 0) {\n      return;\n    }\n    this._displayShaderLog(messages);\n  }\n  // PRIVATE\n  /**\n   * In-browser UI logging of errors\n   * TODO - this HTML formatting code should not be in Device, should be pluggable\n   */\n  _displayShaderLog(messages) {\n    // Return if under Node.js / incomplete `document` polyfills\n    if (typeof document === 'undefined' || !document?.createElement) {\n      return;\n    }\n    const shaderName = getShaderName(this.source);\n    const shaderTitle = `${this.stage} ${shaderName}`;\n    let htmlLog = formatCompilerLog(messages, this.source, {\n      showSourceCode: 'all',\n      html: true\n    });\n    // Show translated source if available\n    const translatedSource = this.getTranslatedSource();\n    if (translatedSource) {\n      htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style=\"user-select:text;\"><pre>${translatedSource}</pre></code>`;\n    }\n    // Make it clickable so we can copy to clipboard\n    const button = document.createElement('Button');\n    button.innerHTML = `\n<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />\n<code style=\"user-select:text;\"><pre>\n${htmlLog}\n</pre></code>`;\n    button.style.top = '10px';\n    button.style.left = '10px';\n    button.style.position = 'absolute';\n    button.style.zIndex = '9999';\n    button.style.width = '100%';\n    button.style.textAlign = 'left';\n    document.body.appendChild(button);\n    const errors = document.getElementsByClassName('luma-compiler-log-error');\n    errors[0]?.scrollIntoView();\n    // TODO - add a small embedded copy button (instead of main button)\n    button.onclick = () => {\n      // const source = this.source.replaceAll('\\n', '<br />');\n      const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;\n      navigator.clipboard.writeText(dataURI);\n    };\n    // TODO - add a small embedded close button\n  }\n}\n// HELPERS\n/** Deduce an id, from shader source, or supplied id, or shader type */\nfunction getShaderIdFromProps(props) {\n  return getShaderName(props.source) || props.id || uid(`unnamed ${props.stage}-shader`);\n}\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\nfunction getShaderName(shader, defaultName = 'unnamed') {\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = SHADER_NAME_REGEXP.exec(shader);\n  return match ? match[1] : defaultName;\n}","map":{"version":3,"names":["Resource","uid","formatCompilerLog","Shader","defaultProps","language","stage","undefined","source","sourceMap","entryPoint","debugShaders","Symbol","toStringTag","compilationStatus","constructor","device","props","id","getShaderIdFromProps","getCompilationInfoSync","getTranslatedSource","debugShader","trigger","messages","getCompilationInfo","length","_displayShaderLog","document","createElement","shaderName","getShaderName","shaderTitle","htmlLog","showSourceCode","html","translatedSource","button","innerHTML","style","top","left","position","zIndex","width","textAlign","body","appendChild","errors","getElementsByClassName","scrollIntoView","onclick","dataURI","encodeURIComponent","navigator","clipboard","writeText","shader","defaultName","SHADER_NAME_REGEXP","match","exec"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\shader.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n// import { log } from '../../utils/log';\nimport {uid} from '../../utils/uid';\nimport {CompilerMessage} from '../types/compiler-message';\nimport {formatCompilerLog} from '../../adapter-utils/format-compiler-log';\n\n/**\n * Properties for a Shader\n */\nexport type ShaderProps = ResourceProps & {\n  /** Shader language (defaults to auto) */\n  language?: 'glsl' | 'wgsl' | 'auto';\n  /** Which stage are we compiling? Required for GLSL. Ignored for WGSL. */\n  stage?: 'vertex' | 'fragment' | 'compute';\n  /** Shader source code */\n  source: string;\n  /** Optional shader source map (WebGPU only) */\n  sourceMap?: string | null;\n  /** Optional shader entry point (WebGPU only) */\n  entryPoint?: string;\n  /** Show shader source in browser? Overrides the device.props.debugShaders setting */\n  debugShaders?: 'never' | 'errors' | 'warnings' | 'always';\n};\n\n/**\n * Immutable Shader object\n * In WebGPU the handle can be copied between threads\n */\nexport abstract class Shader extends Resource<ShaderProps> {\n  static override defaultProps: Required<ShaderProps> = {\n    ...Resource.defaultProps,\n    language: 'auto',\n    stage: undefined!,\n    source: '',\n    sourceMap: null,\n    entryPoint: 'main',\n    debugShaders: undefined!\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'Shader';\n  }\n\n  /** The stage of this shader */\n  readonly stage: 'vertex' | 'fragment' | 'compute';\n  /** The source code of this shader */\n  readonly source: string;\n  /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */\n  compilationStatus: 'pending' | 'success' | 'error' = 'pending';\n\n  /** Create a new Shader instance */\n  constructor(device: Device, props: ShaderProps) {\n    props = {...props, debugShaders: props.debugShaders || device.props.debugShaders || 'errors'};\n    super(device, {id: getShaderIdFromProps(props), ...props}, Shader.defaultProps);\n    this.stage = this.props.stage;\n    this.source = this.props.source;\n  }\n\n  abstract get asyncCompilationStatus(): Promise<'pending' | 'success' | 'error'>;\n\n  /** Get compiler log asynchronously */\n  abstract getCompilationInfo(): Promise<readonly CompilerMessage[]>;\n\n  /** Get compiler log synchronously (WebGL only) */\n  getCompilationInfoSync(): readonly CompilerMessage[] | null {\n    return null;\n  }\n\n  /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */\n  getTranslatedSource(): string | null {\n    return null;\n  }\n\n  // PORTABLE HELPERS\n\n  /** In browser logging of errors */\n  async debugShader(): Promise<void> {\n    const trigger = this.props.debugShaders;\n    switch (trigger) {\n      case 'never':\n        return;\n      case 'errors':\n        // On WebGL - Don't extract the log unless errors\n        if (this.compilationStatus === 'success') {\n          return;\n        }\n        break;\n      case 'warnings':\n      case 'always':\n        break;\n    }\n\n    const messages = await this.getCompilationInfo();\n    if (trigger === 'warnings' && messages?.length === 0) {\n      return;\n    }\n    this._displayShaderLog(messages);\n  }\n\n  // PRIVATE\n\n  /**\n   * In-browser UI logging of errors\n   * TODO - this HTML formatting code should not be in Device, should be pluggable\n   */\n  protected _displayShaderLog(messages: readonly CompilerMessage[]): void {\n    // Return if under Node.js / incomplete `document` polyfills\n    if (typeof document === 'undefined' || !document?.createElement) {\n      return;\n    }\n\n    const shaderName: string = getShaderName(this.source);\n    const shaderTitle: string = `${this.stage} ${shaderName}`;\n    let htmlLog = formatCompilerLog(messages, this.source, {showSourceCode: 'all', html: true});\n    // Show translated source if available\n    const translatedSource = this.getTranslatedSource();\n    if (translatedSource) {\n      htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style=\"user-select:text;\"><pre>${translatedSource}</pre></code>`;\n    }\n    // Make it clickable so we can copy to clipboard\n    const button = document.createElement('Button');\n    button.innerHTML = `\n<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />\n<code style=\"user-select:text;\"><pre>\n${htmlLog}\n</pre></code>`;\n    button.style.top = '10px';\n    button.style.left = '10px';\n    button.style.position = 'absolute';\n    button.style.zIndex = '9999';\n    button.style.width = '100%';\n    button.style.textAlign = 'left';\n    document.body.appendChild(button);\n\n    const errors = document.getElementsByClassName('luma-compiler-log-error');\n    errors[0]?.scrollIntoView();\n\n    // TODO - add a small embedded copy button (instead of main button)\n    button.onclick = () => {\n      // const source = this.source.replaceAll('\\n', '<br />');\n      const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;\n      navigator.clipboard.writeText(dataURI);\n    };\n\n    // TODO - add a small embedded close button\n  }\n}\n\n// HELPERS\n\n/** Deduce an id, from shader source, or supplied id, or shader type */\nfunction getShaderIdFromProps(props: ShaderProps): string {\n  return getShaderName(props.source) || props.id || uid(`unnamed ${props.stage}-shader`);\n}\n\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\nfunction getShaderName(shader: string, defaultName: string = 'unnamed'): string {\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = SHADER_NAME_REGEXP.exec(shader);\n  return match ? match[1] : defaultName;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}