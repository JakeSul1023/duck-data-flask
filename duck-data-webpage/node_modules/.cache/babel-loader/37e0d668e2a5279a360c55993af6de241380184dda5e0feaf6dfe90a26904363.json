{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Adapter, Device, log } from '@luma.gl/core';\nimport { WebGLDevice } from \"./webgl-device.js\";\nimport { enforceWebGL2 } from \"../context/polyfills/polyfill-webgl1-extensions.js\";\nimport { loadSpectorJS, DEFAULT_SPECTOR_PROPS } from \"../context/debug/spector.js\";\nimport { loadWebGLDeveloperTools } from \"../context/debug/webgl-developer-tools.js\";\nconst LOG_LEVEL = 1;\nexport class WebGLAdapter extends Adapter {\n  /** type of device's created by this adapter */\n  type = 'webgl';\n  constructor() {\n    super();\n    // Add spector default props to device default props, so that runtime settings are observed\n    Device.defaultProps = {\n      ...Device.defaultProps,\n      ...DEFAULT_SPECTOR_PROPS\n    };\n    // @ts-ignore DEPRECATED For backwards compatibility luma.registerDevices\n    WebGLDevice.adapter = this;\n  }\n  /** Check if WebGL 2 is available */\n  isSupported() {\n    return typeof WebGL2RenderingContext !== 'undefined';\n  }\n  /** Force any created WebGL contexts to be WebGL2 contexts, polyfilled with WebGL1 extensions */\n  enforceWebGL2(enable) {\n    enforceWebGL2(enable);\n  }\n  /**\n   * Get a device instance from a GL context\n   * Creates a WebGLCanvasContext against the contexts canvas\n   * @note autoResize will be disabled, assuming that whoever created the external context will be handling resizes.\n   * @param gl\n   * @returns\n   */\n  async attach(gl) {\n    if (gl instanceof WebGLDevice) {\n      return gl;\n    }\n    // @ts-expect-error\n    if (gl?.device instanceof Device) {\n      // @ts-expect-error\n      return gl.device;\n    }\n    if (!isWebGL(gl)) {\n      throw new Error('Invalid WebGL2RenderingContext');\n    }\n    // We create a new device using the provided WebGL context and its canvas\n    // Assume that whoever created the external context will be handling resizes.\n    return new WebGLDevice({\n      _handle: gl,\n      createCanvasContext: {\n        canvas: gl.canvas,\n        autoResize: false\n      }\n    });\n  }\n  async create(props = {}) {\n    log.groupCollapsed(LOG_LEVEL, 'WebGLDevice created')();\n    const promises = [];\n    // Load webgl and spector debug scripts from CDN if requested\n    if (props.debugWebGL || props.debug) {\n      promises.push(loadWebGLDeveloperTools());\n    }\n    if (props.debugSpectorJS) {\n      promises.push(loadSpectorJS(props));\n    }\n    // Wait for all the loads to settle before creating the context.\n    // The Device.create() functions are async, so in contrast to the constructor, we can `await` here.\n    const results = await Promise.allSettled(promises);\n    for (const result of results) {\n      if (result.status === 'rejected') {\n        log.error(`Failed to initialize debug libraries ${result.reason}`)();\n      }\n    }\n    const device = new WebGLDevice(props);\n    // Log some debug info about the newly created context\n    const message = `\\\n${device._reused ? 'Reusing' : 'Created'} device with WebGL2 ${device.debug ? 'debug ' : ''}context: \\\n${device.info.vendor}, ${device.info.renderer} for canvas: ${device.canvasContext.id}`;\n    log.probe(LOG_LEVEL, message)();\n    log.table(LOG_LEVEL, device.info)();\n    log.groupEnd(LOG_LEVEL)();\n    return device;\n  }\n}\n/** Check if supplied parameter is a WebGL2RenderingContext */\nfunction isWebGL(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // Look for debug contexts, headless gl etc\n  return Boolean(gl && Number.isFinite(gl._version));\n}\nexport const webgl2Adapter = new WebGLAdapter();","map":{"version":3,"names":["Adapter","Device","log","WebGLDevice","enforceWebGL2","loadSpectorJS","DEFAULT_SPECTOR_PROPS","loadWebGLDeveloperTools","LOG_LEVEL","WebGLAdapter","type","constructor","defaultProps","adapter","isSupported","WebGL2RenderingContext","enable","attach","gl","device","isWebGL","Error","_handle","createCanvasContext","canvas","autoResize","create","props","groupCollapsed","promises","debugWebGL","debug","push","debugSpectorJS","results","Promise","allSettled","result","status","error","reason","message","_reused","info","vendor","renderer","canvasContext","id","probe","table","groupEnd","Boolean","Number","isFinite","_version","webgl2Adapter"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\webgl-adapter.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Adapter, Device, DeviceProps, log} from '@luma.gl/core';\nimport {WebGLDevice} from './webgl-device';\nimport {enforceWebGL2} from '../context/polyfills/polyfill-webgl1-extensions';\nimport {loadSpectorJS, DEFAULT_SPECTOR_PROPS} from '../context/debug/spector';\nimport {loadWebGLDeveloperTools} from '../context/debug/webgl-developer-tools';\n\nconst LOG_LEVEL = 1;\n\nexport class WebGLAdapter extends Adapter {\n  /** type of device's created by this adapter */\n  readonly type: Device['type'] = 'webgl';\n\n  constructor() {\n    super();\n\n    // Add spector default props to device default props, so that runtime settings are observed\n    Device.defaultProps = {...Device.defaultProps, ...DEFAULT_SPECTOR_PROPS};\n\n    // @ts-ignore DEPRECATED For backwards compatibility luma.registerDevices\n    WebGLDevice.adapter = this;\n  }\n\n  /** Check if WebGL 2 is available */\n  isSupported(): boolean {\n    return typeof WebGL2RenderingContext !== 'undefined';\n  }\n\n  /** Force any created WebGL contexts to be WebGL2 contexts, polyfilled with WebGL1 extensions */\n  enforceWebGL2(enable: boolean): void {\n    enforceWebGL2(enable);\n  }\n\n  /**\n   * Get a device instance from a GL context\n   * Creates a WebGLCanvasContext against the contexts canvas\n   * @note autoResize will be disabled, assuming that whoever created the external context will be handling resizes.\n   * @param gl\n   * @returns\n   */\n  async attach(gl: Device | WebGL2RenderingContext): Promise<WebGLDevice> {\n    if (gl instanceof WebGLDevice) {\n      return gl;\n    }\n    // @ts-expect-error\n    if (gl?.device instanceof Device) {\n      // @ts-expect-error\n      return gl.device as WebGLDevice;\n    }\n    if (!isWebGL(gl)) {\n      throw new Error('Invalid WebGL2RenderingContext');\n    }\n\n    // We create a new device using the provided WebGL context and its canvas\n    // Assume that whoever created the external context will be handling resizes.\n    return new WebGLDevice({\n      _handle: gl,\n      createCanvasContext: {canvas: gl.canvas, autoResize: false}\n    });\n  }\n\n  async create(props: DeviceProps = {}): Promise<WebGLDevice> {\n    log.groupCollapsed(LOG_LEVEL, 'WebGLDevice created')();\n\n    const promises: Promise<unknown>[] = [];\n\n    // Load webgl and spector debug scripts from CDN if requested\n    if (props.debugWebGL || props.debug) {\n      promises.push(loadWebGLDeveloperTools());\n    }\n\n    if (props.debugSpectorJS) {\n      promises.push(loadSpectorJS(props));\n    }\n\n    // Wait for all the loads to settle before creating the context.\n    // The Device.create() functions are async, so in contrast to the constructor, we can `await` here.\n    const results = await Promise.allSettled(promises);\n    for (const result of results) {\n      if (result.status === 'rejected') {\n        log.error(`Failed to initialize debug libraries ${result.reason}`)();\n      }\n    }\n\n    const device = new WebGLDevice(props);\n\n    // Log some debug info about the newly created context\n    const message = `\\\n${device._reused ? 'Reusing' : 'Created'} device with WebGL2 ${device.debug ? 'debug ' : ''}context: \\\n${device.info.vendor}, ${device.info.renderer} for canvas: ${device.canvasContext.id}`;\n    log.probe(LOG_LEVEL, message)();\n    log.table(LOG_LEVEL, device.info)();\n\n    log.groupEnd(LOG_LEVEL)();\n\n    return device;\n  }\n}\n\n/** Check if supplied parameter is a WebGL2RenderingContext */\nfunction isWebGL(gl: any): gl is WebGL2RenderingContext {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // Look for debug contexts, headless gl etc\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport const webgl2Adapter = new WebGLAdapter();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}