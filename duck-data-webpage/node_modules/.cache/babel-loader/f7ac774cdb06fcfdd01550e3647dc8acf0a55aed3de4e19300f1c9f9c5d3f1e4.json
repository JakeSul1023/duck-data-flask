{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from '@luma.gl/core';\nimport { GL } from '@luma.gl/constants';\nimport { setGLParameters } from \"../../context/parameters/unified-parameter-api.js\";\n/* eslint-disable no-unused-expressions */ // For expression ? gl.enable() : gl.disable()\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withDeviceAndGLParameters(device, parameters, glParameters, func) {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions\n  const webglDevice = device;\n  webglDevice.pushState();\n  try {\n    setDeviceParameters(device, parameters);\n    setGLParameters(webglDevice.gl, glParameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n * @deprecated use withDeviceParameters instead\n */\nexport function withGLParameters(device, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions\n  const webglDevice = device;\n  webglDevice.pushState();\n  try {\n    setGLParameters(webglDevice.gl, parameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withDeviceParameters(device, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions'\n  const webglDevice = device;\n  webglDevice.pushState();\n  try {\n    setDeviceParameters(device, parameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n/** Set WebGPU Style Parameters */\nexport function setDeviceParameters(device, parameters) {\n  const webglDevice = device;\n  const {\n    gl\n  } = webglDevice;\n  // RASTERIZATION SETTINGS\n  if (parameters.cullMode) {\n    switch (parameters.cullMode) {\n      case 'none':\n        gl.disable(2884);\n        break;\n      case 'front':\n        gl.enable(2884);\n        gl.cullFace(1028);\n        break;\n      case 'back':\n        gl.enable(2884);\n        gl.cullFace(1029);\n        break;\n    }\n  }\n  if (parameters.frontFace) {\n    gl.frontFace(map('frontFace', parameters.frontFace, {\n      ccw: 2305,\n      cw: 2304\n    }));\n  }\n  if (parameters.unclippedDepth) {\n    if (device.features.has('depth-clip-control')) {\n      // EXT_depth_clamp\n      gl.enable(34383);\n    }\n  }\n  if (parameters.depthBias !== undefined) {\n    gl.enable(32823);\n    gl.polygonOffset(parameters.depthBias, parameters.depthBiasSlopeScale || 0);\n  }\n  // depthBiasSlopeScale: {\n  //   // Handled by depthBias\n  // },\n  // WEBGL EXTENSIONS\n  if (parameters.provokingVertex) {\n    if (device.features.has('provoking-vertex-webgl')) {\n      const extensions = webglDevice.getExtension('WEBGL_provoking_vertex');\n      const ext = extensions.WEBGL_provoking_vertex;\n      const vertex = map('provokingVertex', parameters.provokingVertex, {\n        first: 36429,\n        last: 36430\n      });\n      ext?.provokingVertexWEBGL(vertex);\n    }\n  }\n  if (parameters.polygonMode || parameters.polygonOffsetLine) {\n    if (device.features.has('polygon-mode-webgl')) {\n      if (parameters.polygonMode) {\n        const extensions = webglDevice.getExtension('WEBGL_polygon_mode');\n        const ext = extensions.WEBGL_polygon_mode;\n        const mode = map('polygonMode', parameters.polygonMode, {\n          fill: 6914,\n          line: 6913\n        });\n        ext?.polygonModeWEBGL(1028, mode);\n        ext?.polygonModeWEBGL(1029, mode);\n      }\n      if (parameters.polygonOffsetLine) {\n        gl.enable(10754);\n      }\n    }\n  }\n  if (device.features.has('shader-clip-cull-distance-webgl')) {\n    if (parameters.clipDistance0) {\n      gl.enable(12288);\n    }\n    if (parameters.clipDistance1) {\n      gl.enable(12289);\n    }\n    if (parameters.clipDistance2) {\n      gl.enable(12290);\n    }\n    if (parameters.clipDistance3) {\n      gl.enable(12291);\n    }\n    if (parameters.clipDistance4) {\n      gl.enable(12292);\n    }\n    if (parameters.clipDistance5) {\n      gl.enable(12293);\n    }\n    if (parameters.clipDistance6) {\n      gl.enable(12294);\n    }\n    if (parameters.clipDistance7) {\n      gl.enable(12295);\n    }\n  }\n  // DEPTH STENCIL\n  if (parameters.depthWriteEnabled !== undefined) {\n    gl.depthMask(mapBoolean('depthWriteEnabled', parameters.depthWriteEnabled));\n  }\n  if (parameters.depthCompare) {\n    parameters.depthCompare !== 'always' ? gl.enable(2929) : gl.disable(2929);\n    gl.depthFunc(convertCompareFunction('depthCompare', parameters.depthCompare));\n  }\n  if (parameters.stencilWriteMask) {\n    const mask = parameters.stencilWriteMask;\n    gl.stencilMaskSeparate(1028, mask);\n    gl.stencilMaskSeparate(1029, mask);\n  }\n  if (parameters.stencilReadMask) {\n    // stencilReadMask is handle inside stencil***Compare.\n    log.warn('stencilReadMask not supported under WebGL');\n  }\n  if (parameters.stencilCompare) {\n    const mask = parameters.stencilReadMask || 0xffffffff;\n    const glValue = convertCompareFunction('depthCompare', parameters.stencilCompare);\n    // TODO - ensure back doesn't overwrite\n    parameters.stencilCompare !== 'always' ? gl.enable(2960) : gl.disable(2960);\n    gl.stencilFuncSeparate(1028, glValue, 0, mask);\n    gl.stencilFuncSeparate(1029, glValue, 0, mask);\n  }\n  if (parameters.stencilPassOperation && parameters.stencilFailOperation && parameters.stencilDepthFailOperation) {\n    const dppass = convertStencilOperation('stencilPassOperation', parameters.stencilPassOperation);\n    const sfail = convertStencilOperation('stencilFailOperation', parameters.stencilFailOperation);\n    const dpfail = convertStencilOperation('stencilDepthFailOperation', parameters.stencilDepthFailOperation);\n    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(1029, sfail, dpfail, dppass);\n  }\n  // stencilDepthFailOperation() {\n  //   // handled by stencilPassOperation\n  // },\n  // stencilFailOperation() {\n  //   // handled by stencilPassOperation\n  // },\n  // COLOR STATE\n  switch (parameters.blend) {\n    case true:\n      gl.enable(3042);\n      break;\n    case false:\n      gl.disable(3042);\n      break;\n    default:\n    // leave WebGL blend state unchanged if `parameters.blend` is not set\n  }\n  if (parameters.blendColorOperation || parameters.blendAlphaOperation) {\n    const colorEquation = convertBlendOperationToEquation('blendColorOperation', parameters.blendColorOperation || 'add');\n    const alphaEquation = convertBlendOperationToEquation('blendAlphaOperation', parameters.blendAlphaOperation || 'add');\n    gl.blendEquationSeparate(colorEquation, alphaEquation);\n    const colorSrcFactor = convertBlendFactorToFunction('blendColorSrcFactor', parameters.blendColorSrcFactor || 'one');\n    const colorDstFactor = convertBlendFactorToFunction('blendColorDstFactor', parameters.blendColorDstFactor || 'zero');\n    const alphaSrcFactor = convertBlendFactorToFunction('blendAlphaSrcFactor', parameters.blendAlphaSrcFactor || 'one');\n    const alphaDstFactor = convertBlendFactorToFunction('blendAlphaDstFactor', parameters.blendAlphaDstFactor || 'zero');\n    gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);\n  }\n}\n/*\n      rasterizationState: {\n        cullMode: \"back\",\n      },\n\n      depthStencilState: {\n        depthWriteEnabled: true,\n        depthCompare: \"less\",\n        format: \"depth24plus-stencil8\",\n      },\n\n      colorStates: [\n        {\n          format: \"bgra8unorm\",\n          // colorBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;\n          // colorBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;\n          // alphaBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;\n          // alphaBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;\n        },\n      ],\n    });\n*/\nexport function convertCompareFunction(parameter, value) {\n  return map(parameter, value, {\n    never: 512,\n    less: 513,\n    equal: 514,\n    'less-equal': 515,\n    greater: 516,\n    'not-equal': 517,\n    'greater-equal': 518,\n    always: 519\n  });\n}\nexport function convertToCompareFunction(parameter, value) {\n  return map(parameter, value, {\n    [512]: 'never',\n    [513]: 'less',\n    [514]: 'equal',\n    [515]: 'less-equal',\n    [516]: 'greater',\n    [517]: 'not-equal',\n    [518]: 'greater-equal',\n    [519]: 'always'\n  });\n}\nfunction convertStencilOperation(parameter, value) {\n  return map(parameter, value, {\n    keep: 7680,\n    zero: 0,\n    replace: 7681,\n    invert: 5386,\n    'increment-clamp': 7682,\n    'decrement-clamp': 7683,\n    'increment-wrap': 34055,\n    'decrement-wrap': 34056\n  });\n}\nfunction convertBlendOperationToEquation(parameter, value) {\n  return map(parameter, value, {\n    add: 32774,\n    subtract: 32778,\n    'reverse-subtract': 32779,\n    min: 32775,\n    max: 32776\n  });\n}\nfunction convertBlendFactorToFunction(parameter, value) {\n  return map(parameter, value, {\n    one: 1,\n    zero: 0,\n    'src-color': 768,\n    'one-minus-src-color': 769,\n    'dst-color': 774,\n    'one-minus-dst-color': 775,\n    'src-alpha': 770,\n    'one-minus-src-alpha': 771,\n    'dst-alpha': 772,\n    'one-minus-dst-alpha': 773,\n    'src-alpha-saturated': 776,\n    'constant-color': 32769,\n    'one-minus-constant-color': 32770,\n    'constant-alpha': 32771,\n    'one-minus-constant-alpha': 32772\n  });\n}\nfunction message(parameter, value) {\n  return `Illegal parameter ${value} for ${parameter}`;\n}\nfunction map(parameter, value, valueMap) {\n  if (!(value in valueMap)) {\n    throw new Error(message(parameter, value));\n  }\n  return valueMap[value];\n}\nfunction mapBoolean(parameter, value) {\n  return value;\n}\n/** Returns true if given object is empty, false otherwise. */\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // @ts-ignore key is unused\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}","map":{"version":3,"names":["log","GL","setGLParameters","withDeviceAndGLParameters","device","parameters","glParameters","func","isObjectEmpty","webglDevice","pushState","setDeviceParameters","gl","popState","withGLParameters","withDeviceParameters","cullMode","disable","enable","cullFace","frontFace","map","ccw","cw","unclippedDepth","features","has","depthBias","undefined","polygonOffset","depthBiasSlopeScale","provokingVertex","extensions","getExtension","ext","WEBGL_provoking_vertex","vertex","first","last","provokingVertexWEBGL","polygonMode","polygonOffsetLine","WEBGL_polygon_mode","mode","fill","line","polygonModeWEBGL","clipDistance0","clipDistance1","clipDistance2","clipDistance3","clipDistance4","clipDistance5","clipDistance6","clipDistance7","depthWriteEnabled","depthMask","mapBoolean","depthCompare","depthFunc","convertCompareFunction","stencilWriteMask","mask","stencilMaskSeparate","stencilReadMask","warn","stencilCompare","glValue","stencilFuncSeparate","stencilPassOperation","stencilFailOperation","stencilDepthFailOperation","dppass","convertStencilOperation","sfail","dpfail","stencilOpSeparate","blend","blendColorOperation","blendAlphaOperation","colorEquation","convertBlendOperationToEquation","alphaEquation","blendEquationSeparate","colorSrcFactor","convertBlendFactorToFunction","blendColorSrcFactor","colorDstFactor","blendColorDstFactor","alphaSrcFactor","blendAlphaSrcFactor","alphaDstFactor","blendAlphaDstFactor","blendFuncSeparate","parameter","value","never","less","equal","greater","always","convertToCompareFunction","keep","zero","replace","invert","add","subtract","min","max","one","message","valueMap","Error","obj","isEmpty","key"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\webgl\\src\\adapter\\converters\\device-parameters.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CompareFunction, StencilOperation, BlendOperation, BlendFactor} from '@luma.gl/core';\nimport {Device, log, Parameters, PolygonMode, ProvokingVertex} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport type {\n  GLBlendEquation,\n  GLBlendFunction,\n  GLFunction,\n  GLParameters,\n  GLPolygonMode,\n  GLProvokingVertex,\n  GLStencilOp\n} from '@luma.gl/constants';\nimport {setGLParameters} from '../../context/parameters/unified-parameter-api';\nimport {WebGLDevice} from '../webgl-device';\n\n/* eslint-disable no-unused-expressions */ // For expression ? gl.enable() : gl.disable()\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withDeviceAndGLParameters<T = unknown>(\n  device: Device,\n  parameters: Parameters,\n  glParameters: GLParameters,\n  func: (_?: Device) => T\n): T {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions\n  const webglDevice = device as WebGLDevice;\n  webglDevice.pushState();\n  try {\n    setDeviceParameters(device, parameters);\n    setGLParameters(webglDevice.gl, glParameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n * @deprecated use withDeviceParameters instead\n */\nexport function withGLParameters<T = unknown>(\n  device: Device,\n  parameters: GLParameters,\n  func: (_?: Device) => T\n): T {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions\n  const webglDevice = device as WebGLDevice;\n  webglDevice.pushState();\n  try {\n    setGLParameters(webglDevice.gl, parameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withDeviceParameters<T = unknown>(\n  device: Device,\n  parameters: Parameters,\n  func: (_?: Device) => T\n): T {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions'\n  const webglDevice = device as WebGLDevice;\n  webglDevice.pushState();\n  try {\n    setDeviceParameters(device, parameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n\n/** Set WebGPU Style Parameters */\nexport function setDeviceParameters(device: Device, parameters: Parameters) {\n  const webglDevice = device as WebGLDevice;\n  const {gl} = webglDevice;\n\n  // RASTERIZATION SETTINGS\n  if (parameters.cullMode) {\n    switch (parameters.cullMode) {\n      case 'none':\n        gl.disable(GL.CULL_FACE);\n        break;\n      case 'front':\n        gl.enable(GL.CULL_FACE);\n        gl.cullFace(GL.FRONT);\n        break;\n      case 'back':\n        gl.enable(GL.CULL_FACE);\n        gl.cullFace(GL.BACK);\n        break;\n    }\n  }\n\n  if (parameters.frontFace) {\n    gl.frontFace(\n      map('frontFace', parameters.frontFace, {\n        ccw: GL.CCW,\n        cw: GL.CW\n      })\n    );\n  }\n\n  if (parameters.unclippedDepth) {\n    if (device.features.has('depth-clip-control')) {\n      // EXT_depth_clamp\n      gl.enable(GL.DEPTH_CLAMP_EXT);\n    }\n  }\n\n  if (parameters.depthBias !== undefined) {\n    gl.enable(GL.POLYGON_OFFSET_FILL);\n    gl.polygonOffset(parameters.depthBias, parameters.depthBiasSlopeScale || 0);\n  }\n\n  // depthBiasSlopeScale: {\n  //   // Handled by depthBias\n  // },\n\n  // WEBGL EXTENSIONS\n\n  if (parameters.provokingVertex) {\n    if (device.features.has('provoking-vertex-webgl')) {\n      const extensions = webglDevice.getExtension('WEBGL_provoking_vertex');\n      const ext = extensions.WEBGL_provoking_vertex;\n\n      const vertex = map<ProvokingVertex, GLProvokingVertex>(\n        'provokingVertex',\n        parameters.provokingVertex,\n        {\n          first: GL.FIRST_VERTEX_CONVENTION_WEBGL,\n          last: GL.LAST_VERTEX_CONVENTION_WEBGL\n        }\n      );\n      ext?.provokingVertexWEBGL(vertex);\n    }\n  }\n\n  if (parameters.polygonMode || parameters.polygonOffsetLine) {\n    if (device.features.has('polygon-mode-webgl')) {\n      if (parameters.polygonMode) {\n        const extensions = webglDevice.getExtension('WEBGL_polygon_mode');\n        const ext = extensions.WEBGL_polygon_mode;\n        const mode = map<PolygonMode, GLPolygonMode>('polygonMode', parameters.polygonMode, {\n          fill: GL.FILL_WEBGL,\n          line: GL.LINE_WEBGL\n        });\n        ext?.polygonModeWEBGL(GL.FRONT, mode);\n        ext?.polygonModeWEBGL(GL.BACK, mode);\n      }\n\n      if (parameters.polygonOffsetLine) {\n        gl.enable(GL.POLYGON_OFFSET_LINE_WEBGL);\n      }\n    }\n  }\n\n  if (device.features.has('shader-clip-cull-distance-webgl')) {\n    if (parameters.clipDistance0) {\n      gl.enable(GL.CLIP_DISTANCE0_WEBGL);\n    }\n    if (parameters.clipDistance1) {\n      gl.enable(GL.CLIP_DISTANCE1_WEBGL);\n    }\n    if (parameters.clipDistance2) {\n      gl.enable(GL.CLIP_DISTANCE2_WEBGL);\n    }\n    if (parameters.clipDistance3) {\n      gl.enable(GL.CLIP_DISTANCE3_WEBGL);\n    }\n    if (parameters.clipDistance4) {\n      gl.enable(GL.CLIP_DISTANCE4_WEBGL);\n    }\n    if (parameters.clipDistance5) {\n      gl.enable(GL.CLIP_DISTANCE5_WEBGL);\n    }\n    if (parameters.clipDistance6) {\n      gl.enable(GL.CLIP_DISTANCE6_WEBGL);\n    }\n    if (parameters.clipDistance7) {\n      gl.enable(GL.CLIP_DISTANCE7_WEBGL);\n    }\n  }\n\n  // DEPTH STENCIL\n\n  if (parameters.depthWriteEnabled !== undefined) {\n    gl.depthMask(mapBoolean('depthWriteEnabled', parameters.depthWriteEnabled));\n  }\n\n  if (parameters.depthCompare) {\n    parameters.depthCompare !== 'always' ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST);\n    gl.depthFunc(convertCompareFunction('depthCompare', parameters.depthCompare));\n  }\n\n  if (parameters.stencilWriteMask) {\n    const mask = parameters.stencilWriteMask;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, mask);\n  }\n\n  if (parameters.stencilReadMask) {\n    // stencilReadMask is handle inside stencil***Compare.\n    log.warn('stencilReadMask not supported under WebGL');\n  }\n\n  if (parameters.stencilCompare) {\n    const mask = parameters.stencilReadMask || 0xffffffff;\n    const glValue = convertCompareFunction('depthCompare', parameters.stencilCompare);\n    // TODO - ensure back doesn't overwrite\n    parameters.stencilCompare !== 'always'\n      ? gl.enable(GL.STENCIL_TEST)\n      : gl.disable(GL.STENCIL_TEST);\n    gl.stencilFuncSeparate(GL.FRONT, glValue, 0, mask);\n    gl.stencilFuncSeparate(GL.BACK, glValue, 0, mask);\n  }\n\n  if (\n    parameters.stencilPassOperation &&\n    parameters.stencilFailOperation &&\n    parameters.stencilDepthFailOperation\n  ) {\n    const dppass = convertStencilOperation('stencilPassOperation', parameters.stencilPassOperation);\n    const sfail = convertStencilOperation('stencilFailOperation', parameters.stencilFailOperation);\n    const dpfail = convertStencilOperation(\n      'stencilDepthFailOperation',\n      parameters.stencilDepthFailOperation\n    );\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, sfail, dpfail, dppass);\n  }\n\n  // stencilDepthFailOperation() {\n  //   // handled by stencilPassOperation\n  // },\n\n  // stencilFailOperation() {\n  //   // handled by stencilPassOperation\n  // },\n\n  // COLOR STATE\n  switch (parameters.blend) {\n    case true:\n      gl.enable(GL.BLEND);\n      break;\n    case false:\n      gl.disable(GL.BLEND);\n      break;\n    default:\n    // leave WebGL blend state unchanged if `parameters.blend` is not set\n  }\n\n  if (parameters.blendColorOperation || parameters.blendAlphaOperation) {\n    const colorEquation = convertBlendOperationToEquation(\n      'blendColorOperation',\n      parameters.blendColorOperation || 'add'\n    );\n    const alphaEquation = convertBlendOperationToEquation(\n      'blendAlphaOperation',\n      parameters.blendAlphaOperation || 'add'\n    );\n    gl.blendEquationSeparate(colorEquation, alphaEquation);\n\n    const colorSrcFactor = convertBlendFactorToFunction(\n      'blendColorSrcFactor',\n      parameters.blendColorSrcFactor || 'one'\n    );\n    const colorDstFactor = convertBlendFactorToFunction(\n      'blendColorDstFactor',\n      parameters.blendColorDstFactor || 'zero'\n    );\n    const alphaSrcFactor = convertBlendFactorToFunction(\n      'blendAlphaSrcFactor',\n      parameters.blendAlphaSrcFactor || 'one'\n    );\n    const alphaDstFactor = convertBlendFactorToFunction(\n      'blendAlphaDstFactor',\n      parameters.blendAlphaDstFactor || 'zero'\n    );\n    gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);\n  }\n}\n\n/*\n      rasterizationState: {\n        cullMode: \"back\",\n      },\n\n      depthStencilState: {\n        depthWriteEnabled: true,\n        depthCompare: \"less\",\n        format: \"depth24plus-stencil8\",\n      },\n\n      colorStates: [\n        {\n          format: \"bgra8unorm\",\n          // colorBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;\n          // colorBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;\n          // alphaBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;\n          // alphaBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;\n        },\n      ],\n    });\n*/\n\nexport function convertCompareFunction(parameter: string, value: CompareFunction): GLFunction {\n  return map<CompareFunction, GLFunction>(parameter, value, {\n    never: GL.NEVER,\n    less: GL.LESS,\n    equal: GL.EQUAL,\n    'less-equal': GL.LEQUAL,\n    greater: GL.GREATER,\n    'not-equal': GL.NOTEQUAL,\n    'greater-equal': GL.GEQUAL,\n    always: GL.ALWAYS\n  });\n}\n\nexport function convertToCompareFunction(parameter: string, value: GLFunction): CompareFunction {\n  return map<GLFunction, CompareFunction>(parameter, value, {\n    [GL.NEVER]: 'never',\n    [GL.LESS]: 'less',\n    [GL.EQUAL]: 'equal',\n    [GL.LEQUAL]: 'less-equal',\n    [GL.GREATER]: 'greater',\n    [GL.NOTEQUAL]: 'not-equal',\n    [GL.GEQUAL]: 'greater-equal',\n    [GL.ALWAYS]: 'always'\n  });\n}\n\nfunction convertStencilOperation(parameter: string, value: StencilOperation): GL {\n  return map<StencilOperation, GLStencilOp>(parameter, value, {\n    keep: GL.KEEP,\n    zero: GL.ZERO,\n    replace: GL.REPLACE,\n    invert: GL.INVERT,\n    'increment-clamp': GL.INCR,\n    'decrement-clamp': GL.DECR,\n    'increment-wrap': GL.INCR_WRAP,\n    'decrement-wrap': GL.DECR_WRAP\n  });\n}\n\nfunction convertBlendOperationToEquation(\n  parameter: string,\n  value: BlendOperation\n): GLBlendEquation {\n  return map<BlendOperation, GLBlendEquation>(parameter, value, {\n    add: GL.FUNC_ADD,\n    subtract: GL.FUNC_SUBTRACT,\n    'reverse-subtract': GL.FUNC_REVERSE_SUBTRACT,\n    min: GL.MIN,\n    max: GL.MAX\n  });\n}\n\nfunction convertBlendFactorToFunction(parameter: string, value: BlendFactor): GLBlendFunction {\n  return map<BlendFactor, GLBlendFunction>(parameter, value, {\n    one: GL.ONE,\n    zero: GL.ZERO,\n    'src-color': GL.SRC_COLOR,\n    'one-minus-src-color': GL.ONE_MINUS_SRC_COLOR,\n    'dst-color': GL.DST_COLOR,\n    'one-minus-dst-color': GL.ONE_MINUS_DST_COLOR,\n    'src-alpha': GL.SRC_ALPHA,\n    'one-minus-src-alpha': GL.ONE_MINUS_SRC_ALPHA,\n    'dst-alpha': GL.DST_ALPHA,\n    'one-minus-dst-alpha': GL.ONE_MINUS_DST_ALPHA,\n    'src-alpha-saturated': GL.SRC_ALPHA_SATURATE,\n    'constant-color': GL.CONSTANT_COLOR,\n    'one-minus-constant-color': GL.ONE_MINUS_CONSTANT_COLOR,\n    'constant-alpha': GL.CONSTANT_ALPHA,\n    'one-minus-constant-alpha': GL.ONE_MINUS_CONSTANT_ALPHA\n  });\n}\n\nfunction message(parameter: string, value: any): string {\n  return `Illegal parameter ${value} for ${parameter}`;\n}\n\nfunction map<K extends string | number, V>(parameter: string, value: K, valueMap: Record<K, V>): V {\n  if (!(value in valueMap)) {\n    throw new Error(message(parameter, value));\n  }\n  return valueMap[value];\n}\n\nfunction mapBoolean(parameter: string, value: boolean): boolean {\n  return value;\n}\n\n/** Returns true if given object is empty, false otherwise. */\nfunction isObjectEmpty(obj: object): boolean {\n  let isEmpty = true;\n  // @ts-ignore key is unused\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}