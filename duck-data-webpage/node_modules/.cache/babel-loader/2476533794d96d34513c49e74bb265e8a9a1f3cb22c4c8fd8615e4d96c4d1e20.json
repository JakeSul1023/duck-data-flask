{"ast":null,"code":"// mjolnir.js\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Input } from \"./input.js\";\nimport { userAgent } from \"../utils/globals.js\";\nconst firefox = userAgent.indexOf('firefox') !== -1;\n// Constants for normalizing input delta\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\n// Slow down zoom if shift key is held for more precise zooming\nconst SHIFT_MULTIPLIER = 0.25;\nexport class WheelInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, {\n      enable: true,\n      ...options\n    });\n    /* eslint-disable complexity, max-statements */\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n      let value = event.deltaY;\n      if (globalThis.WheelEvent) {\n        // Firefox doubles the values on retina screens...\n        if (firefox && event.deltaMode === globalThis.WheelEvent.DOM_DELTA_PIXEL) {\n          value /= globalThis.devicePixelRatio;\n        }\n        if (event.deltaMode === globalThis.WheelEvent.DOM_DELTA_LINE) {\n          value *= WHEEL_DELTA_PER_LINE;\n        }\n      }\n      if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n        // This one is definitely a mouse wheel event.\n        // Normalize this value to match trackpad.\n        value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n      }\n      if (event.shiftKey && value) {\n        value = value * SHIFT_MULTIPLIER;\n      }\n      this.callback({\n        type: 'wheel',\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        delta: -value,\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n    element.addEventListener('wheel', this.handleEvent, {\n      passive: false\n    });\n  }\n  destroy() {\n    this.element.removeEventListener('wheel', this.handleEvent);\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === 'wheel') {\n      this.options.enable = enabled;\n    }\n  }\n}\n//# sourceMappingURL=wheel-input.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}