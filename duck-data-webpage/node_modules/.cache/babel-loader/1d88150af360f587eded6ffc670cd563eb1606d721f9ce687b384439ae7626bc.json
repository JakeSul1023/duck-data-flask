{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Extracts information from shader source code */\nexport function getShaderInfo(source, defaultName) {\n  return {\n    name: getShaderName(source, defaultName),\n    language: 'glsl',\n    version: getShaderVersion(source)\n  };\n}\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\nfunction getShaderName(shader, defaultName = 'unnamed') {\n  const SHADER_NAME_REGEXP = /#define[^\\S\\r\\n]*SHADER_NAME[^\\S\\r\\n]*([A-Za-z0-9_-]+)\\s*/;\n  const match = SHADER_NAME_REGEXP.exec(shader);\n  return match ? match[1] : defaultName;\n}\n/** returns GLSL shader version of given shader string */\nfunction getShaderVersion(source) {\n  let version = 100;\n  const words = source.match(/[^\\s]+/g);\n  if (words && words.length >= 2 && words[0] === '#version') {\n    const parsedVersion = parseInt(words[1], 10);\n    if (Number.isFinite(parsedVersion)) {\n      version = parsedVersion;\n    }\n  }\n  if (version !== 100 && version !== 300) {\n    throw new Error(`Invalid GLSL version ${version}`);\n  }\n  return version;\n}","map":{"version":3,"names":["getShaderInfo","source","defaultName","name","getShaderName","language","version","getShaderVersion","shader","SHADER_NAME_REGEXP","match","exec","words","length","parsedVersion","parseInt","Number","isFinite","Error"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\shadertools\\src\\lib\\glsl-utils\\get-shader-info.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/** Information extracted from shader source code */\nexport type ShaderInfo = {\n  name: string;\n  language: 'glsl' | 'wgsl';\n  version: number;\n};\n\n/** Extracts information from shader source code */\nexport function getShaderInfo(source: string, defaultName?: string): ShaderInfo {\n  return {\n    name: getShaderName(source, defaultName),\n    language: 'glsl',\n    version: getShaderVersion(source)\n  };\n}\n\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\nfunction getShaderName(shader: string, defaultName: string = 'unnamed'): string {\n  const SHADER_NAME_REGEXP = /#define[^\\S\\r\\n]*SHADER_NAME[^\\S\\r\\n]*([A-Za-z0-9_-]+)\\s*/;\n  const match = SHADER_NAME_REGEXP.exec(shader);\n  return match ? match[1] : defaultName;\n}\n\n/** returns GLSL shader version of given shader string */\nfunction getShaderVersion(source: string): 100 | 300 {\n  let version = 100;\n  const words = source.match(/[^\\s]+/g);\n  if (words && words.length >= 2 && words[0] === '#version') {\n    const parsedVersion = parseInt(words[1], 10);\n    if (Number.isFinite(parsedVersion)) {\n      version = parsedVersion;\n    }\n  }\n  if (version !== 100 && version !== 300) {\n    throw new Error(`Invalid GLSL version ${version}`);\n  }\n  return version;\n}\n"],"mappings":"AAAA;AACA;AACA;AASA;AACA,OAAM,SAAUA,aAAaA,CAACC,MAAc,EAAEC,WAAoB;EAChE,OAAO;IACLC,IAAI,EAAEC,aAAa,CAACH,MAAM,EAAEC,WAAW,CAAC;IACxCG,QAAQ,EAAE,MAAM;IAChBC,OAAO,EAAEC,gBAAgB,CAACN,MAAM;GACjC;AACH;AAEA;AACA,SAASG,aAAaA,CAACI,MAAc,EAAEN,WAAA,GAAsB,SAAS;EACpE,MAAMO,kBAAkB,GAAG,2DAA2D;EACtF,MAAMC,KAAK,GAAGD,kBAAkB,CAACE,IAAI,CAACH,MAAM,CAAC;EAC7C,OAAOE,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGR,WAAW;AACvC;AAEA;AACA,SAASK,gBAAgBA,CAACN,MAAc;EACtC,IAAIK,OAAO,GAAG,GAAG;EACjB,MAAMM,KAAK,GAAGX,MAAM,CAACS,KAAK,CAAC,SAAS,CAAC;EACrC,IAAIE,KAAK,IAAIA,KAAK,CAACC,MAAM,IAAI,CAAC,IAAID,KAAK,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;IACzD,MAAME,aAAa,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5C,IAAII,MAAM,CAACC,QAAQ,CAACH,aAAa,CAAC,EAAE;MAClCR,OAAO,GAAGQ,aAAa;IACzB;EACF;EACA,IAAIR,OAAO,KAAK,GAAG,IAAIA,OAAO,KAAK,GAAG,EAAE;IACtC,MAAM,IAAIY,KAAK,CAAC,wBAAwBZ,OAAO,EAAE,CAAC;EACpD;EACA,OAAOA,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}