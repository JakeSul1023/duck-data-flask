{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { VERSION } from \"./lib/utils/version.js\";\nimport { parseCompressedTexture } from \"./lib/parsers/parse-compressed-texture.js\";\nimport { parseBasis } from \"./lib/parsers/parse-basis.js\";\n/**\n * Worker Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureWorkerLoader = {\n  dataType: null,\n  batchType: null,\n  name: 'Texture Containers',\n  id: 'compressed-texture',\n  module: 'textures',\n  version: VERSION,\n  worker: true,\n  extensions: ['ktx', 'ktx2', 'dds',\n  // WEBGL_compressed_texture_s3tc, WEBGL_compressed_texture_atc\n  'pvr' // WEBGL_compressed_texture_pvrtc\n  ],\n  mimeTypes: ['image/ktx2', 'image/ktx', 'image/vnd-ms.dds', 'image/x-dds', 'application/octet-stream'],\n  binary: true,\n  options: {\n    'compressed-texture': {\n      libraryPath: 'libs/',\n      useBasis: false\n    }\n  }\n};\n/**\n * Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureLoader = {\n  ...CompressedTextureWorkerLoader,\n  parse: async (arrayBuffer, options) => {\n    if (options?.['compressed-texture']?.useBasis) {\n      // @ts-expect-error TODO not allowed to modify inputs\n      options.basis = {\n        format: {\n          alpha: 'BC3',\n          noAlpha: 'BC1'\n        },\n        // @ts-expect-error TODO not allowed to modify inputs\n        ...options.basis,\n        containerFormat: 'ktx2',\n        module: 'encoder'\n      };\n      const result = await parseBasis(arrayBuffer, options);\n      return result[0];\n    }\n    return parseCompressedTexture(arrayBuffer);\n  }\n};","map":{"version":3,"names":["VERSION","parseCompressedTexture","parseBasis","CompressedTextureWorkerLoader","dataType","batchType","name","id","module","version","worker","extensions","mimeTypes","binary","options","libraryPath","useBasis","CompressedTextureLoader","parse","arrayBuffer","basis","format","alpha","noAlpha","containerFormat","result"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/textures/dist/compressed-texture-loader.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { VERSION } from \"./lib/utils/version.js\";\nimport { parseCompressedTexture } from \"./lib/parsers/parse-compressed-texture.js\";\nimport { parseBasis } from \"./lib/parsers/parse-basis.js\";\n/**\n * Worker Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureWorkerLoader = {\n    dataType: null,\n    batchType: null,\n    name: 'Texture Containers',\n    id: 'compressed-texture',\n    module: 'textures',\n    version: VERSION,\n    worker: true,\n    extensions: [\n        'ktx',\n        'ktx2',\n        'dds', // WEBGL_compressed_texture_s3tc, WEBGL_compressed_texture_atc\n        'pvr' // WEBGL_compressed_texture_pvrtc\n    ],\n    mimeTypes: [\n        'image/ktx2',\n        'image/ktx',\n        'image/vnd-ms.dds',\n        'image/x-dds',\n        'application/octet-stream'\n    ],\n    binary: true,\n    options: {\n        'compressed-texture': {\n            libraryPath: 'libs/',\n            useBasis: false\n        }\n    }\n};\n/**\n * Loader for KTX, DDS, and PVR texture container formats\n */\nexport const CompressedTextureLoader = {\n    ...CompressedTextureWorkerLoader,\n    parse: async (arrayBuffer, options) => {\n        if (options?.['compressed-texture']?.useBasis) {\n            // @ts-expect-error TODO not allowed to modify inputs\n            options.basis = {\n                format: {\n                    alpha: 'BC3',\n                    noAlpha: 'BC1'\n                },\n                // @ts-expect-error TODO not allowed to modify inputs\n                ...options.basis,\n                containerFormat: 'ktx2',\n                module: 'encoder'\n            };\n            const result = await parseBasis(arrayBuffer, options);\n            return result[0];\n        }\n        return parseCompressedTexture(arrayBuffer);\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,sBAAsB,QAAQ,2CAA2C;AAClF,SAASC,UAAU,QAAQ,8BAA8B;AACzD;AACA;AACA;AACA,OAAO,MAAMC,6BAA6B,GAAG;EACzCC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,oBAAoB;EAC1BC,EAAE,EAAE,oBAAoB;EACxBC,MAAM,EAAE,UAAU;EAClBC,OAAO,EAAET,OAAO;EAChBU,MAAM,EAAE,IAAI;EACZC,UAAU,EAAE,CACR,KAAK,EACL,MAAM,EACN,KAAK;EAAE;EACP,KAAK,CAAC;EAAA,CACT;EACDC,SAAS,EAAE,CACP,YAAY,EACZ,WAAW,EACX,kBAAkB,EAClB,aAAa,EACb,0BAA0B,CAC7B;EACDC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;IACL,oBAAoB,EAAE;MAClBC,WAAW,EAAE,OAAO;MACpBC,QAAQ,EAAE;IACd;EACJ;AACJ,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAG;EACnC,GAAGd,6BAA6B;EAChCe,KAAK,EAAE,MAAAA,CAAOC,WAAW,EAAEL,OAAO,KAAK;IACnC,IAAIA,OAAO,GAAG,oBAAoB,CAAC,EAAEE,QAAQ,EAAE;MAC3C;MACAF,OAAO,CAACM,KAAK,GAAG;QACZC,MAAM,EAAE;UACJC,KAAK,EAAE,KAAK;UACZC,OAAO,EAAE;QACb,CAAC;QACD;QACA,GAAGT,OAAO,CAACM,KAAK;QAChBI,eAAe,EAAE,MAAM;QACvBhB,MAAM,EAAE;MACZ,CAAC;MACD,MAAMiB,MAAM,GAAG,MAAMvB,UAAU,CAACiB,WAAW,EAAEL,OAAO,CAAC;MACrD,OAAOW,MAAM,CAAC,CAAC,CAAC;IACpB;IACA,OAAOxB,sBAAsB,CAACkB,WAAW,CAAC;EAC9C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}