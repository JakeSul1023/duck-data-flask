{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\nimport { Type } from \"./enum.js\";\nexport { Type } from \"./enum.js\";\n/** ArrowLike DataType class */\nexport class DataType {\n  static isNull(x) {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x) {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x) {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x) {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x) {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x) {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x) {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x) {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x) {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x) {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x) {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x) {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x) {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x) {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x) {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x) {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x) {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x) {\n    return x && x.typeId === Type.Dictionary;\n  }\n  get typeId() {\n    return Type.NONE;\n  }\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n  // get ArrayType() { return Array; }\n  compareTo(other) {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n// NULL\nexport class Null extends DataType {\n  get typeId() {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Null';\n  }\n  toString() {\n    return 'Null';\n  }\n}\n// BOOLEANS\nexport class Bool extends DataType {\n  get typeId() {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag]() {\n    return 'Bool';\n  }\n  toString() {\n    return 'Bool';\n  }\n}\n// INTS\nexport class Int extends DataType {\n  isSigned;\n  bitWidth;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag]() {\n    return 'Int';\n  }\n  toString() {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n// FLOATS\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\nexport class Float extends DataType {\n  precision;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId() {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag]() {\n    return 'Float';\n  }\n  toString() {\n    return `Float${this.precision}`;\n  }\n}\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n// STRINGS\nexport class Utf8 extends DataType {\n  get typeId() {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag]() {\n    return 'Utf8';\n  }\n  toString() {\n    return 'Utf8';\n  }\n}\n// DATES, TIMES AND INTERVALS\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\nexport class Date extends DataType {\n  unit;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag]() {\n    return 'Date';\n  }\n  toString() {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\nexport class Time extends DataType {\n  unit;\n  bitWidth;\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Time;\n  }\n  toString() {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Time';\n  }\n}\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\nexport class Timestamp extends DataType {\n  unit;\n  timezone;\n  constructor(unit, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId() {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag]() {\n    return 'Timestamp';\n  }\n  toString() {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\nexport class Interval extends DataType {\n  unit;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag]() {\n    return 'Interval';\n  }\n  toString() {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\nexport class FixedSizeList extends DataType {\n  listSize;\n  children;\n  constructor(listSize, child) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag]() {\n    return 'FixedSizeList';\n  }\n  toString() {\n    return `FixedSizeList[${this.listSize}]<${JSON.stringify(this.valueType)}>`;\n  }\n}\nexport class Struct extends DataType {\n  children;\n  constructor(children) {\n    super();\n    this.children = children;\n  }\n  get typeId() {\n    return Type.Struct;\n  }\n  toString() {\n    return `Struct<{${this.children.map(f => `${f.name}:${JSON.stringify(f.type)}`).join(', ')}}>`;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Struct';\n  }\n}","map":{"version":3,"names":["Type","DataType","isNull","x","typeId","Null","isInt","Int","isFloat","Float","isBinary","Binary","isUtf8","Utf8","isBool","Bool","isDecimal","Decimal","isDate","Date","isTime","Time","isTimestamp","Timestamp","isInterval","Interval","isList","List","isStruct","Struct","isUnion","Union","isFixedSizeBinary","FixedSizeBinary","isFixedSizeList","FixedSizeList","isMap","Map","isDictionary","Dictionary","NONE","compareTo","other","Symbol","toStringTag","toString","isSigned","bitWidth","constructor","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Precision","HALF","SINGLE","DOUBLE","precision","Float16","Float32","Float64","DateUnit","DAY","MILLISECOND","unit","DateDay","DateMillisecond","TimeUnit","SECOND","MICROSECOND","NANOSECOND","TimeSecond","TimeMillisecond","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalUnit","DAY_TIME","YEAR_MONTH","IntervalDayTime","IntervalYearMonth","listSize","children","child","valueType","type","valueField","JSON","stringify","map","f","name","join"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/arrow-api/arrow-like-type.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\nimport { Type } from \"./enum.js\";\nexport { Type } from \"./enum.js\";\n/** ArrowLike DataType class */\nexport class DataType {\n    static isNull(x) {\n        return x && x.typeId === Type.Null;\n    }\n    static isInt(x) {\n        return x && x.typeId === Type.Int;\n    }\n    static isFloat(x) {\n        return x && x.typeId === Type.Float;\n    }\n    static isBinary(x) {\n        return x && x.typeId === Type.Binary;\n    }\n    static isUtf8(x) {\n        return x && x.typeId === Type.Utf8;\n    }\n    static isBool(x) {\n        return x && x.typeId === Type.Bool;\n    }\n    static isDecimal(x) {\n        return x && x.typeId === Type.Decimal;\n    }\n    static isDate(x) {\n        return x && x.typeId === Type.Date;\n    }\n    static isTime(x) {\n        return x && x.typeId === Type.Time;\n    }\n    static isTimestamp(x) {\n        return x && x.typeId === Type.Timestamp;\n    }\n    static isInterval(x) {\n        return x && x.typeId === Type.Interval;\n    }\n    static isList(x) {\n        return x && x.typeId === Type.List;\n    }\n    static isStruct(x) {\n        return x && x.typeId === Type.Struct;\n    }\n    static isUnion(x) {\n        return x && x.typeId === Type.Union;\n    }\n    static isFixedSizeBinary(x) {\n        return x && x.typeId === Type.FixedSizeBinary;\n    }\n    static isFixedSizeList(x) {\n        return x && x.typeId === Type.FixedSizeList;\n    }\n    static isMap(x) {\n        return x && x.typeId === Type.Map;\n    }\n    static isDictionary(x) {\n        return x && x.typeId === Type.Dictionary;\n    }\n    get typeId() {\n        return Type.NONE;\n    }\n    // get ArrayType(): AnyArrayType {\n    //   return Int8Array;\n    // }\n    // get ArrayType() { return Array; }\n    compareTo(other) {\n        // TODO\n        return this === other; // comparer.visit(this, other);\n    }\n}\n// NULL\nexport class Null extends DataType {\n    get typeId() {\n        return Type.Null;\n    }\n    get [Symbol.toStringTag]() {\n        return 'Null';\n    }\n    toString() {\n        return 'Null';\n    }\n}\n// BOOLEANS\nexport class Bool extends DataType {\n    get typeId() {\n        return Type.Bool;\n    }\n    // get ArrayType() {\n    //   return Uint8Array;\n    // }\n    get [Symbol.toStringTag]() {\n        return 'Bool';\n    }\n    toString() {\n        return 'Bool';\n    }\n}\n// INTS\nexport class Int extends DataType {\n    isSigned;\n    bitWidth;\n    constructor(isSigned, bitWidth) {\n        super();\n        this.isSigned = isSigned;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() {\n        return Type.Int;\n    }\n    // get ArrayType() {\n    //   switch (this.bitWidth) {\n    //     case 8:\n    //       return this.isSigned ? Int8Array : Uint8Array;\n    //     case 16:\n    //       return this.isSigned ? Int16Array : Uint16Array;\n    //     case 32:\n    //       return this.isSigned ? Int32Array : Uint32Array;\n    //     case 64:\n    //       return this.isSigned ? Int32Array : Uint32Array;\n    //     default:\n    //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    //   }\n    // }\n    get [Symbol.toStringTag]() {\n        return 'Int';\n    }\n    toString() {\n        return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n    }\n}\nexport class Int8 extends Int {\n    constructor() {\n        super(true, 8);\n    }\n}\nexport class Int16 extends Int {\n    constructor() {\n        super(true, 16);\n    }\n}\nexport class Int32 extends Int {\n    constructor() {\n        super(true, 32);\n    }\n}\nexport class Int64 extends Int {\n    constructor() {\n        super(true, 64);\n    }\n}\nexport class Uint8 extends Int {\n    constructor() {\n        super(false, 8);\n    }\n}\nexport class Uint16 extends Int {\n    constructor() {\n        super(false, 16);\n    }\n}\nexport class Uint32 extends Int {\n    constructor() {\n        super(false, 32);\n    }\n}\nexport class Uint64 extends Int {\n    constructor() {\n        super(false, 64);\n    }\n}\n// FLOATS\nconst Precision = {\n    HALF: 16,\n    SINGLE: 32,\n    DOUBLE: 64\n};\nexport class Float extends DataType {\n    precision;\n    constructor(precision) {\n        super();\n        this.precision = precision;\n    }\n    get typeId() {\n        return Type.Float;\n    }\n    // get ArrayType() {\n    //   switch (this.precision) {\n    //     case Precision.HALF:\n    //       return Uint16Array;\n    //     case Precision.SINGLE:\n    //       return Float32Array;\n    //     case Precision.DOUBLE:\n    //       return Float64Array;\n    //     default:\n    //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    //   }\n    // }\n    get [Symbol.toStringTag]() {\n        return 'Float';\n    }\n    toString() {\n        return `Float${this.precision}`;\n    }\n}\nexport class Float16 extends Float {\n    constructor() {\n        super(Precision.HALF);\n    }\n}\nexport class Float32 extends Float {\n    constructor() {\n        super(Precision.SINGLE);\n    }\n}\nexport class Float64 extends Float {\n    constructor() {\n        super(Precision.DOUBLE);\n    }\n}\nexport class Binary extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() {\n        return Type.Binary;\n    }\n    toString() {\n        return 'Binary';\n    }\n    get [Symbol.toStringTag]() {\n        return 'Binary';\n    }\n}\n// STRINGS\nexport class Utf8 extends DataType {\n    get typeId() {\n        return Type.Utf8;\n    }\n    // get ArrayType() {\n    //   return Uint8Array;\n    // }\n    get [Symbol.toStringTag]() {\n        return 'Utf8';\n    }\n    toString() {\n        return 'Utf8';\n    }\n}\n// DATES, TIMES AND INTERVALS\nconst DateUnit = {\n    DAY: 0,\n    MILLISECOND: 1\n};\nexport class Date extends DataType {\n    unit;\n    constructor(unit) {\n        super();\n        this.unit = unit;\n    }\n    get typeId() {\n        return Type.Date;\n    }\n    // get ArrayType() {\n    //   return Int32Array;\n    // }\n    get [Symbol.toStringTag]() {\n        return 'Date';\n    }\n    toString() {\n        return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n    }\n}\nexport class DateDay extends Date {\n    constructor() {\n        super(DateUnit.DAY);\n    }\n}\nexport class DateMillisecond extends Date {\n    constructor() {\n        super(DateUnit.MILLISECOND);\n    }\n}\nconst TimeUnit = {\n    SECOND: 1,\n    MILLISECOND: 1e3,\n    MICROSECOND: 1e6,\n    NANOSECOND: 1e9\n};\nexport class Time extends DataType {\n    unit;\n    bitWidth;\n    constructor(unit, bitWidth) {\n        super();\n        this.unit = unit;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() {\n        return Type.Time;\n    }\n    toString() {\n        return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n    }\n    get [Symbol.toStringTag]() {\n        return 'Time';\n    }\n}\nexport class TimeSecond extends Time {\n    constructor() {\n        super(TimeUnit.SECOND, 32);\n    }\n}\nexport class TimeMillisecond extends Time {\n    constructor() {\n        super(TimeUnit.MILLISECOND, 32);\n    }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\nexport class Timestamp extends DataType {\n    unit;\n    timezone;\n    constructor(unit, timezone = null) {\n        super();\n        this.unit = unit;\n        this.timezone = timezone;\n    }\n    get typeId() {\n        return Type.Timestamp;\n    }\n    // get ArrayType() {\n    //   return Int32Array;\n    // }\n    get [Symbol.toStringTag]() {\n        return 'Timestamp';\n    }\n    toString() {\n        return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n    }\n}\nexport class TimestampSecond extends Timestamp {\n    constructor(timezone = null) {\n        super(TimeUnit.SECOND, timezone);\n    }\n}\nexport class TimestampMillisecond extends Timestamp {\n    constructor(timezone = null) {\n        super(TimeUnit.MILLISECOND, timezone);\n    }\n}\nexport class TimestampMicrosecond extends Timestamp {\n    constructor(timezone = null) {\n        super(TimeUnit.MICROSECOND, timezone);\n    }\n}\nexport class TimestampNanosecond extends Timestamp {\n    constructor(timezone = null) {\n        super(TimeUnit.NANOSECOND, timezone);\n    }\n}\nconst IntervalUnit = {\n    DAY_TIME: 0,\n    YEAR_MONTH: 1\n};\nexport class Interval extends DataType {\n    unit;\n    constructor(unit) {\n        super();\n        this.unit = unit;\n    }\n    get typeId() {\n        return Type.Interval;\n    }\n    // get ArrayType() {\n    //   return Int32Array;\n    // }\n    get [Symbol.toStringTag]() {\n        return 'Interval';\n    }\n    toString() {\n        return `Interval<${IntervalUnit[this.unit]}>`;\n    }\n}\nexport class IntervalDayTime extends Interval {\n    constructor() {\n        super(IntervalUnit.DAY_TIME);\n    }\n}\nexport class IntervalYearMonth extends Interval {\n    constructor() {\n        super(IntervalUnit.YEAR_MONTH);\n    }\n}\nexport class FixedSizeList extends DataType {\n    listSize;\n    children;\n    constructor(listSize, child) {\n        super();\n        this.listSize = listSize;\n        this.children = [child];\n    }\n    get typeId() {\n        return Type.FixedSizeList;\n    }\n    get valueType() {\n        return this.children[0].type;\n    }\n    get valueField() {\n        return this.children[0];\n    }\n    // get ArrayType() {\n    //   return this.valueType.ArrayType;\n    // }\n    get [Symbol.toStringTag]() {\n        return 'FixedSizeList';\n    }\n    toString() {\n        return `FixedSizeList[${this.listSize}]<${JSON.stringify(this.valueType)}>`;\n    }\n}\nexport class Struct extends DataType {\n    children;\n    constructor(children) {\n        super();\n        this.children = children;\n    }\n    get typeId() {\n        return Type.Struct;\n    }\n    toString() {\n        return `Struct<{${this.children\n            .map((f) => `${f.name}:${JSON.stringify(f.type)}`)\n            .join(', ')}}>`;\n    }\n    get [Symbol.toStringTag]() {\n        return 'Struct';\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}