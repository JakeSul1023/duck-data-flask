{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Generates some basic information of the picking action: x, y, coordinates etc.\n * Regardless if anything is picked\n */\nexport function getEmptyPickingInfo({\n  pickInfo,\n  viewports,\n  pixelRatio,\n  x,\n  y,\n  z\n}) {\n  // If more than one viewports are used in the picking pass, locate the viewport that\n  // drew the picked pixel\n  let pickedViewport = viewports[0];\n  if (viewports.length > 1) {\n    // Find the viewport that contain the picked pixel\n    pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, {\n      x,\n      y\n    });\n  }\n  let coordinate;\n  if (pickedViewport) {\n    const point = [x - pickedViewport.x, y - pickedViewport.y];\n    if (z !== undefined) {\n      point[2] = z;\n    }\n    coordinate = pickedViewport.unproject(point);\n  }\n  return {\n    color: null,\n    layer: null,\n    viewport: pickedViewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel: pickInfo && 'pickedX' in pickInfo ? [pickInfo.pickedX, pickInfo.pickedY] : undefined,\n    pixelRatio\n  };\n}\n/* eslint-disable max-depth */\n/** Generates the picking info of a picking operation */\nexport function processPickInfo(opts) {\n  const {\n    pickInfo,\n    lastPickedInfo,\n    mode,\n    layers\n  } = opts;\n  const {\n    pickedColor,\n    pickedLayer,\n    pickedObjectIndex\n  } = pickInfo;\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedPixelIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n  const baseInfo = getEmptyPickingInfo(opts);\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n  affectedLayers.forEach(layer => {\n    let info = {\n      ...baseInfo\n    };\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n    info = getLayerPickingInfo({\n      layer,\n      info,\n      mode\n    });\n    const rootLayer = info.layer;\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    infos.set(rootLayer.id, info);\n    if (mode === 'hover') {\n      rootLayer.updateAutoHighlight(info);\n    }\n  });\n  return infos;\n}\n/** Walk up the layer composite chain to populate the info object */\nexport function getLayerPickingInfo({\n  layer,\n  info,\n  mode\n}) {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({\n      info,\n      mode,\n      sourceLayer\n    });\n    layer = layer.parent;\n  }\n  return info;\n}\n/** Indentifies which viewport, if any corresponds to x and y\n   If multiple viewports contain the target pixel, last viewport drawn is returend\n   Returns first viewport if no match */\nfunction getViewportFromCoordinates(viewports, pixel) {\n  // find the last viewport that contains the pixel\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n    if (viewport.containsPixel(pixel)) {\n      return viewport;\n    }\n  }\n  return viewports[0];\n}","map":{"version":3,"names":["getEmptyPickingInfo","pickInfo","viewports","pixelRatio","x","y","z","pickedViewport","length","getViewportFromCoordinates","pickedViewports","coordinate","point","undefined","unproject","color","layer","viewport","index","picked","pixel","devicePixel","pickedX","pickedY","processPickInfo","opts","lastPickedInfo","mode","layers","pickedColor","pickedLayer","pickedObjectIndex","affectedLayers","lastPickedPixelIndex","lastPickedLayerId","layerId","pickedLayerId","props","id","lastPickedLayer","find","unshift","info","baseInfo","infos","Map","set","forEach","getLayerPickingInfo","rootLayer","updateAutoHighlight","sourceLayer","getPickingInfo","parent","i","containsPixel"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\lib\\picking\\pick-info.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type Layer from '../layer';\nimport type Viewport from '../../viewports/viewport';\nimport type {PickedPixel} from './query-object';\n\nexport type PickingInfo<DataT = any, ExtraInfo = {}> = ExtraInfo & {\n  color: Uint8Array | null;\n  layer: Layer | null;\n  sourceLayer?: Layer | null;\n  viewport?: Viewport;\n  index: number;\n  picked: boolean;\n  object?: DataT;\n  x: number;\n  y: number;\n  pixel?: [number, number];\n  coordinate?: number[];\n  devicePixel?: [number, number];\n  pixelRatio: number;\n};\n\nexport interface GetPickingInfoParams<DataT = any, ExtraInfo = {}> {\n  info: PickingInfo<DataT, ExtraInfo>;\n  mode: string;\n  sourceLayer: Layer | null;\n}\n\n/** Generates some basic information of the picking action: x, y, coordinates etc.\n * Regardless if anything is picked\n */\nexport function getEmptyPickingInfo({\n  pickInfo,\n  viewports,\n  pixelRatio,\n  x,\n  y,\n  z\n}: {\n  pickInfo?: PickedPixel;\n  viewports: Viewport[];\n  pixelRatio: number;\n  x: number;\n  y: number;\n  z?: number;\n}): PickingInfo {\n  // If more than one viewports are used in the picking pass, locate the viewport that\n  // drew the picked pixel\n  let pickedViewport = viewports[0];\n  if (viewports.length > 1) {\n    // Find the viewport that contain the picked pixel\n    pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, {x, y});\n  }\n  let coordinate: number[] | undefined;\n  if (pickedViewport) {\n    const point = [x - pickedViewport.x, y - pickedViewport.y];\n    if (z !== undefined) {\n      point[2] = z;\n    }\n    coordinate = pickedViewport.unproject(point);\n  }\n\n  return {\n    color: null,\n    layer: null,\n    viewport: pickedViewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel:\n      pickInfo && 'pickedX' in pickInfo\n        ? [pickInfo.pickedX as number, pickInfo.pickedY as number]\n        : undefined,\n    pixelRatio\n  };\n}\n\n/* eslint-disable max-depth */\n/** Generates the picking info of a picking operation */\nexport function processPickInfo(opts: {\n  pickInfo: PickedPixel;\n  lastPickedInfo: {\n    index: number;\n    layerId: string | null;\n    info: PickingInfo | null;\n  };\n  mode: string;\n  layers: Layer[];\n  viewports: Viewport[];\n  pixelRatio: number;\n  x: number;\n  y: number;\n  z?: number;\n}): Map<string | null, PickingInfo> {\n  const {pickInfo, lastPickedInfo, mode, layers} = opts;\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedPixelIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = {...baseInfo};\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n    const rootLayer = info.layer as Layer;\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    infos.set(rootLayer.id, info);\n\n    if (mode === 'hover') {\n      rootLayer.updateAutoHighlight(info);\n    }\n  });\n\n  return infos;\n}\n\n/** Walk up the layer composite chain to populate the info object */\nexport function getLayerPickingInfo({\n  layer,\n  info,\n  mode\n}: {\n  layer: Layer;\n  info: PickingInfo;\n  mode: string;\n}): PickingInfo {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent as Layer;\n  }\n  return info;\n}\n\n/** Indentifies which viewport, if any corresponds to x and y\n   If multiple viewports contain the target pixel, last viewport drawn is returend\n   Returns first viewport if no match */\nfunction getViewportFromCoordinates(\n  viewports: Viewport[],\n  pixel: {x: number; y: number}\n): Viewport {\n  // find the last viewport that contains the pixel\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n    if (viewport.containsPixel(pixel)) {\n      return viewport;\n    }\n  }\n  return viewports[0];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}