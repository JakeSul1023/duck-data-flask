{"ast":null,"code":"/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n  // \\0asm\n  0, 97, 115, 109,\n  // version 1\n  1, 0, 0, 0,\n  // section \"type\"\n  1, 13, 2,\n  // 0, () => i32\n  96, 0, 1, 127,\n  // 1, (i32, i32, i32, i32) => i32\n  96, 4, 127, 127, 127, 127, 1, 127,\n  // section \"function\"\n  3, 7, 6,\n  // 0, type 0\n  0,\n  // 1, type 1\n  1,\n  // 2, type 1\n  1,\n  // 3, type 1\n  1,\n  // 4, type 1\n  1,\n  // 5, type 1\n  1,\n  // section \"global\"\n  6, 6, 1,\n  // 0, \"high\", mutable i32\n  127, 1, 65, 0, 11,\n  // section \"export\"\n  7, 50, 6,\n  // 0, \"mul\"\n  3, 109, 117, 108, 0, 1,\n  // 1, \"div_s\"\n  5, 100, 105, 118, 95, 115, 0, 2,\n  // 2, \"div_u\"\n  5, 100, 105, 118, 95, 117, 0, 3,\n  // 3, \"rem_s\"\n  5, 114, 101, 109, 95, 115, 0, 4,\n  // 4, \"rem_u\"\n  5, 114, 101, 109, 95, 117, 0, 5,\n  // 5, \"get_high\"\n  8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\n  // section \"code\"\n  10, 191, 1, 6,\n  // 0, \"get_high\"\n  4, 0, 35, 0, 11,\n  // 1, \"mul\"\n  36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n  // 2, \"div_s\"\n  36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n  // 3, \"div_u\"\n  36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n  // 4, \"rem_s\"\n  36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n  // 5, \"rem_u\"\n  36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n} catch {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", {\n  value: true\n});\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = 0 <= value && value < 256) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache) UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = -128 <= value && value < 128) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache) INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0) return UZERO;\n    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n  }\n  if (value < 0) return fromNumber(-value, unsigned).neg();\n  return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0) throw Error(\"empty string\");\n  if (typeof unsigned === \"number\") {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n  var p;\n  if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === \"number\") return fromNumber(val, unsigned);\n  if (typeof val === \"string\") return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === \"boolean\" ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n  if (this.isZero()) return \"0\";\n  if (this.isNegative()) {\n    // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else return \"-\" + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = \"\";\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero()) return digits + result;else {\n      while (digits.length < 6) digits = \"0\" + digits;\n      result = \"\" + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative())\n    // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long can be safely represented as a JavaScript number.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isSafeInteger = function isSafeInteger() {\n  // 2^53-1 is the maximum safe value\n  var top11Bits = this.high >> 21;\n  // [0, 2^53-1]\n  if (!top11Bits) return true;\n  // > 2^53-1\n  if (this.unsigned) return false;\n  // [-2^53, -1] except -2^53\n  return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (this.eq(other)) return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) return -1;\n  if (!thisNeg && otherNeg) return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend)) addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xffff;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xffff;\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xffff;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xffff;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|bigint|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero()) return this;\n  if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n  if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  if (this.isNegative()) {\n    if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xffff;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xffff;\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xffff;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xffff;\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|bigint|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n  if (divisor.isZero()) throw Error(\"division by zero\");\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n  if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE)) return ONE;else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative()) return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned) divisor = divisor.toUnsigned();\n    if (divisor.gt(this)) return UZERO;\n    if (divisor.gt(this.shru(1)))\n      // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) approxRes = ONE;\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned) return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned) return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n};\n\n// Support conversion to/from BigInt where available\nif (typeof BigInt === \"function\") {\n  /**\n   * Returns a Long representing the given big integer.\n   * @function\n   * @param {number} value The big integer value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  Long.fromBigInt = function fromBigInt(value, unsigned) {\n    var lowBits = Number(BigInt.asIntN(32, value));\n    var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n    return fromBits(lowBits, highBits, unsigned);\n  };\n\n  // Override\n  Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n    if (typeof value === \"bigint\") return fromBigInt(value, unsigned);\n    return fromValue(value, unsigned);\n  };\n\n  /**\n   * Converts the Long to its big integer representation.\n   * @this {!Long}\n   * @returns {bigint}\n   */\n  LongPrototype.toBigInt = function toBigInt() {\n    var lowBigInt = BigInt(this.low >>> 0);\n    var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n    return highBigInt << BigInt(32) | lowBigInt;\n  };\n}\nexport default Long;","map":{"version":3,"names":["wasm","WebAssembly","Instance","Module","Uint8Array","exports","Long","low","high","unsigned","prototype","__isLong__","Object","defineProperty","value","isLong","obj","ctz32","c","Math","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isSafeInteger","top11Bits","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","b","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","BigInt","fromBigInt","Number","asIntN","fromValueWithBigInt","toBigInt","lowBigInt","highBigInt"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/node_modules/long/index.js"],"sourcesContent":["/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(\n    new WebAssembly.Module(\n      new Uint8Array([\n        // \\0asm\n        0, 97, 115, 109,\n        // version 1\n        1, 0, 0, 0,\n\n        // section \"type\"\n        1, 13, 2,\n        // 0, () => i32\n        96, 0, 1, 127,\n        // 1, (i32, i32, i32, i32) => i32\n        96, 4, 127, 127, 127, 127, 1, 127,\n\n        // section \"function\"\n        3, 7, 6,\n        // 0, type 0\n        0,\n        // 1, type 1\n        1,\n        // 2, type 1\n        1,\n        // 3, type 1\n        1,\n        // 4, type 1\n        1,\n        // 5, type 1\n        1,\n\n        // section \"global\"\n        6, 6, 1,\n        // 0, \"high\", mutable i32\n        127, 1, 65, 0, 11,\n\n        // section \"export\"\n        7, 50, 6,\n        // 0, \"mul\"\n        3, 109, 117, 108, 0, 1,\n        // 1, \"div_s\"\n        5, 100, 105, 118, 95, 115, 0, 2,\n        // 2, \"div_u\"\n        5, 100, 105, 118, 95, 117, 0, 3,\n        // 3, \"rem_s\"\n        5, 114, 101, 109, 95, 115, 0, 4,\n        // 4, \"rem_u\"\n        5, 114, 101, 109, 95, 117, 0, 5,\n        // 5, \"get_high\"\n        8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\n\n        // section \"code\"\n        10, 191, 1, 6,\n        // 0, \"get_high\"\n        4, 0, 35, 0, 11,\n        // 1, \"mul\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 2, \"div_s\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 3, \"div_u\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 4, \"rem_s\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n        // 5, \"rem_u\"\n        36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,\n        3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,\n        167, 11,\n      ]),\n    ),\n    {},\n  ).exports;\n} catch {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if ((cache = 0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache) UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if ((cache = -128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache) INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0) return UZERO;\n    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n  }\n  if (value < 0) return fromNumber(-value, unsigned).neg();\n  return fromBits(\n    value % TWO_PWR_32_DBL | 0,\n    (value / TWO_PWR_32_DBL) | 0,\n    unsigned,\n  );\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0) throw Error(\"empty string\");\n  if (typeof unsigned === \"number\") {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (\n    str === \"NaN\" ||\n    str === \"Infinity\" ||\n    str === \"+Infinity\" ||\n    str === \"-Infinity\"\n  )\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n\n  var p;\n  if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === \"number\") return fromNumber(val, unsigned);\n  if (typeof val === \"string\") return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(\n    val.low,\n    val.high,\n    typeof unsigned === \"boolean\" ? unsigned : val.unsigned,\n  );\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n  if (this.isZero()) return \"0\";\n  if (this.isNegative()) {\n    // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else return \"-\" + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = \"\";\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero()) return digits + result;\n    else {\n      while (digits.length < 6) digits = \"0\" + digits;\n      result = \"\" + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative())\n    // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--) if ((val & (1 << bit)) != 0) break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long can be safely represented as a JavaScript number.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isSafeInteger = function isSafeInteger() {\n  // 2^53-1 is the maximum safe value\n  var top11Bits = this.high >> 21;\n  // [0, 2^53-1]\n  if (!top11Bits) return true;\n  // > 2^53-1\n  if (this.unsigned) return false;\n  // [-2^53, -1] except -2^53\n  return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (\n    this.unsigned !== other.unsigned &&\n    this.high >>> 31 === 1 &&\n    other.high >>> 31 === 1\n  )\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (this.eq(other)) return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) return -1;\n  if (!thisNeg && otherNeg) return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return other.high >>> 0 > this.high >>> 0 ||\n    (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n    ? -1\n    : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|bigint|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend)) addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xffff;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xffff;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xffff;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|bigint|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|bigint|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero()) return this;\n  if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\n    else return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xffff;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xffff;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xffff;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|bigint|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n  if (divisor.isZero()) throw Error(\"division by zero\");\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (\n      !this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 &&\n      divisor.high === -1\n    ) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high,\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE)) return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative()) return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned) divisor = divisor.toUnsigned();\n    if (divisor.gt(this)) return UZERO;\n    if (divisor.gt(this.shru(1)))\n      // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high,\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|bigint|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|bigint|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  else if (numBits < 32)\n    return fromBits(\n      this.low << numBits,\n      (this.high << numBits) | (this.low >>> (32 - numBits)),\n      this.unsigned,\n    );\n  else return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  else if (numBits < 32)\n    return fromBits(\n      (this.low >>> numBits) | (this.high << (32 - numBits)),\n      this.high >> numBits,\n      this.unsigned,\n    );\n  else\n    return fromBits(\n      this.high >> (numBits - 32),\n      this.high >= 0 ? 0 : -1,\n      this.unsigned,\n    );\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32)\n    return fromBits(\n      (this.low >>> numBits) | (this.high << (32 - numBits)),\n      this.high >>> numBits,\n      this.unsigned,\n    );\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(\n      (this.low << numBits) | (this.high >>> b),\n      (this.high << numBits) | (this.low >>> b),\n      this.unsigned,\n    );\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(\n    (this.high << numBits) | (this.low >>> b),\n    (this.low << numBits) | (this.high >>> b),\n    this.unsigned,\n  );\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(\n      (this.high << b) | (this.low >>> numBits),\n      (this.low << b) | (this.high >>> numBits),\n      this.unsigned,\n    );\n  }\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(\n    (this.low << b) | (this.high >>> numBits),\n    (this.high << b) | (this.low >>> numBits),\n    this.unsigned,\n  );\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned) return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned) return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    (lo >>> 8) & 0xff,\n    (lo >>> 16) & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    (hi >>> 8) & 0xff,\n    (hi >>> 16) & 0xff,\n    hi >>> 24,\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    (hi >>> 16) & 0xff,\n    (hi >>> 8) & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    (lo >>> 16) & 0xff,\n    (lo >>> 8) & 0xff,\n    lo & 0xff,\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le\n    ? Long.fromBytesLE(bytes, unsigned)\n    : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),\n    bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),\n    unsigned,\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],\n    (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],\n    unsigned,\n  );\n};\n\n// Support conversion to/from BigInt where available\nif (typeof BigInt === \"function\") {\n  /**\n   * Returns a Long representing the given big integer.\n   * @function\n   * @param {number} value The big integer value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  Long.fromBigInt = function fromBigInt(value, unsigned) {\n    var lowBits = Number(BigInt.asIntN(32, value));\n    var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n    return fromBits(lowBits, highBits, unsigned);\n  };\n\n  // Override\n  Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n    if (typeof value === \"bigint\") return fromBigInt(value, unsigned);\n    return fromValue(value, unsigned);\n  };\n\n  /**\n   * Converts the Long to its big integer representation.\n   * @this {!Long}\n   * @returns {bigint}\n   */\n  LongPrototype.toBigInt = function toBigInt() {\n    var lowBigInt = BigInt(this.low >>> 0);\n    var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n    return (highBigInt << BigInt(32)) | lowBigInt;\n  };\n}\n\nexport default Long;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}