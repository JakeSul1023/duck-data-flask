{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { GLTFInstantiator } from \"./gltf-instantiator.js\";\nexport function createScenegraphsFromGLTF(device, gltf, options) {\n  const instantiator = new GLTFInstantiator(device, options);\n  const scenes = instantiator.instantiate(gltf);\n  const animator = instantiator.createAnimator();\n  return {\n    scenes,\n    animator\n  };\n}","map":{"version":3,"names":["GLTFInstantiator","createScenegraphsFromGLTF","device","gltf","options","instantiator","scenes","instantiate","animator","createAnimator"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\gltf\\src\\gltf\\create-gltf-objects.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device} from '@luma.gl/core';\nimport {GroupNode} from '@luma.gl/engine';\nimport {GLTFInstantiator, GLTFInstantiatorOptions} from './gltf-instantiator';\nimport {GLTFAnimator} from './gltf-animator';\n\nexport function createScenegraphsFromGLTF(\n  device: Device,\n  gltf: any,\n  options?: GLTFInstantiatorOptions\n): {\n  scenes: GroupNode[];\n  animator: GLTFAnimator;\n} {\n  const instantiator = new GLTFInstantiator(device, options);\n  const scenes = instantiator.instantiate(gltf);\n  const animator = instantiator.createAnimator();\n  return {scenes, animator};\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,gBAAgB,QAA0B;AAGlD,OAAM,SAAUC,yBAAyBA,CACvCC,MAAc,EACdC,IAAS,EACTC,OAAiC;EAKjC,MAAMC,YAAY,GAAG,IAAIL,gBAAgB,CAACE,MAAM,EAAEE,OAAO,CAAC;EAC1D,MAAME,MAAM,GAAGD,YAAY,CAACE,WAAW,CAACJ,IAAI,CAAC;EAC7C,MAAMK,QAAQ,GAAGH,YAAY,CAACI,cAAc,EAAE;EAC9C,OAAO;IAACH,MAAM;IAAEE;EAAQ,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}