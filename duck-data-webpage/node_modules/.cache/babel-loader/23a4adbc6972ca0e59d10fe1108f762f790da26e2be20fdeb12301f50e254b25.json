{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isKTX, parseKTX } from \"./parse-ktx.js\";\nimport { isDDS, parseDDS } from \"./parse-dds.js\";\nimport { isPVR, parsePVR } from \"./parse-pvr.js\";\n/**\n * Deduces format and parses compressed texture loaded in ArrayBuffer\n * @param data - binary data of compressed texture\n * @returns Array of the texture levels\n */\nexport function parseCompressedTexture(data) {\n  if (isKTX(data)) {\n    // TODO: remove @ts-ignore when `parseKTX` output is normalized to loaders.gl texture format\n    // @ts-ignore\n    return parseKTX(data);\n  }\n  if (isDDS(data)) {\n    return parseDDS(data);\n  }\n  if (isPVR(data)) {\n    return parsePVR(data);\n  }\n  throw new Error('Texture container format not recognized');\n}","map":{"version":3,"names":["isKTX","parseKTX","isDDS","parseDDS","isPVR","parsePVR","parseCompressedTexture","data","Error"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/textures/dist/lib/parsers/parse-compressed-texture.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isKTX, parseKTX } from \"./parse-ktx.js\";\nimport { isDDS, parseDDS } from \"./parse-dds.js\";\nimport { isPVR, parsePVR } from \"./parse-pvr.js\";\n/**\n * Deduces format and parses compressed texture loaded in ArrayBuffer\n * @param data - binary data of compressed texture\n * @returns Array of the texture levels\n */\nexport function parseCompressedTexture(data) {\n    if (isKTX(data)) {\n        // TODO: remove @ts-ignore when `parseKTX` output is normalized to loaders.gl texture format\n        // @ts-ignore\n        return parseKTX(data);\n    }\n    if (isDDS(data)) {\n        return parseDDS(data);\n    }\n    if (isPVR(data)) {\n        return parsePVR(data);\n    }\n    throw new Error('Texture container format not recognized');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;AAChD,SAASC,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;AAChD,SAASC,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,IAAI,EAAE;EACzC,IAAIP,KAAK,CAACO,IAAI,CAAC,EAAE;IACb;IACA;IACA,OAAON,QAAQ,CAACM,IAAI,CAAC;EACzB;EACA,IAAIL,KAAK,CAACK,IAAI,CAAC,EAAE;IACb,OAAOJ,QAAQ,CAACI,IAAI,CAAC;EACzB;EACA,IAAIH,KAAK,CAACG,IAAI,CAAC,EAAE;IACb,OAAOF,QAAQ,CAACE,IAAI,CAAC;EACzB;EACA,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}