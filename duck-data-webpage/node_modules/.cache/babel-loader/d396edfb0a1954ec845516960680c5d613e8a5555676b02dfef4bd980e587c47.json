{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { createColorRangeTexture, updateColorRangeTexture } from \"../common/utils/color-utils.js\";\nimport vs from \"./hexagon-cell-layer-vertex.glsl.js\";\nimport { hexagonUniforms } from \"./hexagon-layer-uniforms.js\";\nclass HexagonCellLayer extends ColumnLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.modules.push(hexagonUniforms);\n    return {\n      ...shaders,\n      vs\n    };\n  }\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.remove(['instanceElevations', 'instanceFillColors', 'instanceLineColors', 'instanceStrokeWidths']);\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 2,\n        type: 'float32',\n        accessor: 'getBin'\n      },\n      instanceColorValues: {\n        size: 1,\n        type: 'float32',\n        accessor: 'getColorValue'\n      },\n      instanceElevationValues: {\n        size: 1,\n        type: 'float32',\n        accessor: 'getElevationValue'\n      }\n    });\n  }\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    const model = this.state.fillModel;\n    if (oldProps.colorRange !== props.colorRange) {\n      this.state.colorTexture?.destroy();\n      this.state.colorTexture = createColorRangeTexture(this.context.device, props.colorRange, props.colorScaleType);\n      const hexagonProps = {\n        colorRange: this.state.colorTexture\n      };\n      model.shaderInputs.setProps({\n        hexagon: hexagonProps\n      });\n    } else if (oldProps.colorScaleType !== props.colorScaleType) {\n      updateColorRangeTexture(this.state.colorTexture, props.colorScaleType);\n    }\n  }\n  finalizeState(context) {\n    super.finalizeState(context);\n    this.state.colorTexture?.destroy();\n  }\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      radius,\n      hexOriginCommon,\n      elevationRange,\n      elevationScale,\n      extruded,\n      coverage,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n    const colorCutoff = this.props.colorCutoff || [-Infinity, Infinity];\n    const elevationCutoff = this.props.elevationCutoff || [-Infinity, Infinity];\n    const fillModel = this.state.fillModel;\n    if (fillModel.vertexArray.indexBuffer) {\n      // indices are for drawing wireframe, disable them\n      // TODO - this should be handled in ColumnLayer?\n      fillModel.setIndexBuffer(null);\n    }\n    fillModel.setVertexCount(this.state.fillVertexCount);\n    const hexagonProps = {\n      colorDomain: [Math.max(colorDomain[0], colorCutoff[0]),\n      // instanceColorValue that maps to colorRange[0]\n      Math.min(colorDomain[1], colorCutoff[1]),\n      // instanceColorValue that maps to colorRange[colorRange.length - 1]\n      Math.max(colorDomain[0] - 1, colorCutoff[0]),\n      // hide cell if instanceColorValue is less than this\n      Math.min(colorDomain[1] + 1, colorCutoff[1]) // hide cell if instanceColorValue is greater than this\n      ],\n      elevationDomain: [Math.max(elevationDomain[0], elevationCutoff[0]),\n      // instanceElevationValue that maps to elevationRange[0]\n      Math.min(elevationDomain[1], elevationCutoff[1]),\n      // instanceElevationValue that maps to elevationRange[elevationRange.length - 1]\n      Math.max(elevationDomain[0] - 1, elevationCutoff[0]),\n      // hide cell if instanceElevationValue is less than this\n      Math.min(elevationDomain[1] + 1, elevationCutoff[1]) // hide cell if instanceElevationValue is greater than this\n      ],\n      elevationRange: [elevationRange[0] * elevationScale, elevationRange[1] * elevationScale],\n      originCommon: hexOriginCommon\n    };\n    fillModel.shaderInputs.setProps({\n      column: {\n        extruded,\n        coverage,\n        radius\n      },\n      hexagon: hexagonProps\n    });\n    fillModel.draw(this.context.renderPass);\n  }\n}\nHexagonCellLayer.layerName = 'HexagonCellLayer';\nexport default HexagonCellLayer;\n//# sourceMappingURL=hexagon-cell-layer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}