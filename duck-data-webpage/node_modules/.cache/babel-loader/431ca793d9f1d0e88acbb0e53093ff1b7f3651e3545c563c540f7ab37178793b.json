{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport class HttpFile {\n  handle;\n  size = 0;\n  bigsize = 0n;\n  url;\n  constructor(url) {\n    this.handle = url;\n    this.url = url;\n  }\n  async close() {}\n  async stat() {\n    const response = await fetch(this.handle, {\n      method: 'HEAD'\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch HEAD ${this.handle}`);\n    }\n    const size = parseInt(response.headers.get('Content-Length') || '0');\n    return {\n      size,\n      bigsize: BigInt(size),\n      isDirectory: false\n    };\n  }\n  async read(offset = 0, length = 0) {\n    const response = await this.fetchRange(offset, length);\n    const arrayBuffer = await response.arrayBuffer();\n    return arrayBuffer;\n  }\n  /**\n   *\n   * @param offset\n   * @param length\n   * @param signal\n   * @returns\n   * @see https://github.com/protomaps/PMTiles\n   */\n  // eslint-disable-next-line complexity\n  async fetchRange(offset, length, signal) {\n    const nOffset = Number(offset);\n    const nLength = Number(length);\n    let controller;\n    if (!signal) {\n      // ToDO why is it so important to abort in case 200?\n      // TODO check this works or assert 206\n      controller = new AbortController();\n      signal = controller.signal;\n    }\n    const url = this.handle;\n    let response = await fetch(url, {\n      signal,\n      headers: {\n        Range: `bytes=${nOffset}-${nOffset + nLength - 1}`\n      }\n    });\n    switch (response.status) {\n      case 206:\n        // Partial Content success\n        // This is the expected success code for a range request\n        break;\n      case 200:\n        // some well-behaved backends, e.g. DigitalOcean CDN, respond with 200 instead of 206\n        // but we also need to detect no support for Byte Serving which is returning the whole file\n        const contentLength = response.headers.get('Content-Length');\n        if (!contentLength || Number(contentLength) > length) {\n          if (controller) {\n            controller.abort();\n          }\n          throw Error('content-length header missing or exceeding request. Server must support HTTP Byte Serving.');\n        }\n      // @eslint-disable-next-line no-fallthrough\n      case 416:\n        // \"Range Not Satisfiable\"\n        // some HTTP servers don't accept ranges beyond the end of the resource.\n        // Retry with the exact length\n        // TODO: can return 416 with offset > 0 if content changed, which will have a blank etag.\n        // See https://github.com/protomaps/PMTiles/issues/90\n        if (offset === 0) {\n          const contentRange = response.headers.get('Content-Range');\n          if (!contentRange || !contentRange.startsWith('bytes *')) {\n            throw Error('Missing content-length on 416 response');\n          }\n          const actualLength = Number(contentRange.substr(8));\n          response = await fetch(this.url, {\n            signal,\n            headers: {\n              Range: `bytes=0-${actualLength - 1}`\n            }\n          });\n        }\n        break;\n      default:\n        if (response.status >= 300) {\n          throw Error(`Bad response code: ${response.status}`);\n        }\n    }\n    return response;\n    // const data = await response.arrayBuffer();\n    // return {\n    //   data,\n    //   etag: response.headers.get('ETag') || undefined,\n    //   cacheControl: response.headers.get('Cache-Control') || undefined,\n    //   expires: response.headers.get('Expires') || undefined\n    // };\n  }\n}","map":{"version":3,"names":["HttpFile","handle","size","bigsize","url","constructor","close","stat","response","fetch","method","ok","Error","parseInt","headers","get","BigInt","isDirectory","read","offset","length","fetchRange","arrayBuffer","signal","nOffset","Number","nLength","controller","AbortController","Range","status","contentLength","abort","contentRange","startsWith","actualLength","substr"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/loader-utils/dist/lib/files/http-file.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport class HttpFile {\n    handle;\n    size = 0;\n    bigsize = 0n;\n    url;\n    constructor(url) {\n        this.handle = url;\n        this.url = url;\n    }\n    async close() { }\n    async stat() {\n        const response = await fetch(this.handle, { method: 'HEAD' });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch HEAD ${this.handle}`);\n        }\n        const size = parseInt(response.headers.get('Content-Length') || '0');\n        return {\n            size,\n            bigsize: BigInt(size),\n            isDirectory: false\n        };\n    }\n    async read(offset = 0, length = 0) {\n        const response = await this.fetchRange(offset, length);\n        const arrayBuffer = await response.arrayBuffer();\n        return arrayBuffer;\n    }\n    /**\n     *\n     * @param offset\n     * @param length\n     * @param signal\n     * @returns\n     * @see https://github.com/protomaps/PMTiles\n     */\n    // eslint-disable-next-line complexity\n    async fetchRange(offset, length, signal) {\n        const nOffset = Number(offset);\n        const nLength = Number(length);\n        let controller;\n        if (!signal) {\n            // ToDO why is it so important to abort in case 200?\n            // TODO check this works or assert 206\n            controller = new AbortController();\n            signal = controller.signal;\n        }\n        const url = this.handle;\n        let response = await fetch(url, {\n            signal,\n            headers: { Range: `bytes=${nOffset}-${nOffset + nLength - 1}` }\n        });\n        switch (response.status) {\n            case 206: // Partial Content success\n                // This is the expected success code for a range request\n                break;\n            case 200:\n                // some well-behaved backends, e.g. DigitalOcean CDN, respond with 200 instead of 206\n                // but we also need to detect no support for Byte Serving which is returning the whole file\n                const contentLength = response.headers.get('Content-Length');\n                if (!contentLength || Number(contentLength) > length) {\n                    if (controller) {\n                        controller.abort();\n                    }\n                    throw Error('content-length header missing or exceeding request. Server must support HTTP Byte Serving.');\n                }\n            // @eslint-disable-next-line no-fallthrough\n            case 416: // \"Range Not Satisfiable\"\n                // some HTTP servers don't accept ranges beyond the end of the resource.\n                // Retry with the exact length\n                // TODO: can return 416 with offset > 0 if content changed, which will have a blank etag.\n                // See https://github.com/protomaps/PMTiles/issues/90\n                if (offset === 0) {\n                    const contentRange = response.headers.get('Content-Range');\n                    if (!contentRange || !contentRange.startsWith('bytes *')) {\n                        throw Error('Missing content-length on 416 response');\n                    }\n                    const actualLength = Number(contentRange.substr(8));\n                    response = await fetch(this.url, {\n                        signal,\n                        headers: { Range: `bytes=0-${actualLength - 1}` }\n                    });\n                }\n                break;\n            default:\n                if (response.status >= 300) {\n                    throw Error(`Bad response code: ${response.status}`);\n                }\n        }\n        return response;\n        // const data = await response.arrayBuffer();\n        // return {\n        //   data,\n        //   etag: response.headers.get('ETag') || undefined,\n        //   cacheControl: response.headers.get('Cache-Control') || undefined,\n        //   expires: response.headers.get('Expires') || undefined\n        // };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}