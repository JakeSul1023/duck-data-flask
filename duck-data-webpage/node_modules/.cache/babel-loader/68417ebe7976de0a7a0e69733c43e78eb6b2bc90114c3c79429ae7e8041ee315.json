{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getCode, getLines, getPolygons } from \"./marching-squares.js\";\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  contours,\n  getValue,\n  xRange,\n  yRange\n}) {\n  const contourLines = [];\n  const contourPolygons = [];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n  for (let i = 0; i < contours.length; i++) {\n    const contour = contours[i];\n    const z = contour.zIndex ?? i;\n    const {\n      threshold\n    } = contour;\n    for (let x = xRange[0] - 1; x < xRange[1]; x++) {\n      for (let y = yRange[0] - 1; y < yRange[1]; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {\n          code,\n          meanCode\n        } = getCode({\n          getValue,\n          threshold,\n          x,\n          y,\n          xRange,\n          yRange\n        });\n        const opts = {\n          x,\n          y,\n          z,\n          code,\n          meanCode\n        };\n        if (Array.isArray(threshold)) {\n          // ISO bands\n          const polygons = getPolygons(opts);\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // ISO lines\n          const path = getLines(opts);\n          if (path.length > 0) {\n            contourLines[segmentIndex++] = {\n              vertices: path,\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {\n    lines: contourLines,\n    polygons: contourPolygons\n  };\n}\n/* eslint-enable max-depth */\n//# sourceMappingURL=contour-utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}