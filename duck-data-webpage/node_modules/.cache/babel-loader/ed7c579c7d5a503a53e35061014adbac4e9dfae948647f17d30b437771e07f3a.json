{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\nimport { Texture } from \"./texture.js\";\nimport { log } from \"../../utils/log.js\";\n/**\n * Create new textures with correct size for all attachments.\n * @note resize() destroys existing textures (if size has changed).\n */\nexport class Framebuffer extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    width: 1,\n    height: 1,\n    colorAttachments: [],\n    // ['rgba8unorm'],\n    depthStencilAttachment: null // 'depth24plus-stencil8'\n  };\n  get [Symbol.toStringTag]() {\n    return 'Framebuffer';\n  }\n  /** Width of all attachments in this framebuffer */\n  width;\n  /** Height of all attachments in this framebuffer */\n  height;\n  constructor(device, props = {}) {\n    super(device, props, Framebuffer.defaultProps);\n    this.width = this.props.width;\n    this.height = this.props.height;\n  }\n  /**\n   * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.\n   * @note Does not copy contents of the attached textures.\n   */\n  clone(size) {\n    const colorAttachments = this.colorAttachments.map(colorAttachment => colorAttachment.texture.clone(size));\n    const depthStencilAttachment = this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);\n    return this.device.createFramebuffer({\n      ...this.props,\n      colorAttachments,\n      depthStencilAttachment\n    });\n  }\n  resize(size) {\n    let updateSize = !size;\n    if (size) {\n      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];\n      updateSize = updateSize || height !== this.height || width !== this.width;\n      this.width = width;\n      this.height = height;\n    }\n    if (updateSize) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();\n      this.resizeAttachments(this.width, this.height);\n    }\n  }\n  /** Auto creates any textures */\n  autoCreateAttachmentTextures() {\n    if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {\n      throw new Error('Framebuffer has noattachments');\n    }\n    this.colorAttachments = this.props.colorAttachments.map((attachment, index) => {\n      if (typeof attachment === 'string') {\n        const texture = this.createColorTexture(attachment, index);\n        this.attachResource(texture);\n        return texture.view;\n      }\n      if (attachment instanceof Texture) {\n        return attachment.view;\n      }\n      return attachment;\n    });\n    const attachment = this.props.depthStencilAttachment;\n    if (attachment) {\n      if (typeof attachment === 'string') {\n        const texture = this.createDepthStencilTexture(attachment);\n        this.attachResource(texture);\n        this.depthStencilAttachment = texture.view;\n      } else if (attachment instanceof Texture) {\n        this.depthStencilAttachment = attachment.view;\n      } else {\n        this.depthStencilAttachment = attachment;\n      }\n    }\n  }\n  /** Create a color texture */\n  createColorTexture(format, index) {\n    return this.device.createTexture({\n      id: `${this.id}-color-attachment-${index}`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n      // TODO deprecated? - luma.gl v8 compatibility\n      sampler: {\n        magFilter: 'linear',\n        minFilter: 'linear'\n      }\n    });\n  }\n  /** Create depth stencil texture */\n  createDepthStencilTexture(format) {\n    return this.device.createTexture({\n      id: `${this.id}-depth-stencil-attachment`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n      mipmaps: false\n    });\n  }\n  /**\n   * Default implementation of resize\n   * Creates new textures with correct size for all attachments.\n   * and destroys existing textures if owned\n   */\n  resizeAttachments(width, height) {\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      if (this.colorAttachments[i]) {\n        const resizedTexture = this.colorAttachments[i].texture.clone({\n          width,\n          height\n        });\n        this.destroyAttachedResource(this.colorAttachments[i]);\n        this.colorAttachments[i] = resizedTexture.view;\n        this.attachResource(resizedTexture.view);\n      }\n    }\n    if (this.depthStencilAttachment) {\n      const resizedTexture = this.depthStencilAttachment.texture.clone({\n        width,\n        height\n      });\n      this.destroyAttachedResource(this.depthStencilAttachment);\n      this.depthStencilAttachment = resizedTexture.view;\n      this.attachResource(resizedTexture);\n    }\n    this.updateAttachments();\n  }\n}\n//# sourceMappingURL=framebuffer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}