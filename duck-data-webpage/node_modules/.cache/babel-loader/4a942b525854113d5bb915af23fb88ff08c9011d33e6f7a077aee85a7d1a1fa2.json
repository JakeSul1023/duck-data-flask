{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { LayerExtension } from '@deck.gl/core';\nimport { TerrainEffect } from \"./terrain-effect.js\";\nimport { terrainModule } from \"./shader-module.js\";\nconst defaultProps = {\n  terrainDrawMode: undefined\n};\n/** Allows layers to show/hide objects by a geofence. */\nclass TerrainExtension extends LayerExtension {\n  getShaders() {\n    return {\n      modules: [terrainModule]\n    };\n  }\n  initializeState() {\n    this.context.deck?._addDefaultEffect(new TerrainEffect());\n  }\n  updateState(params) {\n    const {\n      props,\n      oldProps\n    } = params;\n    if (this.state.terrainDrawMode && props.terrainDrawMode === oldProps.terrainDrawMode &&\n    // @ts-ignore `extruded` may not exist in props\n    props.extruded === oldProps.extruded) {\n      return;\n    }\n    let {\n      terrainDrawMode\n    } = props;\n    if (!terrainDrawMode) {\n      // props.extruded is used as an indication that the layer is 2.5D\n      // @ts-ignore `extruded` may not exist in props\n      const is3d = this.props.extruded;\n      const attributes = this.getAttributeManager()?.attributes;\n      const hasAnchor = attributes && 'instancePositions' in attributes;\n      terrainDrawMode = is3d || hasAnchor ? 'offset' : 'drape';\n    }\n    this.setState({\n      terrainDrawMode\n    });\n  }\n  onNeedsRedraw() {\n    const state = this.state;\n    if (state.terrainDrawMode === 'drape') {\n      state.terrainCoverNeedsRedraw = true;\n    }\n  }\n}\nTerrainExtension.defaultProps = defaultProps;\nTerrainExtension.extensionName = 'TerrainExtension';\nexport default TerrainExtension;\n//# sourceMappingURL=terrain-extension.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}