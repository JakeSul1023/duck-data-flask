{"ast":null,"code":"// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Resource } from \"./resource.js\";\n/** Immutable Sampler object */\nexport class Sampler extends Resource {\n  static defaultProps = {\n    ...Resource.defaultProps,\n    type: 'color-sampler',\n    addressModeU: 'clamp-to-edge',\n    addressModeV: 'clamp-to-edge',\n    addressModeW: 'clamp-to-edge',\n    magFilter: 'nearest',\n    minFilter: 'nearest',\n    mipmapFilter: 'none',\n    lodMinClamp: 0,\n    lodMaxClamp: 32,\n    // Per WebGPU spec\n    compare: 'less-equal',\n    maxAnisotropy: 1\n  };\n  get [Symbol.toStringTag]() {\n    return 'Sampler';\n  }\n  constructor(device, props) {\n    props = Sampler.normalizeProps(device, props);\n    super(device, props, Sampler.defaultProps);\n  }\n  static normalizeProps(device, props) {\n    const overriddenDefaultProps = device?.props?._resourceDefaults?.sampler || {};\n    const newProps = {\n      ...props,\n      ...overriddenDefaultProps\n    };\n    return newProps;\n  }\n}","map":{"version":3,"names":["Resource","Sampler","defaultProps","type","addressModeU","addressModeV","addressModeW","magFilter","minFilter","mipmapFilter","lodMinClamp","lodMaxClamp","compare","maxAnisotropy","Symbol","toStringTag","constructor","device","props","normalizeProps","overriddenDefaultProps","_resourceDefaults","sampler","newProps"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@luma.gl\\core\\src\\adapter\\resources\\sampler.ts"],"sourcesContent":["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {CompareFunction} from '../types/parameters';\nimport {Resource, ResourceProps} from './resource';\n\n/** Edge values sampling mode */\nexport type SamplerAddressMode = 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n\n/** Sampler filtering mode */\nexport type SamplerFilterMode = 'nearest' | 'linear';\n\n/**\n * Properties for initializing a sampler\n */\nexport type SamplerProps = ResourceProps & {\n  /** Comparison / shadow samplers are used with depth textures. See the `Sampler.compare` field */\n  type?: 'color-sampler' | 'comparison-sampler';\n  /** Edge value sampling in X direction */\n  addressModeU?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n  /** Edge value sampling in Y direction */\n  addressModeV?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n  /** Edge value sampling in Z direction */\n  addressModeW?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n\n  /** Magnification: the area of the fragment in texture space is smaller than a texel */\n  magFilter?: 'nearest' | 'linear';\n  /** Minification: the area of the fragment in texture space is larger than a texel */\n  minFilter?: 'nearest' | 'linear';\n  /** mipmapping: select between multiple mipmaps based on angle and size of the texture relative to the screen. */\n  mipmapFilter?: 'none' | 'nearest' | 'linear';\n  /** Affects the mipmap image selection */\n  lodMinClamp?: number;\n  /** Affects the mipmap image selection */\n  lodMaxClamp?: number;\n  /** Maximum number of samples that can be taken of the texture during any one texture fetch */\n  maxAnisotropy?: number;\n  /** How to compare reference values provided in shader shadow sampler calls with those pulled from the texture */\n  compare?: CompareFunction;\n};\n\nexport type SamplerParameters = Omit<SamplerProps, keyof ResourceProps>;\n\n/** Immutable Sampler object */\nexport abstract class Sampler extends Resource<SamplerProps> {\n  static override defaultProps: Required<SamplerProps> = {\n    ...Resource.defaultProps,\n    type: 'color-sampler',\n    addressModeU: 'clamp-to-edge',\n    addressModeV: 'clamp-to-edge',\n    addressModeW: 'clamp-to-edge',\n    magFilter: 'nearest',\n    minFilter: 'nearest',\n    mipmapFilter: 'none',\n    lodMinClamp: 0,\n    lodMaxClamp: 32, // Per WebGPU spec\n    compare: 'less-equal',\n    maxAnisotropy: 1\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'Sampler';\n  }\n\n  constructor(device: Device, props: SamplerProps) {\n    props = Sampler.normalizeProps(device, props);\n    super(device, props, Sampler.defaultProps);\n  }\n\n  protected static normalizeProps(device: Device, props: SamplerProps): SamplerProps {\n    const overriddenDefaultProps: Partial<SamplerProps> =\n      device?.props?._resourceDefaults?.sampler || {};\n    const newProps = {...props, ...overriddenDefaultProps};\n    return newProps;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAIA,SAAQA,QAAQ,QAAgB;AAuChC;AACA,OAAM,MAAgBC,OAAQ,SAAQD,QAAsB;EAC1D,OAAgBE,YAAY,GAA2B;IACrD,GAAGF,QAAQ,CAACE,YAAY;IACxBC,IAAI,EAAE,eAAe;IACrBC,YAAY,EAAE,eAAe;IAC7BC,YAAY,EAAE,eAAe;IAC7BC,YAAY,EAAE,eAAe;IAC7BC,SAAS,EAAE,SAAS;IACpBC,SAAS,EAAE,SAAS;IACpBC,YAAY,EAAE,MAAM;IACpBC,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,EAAE;IAAE;IACjBC,OAAO,EAAE,YAAY;IACrBC,aAAa,EAAE;GAChB;EAED,KAAcC,MAAM,CAACC,WAAW,IAAC;IAC/B,OAAO,SAAS;EAClB;EAEAC,YAAYC,MAAc,EAAEC,KAAmB;IAC7CA,KAAK,GAAGjB,OAAO,CAACkB,cAAc,CAACF,MAAM,EAAEC,KAAK,CAAC;IAC7C,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEjB,OAAO,CAACC,YAAY,CAAC;EAC5C;EAEU,OAAOiB,cAAcA,CAACF,MAAc,EAAEC,KAAmB;IACjE,MAAME,sBAAsB,GAC1BH,MAAM,EAAEC,KAAK,EAAEG,iBAAiB,EAAEC,OAAO,IAAI,EAAE;IACjD,MAAMC,QAAQ,GAAG;MAAC,GAAGL,KAAK;MAAE,GAAGE;IAAsB,CAAC;IACtD,OAAOG,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}