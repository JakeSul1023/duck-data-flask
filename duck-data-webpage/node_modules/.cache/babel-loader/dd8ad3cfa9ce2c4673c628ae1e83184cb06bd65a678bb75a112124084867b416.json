{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { TILE3D_TYPE } from \"../constants.js\";\nimport { getMagicString } from \"./helpers/parse-utils.js\";\nimport { parsePointCloud3DTile } from \"./parse-3d-tile-point-cloud.js\";\nimport { parseBatchedModel3DTile } from \"./parse-3d-tile-batched-model.js\";\nimport { parseInstancedModel3DTile } from \"./parse-3d-tile-instanced-model.js\";\nimport { parseComposite3DTile } from \"./parse-3d-tile-composite.js\";\nimport { parseGltf3DTile } from \"./parse-3d-tile-gltf.js\";\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {\n  shape: 'tile3d'\n}) {\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile);\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n    case TILE3D_TYPE.GLTF:\n      return await parseGltf3DTile(tile, arrayBuffer, options, context);\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`);\n    // eslint-disable-line\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}