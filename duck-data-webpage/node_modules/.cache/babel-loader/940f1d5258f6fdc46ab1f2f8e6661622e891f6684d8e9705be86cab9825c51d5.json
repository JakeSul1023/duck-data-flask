{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { normalizeLoader } from \"../loader-utils/normalize-loader.js\";\nimport { getGlobalLoaderState } from \"../loader-utils/option-utils.js\";\n/**\n * Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n * This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\n */\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n/**\n * Register a list of global loaders\n * @note Registration erases loader type information.\n * @deprecated It is recommended that applications manage loader registration. This function will likely be remove in loaders.gl v5\n */\nexport function registerLoaders(loaders) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find(registeredLoader => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\n/**\n * @deprecated It is recommended that applications manage loader registration. This function will likely be remove in loaders.gl v5\n */\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\n/** @deprecated For testing only  */\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}","map":{"version":3,"names":["normalizeLoader","getGlobalLoaderState","getGlobalLoaderRegistry","state","loaderRegistry","registerLoaders","loaders","Array","isArray","loader","normalizedLoader","find","registeredLoader","unshift","getRegisteredLoaders","_unregisterLoaders"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { normalizeLoader } from \"../loader-utils/normalize-loader.js\";\nimport { getGlobalLoaderState } from \"../loader-utils/option-utils.js\";\n/**\n * Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n * This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\n */\nconst getGlobalLoaderRegistry = () => {\n    const state = getGlobalLoaderState();\n    state.loaderRegistry = state.loaderRegistry || [];\n    return state.loaderRegistry;\n};\n/**\n * Register a list of global loaders\n * @note Registration erases loader type information.\n * @deprecated It is recommended that applications manage loader registration. This function will likely be remove in loaders.gl v5\n */\nexport function registerLoaders(loaders) {\n    const loaderRegistry = getGlobalLoaderRegistry();\n    loaders = Array.isArray(loaders) ? loaders : [loaders];\n    for (const loader of loaders) {\n        const normalizedLoader = normalizeLoader(loader);\n        if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {\n            // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n            loaderRegistry.unshift(normalizedLoader);\n        }\n    }\n}\n/**\n * @deprecated It is recommended that applications manage loader registration. This function will likely be remove in loaders.gl v5\n */\nexport function getRegisteredLoaders() {\n    return getGlobalLoaderRegistry();\n}\n/** @deprecated For testing only  */\nexport function _unregisterLoaders() {\n    const state = getGlobalLoaderState();\n    state.loaderRegistry = [];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,qCAAqC;AACrE,SAASC,oBAAoB,QAAQ,iCAAiC;AACtE;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAClC,MAAMC,KAAK,GAAGF,oBAAoB,CAAC,CAAC;EACpCE,KAAK,CAACC,cAAc,GAAGD,KAAK,CAACC,cAAc,IAAI,EAAE;EACjD,OAAOD,KAAK,CAACC,cAAc;AAC/B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACrC,MAAMF,cAAc,GAAGF,uBAAuB,CAAC,CAAC;EAChDI,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;EACtD,KAAK,MAAMG,MAAM,IAAIH,OAAO,EAAE;IAC1B,MAAMI,gBAAgB,GAAGV,eAAe,CAACS,MAAM,CAAC;IAChD,IAAI,CAACL,cAAc,CAACO,IAAI,CAAEC,gBAAgB,IAAKF,gBAAgB,KAAKE,gBAAgB,CAAC,EAAE;MACnF;MACAR,cAAc,CAACS,OAAO,CAACH,gBAAgB,CAAC;IAC5C;EACJ;AACJ;AACA;AACA;AACA;AACA,OAAO,SAASI,oBAAoBA,CAAA,EAAG;EACnC,OAAOZ,uBAAuB,CAAC,CAAC;AACpC;AACA;AACA,OAAO,SAASa,kBAAkBA,CAAA,EAAG;EACjC,MAAMZ,KAAK,GAAGF,oBAAoB,CAAC,CAAC;EACpCE,KAAK,CAACC,cAAc,GAAG,EAAE;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}