{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { getS2Cell } from \"../s2geometry/s2-cell-utils.js\";\nimport { getS2Region } from \"./s2-to-region.js\";\nimport { Vector3 } from '@math.gl/core';\n/**\n * Converts S2HeightInfo to corner points of an oriented bounding box\n * Can be used to constuct an OrientedBoundingBox instance\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @param heightInfo {S2HeightInfo} min and max height of the box\n * @returns corner points of the oriented bounding box\n */\nexport function getS2OrientedBoundingBoxCornerPoints(tokenOrKey,\n// This can be an S2 key or token\nheightInfo) {\n  const min = heightInfo?.minimumHeight || 0;\n  const max = heightInfo?.maximumHeight || 0;\n  const s2cell = getS2Cell(tokenOrKey);\n  const region = getS2Region(s2cell);\n  // region lng/lat are in degrees\n  const W = region.west;\n  const S = region.south;\n  const E = region.east;\n  const N = region.north;\n  const points = [];\n  points.push(new Vector3(W, N, min));\n  points.push(new Vector3(E, N, min));\n  points.push(new Vector3(E, S, min));\n  points.push(new Vector3(W, S, min));\n  points.push(new Vector3(W, N, max));\n  points.push(new Vector3(E, N, max));\n  points.push(new Vector3(E, S, max));\n  points.push(new Vector3(W, S, max));\n  return points;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}