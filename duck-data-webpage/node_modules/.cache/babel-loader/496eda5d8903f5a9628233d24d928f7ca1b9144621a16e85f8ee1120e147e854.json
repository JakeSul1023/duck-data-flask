{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Deduce column types from values */\nexport function getDataTypeFromValue(value, defaultNumberType = 'float32') {\n  if (value instanceof Date) {\n    return 'date-millisecond';\n  }\n  if (value instanceof Number) {\n    return defaultNumberType;\n  }\n  if (typeof value === 'string') {\n    return 'utf8';\n  }\n  if (value === null || value === 'undefined') {\n    return 'null';\n  }\n  return 'null';\n}\n/**\n * Deduces a simple data type \"descriptor from a typed array instance\n */\nexport function getDataTypeFromArray(array) {\n  let type = getDataTypeFromTypedArray(array);\n  if (type !== 'null') {\n    return {\n      type,\n      nullable: false\n    };\n  }\n  if (array.length > 0) {\n    type = getDataTypeFromValue(array[0]);\n    return {\n      type,\n      nullable: true\n    };\n  }\n  return {\n    type: 'null',\n    nullable: true\n  };\n}\n/**\n * Deduces a simple data type \"descriptor from a typed array instance\n */\nexport function getDataTypeFromTypedArray(array) {\n  switch (array.constructor) {\n    case Int8Array:\n      return 'int8';\n    case Uint8Array:\n    case Uint8ClampedArray:\n      return 'uint8';\n    case Int16Array:\n      return 'int16';\n    case Uint16Array:\n      return 'uint16';\n    case Int32Array:\n      return 'int32';\n    case Uint32Array:\n      return 'uint32';\n    case Float32Array:\n      return 'float32';\n    case Float64Array:\n      return 'float64';\n    default:\n      return 'null';\n  }\n}\nexport function getArrayTypeFromDataType(type, nullable) {\n  if (!nullable) {\n    switch (type) {\n      case 'int8':\n        return Int8Array;\n      case 'uint8':\n        return Uint8Array;\n      case 'int16':\n        return Int16Array;\n      case 'uint16':\n        return Uint16Array;\n      case 'int32':\n        return Int32Array;\n      case 'uint32':\n        return Uint32Array;\n      case 'float32':\n        return Float32Array;\n      case 'float64':\n        return Float64Array;\n      default:\n        break;\n    }\n  }\n  // if (typeof BigInt64Array !== 'undefined') {\n  //   TYPED_ARRAY_TO_TYPE.BigInt64Array = new Int64();\n  //   TYPED_ARRAY_TO_TYPE.BigUint64Array = new Uint64();\n  // }\n  return Array;\n}","map":{"version":3,"names":["getDataTypeFromValue","value","defaultNumberType","Date","Number","getDataTypeFromArray","array","type","getDataTypeFromTypedArray","nullable","length","constructor","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","getArrayTypeFromDataType","Array"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/schema/dist/lib/table/simple-table/data-type.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Deduce column types from values */\nexport function getDataTypeFromValue(value, defaultNumberType = 'float32') {\n    if (value instanceof Date) {\n        return 'date-millisecond';\n    }\n    if (value instanceof Number) {\n        return defaultNumberType;\n    }\n    if (typeof value === 'string') {\n        return 'utf8';\n    }\n    if (value === null || value === 'undefined') {\n        return 'null';\n    }\n    return 'null';\n}\n/**\n * Deduces a simple data type \"descriptor from a typed array instance\n */\nexport function getDataTypeFromArray(array) {\n    let type = getDataTypeFromTypedArray(array);\n    if (type !== 'null') {\n        return { type, nullable: false };\n    }\n    if (array.length > 0) {\n        type = getDataTypeFromValue(array[0]);\n        return { type, nullable: true };\n    }\n    return { type: 'null', nullable: true };\n}\n/**\n * Deduces a simple data type \"descriptor from a typed array instance\n */\nexport function getDataTypeFromTypedArray(array) {\n    switch (array.constructor) {\n        case Int8Array:\n            return 'int8';\n        case Uint8Array:\n        case Uint8ClampedArray:\n            return 'uint8';\n        case Int16Array:\n            return 'int16';\n        case Uint16Array:\n            return 'uint16';\n        case Int32Array:\n            return 'int32';\n        case Uint32Array:\n            return 'uint32';\n        case Float32Array:\n            return 'float32';\n        case Float64Array:\n            return 'float64';\n        default:\n            return 'null';\n    }\n}\nexport function getArrayTypeFromDataType(type, nullable) {\n    if (!nullable) {\n        switch (type) {\n            case 'int8':\n                return Int8Array;\n            case 'uint8':\n                return Uint8Array;\n            case 'int16':\n                return Int16Array;\n            case 'uint16':\n                return Uint16Array;\n            case 'int32':\n                return Int32Array;\n            case 'uint32':\n                return Uint32Array;\n            case 'float32':\n                return Float32Array;\n            case 'float64':\n                return Float64Array;\n            default:\n                break;\n        }\n    }\n    // if (typeof BigInt64Array !== 'undefined') {\n    //   TYPED_ARRAY_TO_TYPE.BigInt64Array = new Int64();\n    //   TYPED_ARRAY_TO_TYPE.BigUint64Array = new Uint64();\n    // }\n    return Array;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,oBAAoBA,CAACC,KAAK,EAAEC,iBAAiB,GAAG,SAAS,EAAE;EACvE,IAAID,KAAK,YAAYE,IAAI,EAAE;IACvB,OAAO,kBAAkB;EAC7B;EACA,IAAIF,KAAK,YAAYG,MAAM,EAAE;IACzB,OAAOF,iBAAiB;EAC5B;EACA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAO,MAAM;EACjB;EACA,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,WAAW,EAAE;IACzC,OAAO,MAAM;EACjB;EACA,OAAO,MAAM;AACjB;AACA;AACA;AACA;AACA,OAAO,SAASI,oBAAoBA,CAACC,KAAK,EAAE;EACxC,IAAIC,IAAI,GAAGC,yBAAyB,CAACF,KAAK,CAAC;EAC3C,IAAIC,IAAI,KAAK,MAAM,EAAE;IACjB,OAAO;MAAEA,IAAI;MAAEE,QAAQ,EAAE;IAAM,CAAC;EACpC;EACA,IAAIH,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE;IAClBH,IAAI,GAAGP,oBAAoB,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,OAAO;MAAEC,IAAI;MAAEE,QAAQ,EAAE;IAAK,CAAC;EACnC;EACA,OAAO;IAAEF,IAAI,EAAE,MAAM;IAAEE,QAAQ,EAAE;EAAK,CAAC;AAC3C;AACA;AACA;AACA;AACA,OAAO,SAASD,yBAAyBA,CAACF,KAAK,EAAE;EAC7C,QAAQA,KAAK,CAACK,WAAW;IACrB,KAAKC,SAAS;MACV,OAAO,MAAM;IACjB,KAAKC,UAAU;IACf,KAAKC,iBAAiB;MAClB,OAAO,OAAO;IAClB,KAAKC,UAAU;MACX,OAAO,OAAO;IAClB,KAAKC,WAAW;MACZ,OAAO,QAAQ;IACnB,KAAKC,UAAU;MACX,OAAO,OAAO;IAClB,KAAKC,WAAW;MACZ,OAAO,QAAQ;IACnB,KAAKC,YAAY;MACb,OAAO,SAAS;IACpB,KAAKC,YAAY;MACb,OAAO,SAAS;IACpB;MACI,OAAO,MAAM;EACrB;AACJ;AACA,OAAO,SAASC,wBAAwBA,CAACd,IAAI,EAAEE,QAAQ,EAAE;EACrD,IAAI,CAACA,QAAQ,EAAE;IACX,QAAQF,IAAI;MACR,KAAK,MAAM;QACP,OAAOK,SAAS;MACpB,KAAK,OAAO;QACR,OAAOC,UAAU;MACrB,KAAK,OAAO;QACR,OAAOE,UAAU;MACrB,KAAK,QAAQ;QACT,OAAOC,WAAW;MACtB,KAAK,OAAO;QACR,OAAOC,UAAU;MACrB,KAAK,QAAQ;QACT,OAAOC,WAAW;MACtB,KAAK,SAAS;QACV,OAAOC,YAAY;MACvB,KAAK,SAAS;QACV,OAAOC,YAAY;MACvB;QACI;IACR;EACJ;EACA;EACA;EACA;EACA;EACA,OAAOE,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}