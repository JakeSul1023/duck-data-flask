{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { assert } from '@loaders.gl/loader-utils';\n// Decode the JSON binary array into clear text\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  const textDecoder = new TextDecoder('utf8');\n  const typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n// Decode the JSON binary array into clear text\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\nexport function getMagicString(arrayBuffer, byteOffset = 0) {\n  const dataView = new DataView(arrayBuffer);\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}","map":{"version":3,"names":["assert","getStringFromArrayBuffer","arrayBuffer","byteOffset","byteLength","ArrayBuffer","textDecoder","TextDecoder","typedArray","Uint8Array","string","decode","getStringFromTypedArray","isView","getMagicString","dataView","DataView","String","fromCharCode","getUint8"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-utils.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT AND Apache-2.0\n// Copyright vis.gl contributors\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport { assert } from '@loaders.gl/loader-utils';\n// Decode the JSON binary array into clear text\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n    assert(arrayBuffer instanceof ArrayBuffer);\n    const textDecoder = new TextDecoder('utf8');\n    const typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n    const string = textDecoder.decode(typedArray);\n    return string;\n}\n// Decode the JSON binary array into clear text\nexport function getStringFromTypedArray(typedArray) {\n    assert(ArrayBuffer.isView(typedArray));\n    const textDecoder = new TextDecoder('utf8');\n    const string = textDecoder.decode(typedArray);\n    return string;\n}\nexport function getMagicString(arrayBuffer, byteOffset = 0) {\n    const dataView = new DataView(arrayBuffer);\n    return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,0BAA0B;AACjD;AACA,OAAO,SAASC,wBAAwBA,CAACC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAE;EAC1EJ,MAAM,CAACE,WAAW,YAAYG,WAAW,CAAC;EAC1C,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,MAAM,CAAC;EAC3C,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACP,WAAW,EAAEC,UAAU,EAAEC,UAAU,CAAC;EACtE,MAAMM,MAAM,GAAGJ,WAAW,CAACK,MAAM,CAACH,UAAU,CAAC;EAC7C,OAAOE,MAAM;AACjB;AACA;AACA,OAAO,SAASE,uBAAuBA,CAACJ,UAAU,EAAE;EAChDR,MAAM,CAACK,WAAW,CAACQ,MAAM,CAACL,UAAU,CAAC,CAAC;EACtC,MAAMF,WAAW,GAAG,IAAIC,WAAW,CAAC,MAAM,CAAC;EAC3C,MAAMG,MAAM,GAAGJ,WAAW,CAACK,MAAM,CAACH,UAAU,CAAC;EAC7C,OAAOE,MAAM;AACjB;AACA,OAAO,SAASI,cAAcA,CAACZ,WAAW,EAAEC,UAAU,GAAG,CAAC,EAAE;EACxD,MAAMY,QAAQ,GAAG,IAAIC,QAAQ,CAACd,WAAW,CAAC;EAC1C,OAAO;AACX,EAAEe,MAAM,CAACC,YAAY,CAACH,QAAQ,CAACI,QAAQ,CAAChB,UAAU,GAAG,CAAC,CAAC,CAAC;AACxD,EAAEc,MAAM,CAACC,YAAY,CAACH,QAAQ,CAACI,QAAQ,CAAChB,UAAU,GAAG,CAAC,CAAC,CAAC;AACxD,EAAEc,MAAM,CAACC,YAAY,CAACH,QAAQ,CAACI,QAAQ,CAAChB,UAAU,GAAG,CAAC,CAAC,CAAC;AACxD,EAAEc,MAAM,CAACC,YAAY,CAACH,QAAQ,CAACI,QAAQ,CAAChB,UAAU,GAAG,CAAC,CAAC,CAAC,EAAE;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}