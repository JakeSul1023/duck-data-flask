{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parsePosition, getPosition } from \"../utils/positions.js\";\nimport { deepEqual } from \"../utils/deep-equal.js\";\nexport default class View {\n  constructor(props) {\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null\n    } = props;\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n    this.props = {\n      ...props,\n      id: this.id\n    };\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n    // To correctly compare padding use depth=2\n    return this.constructor === view.constructor && deepEqual(this.props, view.props, 2);\n  }\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport(_ref) {\n    let {\n      width,\n      height,\n      viewState\n    } = _ref;\n    viewState = this.filterViewState(viewState);\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({\n      width,\n      height\n    });\n    if (!viewportDimensions.height || !viewportDimensions.width) {\n      return null;\n    }\n    const ViewportType = this.getViewportType(viewState);\n    return new ViewportType({\n      ...viewState,\n      ...this.props,\n      ...viewportDimensions\n    });\n  }\n  getViewStateId() {\n    const {\n      viewState\n    } = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n      // Merge in all props from View's viewState, except id\n      const newViewState = {\n        ...viewState\n      };\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n    return viewState;\n  }\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions(_ref2) {\n    let {\n      width,\n      height\n    } = _ref2;\n    const dimensions = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n  // Used by sub classes to resolve controller props\n  get controller() {\n    const opts = this.props.controller;\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {\n        type: this.ControllerType\n      };\n    }\n    if (typeof opts === 'function') {\n      return {\n        type: opts\n      };\n    }\n    return {\n      type: this.ControllerType,\n      ...opts\n    };\n  }\n}\n//# sourceMappingURL=view.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}