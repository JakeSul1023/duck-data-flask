{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst count = pointIndices => {\n  return pointIndices.length;\n};\nconst sum = (pointIndices, getValue) => {\n  let result = 0;\n  for (const i of pointIndices) {\n    result += getValue(i);\n  }\n  return result;\n};\nconst mean = (pointIndices, getValue) => {\n  if (pointIndices.length === 0) {\n    return NaN;\n  }\n  return sum(pointIndices, getValue) / pointIndices.length;\n};\nconst min = (pointIndices, getValue) => {\n  let result = Infinity;\n  for (const i of pointIndices) {\n    const value = getValue(i);\n    if (value < result) {\n      result = value;\n    }\n  }\n  return result;\n};\nconst max = (pointIndices, getValue) => {\n  let result = -Infinity;\n  for (const i of pointIndices) {\n    const value = getValue(i);\n    if (value > result) {\n      result = value;\n    }\n  }\n  return result;\n};\nexport const BUILT_IN_OPERATIONS = {\n  COUNT: count,\n  SUM: sum,\n  MEAN: mean,\n  MIN: min,\n  MAX: max\n};\n/**\n * Performs the aggregation step. See interface Aggregator comments.\n * @returns Floa32Array of aggregated values, one for each bin, and the [min,max] of the values\n */\nexport function aggregate({\n  bins,\n  getValue,\n  operation,\n  target\n}) {\n  if (!target || target.length < bins.length) {\n    target = new Float32Array(bins.length);\n  }\n  let min = Infinity;\n  let max = -Infinity;\n  for (let j = 0; j < bins.length; j++) {\n    const {\n      points\n    } = bins[j];\n    target[j] = operation(points, getValue);\n    if (target[j] < min) min = target[j];\n    if (target[j] > max) max = target[j];\n  }\n  return {\n    value: target,\n    domain: [min, max]\n  };\n}","map":{"version":3,"names":["count","pointIndices","length","sum","getValue","result","i","mean","NaN","min","Infinity","value","max","BUILT_IN_OPERATIONS","COUNT","SUM","MEAN","MIN","MAX","aggregate","bins","operation","target","Float32Array","j","points","domain"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\aggregation-layers\\src\\common\\aggregator\\cpu-aggregator\\aggregate.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Bin} from './cpu-aggregator';\nimport type {AggregationOperation} from '../aggregator';\n\n/** A reducer function that takes a list of data points and outputs one measurement */\nexport type AggregationFunc = (\n  /** Indices of the points */\n  pointIndices: number[],\n  /** Accessor to the value for each point */\n  getValue: (index: number) => number\n) => number;\n\nconst count: AggregationFunc = pointIndices => {\n  return pointIndices.length;\n};\n\nconst sum: AggregationFunc = (pointIndices, getValue) => {\n  let result = 0;\n  for (const i of pointIndices) {\n    result += getValue(i);\n  }\n  return result;\n};\n\nconst mean: AggregationFunc = (pointIndices, getValue) => {\n  if (pointIndices.length === 0) {\n    return NaN;\n  }\n  return sum(pointIndices, getValue) / pointIndices.length;\n};\n\nconst min: AggregationFunc = (pointIndices, getValue) => {\n  let result = Infinity;\n  for (const i of pointIndices) {\n    const value = getValue(i);\n    if (value < result) {\n      result = value;\n    }\n  }\n  return result;\n};\n\nconst max: AggregationFunc = (pointIndices, getValue) => {\n  let result = -Infinity;\n  for (const i of pointIndices) {\n    const value = getValue(i);\n    if (value > result) {\n      result = value;\n    }\n  }\n  return result;\n};\n\nexport const BUILT_IN_OPERATIONS: Record<AggregationOperation, AggregationFunc> = {\n  COUNT: count,\n  SUM: sum,\n  MEAN: mean,\n  MIN: min,\n  MAX: max\n} as const;\n\n/**\n * Performs the aggregation step. See interface Aggregator comments.\n * @returns Floa32Array of aggregated values, one for each bin, and the [min,max] of the values\n */\nexport function aggregate({\n  bins,\n  getValue,\n  operation,\n  target\n}: {\n  /** Data points sorted by bins */\n  bins: Bin[];\n  /** Given the index of a data point, returns its value */\n  getValue: (index: number) => number;\n  /** Method used to reduce a list of values to one number */\n  operation: AggregationFunc;\n  /** Array to write the output into */\n  target?: Float32Array | null;\n}): {\n  value: Float32Array;\n  domain: [min: number, max: number];\n} {\n  if (!target || target.length < bins.length) {\n    target = new Float32Array(bins.length);\n  }\n  let min = Infinity;\n  let max = -Infinity;\n\n  for (let j = 0; j < bins.length; j++) {\n    const {points} = bins[j];\n    target[j] = operation(points, getValue);\n    if (target[j] < min) min = target[j];\n    if (target[j] > max) max = target[j];\n  }\n\n  return {value: target, domain: [min, max]};\n}\n"],"mappings":"AAAA;AACA;AACA;AAaA,MAAMA,KAAK,GAAoBC,YAAY,IAAG;EAC5C,OAAOA,YAAY,CAACC,MAAM;AAC5B,CAAC;AAED,MAAMC,GAAG,GAAoBA,CAACF,YAAY,EAAEG,QAAQ,KAAI;EACtD,IAAIC,MAAM,GAAG,CAAC;EACd,KAAK,MAAMC,CAAC,IAAIL,YAAY,EAAE;IAC5BI,MAAM,IAAID,QAAQ,CAACE,CAAC,CAAC;EACvB;EACA,OAAOD,MAAM;AACf,CAAC;AAED,MAAME,IAAI,GAAoBA,CAACN,YAAY,EAAEG,QAAQ,KAAI;EACvD,IAAIH,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IAC7B,OAAOM,GAAG;EACZ;EACA,OAAOL,GAAG,CAACF,YAAY,EAAEG,QAAQ,CAAC,GAAGH,YAAY,CAACC,MAAM;AAC1D,CAAC;AAED,MAAMO,GAAG,GAAoBA,CAACR,YAAY,EAAEG,QAAQ,KAAI;EACtD,IAAIC,MAAM,GAAGK,QAAQ;EACrB,KAAK,MAAMJ,CAAC,IAAIL,YAAY,EAAE;IAC5B,MAAMU,KAAK,GAAGP,QAAQ,CAACE,CAAC,CAAC;IACzB,IAAIK,KAAK,GAAGN,MAAM,EAAE;MAClBA,MAAM,GAAGM,KAAK;IAChB;EACF;EACA,OAAON,MAAM;AACf,CAAC;AAED,MAAMO,GAAG,GAAoBA,CAACX,YAAY,EAAEG,QAAQ,KAAI;EACtD,IAAIC,MAAM,GAAG,CAACK,QAAQ;EACtB,KAAK,MAAMJ,CAAC,IAAIL,YAAY,EAAE;IAC5B,MAAMU,KAAK,GAAGP,QAAQ,CAACE,CAAC,CAAC;IACzB,IAAIK,KAAK,GAAGN,MAAM,EAAE;MAClBA,MAAM,GAAGM,KAAK;IAChB;EACF;EACA,OAAON,MAAM;AACf,CAAC;AAED,OAAO,MAAMQ,mBAAmB,GAAkD;EAChFC,KAAK,EAAEd,KAAK;EACZe,GAAG,EAAEZ,GAAG;EACRa,IAAI,EAAET,IAAI;EACVU,GAAG,EAAER,GAAG;EACRS,GAAG,EAAEN;CACG;AAEV;;;;AAIA,OAAM,SAAUO,SAASA,CAAC;EACxBC,IAAI;EACJhB,QAAQ;EACRiB,SAAS;EACTC;AAAM,CAUP;EAIC,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACpB,MAAM,GAAGkB,IAAI,CAAClB,MAAM,EAAE;IAC1CoB,MAAM,GAAG,IAAIC,YAAY,CAACH,IAAI,CAAClB,MAAM,CAAC;EACxC;EACA,IAAIO,GAAG,GAAGC,QAAQ;EAClB,IAAIE,GAAG,GAAG,CAACF,QAAQ;EAEnB,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAAClB,MAAM,EAAEsB,CAAC,EAAE,EAAE;IACpC,MAAM;MAACC;IAAM,CAAC,GAAGL,IAAI,CAACI,CAAC,CAAC;IACxBF,MAAM,CAACE,CAAC,CAAC,GAAGH,SAAS,CAACI,MAAM,EAAErB,QAAQ,CAAC;IACvC,IAAIkB,MAAM,CAACE,CAAC,CAAC,GAAGf,GAAG,EAAEA,GAAG,GAAGa,MAAM,CAACE,CAAC,CAAC;IACpC,IAAIF,MAAM,CAACE,CAAC,CAAC,GAAGZ,GAAG,EAAEA,GAAG,GAAGU,MAAM,CAACE,CAAC,CAAC;EACtC;EAEA,OAAO;IAACb,KAAK,EAAEW,MAAM;IAAEI,MAAM,EAAE,CAACjB,GAAG,EAAEG,GAAG;EAAC,CAAC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}