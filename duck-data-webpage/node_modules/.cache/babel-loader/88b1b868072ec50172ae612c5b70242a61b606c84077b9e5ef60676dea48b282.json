{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { COORDINATE_SYSTEM, LayerExtension, log } from '@deck.gl/core';\nimport mask from \"./shader-module.js\";\nimport MaskEffect from \"./mask-effect.js\";\nconst defaultProps = {\n  maskId: '',\n  maskByInstance: undefined,\n  maskInverted: false\n};\n/** Allows layers to show/hide objects by a geofence. */\nclass MaskExtension extends LayerExtension {\n  initializeState() {\n    this.context.deck?._addDefaultEffect(new MaskEffect());\n  }\n  getShaders() {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if (this.props.maskByInstance !== undefined) {\n      maskByInstance = Boolean(this.props.maskByInstance);\n    }\n    this.state.maskByInstance = maskByInstance;\n    return {\n      modules: [mask]\n    };\n  }\n  /* eslint-disable camelcase */\n  draw({\n    context,\n    shaderModuleProps\n  }) {\n    const maskProps = {};\n    maskProps.maskByInstance = Boolean(this.state.maskByInstance);\n    const {\n      maskId,\n      maskInverted\n    } = this.props;\n    const {\n      maskChannels\n    } = shaderModuleProps.mask || {};\n    const {\n      viewport\n    } = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {\n        index,\n        bounds,\n        coordinateOrigin: fromCoordinateOrigin\n      } = maskChannels[maskId];\n      let {\n        coordinateSystem: fromCoordinateSystem\n      } = maskChannels[maskId];\n      maskProps.enabled = true;\n      maskProps.channel = index;\n      maskProps.inverted = maskInverted;\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {\n        modelMatrix: null,\n        fromCoordinateOrigin,\n        fromCoordinateSystem\n      };\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      maskProps.bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      maskProps.enabled = false;\n    }\n    this.setShaderModuleProps({\n      mask: maskProps\n    });\n  }\n}\nMaskExtension.defaultProps = defaultProps;\nMaskExtension.extensionName = 'MaskExtension';\nexport default MaskExtension;\n//# sourceMappingURL=mask-extension.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}