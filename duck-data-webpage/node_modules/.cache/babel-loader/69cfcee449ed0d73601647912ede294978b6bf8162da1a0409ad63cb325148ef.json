{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport WorkerPool from \"./worker-pool.js\";\nimport WorkerThread from \"./worker-thread.js\";\nconst DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  props;\n  workerPools = new Map();\n  // singleton\n  static _workerFarm;\n  /** Checks if workers are supported on this platform */\n  static isSupported() {\n    return WorkerThread.isSupported();\n  }\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props = {}) {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  constructor(props) {\n    this.props = {\n      ...DEFAULT_PROPS\n    };\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy() {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map();\n  }\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props) {\n    this.props = {\n      ...this.props,\n      ...props\n    };\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options) {\n    const {\n      name,\n      source,\n      url\n    } = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}","map":{"version":3,"names":["WorkerPool","WorkerThread","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","WorkerFarm","props","workerPools","Map","_workerFarm","isSupported","getWorkerFarm","setProps","constructor","destroy","workerPool","values","_getWorkerPoolProps","getWorkerPool","options","name","source","url","get","set"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-farm.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport WorkerPool from \"./worker-pool.js\";\nimport WorkerThread from \"./worker-thread.js\";\nconst DEFAULT_PROPS = {\n    maxConcurrency: 3,\n    maxMobileConcurrency: 1,\n    reuseWorkers: true,\n    onDebug: () => { }\n};\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n    props;\n    workerPools = new Map();\n    // singleton\n    static _workerFarm;\n    /** Checks if workers are supported on this platform */\n    static isSupported() {\n        return WorkerThread.isSupported();\n    }\n    /** Get the singleton instance of the global worker farm */\n    static getWorkerFarm(props = {}) {\n        WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n        WorkerFarm._workerFarm.setProps(props);\n        return WorkerFarm._workerFarm;\n    }\n    /** get global instance with WorkerFarm.getWorkerFarm() */\n    constructor(props) {\n        this.props = { ...DEFAULT_PROPS };\n        this.setProps(props);\n        /** @type Map<string, WorkerPool>} */\n        this.workerPools = new Map();\n    }\n    /**\n     * Terminate all workers in the farm\n     * @note Can free up significant memory\n     */\n    destroy() {\n        for (const workerPool of this.workerPools.values()) {\n            workerPool.destroy();\n        }\n        this.workerPools = new Map();\n    }\n    /**\n     * Set props used when initializing worker pools\n     * @param props\n     */\n    setProps(props) {\n        this.props = { ...this.props, ...props };\n        // Update worker pool props\n        for (const workerPool of this.workerPools.values()) {\n            workerPool.setProps(this._getWorkerPoolProps());\n        }\n    }\n    /**\n     * Returns a worker pool for the specified worker\n     * @param options - only used first time for a specific worker name\n     * @param options.name - the name of the worker - used to identify worker pool\n     * @param options.url -\n     * @param options.source -\n     * @example\n     *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n     */\n    getWorkerPool(options) {\n        const { name, source, url } = options;\n        let workerPool = this.workerPools.get(name);\n        if (!workerPool) {\n            workerPool = new WorkerPool({\n                name,\n                source,\n                url\n            });\n            workerPool.setProps(this._getWorkerPoolProps());\n            this.workerPools.set(name, workerPool);\n        }\n        return workerPool;\n    }\n    _getWorkerPoolProps() {\n        return {\n            maxConcurrency: this.props.maxConcurrency,\n            maxMobileConcurrency: this.props.maxMobileConcurrency,\n            reuseWorkers: this.props.reuseWorkers,\n            onDebug: this.props.onDebug\n        };\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,MAAMC,aAAa,GAAG;EAClBC,cAAc,EAAE,CAAC;EACjBC,oBAAoB,EAAE,CAAC;EACvBC,YAAY,EAAE,IAAI;EAClBC,OAAO,EAAEA,CAAA,KAAM,CAAE;AACrB,CAAC;AACD;AACA;AACA;AACA,eAAe,MAAMC,UAAU,CAAC;EAC5BC,KAAK;EACLC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EACvB;EACA,OAAOC,WAAW;EAClB;EACA,OAAOC,WAAWA,CAAA,EAAG;IACjB,OAAOX,YAAY,CAACW,WAAW,CAAC,CAAC;EACrC;EACA;EACA,OAAOC,aAAaA,CAACL,KAAK,GAAG,CAAC,CAAC,EAAE;IAC7BD,UAAU,CAACI,WAAW,GAAGJ,UAAU,CAACI,WAAW,IAAI,IAAIJ,UAAU,CAAC,CAAC,CAAC,CAAC;IACrEA,UAAU,CAACI,WAAW,CAACG,QAAQ,CAACN,KAAK,CAAC;IACtC,OAAOD,UAAU,CAACI,WAAW;EACjC;EACA;EACAI,WAAWA,CAACP,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAG;MAAE,GAAGN;IAAc,CAAC;IACjC,IAAI,CAACY,QAAQ,CAACN,KAAK,CAAC;IACpB;IACA,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAChC;EACA;AACJ;AACA;AACA;EACIM,OAAOA,CAAA,EAAG;IACN,KAAK,MAAMC,UAAU,IAAI,IAAI,CAACR,WAAW,CAACS,MAAM,CAAC,CAAC,EAAE;MAChDD,UAAU,CAACD,OAAO,CAAC,CAAC;IACxB;IACA,IAAI,CAACP,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAChC;EACA;AACJ;AACA;AACA;EACII,QAAQA,CAACN,KAAK,EAAE;IACZ,IAAI,CAACA,KAAK,GAAG;MAAE,GAAG,IAAI,CAACA,KAAK;MAAE,GAAGA;IAAM,CAAC;IACxC;IACA,KAAK,MAAMS,UAAU,IAAI,IAAI,CAACR,WAAW,CAACS,MAAM,CAAC,CAAC,EAAE;MAChDD,UAAU,CAACH,QAAQ,CAAC,IAAI,CAACK,mBAAmB,CAAC,CAAC,CAAC;IACnD;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,aAAaA,CAACC,OAAO,EAAE;IACnB,MAAM;MAAEC,IAAI;MAAEC,MAAM;MAAEC;IAAI,CAAC,GAAGH,OAAO;IACrC,IAAIJ,UAAU,GAAG,IAAI,CAACR,WAAW,CAACgB,GAAG,CAACH,IAAI,CAAC;IAC3C,IAAI,CAACL,UAAU,EAAE;MACbA,UAAU,GAAG,IAAIjB,UAAU,CAAC;QACxBsB,IAAI;QACJC,MAAM;QACNC;MACJ,CAAC,CAAC;MACFP,UAAU,CAACH,QAAQ,CAAC,IAAI,CAACK,mBAAmB,CAAC,CAAC,CAAC;MAC/C,IAAI,CAACV,WAAW,CAACiB,GAAG,CAACJ,IAAI,EAAEL,UAAU,CAAC;IAC1C;IACA,OAAOA,UAAU;EACrB;EACAE,mBAAmBA,CAAA,EAAG;IAClB,OAAO;MACHhB,cAAc,EAAE,IAAI,CAACK,KAAK,CAACL,cAAc;MACzCC,oBAAoB,EAAE,IAAI,CAACI,KAAK,CAACJ,oBAAoB;MACrDC,YAAY,EAAE,IAAI,CAACG,KAAK,CAACH,YAAY;MACrCC,OAAO,EAAE,IAAI,CAACE,KAAK,CAACF;IACxB,CAAC;EACL;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}