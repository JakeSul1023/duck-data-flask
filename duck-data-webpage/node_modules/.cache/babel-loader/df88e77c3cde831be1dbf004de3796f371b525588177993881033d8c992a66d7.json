{"ast":null,"code":"// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\nimport { Vector } from \"./base/vector.js\";\nimport { config, isArray } from \"../lib/common.js\";\nimport { checkNumber } from \"../lib/validators.js\";\n// @ts-ignore gl-matrix types\nimport { angle as vec3_angle, cross as vec3_cross, rotateX as vec3_rotateX, rotateY as vec3_rotateY, rotateZ as vec3_rotateZ, transformMat4 as vec3_transformMat4, transformMat3 as vec3_transformMat3, transformQuat as vec3_transformQuat } from \"../gl-matrix/vec3.js\";\n/* eslint-disable camelcase */\nimport { vec3_transformMat2, vec3_transformMat4AsVector } from \"../lib/gl-matrix-extras.js\";\nconst ORIGIN = [0, 0, 0];\nlet ZERO;\n/**\n * Three-element vector class with common linear algebra operations.\n * Subclass of Array<number> meaning that it is highly compatible with other libraries\n */\nexport class Vector3 extends Vector {\n  static get ZERO() {\n    if (!ZERO) {\n      ZERO = new Vector3(0, 0, 0);\n      Object.freeze(ZERO);\n    }\n    return ZERO;\n  }\n  /**\n   * @class\n   * @param x\n   * @param y\n   * @param z\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0);\n    if (arguments.length === 1 && isArray(x)) {\n      this.copy(x);\n    } else {\n      // this.set(x, y, z);\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n      // @ts-expect-error TS2412: Property '0' of type 'number | [number, number, number]' is not assignable to numeric index type 'number'\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n    }\n  }\n  set(x, y, z) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    return this.check();\n  }\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    return this.check();\n  }\n  fromObject(object) {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    return this.check();\n  }\n  toObject(object) {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    return object;\n  }\n  // Getters/setters\n  get ELEMENTS() {\n    return 3;\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n  // ACCESSORS\n  angle(vector) {\n    return vec3_angle(this, vector);\n  }\n  // MODIFIERS\n  cross(vector) {\n    vec3_cross(this, this, vector);\n    return this.check();\n  }\n  rotateX({\n    radians,\n    origin = ORIGIN\n  }) {\n    vec3_rotateX(this, this, origin, radians);\n    return this.check();\n  }\n  rotateY({\n    radians,\n    origin = ORIGIN\n  }) {\n    vec3_rotateY(this, this, origin, radians);\n    return this.check();\n  }\n  rotateZ({\n    radians,\n    origin = ORIGIN\n  }) {\n    vec3_rotateZ(this, this, origin, radians);\n    return this.check();\n  }\n  // Transforms\n  // transforms as point (4th component is implicitly 1)\n  transform(matrix4) {\n    return this.transformAsPoint(matrix4);\n  }\n  // transforms as point (4th component is implicitly 1)\n  transformAsPoint(matrix4) {\n    vec3_transformMat4(this, this, matrix4);\n    return this.check();\n  }\n  // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)\n  transformAsVector(matrix4) {\n    vec3_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n  transformByMatrix3(matrix3) {\n    vec3_transformMat3(this, this, matrix3);\n    return this.check();\n  }\n  transformByMatrix2(matrix2) {\n    vec3_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n  transformByQuaternion(quaternion) {\n    vec3_transformQuat(this, this, quaternion);\n    return this.check();\n  }\n}","map":{"version":3,"names":["Vector","config","isArray","checkNumber","angle","vec3_angle","cross","vec3_cross","rotateX","vec3_rotateX","rotateY","vec3_rotateY","rotateZ","vec3_rotateZ","transformMat4","vec3_transformMat4","transformMat3","vec3_transformMat3","transformQuat","vec3_transformQuat","vec3_transformMat2","vec3_transformMat4AsVector","ORIGIN","ZERO","Vector3","Object","freeze","constructor","x","y","z","arguments","length","copy","debug","set","check","array","fromObject","object","toObject","ELEMENTS","value","vector","radians","origin","transform","matrix4","transformAsPoint","transformAsVector","transformByMatrix3","matrix3","transformByMatrix2","matrix2","transformByQuaternion","quaternion"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@math.gl\\core\\src\\classes\\vector3.ts"],"sourcesContent":["// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright (c) 2017 Uber Technologies, Inc.\n\nimport {NumericArray, NumericArray3} from '@math.gl/types';\nimport {Vector} from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n// @ts-ignore gl-matrix types\nimport {\n  angle as vec3_angle,\n  cross as vec3_cross,\n  rotateX as vec3_rotateX,\n  rotateY as vec3_rotateY,\n  rotateZ as vec3_rotateZ,\n  transformMat4 as vec3_transformMat4,\n  transformMat3 as vec3_transformMat3,\n  transformQuat as vec3_transformQuat\n} from '../gl-matrix/vec3';\n/* eslint-disable camelcase */\nimport {vec3_transformMat2, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n\nconst ORIGIN = [0, 0, 0];\n\nlet ZERO: Vector3;\n\n/** Helper type that captures array length for a 3 element vector */\nexport type Vector3Like = Vector3 | NumericArray3;\n\n/**\n * Three-element vector class with common linear algebra operations.\n * Subclass of Array<number> meaning that it is highly compatible with other libraries\n */\nexport class Vector3 extends Vector {\n  static get ZERO(): Vector3 {\n    if (!ZERO) {\n      ZERO = new Vector3(0, 0, 0);\n      Object.freeze(ZERO);\n    }\n    return ZERO;\n  }\n\n  /**\n   * @class\n   * @param x\n   * @param y\n   * @param z\n   */\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0, z: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0);\n    if (arguments.length === 1 && isArray(x)) {\n      this.copy(x as NumericArray);\n    } else {\n      // this.set(x, y, z);\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n      // @ts-expect-error TS2412: Property '0' of type 'number | [number, number, number]' is not assignable to numeric index type 'number'\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n    }\n  }\n\n  set(x: number, y: number, z: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    return this.check();\n  }\n\n  override toObject(object: {x?: number; y?: number; z?: number}): {\n    x: number;\n    y: number;\n    z: number;\n  } {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    return object as {x: number; y: number; z: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 3;\n  }\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // ACCESSORS\n\n  angle(vector: Readonly<NumericArray>): number {\n    return vec3_angle(this, vector);\n  }\n\n  // MODIFIERS\n\n  cross(vector: Readonly<NumericArray>): this {\n    vec3_cross(this, this, vector);\n    return this.check();\n  }\n\n  rotateX({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3_rotateX(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateY({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3_rotateY(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateZ({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3_rotateZ(this, this, origin, radians);\n    return this.check();\n  }\n\n  // Transforms\n\n  // transforms as point (4th component is implicitly 1)\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  // transforms as point (4th component is implicitly 1)\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec3_transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec3_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec3_transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec3_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n\n  transformByQuaternion(quaternion: Readonly<NumericArray>): this {\n    vec3_transformQuat(this, this, quaternion);\n    return this.check();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}