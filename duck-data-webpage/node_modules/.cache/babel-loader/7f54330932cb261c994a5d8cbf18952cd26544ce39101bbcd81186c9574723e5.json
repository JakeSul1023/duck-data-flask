{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { MD5Hash } from '@loaders.gl/crypto';\nimport { DeflateCompression, NoCompression } from '@loaders.gl/compression';\nimport { IndexedArchive, parseZipLocalFileHeader } from '@loaders.gl/zip';\n/**\n * Handling different compression types in zip\n */\nconst COMPRESSION_METHODS = {\n  /** No compression */\n  0: data => new NoCompression().decompress(data),\n  /** Deflation */\n  8: data => new DeflateCompression({\n    raw: true\n  }).decompress(data)\n};\n/**\n * Class for handling information about 3tz file\n */\nexport class Tiles3DArchive extends IndexedArchive {\n  /** hash info */\n  hashTable;\n  /**\n   * creates Tiles3DArchive handler\n   * @param fileProvider - FileProvider with the whole file\n   * @param hashTable - hash info\n   */\n  constructor(fileProvider, hashTable, fileName) {\n    super(fileProvider, hashTable, fileName);\n    this.hashTable = hashTable;\n  }\n  /**\n   * Returns file with the given path from 3tz archive\n   * @param path - path inside the 3tz\n   * @returns buffer with ready to use file\n   */\n  async getFile(path) {\n    // sometimes paths are not in lower case when hash file is created,\n    // so first we're looking for lower case file name and then for original one\n    let data = await this.getFileBytes(path.toLocaleLowerCase());\n    if (!data) {\n      data = await this.getFileBytes(path);\n    }\n    if (!data) {\n      throw new Error(`No such file in the archive: ${path}`);\n    }\n    return data;\n  }\n  /**\n   * Trying to get raw file data by adress\n   * @param path - path inside the archive\n   * @returns buffer with the raw file data\n   */\n  async getFileBytes(path) {\n    let uncompressedFile;\n    if (this.hashTable) {\n      const arrayBuffer = new TextEncoder().encode(path).buffer;\n      const nameHash = await new MD5Hash().hash(arrayBuffer, 'hex');\n      const byteOffset = this.hashTable[nameHash];\n      if (byteOffset === undefined) {\n        return null;\n      }\n      const localFileHeader = await parseZipLocalFileHeader(byteOffset, this.fileProvider);\n      if (!localFileHeader) {\n        return null;\n      }\n      const compressedFile = await this.fileProvider.slice(localFileHeader.fileDataOffset, localFileHeader.fileDataOffset + localFileHeader.compressedSize);\n      const compressionMethod = COMPRESSION_METHODS[localFileHeader.compressionMethod];\n      if (!compressionMethod) {\n        throw Error('Only Deflation compression is supported');\n      }\n      uncompressedFile = await compressionMethod(compressedFile);\n    } else {\n      uncompressedFile = await this.getFileWithoutHash(path);\n    }\n    return uncompressedFile;\n  }\n}","map":{"version":3,"names":["MD5Hash","DeflateCompression","NoCompression","IndexedArchive","parseZipLocalFileHeader","COMPRESSION_METHODS","data","decompress","raw","Tiles3DArchive","hashTable","constructor","fileProvider","fileName","getFile","path","getFileBytes","toLocaleLowerCase","Error","uncompressedFile","arrayBuffer","TextEncoder","encode","buffer","nameHash","hash","byteOffset","undefined","localFileHeader","compressedFile","slice","fileDataOffset","compressedSize","compressionMethod","getFileWithoutHash"],"sources":["C:/Users/jakes/Documents/GitHub/duck-data-flask/duck-data-webpage/node_modules/@loaders.gl/3d-tiles/dist/3d-tiles-archive/3d-tiles-archive-archive.js"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright vis.gl contributors\nimport { MD5Hash } from '@loaders.gl/crypto';\nimport { DeflateCompression, NoCompression } from '@loaders.gl/compression';\nimport { IndexedArchive, parseZipLocalFileHeader } from '@loaders.gl/zip';\n/**\n * Handling different compression types in zip\n */\nconst COMPRESSION_METHODS = {\n    /** No compression */\n    0: (data) => new NoCompression().decompress(data),\n    /** Deflation */\n    8: (data) => new DeflateCompression({ raw: true }).decompress(data)\n};\n/**\n * Class for handling information about 3tz file\n */\nexport class Tiles3DArchive extends IndexedArchive {\n    /** hash info */\n    hashTable;\n    /**\n     * creates Tiles3DArchive handler\n     * @param fileProvider - FileProvider with the whole file\n     * @param hashTable - hash info\n     */\n    constructor(fileProvider, hashTable, fileName) {\n        super(fileProvider, hashTable, fileName);\n        this.hashTable = hashTable;\n    }\n    /**\n     * Returns file with the given path from 3tz archive\n     * @param path - path inside the 3tz\n     * @returns buffer with ready to use file\n     */\n    async getFile(path) {\n        // sometimes paths are not in lower case when hash file is created,\n        // so first we're looking for lower case file name and then for original one\n        let data = await this.getFileBytes(path.toLocaleLowerCase());\n        if (!data) {\n            data = await this.getFileBytes(path);\n        }\n        if (!data) {\n            throw new Error(`No such file in the archive: ${path}`);\n        }\n        return data;\n    }\n    /**\n     * Trying to get raw file data by adress\n     * @param path - path inside the archive\n     * @returns buffer with the raw file data\n     */\n    async getFileBytes(path) {\n        let uncompressedFile;\n        if (this.hashTable) {\n            const arrayBuffer = new TextEncoder().encode(path).buffer;\n            const nameHash = await new MD5Hash().hash(arrayBuffer, 'hex');\n            const byteOffset = this.hashTable[nameHash];\n            if (byteOffset === undefined) {\n                return null;\n            }\n            const localFileHeader = await parseZipLocalFileHeader(byteOffset, this.fileProvider);\n            if (!localFileHeader) {\n                return null;\n            }\n            const compressedFile = await this.fileProvider.slice(localFileHeader.fileDataOffset, localFileHeader.fileDataOffset + localFileHeader.compressedSize);\n            const compressionMethod = COMPRESSION_METHODS[localFileHeader.compressionMethod];\n            if (!compressionMethod) {\n                throw Error('Only Deflation compression is supported');\n            }\n            uncompressedFile = await compressionMethod(compressedFile);\n        }\n        else {\n            uncompressedFile = await this.getFileWithoutHash(path);\n        }\n        return uncompressedFile;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,kBAAkB,EAAEC,aAAa,QAAQ,yBAAyB;AAC3E,SAASC,cAAc,EAAEC,uBAAuB,QAAQ,iBAAiB;AACzE;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG;EACxB;EACA,CAAC,EAAGC,IAAI,IAAK,IAAIJ,aAAa,CAAC,CAAC,CAACK,UAAU,CAACD,IAAI,CAAC;EACjD;EACA,CAAC,EAAGA,IAAI,IAAK,IAAIL,kBAAkB,CAAC;IAAEO,GAAG,EAAE;EAAK,CAAC,CAAC,CAACD,UAAU,CAACD,IAAI;AACtE,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMG,cAAc,SAASN,cAAc,CAAC;EAC/C;EACAO,SAAS;EACT;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAACC,YAAY,EAAEF,SAAS,EAAEG,QAAQ,EAAE;IAC3C,KAAK,CAACD,YAAY,EAAEF,SAAS,EAAEG,QAAQ,CAAC;IACxC,IAAI,CAACH,SAAS,GAAGA,SAAS;EAC9B;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMI,OAAOA,CAACC,IAAI,EAAE;IAChB;IACA;IACA,IAAIT,IAAI,GAAG,MAAM,IAAI,CAACU,YAAY,CAACD,IAAI,CAACE,iBAAiB,CAAC,CAAC,CAAC;IAC5D,IAAI,CAACX,IAAI,EAAE;MACPA,IAAI,GAAG,MAAM,IAAI,CAACU,YAAY,CAACD,IAAI,CAAC;IACxC;IACA,IAAI,CAACT,IAAI,EAAE;MACP,MAAM,IAAIY,KAAK,CAAC,gCAAgCH,IAAI,EAAE,CAAC;IAC3D;IACA,OAAOT,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMU,YAAYA,CAACD,IAAI,EAAE;IACrB,IAAII,gBAAgB;IACpB,IAAI,IAAI,CAACT,SAAS,EAAE;MAChB,MAAMU,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACP,IAAI,CAAC,CAACQ,MAAM;MACzD,MAAMC,QAAQ,GAAG,MAAM,IAAIxB,OAAO,CAAC,CAAC,CAACyB,IAAI,CAACL,WAAW,EAAE,KAAK,CAAC;MAC7D,MAAMM,UAAU,GAAG,IAAI,CAAChB,SAAS,CAACc,QAAQ,CAAC;MAC3C,IAAIE,UAAU,KAAKC,SAAS,EAAE;QAC1B,OAAO,IAAI;MACf;MACA,MAAMC,eAAe,GAAG,MAAMxB,uBAAuB,CAACsB,UAAU,EAAE,IAAI,CAACd,YAAY,CAAC;MACpF,IAAI,CAACgB,eAAe,EAAE;QAClB,OAAO,IAAI;MACf;MACA,MAAMC,cAAc,GAAG,MAAM,IAAI,CAACjB,YAAY,CAACkB,KAAK,CAACF,eAAe,CAACG,cAAc,EAAEH,eAAe,CAACG,cAAc,GAAGH,eAAe,CAACI,cAAc,CAAC;MACrJ,MAAMC,iBAAiB,GAAG5B,mBAAmB,CAACuB,eAAe,CAACK,iBAAiB,CAAC;MAChF,IAAI,CAACA,iBAAiB,EAAE;QACpB,MAAMf,KAAK,CAAC,yCAAyC,CAAC;MAC1D;MACAC,gBAAgB,GAAG,MAAMc,iBAAiB,CAACJ,cAAc,CAAC;IAC9D,CAAC,MACI;MACDV,gBAAgB,GAAG,MAAM,IAAI,CAACe,kBAAkB,CAACnB,IAAI,CAAC;IAC1D;IACA,OAAOI,gBAAgB;EAC3B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}