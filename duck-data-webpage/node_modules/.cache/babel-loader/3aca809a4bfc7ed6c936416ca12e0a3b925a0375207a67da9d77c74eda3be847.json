{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport Transition from \"./transition.js\";\nconst EPSILON = 1e-5;\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n    return next;\n  }\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n    return Math.sqrt(distanceSquare);\n  }\n  return Math.abs(value1 - value2);\n}\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n  _onUpdate() {\n    // TODO - use timeline\n    // const {time} = this;\n    const {\n      fromValue,\n      toValue,\n      damping,\n      stiffness\n    } = this.settings;\n    const {\n      _prevValue = fromValue,\n      _currValue = fromValue\n    } = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n}","map":{"version":3,"names":["Transition","EPSILON","updateSpringElement","prev","cur","dest","damping","stiffness","velocity","delta","spring","damper","updateSpring","Array","isArray","next","i","length","distance","value1","value2","distanceSquare","d","Math","sqrt","abs","CPUSpringTransition","value","_currValue","_onUpdate","fromValue","toValue","settings","_prevValue","nextValue","end"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\core\\src\\transitions\\cpu-spring-transition.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport Transition from './transition';\n\nconst EPSILON = 1e-5;\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(\n  prev: number,\n  cur: number,\n  dest: number,\n  damping: number,\n  stiffness: number\n): number {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number|Array} - previous value\n * @param cur {Number|Array} - current value\n * @param dest {Number|Array} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpring(prev: number, cur: number, dest: number, damping: number, stiffness: number);\nfunction updateSpring(\n  prev: number[],\n  cur: number[],\n  dest: number[],\n  damping: number,\n  stiffness: number\n): number[];\n\nfunction updateSpring(\n  prev: number | number[],\n  cur: number | number[],\n  dest: number | number[],\n  damping: number,\n  stiffness: number\n): number | number[] {\n  if (Array.isArray(dest)) {\n    const next: number[] = [];\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n    return next;\n  }\n  return updateSpringElement(prev as number, cur as number, dest, damping, stiffness);\n}\n\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n    return Math.sqrt(distanceSquare);\n  }\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  _prevValue;\n  _currValue;\n\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    // TODO - use timeline\n    // const {time} = this;\n\n    const {fromValue, toValue, damping, stiffness} = this.settings;\n    const {_prevValue = fromValue, _currValue = fromValue} = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,UAAU;AAEjB,MAAMC,OAAO,GAAG,IAAI;AAEpB;;;;;;;;AAQA,SAASC,mBAAmBA,CAC1BC,IAAY,EACZC,GAAW,EACXC,IAAY,EACZC,OAAe,EACfC,SAAiB;EAEjB,MAAMC,QAAQ,GAAGJ,GAAG,GAAGD,IAAI;EAC3B,MAAMM,KAAK,GAAGJ,IAAI,GAAGD,GAAG;EACxB,MAAMM,MAAM,GAAGD,KAAK,GAAGF,SAAS;EAChC,MAAMI,MAAM,GAAG,CAACH,QAAQ,GAAGF,OAAO;EAClC,OAAOI,MAAM,GAAGC,MAAM,GAAGH,QAAQ,GAAGJ,GAAG;AACzC;AAmBA,SAASQ,YAAYA,CACnBT,IAAuB,EACvBC,GAAsB,EACtBC,IAAuB,EACvBC,OAAe,EACfC,SAAiB;EAEjB,IAAIM,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,EAAE;IACvB,MAAMU,IAAI,GAAa,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,IAAI,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;MACpCD,IAAI,CAACC,CAAC,CAAC,GAAGd,mBAAmB,CAACC,IAAI,CAACa,CAAC,CAAC,EAAEZ,GAAG,CAACY,CAAC,CAAC,EAAEX,IAAI,CAACW,CAAC,CAAC,EAAEV,OAAO,EAAEC,SAAS,CAAC;IAC7E;IACA,OAAOQ,IAAI;EACb;EACA,OAAOb,mBAAmB,CAACC,IAAc,EAAEC,GAAa,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,CAAC;AACrF;AAEA;;;AAGA,SAASW,QAAQA,CAACC,MAAM,EAAEC,MAAM;EAC9B,IAAIP,KAAK,CAACC,OAAO,CAACK,MAAM,CAAC,EAAE;IACzB,IAAIE,cAAc,GAAG,CAAC;IACtB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,CAACF,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAMM,CAAC,GAAGH,MAAM,CAACH,CAAC,CAAC,GAAGI,MAAM,CAACJ,CAAC,CAAC;MAC/BK,cAAc,IAAIC,CAAC,GAAGA,CAAC;IACzB;IACA,OAAOC,IAAI,CAACC,IAAI,CAACH,cAAc,CAAC;EAClC;EACA,OAAOE,IAAI,CAACE,GAAG,CAACN,MAAM,GAAGC,MAAM,CAAC;AAClC;AAEA,eAAc,MAAOM,mBAAoB,SAAQ1B,UAAU;EAIzD,IAAI2B,KAAKA,CAAA;IACP,OAAO,IAAI,CAACC,UAAU;EACxB;EAEAC,SAASA,CAAA;IACP;IACA;IAEA,MAAM;MAACC,SAAS;MAAEC,OAAO;MAAEzB,OAAO;MAAEC;IAAS,CAAC,GAAG,IAAI,CAACyB,QAAQ;IAC9D,MAAM;MAACC,UAAU,GAAGH,SAAS;MAAEF,UAAU,GAAGE;IAAS,CAAC,GAAG,IAAI;IAC7D,IAAII,SAAS,GAAGtB,YAAY,CAACqB,UAAU,EAAEL,UAAU,EAAEG,OAAO,EAAEzB,OAAO,EAAEC,SAAS,CAAC;IACjF,MAAME,KAAK,GAAGS,QAAQ,CAACgB,SAAS,EAAEH,OAAO,CAAC;IAC1C,MAAMvB,QAAQ,GAAGU,QAAQ,CAACgB,SAAS,EAAEN,UAAU,CAAC;IAEhD,IAAInB,KAAK,GAAGR,OAAO,IAAIO,QAAQ,GAAGP,OAAO,EAAE;MACzCiC,SAAS,GAAGH,OAAO;MACnB,IAAI,CAACI,GAAG,EAAE;IACZ;IAEA,IAAI,CAACF,UAAU,GAAGL,UAAU;IAC5B,IAAI,CAACA,UAAU,GAAGM,SAAS;EAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}