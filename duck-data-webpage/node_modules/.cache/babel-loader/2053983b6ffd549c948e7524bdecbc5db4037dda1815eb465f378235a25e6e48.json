{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { initializeShaderModule } from '@luma.gl/shadertools';\nimport ScreenPass from \"../passes/screen-pass.js\";\nexport default class PostProcessEffect {\n  constructor(module, props) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    initializeShaderModule(module);\n    this.module = module;\n  }\n  setup({\n    device\n  }) {\n    this.passes = createPasses(device, this.module, this.id);\n  }\n  setProps(props) {\n    this.props = props;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender() {}\n  postRender(params) {\n    const passes = this.passes;\n    const {\n      target\n    } = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n    for (let index = 0; index < passes.length; index++) {\n      const isLastPass = index === passes.length - 1;\n      const renderToTarget = target !== undefined && isLastPass;\n      if (renderToTarget) {\n        outputBuffer = target;\n      }\n      const clearCanvas = !renderToTarget || Boolean(params.clearCanvas);\n      const moduleProps = {};\n      const uniforms = this.module.passes[index].uniforms;\n      moduleProps[this.module.name] = {\n        ...this.props,\n        ...uniforms\n      };\n      passes[index].render({\n        clearCanvas,\n        inputBuffer,\n        outputBuffer,\n        moduleProps\n      });\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\nfunction createPasses(device, module, id) {\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n    return new ScreenPass(device, {\n      id: idn,\n      module,\n      fs\n    });\n  });\n}\nconst FS_TEMPLATE_INPUTS = `\\\n#version 300 es\nuniform sampler2D texSrc;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n`;\nconst FILTER_FS_TEMPLATE = func => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = texture(texSrc, coordinate);\n  fragColor = ${func}(fragColor, screen.texSize, coordinate);\n}\n`;\nconst SAMPLER_FS_TEMPLATE = func => `\\\n${FS_TEMPLATE_INPUTS}\nvoid main() {\n  fragColor = ${func}(texSrc, screen.texSize, coordinate);\n}\n`;\nfunction getFragmentShaderForRenderPass(module, pass) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor_ext`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n  // console.error(`${module.name} no fragment shader generated`);\n  return '';\n}\n//# sourceMappingURL=post-process-effect.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}