{"ast":null,"code":"// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Builds a DOM stream from an iterator\n * This stream is currently used in browsers only,\n * but note that Web stream support is present in Node from Node 16\n * https://nodejs.org/api/webstreams.html#webstreams_web_streams_api\n */\nexport function makeStream(source, options) {\n  if (globalThis.loaders.makeNodeStream) {\n    return globalThis.loaders.makeNodeStream(source, options);\n  }\n  // TODO - add AsyncGenerator to parameter types?\n  const iterator = source[Symbol.asyncIterator] ? source[Symbol.asyncIterator]() : source[Symbol.iterator]();\n  return new ReadableStream({\n    // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n    // Only supported on Chrome\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n    // @ts-ignore\n    type: 'bytes',\n    async pull(controller) {\n      try {\n        const {\n          done,\n          value\n        } = await iterator.next();\n        if (done) {\n          controller.close();\n        } else {\n          // TODO - ignores controller.desiredSize\n          // @ts-expect-error Unclear why value is not correctly typed\n          controller.enqueue(new Uint8Array(value));\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n    async cancel() {\n      await iterator?.return?.();\n    }\n  },\n  // options: QueingStrategy<Uint8Array>\n  {\n    // This is bytes, not chunks\n    highWaterMark: 2 ** 24,\n    ...options\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}