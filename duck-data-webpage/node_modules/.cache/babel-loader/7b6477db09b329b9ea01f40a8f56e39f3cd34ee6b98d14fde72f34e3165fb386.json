{"ast":null,"code":"// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { LayerExtension } from '@deck.gl/core';\nimport shaderModule from \"./shader-module.js\";\nconst defaultProps = {\n  getBrushingTarget: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n/** Adds GPU-based data brushing functionalities to layers. It allows the layer to show/hide objects based on the current pointer position. */\nclass BrushingExtension extends LayerExtension {\n  getShaders() {\n    return {\n      modules: [shaderModule]\n    };\n  }\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          stepMode: 'dynamic',\n          accessor: 'getBrushingTarget'\n        }\n      });\n    }\n    // Trigger redraw when mouse moves\n    const onMouseMove = () => {\n      this.getCurrentLayer()?.setNeedsRedraw();\n    };\n    // TODO - expose this in a better way\n    this.state.onMouseMove = onMouseMove;\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.on({\n        pointermove: onMouseMove,\n        pointerleave: onMouseMove\n      });\n    }\n  }\n  finalizeState(context, extension) {\n    // Remove event listeners\n    if (context.deck) {\n      const onMouseMove = this.state.onMouseMove;\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.off({\n        pointermove: onMouseMove,\n        pointerleave: onMouseMove\n      });\n    }\n  }\n  draw(params, extension) {\n    const {\n      viewport,\n      mousePosition\n    } = params.context;\n    const {\n      brushingEnabled,\n      brushingRadius,\n      brushingTarget\n    } = this.props;\n    const brushingProps = {\n      viewport,\n      mousePosition,\n      brushingEnabled,\n      brushingRadius,\n      brushingTarget\n    };\n    this.setShaderModuleProps({\n      brushing: brushingProps\n    });\n  }\n}\nBrushingExtension.defaultProps = defaultProps;\nBrushingExtension.extensionName = 'BrushingExtension';\nexport default BrushingExtension;","map":{"version":3,"names":["LayerExtension","shaderModule","defaultProps","getBrushingTarget","type","value","brushingTarget","brushingEnabled","brushingRadius","BrushingExtension","getShaders","modules","initializeState","context","extension","attributeManager","getAttributeManager","add","brushingTargets","size","stepMode","accessor","onMouseMove","getCurrentLayer","setNeedsRedraw","state","deck","eventManager","on","pointermove","pointerleave","finalizeState","off","draw","params","viewport","mousePosition","props","brushingProps","setShaderModuleProps","brushing","extensionName"],"sources":["C:\\Users\\jakes\\Documents\\GitHub\\duck-data-flask\\duck-data-webpage\\node_modules\\@deck.gl\\extensions\\src\\brushing\\brushing-extension.ts"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {LayerExtension} from '@deck.gl/core';\nimport shaderModule, {BrushingModuleProps} from './shader-module';\n\nimport type {Layer, LayerContext, Accessor} from '@deck.gl/core';\n\nconst defaultProps = {\n  getBrushingTarget: {type: 'accessor', value: [0, 0]},\n\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nexport type BrushingExtensionProps<DataT = any> = {\n  /**\n   * Called to retrieve an arbitrary position for each object that it will be filtered by.\n   * Only effective if `brushingTarget` is set to `custom`.\n   */\n  getBrushingTarget?: Accessor<DataT, [number, number]>;\n  /**\n   * Enable/disable brushing. If brushing is disabled, all objects are rendered.\n   * @default true\n   */\n  brushingEnabled?: boolean;\n  /**\n   * The position used to filter each object by.\n   */\n  brushingTarget?: 'source' | 'target' | 'source_target' | 'custom';\n  /** The brushing radius centered at the pointer, in meters. If a data object is within this circle, it is rendered; otherwise it is hidden.\n   * @default 10000\n   */\n  brushingRadius?: number;\n};\n\n/** Adds GPU-based data brushing functionalities to layers. It allows the layer to show/hide objects based on the current pointer position. */\nexport default class BrushingExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'BrushingExtension';\n\n  getShaders(): any {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          stepMode: 'dynamic',\n          accessor: 'getBrushingTarget'\n        }\n      });\n    }\n\n    // Trigger redraw when mouse moves\n    const onMouseMove = () => {\n      this.getCurrentLayer()?.setNeedsRedraw();\n    };\n    // TODO - expose this in a better way\n    this.state.onMouseMove = onMouseMove;\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.on({\n        pointermove: onMouseMove,\n        pointerleave: onMouseMove\n      });\n    }\n  }\n\n  finalizeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    // Remove event listeners\n    if (context.deck) {\n      const onMouseMove = this.state.onMouseMove as () => void;\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.off({\n        pointermove: onMouseMove,\n        pointerleave: onMouseMove\n      });\n    }\n  }\n\n  draw(this: Layer<BrushingExtensionProps>, params: any, extension: this) {\n    const {viewport, mousePosition} = params.context;\n    const {brushingEnabled, brushingRadius, brushingTarget} = this.props;\n    const brushingProps: BrushingModuleProps = {\n      viewport,\n      mousePosition,\n      brushingEnabled,\n      brushingRadius,\n      brushingTarget\n    };\n    this.setShaderModuleProps({brushing: brushingProps});\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,cAAc,QAAO,eAAe;AAC5C,OAAOC,YAAmC;AAI1C,MAAMC,YAAY,GAAG;EACnBC,iBAAiB,EAAE;IAACC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;EAAC,CAAC;EAEpDC,cAAc,EAAE,QAAQ;EACxBC,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAE;CACjB;AAuBD;AACA,MAAqBC,iBAAkB,SAAQT,cAAc;EAI3DU,UAAUA,CAAA;IACR,OAAO;MACLC,OAAO,EAAE,CAACV,YAAY;KACvB;EACH;EAEAW,eAAeA,CAAsCC,OAAqB,EAAEC,SAAe;IACzF,MAAMC,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,EAAE;IACnD,IAAID,gBAAgB,EAAE;MACpBA,gBAAgB,CAACE,GAAG,CAAC;QACnBC,eAAe,EAAE;UACfC,IAAI,EAAE,CAAC;UACPC,QAAQ,EAAE,SAAS;UACnBC,QAAQ,EAAE;;OAEb,CAAC;IACJ;IAEA;IACA,MAAMC,WAAW,GAAGA,CAAA,KAAK;MACvB,IAAI,CAACC,eAAe,EAAE,EAAEC,cAAc,EAAE;IAC1C,CAAC;IACD;IACA,IAAI,CAACC,KAAK,CAACH,WAAW,GAAGA,WAAW;IACpC,IAAIT,OAAO,CAACa,IAAI,EAAE;MAChB;MACAb,OAAO,CAACa,IAAI,CAACC,YAAY,CAACC,EAAE,CAAC;QAC3BC,WAAW,EAAEP,WAAW;QACxBQ,YAAY,EAAER;OACf,CAAC;IACJ;EACF;EAEAS,aAAaA,CAAsClB,OAAqB,EAAEC,SAAe;IACvF;IACA,IAAID,OAAO,CAACa,IAAI,EAAE;MAChB,MAAMJ,WAAW,GAAG,IAAI,CAACG,KAAK,CAACH,WAAyB;MACxD;MACAT,OAAO,CAACa,IAAI,CAACC,YAAY,CAACK,GAAG,CAAC;QAC5BH,WAAW,EAAEP,WAAW;QACxBQ,YAAY,EAAER;OACf,CAAC;IACJ;EACF;EAEAW,IAAIA,CAAsCC,MAAW,EAAEpB,SAAe;IACpE,MAAM;MAACqB,QAAQ;MAAEC;IAAa,CAAC,GAAGF,MAAM,CAACrB,OAAO;IAChD,MAAM;MAACN,eAAe;MAAEC,cAAc;MAAEF;IAAc,CAAC,GAAG,IAAI,CAAC+B,KAAK;IACpE,MAAMC,aAAa,GAAwB;MACzCH,QAAQ;MACRC,aAAa;MACb7B,eAAe;MACfC,cAAc;MACdF;KACD;IACD,IAAI,CAACiC,oBAAoB,CAAC;MAACC,QAAQ,EAAEF;IAAa,CAAC,CAAC;EACtD;;AA3DO7B,iBAAA,CAAAP,YAAY,GAAGA,YAAY;AAC3BO,iBAAA,CAAAgC,aAAa,GAAG,mBAAmB;eAFvBhC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}